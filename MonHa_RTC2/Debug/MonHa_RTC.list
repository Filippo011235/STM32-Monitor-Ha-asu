
MonHa_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000645c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  080065f0  080065f0  000165f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d8  20000000  08006a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023a4  200000d8  08006b18  000200d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000247c  08006b18  0002247c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ad90  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003c26  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000096b2  00000000  00000000  0003eabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f58  00000000  00000000  00048170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012a8  00000000  00000000  000490c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009937  00000000  00000000  0004a370  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005f39  00000000  00000000  00053ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00059be0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034f8  00000000  00000000  00059c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d4 	.word	0x080065d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	080065d4 	.word	0x080065d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b9b6 	b.w	8000ea8 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f842 	bl	8000bcc <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2lz>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	2200      	movs	r2, #0
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	460d      	mov	r5, r1
 8000b5e:	f7ff ffb9 	bl	8000ad4 <__aeabi_dcmplt>
 8000b62:	b928      	cbnz	r0, 8000b70 <__aeabi_d2lz+0x1c>
 8000b64:	4620      	mov	r0, r4
 8000b66:	4629      	mov	r1, r5
 8000b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b6c:	f000 b80a 	b.w	8000b84 <__aeabi_d2ulz>
 8000b70:	4620      	mov	r0, r4
 8000b72:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b76:	f000 f805 	bl	8000b84 <__aeabi_d2ulz>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	bd38      	pop	{r3, r4, r5, pc}
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2ulz>:
 8000b84:	b5d0      	push	{r4, r6, r7, lr}
 8000b86:	2200      	movs	r2, #0
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <__aeabi_d2ulz+0x40>)
 8000b8a:	4606      	mov	r6, r0
 8000b8c:	460f      	mov	r7, r1
 8000b8e:	f7ff fd2f 	bl	80005f0 <__aeabi_dmul>
 8000b92:	f000 f98b 	bl	8000eac <__aeabi_d2uiz>
 8000b96:	4604      	mov	r4, r0
 8000b98:	f7ff fcb4 	bl	8000504 <__aeabi_ui2d>
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <__aeabi_d2ulz+0x44>)
 8000ba0:	f7ff fd26 	bl	80005f0 <__aeabi_dmul>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4630      	mov	r0, r6
 8000baa:	4639      	mov	r1, r7
 8000bac:	f7ff fb6c 	bl	8000288 <__aeabi_dsub>
 8000bb0:	f000 f97c 	bl	8000eac <__aeabi_d2uiz>
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	ea42 0200 	orr.w	r2, r2, r0
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	bdd0      	pop	{r4, r6, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	3df00000 	.word	0x3df00000
 8000bc8:	41f00000 	.word	0x41f00000

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	9e08      	ldr	r6, [sp, #32]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d151      	bne.n	8000c80 <__udivmoddi4+0xb4>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4617      	mov	r7, r2
 8000be0:	d96d      	bls.n	8000cbe <__udivmoddi4+0xf2>
 8000be2:	fab2 fe82 	clz	lr, r2
 8000be6:	f1be 0f00 	cmp.w	lr, #0
 8000bea:	d00b      	beq.n	8000c04 <__udivmoddi4+0x38>
 8000bec:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf0:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bf8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bfc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c08:	0c25      	lsrs	r5, r4, #16
 8000c0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000c0e:	fa1f f987 	uxth.w	r9, r7
 8000c12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1a:	fb08 f309 	mul.w	r3, r8, r9
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x6c>
 8000c22:	19ed      	adds	r5, r5, r7
 8000c24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c28:	f080 8123 	bcs.w	8000e72 <__udivmoddi4+0x2a6>
 8000c2c:	42ab      	cmp	r3, r5
 8000c2e:	f240 8120 	bls.w	8000e72 <__udivmoddi4+0x2a6>
 8000c32:	f1a8 0802 	sub.w	r8, r8, #2
 8000c36:	443d      	add	r5, r7
 8000c38:	1aed      	subs	r5, r5, r3
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c48:	fb00 f909 	mul.w	r9, r0, r9
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x98>
 8000c50:	19e4      	adds	r4, r4, r7
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 810a 	bcs.w	8000e6e <__udivmoddi4+0x2a2>
 8000c5a:	45a1      	cmp	r9, r4
 8000c5c:	f240 8107 	bls.w	8000e6e <__udivmoddi4+0x2a2>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 0409 	sub.w	r4, r4, r9
 8000c68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d061      	beq.n	8000d36 <__udivmoddi4+0x16a>
 8000c72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c76:	2300      	movs	r3, #0
 8000c78:	6034      	str	r4, [r6, #0]
 8000c7a:	6073      	str	r3, [r6, #4]
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xc8>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d054      	beq.n	8000d32 <__udivmoddi4+0x166>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	f040 808e 	bne.w	8000dba <__udivmoddi4+0x1ee>
 8000c9e:	42ab      	cmp	r3, r5
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xdc>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2d0>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb65 0503 	sbc.w	r5, r5, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	46ac      	mov	ip, r5
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d03f      	beq.n	8000d36 <__udivmoddi4+0x16a>
 8000cb6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b912      	cbnz	r2, 8000cc6 <__udivmoddi4+0xfa>
 8000cc0:	2701      	movs	r7, #1
 8000cc2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc6:	fab7 fe87 	clz	lr, r7
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d134      	bne.n	8000d3a <__udivmoddi4+0x16e>
 8000cd0:	1beb      	subs	r3, r5, r7
 8000cd2:	0c3a      	lsrs	r2, r7, #16
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cde:	0c25      	lsrs	r5, r4, #16
 8000ce0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ce8:	fb0c f308 	mul.w	r3, ip, r8
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x134>
 8000cf0:	19ed      	adds	r5, r5, r7
 8000cf2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x132>
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	f200 80d1 	bhi.w	8000ea0 <__udivmoddi4+0x2d4>
 8000cfe:	4680      	mov	r8, r0
 8000d00:	1aed      	subs	r5, r5, r3
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d08:	fb02 5510 	mls	r5, r2, r0, r5
 8000d0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d10:	fb0c fc00 	mul.w	ip, ip, r0
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x15c>
 8000d18:	19e4      	adds	r4, r4, r7
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x15a>
 8000d20:	45a4      	cmp	ip, r4
 8000d22:	f200 80b8 	bhi.w	8000e96 <__udivmoddi4+0x2ca>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d30:	e79d      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000d32:	4631      	mov	r1, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	f1ce 0420 	rsb	r4, lr, #32
 8000d3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d46:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000d50:	ea48 0803 	orr.w	r8, r8, r3
 8000d54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d68:	fb01 f30c 	mul.w	r3, r1, ip
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1bc>
 8000d74:	19ed      	adds	r5, r5, r7
 8000d76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7a:	f080 808a 	bcs.w	8000e92 <__udivmoddi4+0x2c6>
 8000d7e:	42ab      	cmp	r3, r5
 8000d80:	f240 8087 	bls.w	8000e92 <__udivmoddi4+0x2c6>
 8000d84:	3902      	subs	r1, #2
 8000d86:	443d      	add	r5, r7
 8000d88:	1aeb      	subs	r3, r5, r3
 8000d8a:	fa1f f588 	uxth.w	r5, r8
 8000d8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d92:	fb02 3310 	mls	r3, r2, r0, r3
 8000d96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x1e6>
 8000da2:	19ed      	adds	r5, r5, r7
 8000da4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da8:	d26f      	bcs.n	8000e8a <__udivmoddi4+0x2be>
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	d96d      	bls.n	8000e8a <__udivmoddi4+0x2be>
 8000dae:	3802      	subs	r0, #2
 8000db0:	443d      	add	r5, r7
 8000db2:	1aeb      	subs	r3, r5, r3
 8000db4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db8:	e78f      	b.n	8000cda <__udivmoddi4+0x10e>
 8000dba:	f1c1 0720 	rsb	r7, r1, #32
 8000dbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc2:	408b      	lsls	r3, r1
 8000dc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc8:	ea48 0303 	orr.w	r3, r8, r3
 8000dcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd4:	40fd      	lsrs	r5, r7
 8000dd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000de6:	fa1f f883 	uxth.w	r8, r3
 8000dea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dee:	fb09 f408 	mul.w	r4, r9, r8
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	fa02 f201 	lsl.w	r2, r2, r1
 8000df8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x244>
 8000dfe:	18ed      	adds	r5, r5, r3
 8000e00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e04:	d243      	bcs.n	8000e8e <__udivmoddi4+0x2c2>
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	d941      	bls.n	8000e8e <__udivmoddi4+0x2c2>
 8000e0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0e:	441d      	add	r5, r3
 8000e10:	1b2d      	subs	r5, r5, r4
 8000e12:	fa1f fe8e 	uxth.w	lr, lr
 8000e16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e22:	fb00 f808 	mul.w	r8, r0, r8
 8000e26:	45a0      	cmp	r8, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26e>
 8000e2a:	18e4      	adds	r4, r4, r3
 8000e2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e30:	d229      	bcs.n	8000e86 <__udivmoddi4+0x2ba>
 8000e32:	45a0      	cmp	r8, r4
 8000e34:	d927      	bls.n	8000e86 <__udivmoddi4+0x2ba>
 8000e36:	3802      	subs	r0, #2
 8000e38:	441c      	add	r4, r3
 8000e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3e:	eba4 0408 	sub.w	r4, r4, r8
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454c      	cmp	r4, r9
 8000e48:	46c6      	mov	lr, r8
 8000e4a:	464d      	mov	r5, r9
 8000e4c:	d315      	bcc.n	8000e7a <__udivmoddi4+0x2ae>
 8000e4e:	d012      	beq.n	8000e76 <__udivmoddi4+0x2aa>
 8000e50:	b156      	cbz	r6, 8000e68 <__udivmoddi4+0x29c>
 8000e52:	ebba 030e 	subs.w	r3, sl, lr
 8000e56:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431f      	orrs	r7, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	6037      	str	r7, [r6, #0]
 8000e66:	6074      	str	r4, [r6, #4]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	e6f8      	b.n	8000c64 <__udivmoddi4+0x98>
 8000e72:	4690      	mov	r8, r2
 8000e74:	e6e0      	b.n	8000c38 <__udivmoddi4+0x6c>
 8000e76:	45c2      	cmp	sl, r8
 8000e78:	d2ea      	bcs.n	8000e50 <__udivmoddi4+0x284>
 8000e7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7e4      	b.n	8000e50 <__udivmoddi4+0x284>
 8000e86:	4628      	mov	r0, r5
 8000e88:	e7d7      	b.n	8000e3a <__udivmoddi4+0x26e>
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	e791      	b.n	8000db2 <__udivmoddi4+0x1e6>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e7be      	b.n	8000e10 <__udivmoddi4+0x244>
 8000e92:	4601      	mov	r1, r0
 8000e94:	e778      	b.n	8000d88 <__udivmoddi4+0x1bc>
 8000e96:	3802      	subs	r0, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	e745      	b.n	8000d28 <__udivmoddi4+0x15c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xe6>
 8000ea0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	e72b      	b.n	8000d00 <__udivmoddi4+0x134>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <__aeabi_d2uiz>:
 8000eac:	004a      	lsls	r2, r1, #1
 8000eae:	d211      	bcs.n	8000ed4 <__aeabi_d2uiz+0x28>
 8000eb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb4:	d211      	bcs.n	8000eda <__aeabi_d2uiz+0x2e>
 8000eb6:	d50d      	bpl.n	8000ed4 <__aeabi_d2uiz+0x28>
 8000eb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ebc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec0:	d40e      	bmi.n	8000ee0 <__aeabi_d2uiz+0x34>
 8000ec2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ece:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed2:	4770      	bx	lr
 8000ed4:	f04f 0000 	mov.w	r0, #0
 8000ed8:	4770      	bx	lr
 8000eda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ede:	d102      	bne.n	8000ee6 <__aeabi_d2uiz+0x3a>
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	4770      	bx	lr
 8000ee6:	f04f 0000 	mov.w	r0, #0
 8000eea:	4770      	bx	lr

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_InitTick+0x40>)
{
 8000ef0:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	b908      	cbnz	r0, 8000efa <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_InitTick+0x44>)
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f04:	6810      	ldr	r0, [r2, #0]
 8000f06:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f0a:	f000 f8a5 	bl	8001058 <HAL_SYSTICK_Config>
 8000f0e:	4604      	mov	r4, r0
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d1f0      	bne.n	8000ef6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	2d0f      	cmp	r5, #15
 8000f16:	d8ee      	bhi.n	8000ef6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f858 	bl	8000fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_InitTick+0x48>)
 8000f26:	4620      	mov	r0, r4
 8000f28:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000070 	.word	0x20000070
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_Init+0x28>)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000f40:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f42:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	f000 f833 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ffce 	bl	8000eec <HAL_InitTick>
 8000f50:	4604      	mov	r4, r0
 8000f52:	b918      	cbnz	r0, 8000f5c <HAL_Init+0x24>
    HAL_MspInit();
 8000f54:	f004 f894 	bl	8005080 <HAL_MspInit>
}
 8000f58:	4620      	mov	r0, r4
 8000f5a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000f5c:	2401      	movs	r4, #1
 8000f5e:	e7fb      	b.n	8000f58 <HAL_Init+0x20>
 8000f60:	40022000 	.word	0x40022000

08000f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x10>)
 8000f66:	4904      	ldr	r1, [pc, #16]	; (8000f78 <HAL_IncTick+0x14>)
 8000f68:	6813      	ldr	r3, [r2, #0]
 8000f6a:	6809      	ldr	r1, [r1, #0]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000144 	.word	0x20000144
 8000f78:	20000000 	.word	0x20000000

08000f7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <HAL_GetTick+0x8>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000144 	.word	0x20000144

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff6 	bl	8000f7c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f90:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	bf1c      	itt	ne
 8000f94:	4b05      	ldrne	r3, [pc, #20]	; (8000fac <HAL_Delay+0x24>)
 8000f96:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	bf18      	it	ne
 8000f9c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	f7ff ffed 	bl	8000f7c <HAL_GetTick>
 8000fa2:	1b40      	subs	r0, r0, r5
 8000fa4:	4284      	cmp	r4, r0
 8000fa6:	d8fa      	bhi.n	8000f9e <HAL_Delay+0x16>
  {
  }
}
 8000fa8:	bd38      	pop	{r3, r4, r5, pc}
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	0200      	lsls	r0, r0, #8
 8000fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fcc:	60d3      	str	r3, [r2, #12]
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd6:	b530      	push	{r4, r5, lr}
 8000fd8:	68dc      	ldr	r4, [r3, #12]
 8000fda:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fde:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	bf28      	it	cs
 8000fe8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 0501 	mov.w	r5, #1
 8000ff0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ff4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff8:	bf8c      	ite	hi
 8000ffa:	3c03      	subhi	r4, #3
 8000ffc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffe:	4019      	ands	r1, r3
 8001000:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001002:	fa05 f404 	lsl.w	r4, r5, r4
 8001006:	3c01      	subs	r4, #1
 8001008:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800100a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	ea42 0201 	orr.w	r2, r2, r1
 8001010:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	bfad      	iteet	ge
 8001016:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	f000 000f 	andlt.w	r0, r0, #15
 800101e:	4b06      	ldrlt	r3, [pc, #24]	; (8001038 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	bfb5      	itete	lt
 8001026:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001030:	bd30      	pop	{r4, r5, pc}
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	e000ed14 	.word	0xe000ed14

0800103c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800103c:	2800      	cmp	r0, #0
 800103e:	db08      	blt.n	8001052 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001040:	0942      	lsrs	r2, r0, #5
 8001042:	2301      	movs	r3, #1
 8001044:	f000 001f 	and.w	r0, r0, #31
 8001048:	fa03 f000 	lsl.w	r0, r3, r0
 800104c:	4b01      	ldr	r3, [pc, #4]	; (8001054 <HAL_NVIC_EnableIRQ+0x18>)
 800104e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	3801      	subs	r0, #1
 800105a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800105e:	d20a      	bcs.n	8001076 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001064:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	21f0      	movs	r1, #240	; 0xf0
 8001068:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001084:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001086:	6803      	ldr	r3, [r0, #0]
 8001088:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 800108c:	b93a      	cbnz	r2, 800109e <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001094:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001096:	2901      	cmp	r1, #1
 8001098:	d11c      	bne.n	80010d4 <DFSDM_RegConvStart+0x50>
 800109a:	2302      	movs	r3, #2
 800109c:	e01b      	b.n	80010d6 <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80010ac:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80010ae:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80010b0:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80010b8:	d1ed      	bne.n	8001096 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80010ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80010bc:	b91a      	cbnz	r2, 80010c6 <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f042 0202 	orr.w	r2, r2, #2
 80010c4:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80010c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	bf0c      	ite	eq
 80010ce:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80010d0:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80010d2:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80010d4:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80010d6:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80010da:	4770      	bx	lr

080010dc <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <DFSDM_GetChannelFromInstance+0x54>)
 80010de:	4298      	cmp	r0, r3
 80010e0:	d017      	beq.n	8001112 <DFSDM_GetChannelFromInstance+0x36>
  else if (Instance == DFSDM1_Channel1)
 80010e2:	3320      	adds	r3, #32
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d016      	beq.n	8001116 <DFSDM_GetChannelFromInstance+0x3a>
  else if (Instance == DFSDM1_Channel2)
 80010e8:	3320      	adds	r3, #32
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d015      	beq.n	800111a <DFSDM_GetChannelFromInstance+0x3e>
  else if (Instance == DFSDM1_Channel3)
 80010ee:	3320      	adds	r3, #32
 80010f0:	4298      	cmp	r0, r3
 80010f2:	d014      	beq.n	800111e <DFSDM_GetChannelFromInstance+0x42>
  else if (Instance == DFSDM1_Channel4)
 80010f4:	3320      	adds	r3, #32
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d013      	beq.n	8001122 <DFSDM_GetChannelFromInstance+0x46>
  else if (Instance == DFSDM1_Channel5)
 80010fa:	3320      	adds	r3, #32
 80010fc:	4298      	cmp	r0, r3
 80010fe:	d012      	beq.n	8001126 <DFSDM_GetChannelFromInstance+0x4a>
  else if (Instance == DFSDM1_Channel6)
 8001100:	3320      	adds	r3, #32
 8001102:	4298      	cmp	r0, r3
 8001104:	d011      	beq.n	800112a <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 8001106:	3320      	adds	r3, #32
 8001108:	4298      	cmp	r0, r3
 800110a:	bf0c      	ite	eq
 800110c:	2007      	moveq	r0, #7
 800110e:	2000      	movne	r0, #0
 8001110:	4770      	bx	lr
    channel = 0;
 8001112:	2000      	movs	r0, #0
 8001114:	4770      	bx	lr
    channel = 1;
 8001116:	2001      	movs	r0, #1
 8001118:	4770      	bx	lr
    channel = 2;
 800111a:	2002      	movs	r0, #2
 800111c:	4770      	bx	lr
    channel = 3;
 800111e:	2003      	movs	r0, #3
 8001120:	4770      	bx	lr
    channel = 4;
 8001122:	2004      	movs	r0, #4
 8001124:	4770      	bx	lr
    channel = 5;
 8001126:	2005      	movs	r0, #5
 8001128:	4770      	bx	lr
    channel = 6;
 800112a:	2006      	movs	r0, #6
}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40016000 	.word	0x40016000

08001134 <HAL_DFSDM_ChannelInit>:
{
 8001134:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8001136:	4604      	mov	r4, r0
 8001138:	2800      	cmp	r0, #0
 800113a:	d067      	beq.n	800120c <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800113c:	6800      	ldr	r0, [r0, #0]
 800113e:	4d34      	ldr	r5, [pc, #208]	; (8001210 <HAL_DFSDM_ChannelInit+0xdc>)
 8001140:	f7ff ffcc 	bl	80010dc <DFSDM_GetChannelFromInstance>
 8001144:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d15f      	bne.n	800120c <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800114c:	4620      	mov	r0, r4
 800114e:	f002 fcc5 	bl	8003adc <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_DFSDM_ChannelInit+0xe0>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	3201      	adds	r2, #1
 8001158:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d119      	bne.n	8001194 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_DFSDM_ChannelInit+0xe4>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001168:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68a1      	ldr	r1, [r4, #8]
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001178:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800117a:	7922      	ldrb	r2, [r4, #4]
 800117c:	2a01      	cmp	r2, #1
 800117e:	d105      	bne.n	800118c <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001180:	68e1      	ldr	r1, [r4, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	3901      	subs	r1, #1
 8001186:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800118a:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001192:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001194:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001196:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001198:	6803      	ldr	r3, [r0, #0]
 800119a:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 800119e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80011a0:	6923      	ldr	r3, [r4, #16]
 80011a2:	6802      	ldr	r2, [r0, #0]
 80011a4:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80011a6:	69a1      	ldr	r1, [r4, #24]
 80011a8:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80011aa:	4313      	orrs	r3, r2
 80011ac:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80011ae:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80011b0:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80011b2:	f023 030f 	bic.w	r3, r3, #15
 80011b6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80011b8:	69e3      	ldr	r3, [r4, #28]
 80011ba:	6802      	ldr	r2, [r0, #0]
 80011bc:	430b      	orrs	r3, r1
 80011be:	4313      	orrs	r3, r2
 80011c0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80011c2:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80011c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80011c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80011c8:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80011cc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80011ce:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80011d0:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80011d2:	430b      	orrs	r3, r1
 80011d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011d8:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80011da:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80011dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80011e4:	6843      	ldr	r3, [r0, #4]
 80011e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f0:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80011f2:	6803      	ldr	r3, [r0, #0]
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001200:	f7ff ff6c 	bl	80010dc <DFSDM_GetChannelFromInstance>
 8001204:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
 800120a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800120c:	2001      	movs	r0, #1
}
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	200000f4 	.word	0x200000f4
 8001214:	20000114 	.word	0x20000114
 8001218:	40016000 	.word	0x40016000

0800121c <HAL_DFSDM_ChannelCkabCallback>:
 800121c:	4770      	bx	lr

0800121e <HAL_DFSDM_ChannelScdCallback>:
 800121e:	4770      	bx	lr

08001220 <HAL_DFSDM_FilterInit>:
{
 8001220:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 8001222:	4604      	mov	r4, r0
 8001224:	2800      	cmp	r0, #0
 8001226:	d069      	beq.n	80012fc <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001228:	6802      	ldr	r2, [r0, #0]
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_DFSDM_FilterInit+0xe0>)
 800122c:	429a      	cmp	r2, r3
 800122e:	d105      	bne.n	800123c <HAL_DFSDM_FilterInit+0x1c>
 8001230:	6840      	ldr	r0, [r0, #4]
 8001232:	2801      	cmp	r0, #1
 8001234:	d063      	beq.n	80012fe <HAL_DFSDM_FilterInit+0xde>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001236:	68e0      	ldr	r0, [r4, #12]
 8001238:	2801      	cmp	r0, #1
 800123a:	d060      	beq.n	80012fe <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800123c:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800123e:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001240:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001242:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001244:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001246:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001248:	4620      	mov	r0, r4
 800124a:	f002 fbdf 	bl	8003a0c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800124e:	6823      	ldr	r3, [r4, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001250:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001258:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800125a:	7a22      	ldrb	r2, [r4, #8]
 800125c:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	bf0c      	ite	eq
 8001262:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001266:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 800126a:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800126c:	7a62      	ldrb	r2, [r4, #9]
 800126e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	bf0c      	ite	eq
 8001274:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001278:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 800127c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800127e:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001280:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001282:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8001286:	f022 0208 	bic.w	r2, r2, #8
 800128a:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800128c:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800128e:	bf01      	itttt	eq
 8001290:	681a      	ldreq	r2, [r3, #0]
 8001292:	6961      	ldreq	r1, [r4, #20]
 8001294:	430a      	orreq	r2, r1
 8001296:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001298:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800129a:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800129c:	bf0c      	ite	eq
 800129e:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80012a2:	f022 0210 	bicne.w	r2, r2, #16
 80012a6:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80012a8:	7c62      	ldrb	r2, [r4, #17]
 80012aa:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	bf0c      	ite	eq
 80012b0:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80012b4:	f022 0220 	bicne.w	r2, r2, #32
 80012b8:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 80012c0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80012c4:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80012c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80012c8:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80012ca:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80012cc:	430a      	orrs	r2, r1
 80012ce:	69e1      	ldr	r1, [r4, #28]
 80012d0:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80012d2:	6a21      	ldr	r1, [r4, #32]
 80012d4:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80012d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012da:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80012dc:	6862      	ldr	r2, [r4, #4]
 80012de:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80012e0:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80012e2:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80012e4:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80012e6:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80012e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80012f8:	2000      	movs	r0, #0
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
}
 80012fe:	bd38      	pop	{r3, r4, r5, pc}
 8001300:	40016100 	.word	0x40016100

08001304 <HAL_DFSDM_FilterConfigRegChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001304:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001308:	3b01      	subs	r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2bfd      	cmp	r3, #253	; 0xfd
{
 800130e:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001310:	d813      	bhi.n	800133a <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001312:	6803      	ldr	r3, [r0, #0]
 8001314:	681c      	ldr	r4, [r3, #0]
 8001316:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 800131a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800131e:	601c      	str	r4, [r3, #0]
 8001320:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001322:	681c      	ldr	r4, [r3, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001324:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001326:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800132a:	bf08      	it	eq
 800132c:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001330:	4321      	orrs	r1, r4
 8001332:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001334:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8001336:	2000      	movs	r0, #0
 8001338:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800133a:	2001      	movs	r0, #1
}
 800133c:	bd10      	pop	{r4, pc}

0800133e <HAL_DFSDM_FilterConfigInjChannel>:
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800133e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001342:	3b01      	subs	r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2bfd      	cmp	r3, #253	; 0xfd
 8001348:	d812      	bhi.n	8001370 <HAL_DFSDM_FilterConfigInjChannel+0x32>
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t)(Channel & DFSDM_LSB_MASK);
 800134a:	6803      	ldr	r3, [r0, #0]
 800134c:	b289      	uxth	r1, r1
 800134e:	6119      	str	r1, [r3, #16]
  uint32_t nbChannels = 0;
 8001350:	2300      	movs	r3, #0
  while (tmp != 0U)
 8001352:	b941      	cbnz	r1, 8001366 <HAL_DFSDM_FilterConfigInjChannel+0x28>
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001354:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8001358:	6443      	str	r3, [r0, #68]	; 0x44
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 800135a:	2a01      	cmp	r2, #1
 800135c:	bf18      	it	ne
 800135e:	2301      	movne	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001360:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8001362:	4608      	mov	r0, r1
 8001364:	4770      	bx	lr
    if ((tmp & 1U) != 0U)
 8001366:	07ca      	lsls	r2, r1, #31
      nbChannels++;
 8001368:	bf48      	it	mi
 800136a:	3301      	addmi	r3, #1
    tmp = (uint32_t)(tmp >> 1);
 800136c:	0849      	lsrs	r1, r1, #1
 800136e:	e7f0      	b.n	8001352 <HAL_DFSDM_FilterConfigInjChannel+0x14>
    status = HAL_ERROR;
 8001370:	2001      	movs	r0, #1
}
 8001372:	4770      	bx	lr

08001374 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001376:	4613      	mov	r3, r2
 8001378:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 800137a:	460a      	mov	r2, r1
 800137c:	b351      	cbz	r1, 80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 800137e:	b34b      	cbz	r3, 80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001380:	6807      	ldr	r7, [r0, #0]
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	0289      	lsls	r1, r1, #10
 8001386:	d525      	bpl.n	80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001388:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800138a:	b949      	cbnz	r1, 80013a0 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 800138c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800138e:	b939      	cbnz	r1, 80013a0 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001390:	6a81      	ldr	r1, [r0, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001392:	69c8      	ldr	r0, [r1, #28]
 8001394:	b908      	cbnz	r0, 800139a <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001396:	2b01      	cmp	r3, #1
 8001398:	d11c      	bne.n	80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800139a:	69c9      	ldr	r1, [r1, #28]
 800139c:	2920      	cmp	r1, #32
 800139e:	d019      	beq.n	80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80013a0:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 80013a4:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 80013a8:	2e01      	cmp	r6, #1
 80013aa:	d113      	bne.n	80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80013ac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 80013b0:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 80013b4:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80013b6:	69c1      	ldr	r1, [r0, #28]
 80013b8:	4c0c      	ldr	r4, [pc, #48]	; (80013ec <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 80013ba:	2920      	cmp	r1, #32
 80013bc:	bf18      	it	ne
 80013be:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80013c0:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80013c2:	f107 011c 	add.w	r1, r7, #28
 80013c6:	f000 f951 	bl	800166c <HAL_DMA_Start_IT>
 80013ca:	4604      	mov	r4, r0
 80013cc:	b120      	cbz	r0, 80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80013ce:	23ff      	movs	r3, #255	; 0xff
 80013d0:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 80013d4:	2401      	movs	r4, #1
 80013d6:	e002      	b.n	80013de <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff fe53 	bl	8001084 <DFSDM_RegConvStart>
}
 80013de:	4620      	mov	r0, r4
 80013e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	080013f3 	.word	0x080013f3
 80013e8:	0800140f 	.word	0x0800140f
 80013ec:	080013ff 	.word	0x080013ff

080013f0 <HAL_DFSDM_FilterRegConvCpltCallback>:
 80013f0:	4770      	bx	lr

080013f2 <DFSDM_DMARegularConvCplt>:
{
 80013f2:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80013f6:	f7ff fffb 	bl	80013f0 <HAL_DFSDM_FilterRegConvCpltCallback>
 80013fa:	bd08      	pop	{r3, pc}

080013fc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 80013fc:	4770      	bx	lr

080013fe <DFSDM_DMARegularHalfConvCplt>:
{
 80013fe:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001400:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001402:	f7ff fffb 	bl	80013fc <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 8001406:	bd08      	pop	{r3, pc}

08001408 <HAL_DFSDM_FilterInjConvCpltCallback>:
 8001408:	4770      	bx	lr

0800140a <HAL_DFSDM_FilterAwdCallback>:
{
 800140a:	4770      	bx	lr

0800140c <HAL_DFSDM_FilterErrorCallback>:
{
 800140c:	4770      	bx	lr

0800140e <DFSDM_DMAError>:
{
 800140e:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001410:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001412:	2303      	movs	r3, #3
 8001414:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001416:	f7ff fff9 	bl	800140c <HAL_DFSDM_FilterErrorCallback>
 800141a:	bd08      	pop	{r3, pc}

0800141c <HAL_DFSDM_IRQHandler>:
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800141c:	6803      	ldr	r3, [r0, #0]
 800141e:	6899      	ldr	r1, [r3, #8]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8001420:	685a      	ldr	r2, [r3, #4]
{
 8001422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001426:	070f      	lsls	r7, r1, #28
{
 8001428:	4604      	mov	r4, r0
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800142a:	d509      	bpl.n	8001440 <HAL_DFSDM_IRQHandler+0x24>
 800142c:	0716      	lsls	r6, r2, #28
 800142e:	d507      	bpl.n	8001440 <HAL_DFSDM_IRQHandler+0x24>
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001430:	2208      	movs	r2, #8
 8001432:	60da      	str	r2, [r3, #12]
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001434:	2301      	movs	r3, #1
 8001436:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001438:	f7ff ffe8 	bl	800140c <HAL_DFSDM_FilterErrorCallback>
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001440:	074d      	lsls	r5, r1, #29
 8001442:	d507      	bpl.n	8001454 <HAL_DFSDM_IRQHandler+0x38>
 8001444:	0750      	lsls	r0, r2, #29
 8001446:	d505      	bpl.n	8001454 <HAL_DFSDM_IRQHandler+0x38>
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8001448:	2204      	movs	r2, #4
 800144a:	60da      	str	r2, [r3, #12]
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 800144c:	2302      	movs	r3, #2
 800144e:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001450:	4620      	mov	r0, r4
 8001452:	e7f1      	b.n	8001438 <HAL_DFSDM_IRQHandler+0x1c>
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001454:	078f      	lsls	r7, r1, #30
 8001456:	d51b      	bpl.n	8001490 <HAL_DFSDM_IRQHandler+0x74>
 8001458:	0796      	lsls	r6, r2, #30
 800145a:	d519      	bpl.n	8001490 <HAL_DFSDM_IRQHandler+0x74>
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff ffc7 	bl	80013f0 <HAL_DFSDM_FilterRegConvCpltCallback>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001462:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 8099 	bne.w	800159c <HAL_DFSDM_IRQHandler+0x180>
 800146a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 8095 	bne.w	800159c <HAL_DFSDM_IRQHandler+0x180>
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	6853      	ldr	r3, [r2, #4]
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	6053      	str	r3, [r2, #4]
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800147c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8001480:	2b02      	cmp	r3, #2
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2303      	movne	r3, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001488:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001490:	07cd      	lsls	r5, r1, #31
 8001492:	d521      	bpl.n	80014d8 <HAL_DFSDM_IRQHandler+0xbc>
 8001494:	f012 0501 	ands.w	r5, r2, #1
 8001498:	d01e      	beq.n	80014d8 <HAL_DFSDM_IRQHandler+0xbc>
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff ffb4 	bl	8001408 <HAL_DFSDM_FilterInjConvCpltCallback>
    hdfsdm_filter->InjConvRemaining--;
 80014a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014a2:	3b01      	subs	r3, #1
 80014a4:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d178      	bne.n	800159c <HAL_DFSDM_IRQHandler+0x180>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014ac:	b963      	cbnz	r3, 80014c8 <HAL_DFSDM_IRQHandler+0xac>
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	6853      	ldr	r3, [r2, #4]
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6053      	str	r3, [r2, #4]
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80014b8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80014bc:	2b03      	cmp	r3, #3
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2302      	movne	r3, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80014c4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80014c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	bf08      	it	eq
 80014d0:	6c65      	ldreq	r5, [r4, #68]	; 0x44
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014d2:	64a5      	str	r5, [r4, #72]	; 0x48
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014d8:	06c8      	lsls	r0, r1, #27
 80014da:	d51b      	bpl.n	8001514 <HAL_DFSDM_IRQHandler+0xf8>
 80014dc:	06d7      	lsls	r7, r2, #27
 80014de:	d519      	bpl.n	8001514 <HAL_DFSDM_IRQHandler+0xf8>
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80014e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80014e2:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80014e6:	d057      	beq.n	8001598 <HAL_DFSDM_IRQHandler+0x17c>
 80014e8:	2201      	movs	r2, #1
 80014ea:	2100      	movs	r1, #0
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80014ec:	07c6      	lsls	r6, r0, #31
 80014ee:	d401      	bmi.n	80014f4 <HAL_DFSDM_IRQHandler+0xd8>
 80014f0:	2907      	cmp	r1, #7
 80014f2:	d10a      	bne.n	800150a <HAL_DFSDM_IRQHandler+0xee>
 80014f4:	2001      	movs	r0, #1
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80014f6:	b95a      	cbnz	r2, 8001510 <HAL_DFSDM_IRQHandler+0xf4>
 80014f8:	f101 0508 	add.w	r5, r1, #8
 80014fc:	40a8      	lsls	r0, r5
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80014fe:	62d8      	str	r0, [r3, #44]	; 0x2c
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001500:	4620      	mov	r0, r4
 8001502:	f7ff ff82 	bl	800140a <HAL_DFSDM_FilterAwdCallback>
  {
 8001506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      channel++;
 800150a:	3101      	adds	r1, #1
      reg = reg >> 1;
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	e7ed      	b.n	80014ec <HAL_DFSDM_IRQHandler+0xd0>
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001510:	4088      	lsls	r0, r1
 8001512:	e7f4      	b.n	80014fe <HAL_DFSDM_IRQHandler+0xe2>
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001514:	4822      	ldr	r0, [pc, #136]	; (80015a0 <HAL_DFSDM_IRQHandler+0x184>)
 8001516:	4283      	cmp	r3, r0
 8001518:	d140      	bne.n	800159c <HAL_DFSDM_IRQHandler+0x180>
 800151a:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
 800151e:	d020      	beq.n	8001562 <HAL_DFSDM_IRQHandler+0x146>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001520:	0655      	lsls	r5, r2, #25
 8001522:	d51e      	bpl.n	8001562 <HAL_DFSDM_IRQHandler+0x146>
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001524:	689e      	ldr	r6, [r3, #8]
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001526:	4f1f      	ldr	r7, [pc, #124]	; (80015a4 <HAL_DFSDM_IRQHandler+0x188>)
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001528:	f3c6 4607 	ubfx	r6, r6, #16, #8
    uint32_t channel = 0;
 800152c:	2500      	movs	r5, #0
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 800152e:	f04f 0801 	mov.w	r8, #1
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001532:	07f2      	lsls	r2, r6, #31
 8001534:	d50e      	bpl.n	8001554 <HAL_DFSDM_IRQHandler+0x138>
 8001536:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800153a:	b158      	cbz	r0, 8001554 <HAL_DFSDM_IRQHandler+0x138>
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 800153c:	6803      	ldr	r3, [r0, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	065b      	lsls	r3, r3, #25
 8001542:	d507      	bpl.n	8001554 <HAL_DFSDM_IRQHandler+0x138>
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	f105 0310 	add.w	r3, r5, #16
 800154a:	fa08 f303 	lsl.w	r3, r8, r3
 800154e:	60d3      	str	r3, [r2, #12]
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8001550:	f7ff fe64 	bl	800121c <HAL_DFSDM_ChannelCkabCallback>
      channel++;
 8001554:	3501      	adds	r5, #1
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001556:	2d08      	cmp	r5, #8
      reg = reg >> 1;
 8001558:	ea4f 0656 	mov.w	r6, r6, lsr #1
    while (channel < DFSDM1_CHANNEL_NUMBER)
 800155c:	d1e9      	bne.n	8001532 <HAL_DFSDM_IRQHandler+0x116>
 800155e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001562:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8001566:	d019      	beq.n	800159c <HAL_DFSDM_IRQHandler+0x180>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001568:	0694      	lsls	r4, r2, #26
 800156a:	d517      	bpl.n	800159c <HAL_DFSDM_IRQHandler+0x180>
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 800156c:	6882      	ldr	r2, [r0, #8]
    uint32_t channel = 0;
 800156e:	2300      	movs	r3, #0
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001570:	0e12      	lsrs	r2, r2, #24
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001572:	07d1      	lsls	r1, r2, #31
 8001574:	d401      	bmi.n	800157a <HAL_DFSDM_IRQHandler+0x15e>
 8001576:	2b07      	cmp	r3, #7
 8001578:	d10b      	bne.n	8001592 <HAL_DFSDM_IRQHandler+0x176>
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800157a:	f103 0118 	add.w	r1, r3, #24
 800157e:	2201      	movs	r2, #1
 8001580:	408a      	lsls	r2, r1
 8001582:	60c2      	str	r2, [r0, #12]
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_DFSDM_IRQHandler+0x188>)
 8001586:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800158a:	f7ff fe48 	bl	800121e <HAL_DFSDM_ChannelScdCallback>
}
 800158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      channel++;
 8001592:	3301      	adds	r3, #1
      reg = reg >> 1;
 8001594:	0852      	lsrs	r2, r2, #1
 8001596:	e7ec      	b.n	8001572 <HAL_DFSDM_IRQHandler+0x156>
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001598:	0a00      	lsrs	r0, r0, #8
 800159a:	e7a6      	b.n	80014ea <HAL_DFSDM_IRQHandler+0xce>
 800159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a0:	40016100 	.word	0x40016100
 80015a4:	200000f4 	.word	0x200000f4

080015a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a8:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d04e      	beq.n	800164c <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ae:	6801      	ldr	r1, [r0, #0]
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_DMA_Init+0xa8>)
 80015b2:	4299      	cmp	r1, r3
 80015b4:	f04f 0414 	mov.w	r4, #20
 80015b8:	d840      	bhi.n	800163c <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_DMA_Init+0xac>)
 80015bc:	440a      	add	r2, r1
 80015be:	fbb2 f2f4 	udiv	r2, r2, r4
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015c6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 80015ca:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015d2:	6884      	ldr	r4, [r0, #8]
 80015d4:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80015d8:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80015da:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015dc:	432b      	orrs	r3, r5
 80015de:	6945      	ldr	r5, [r0, #20]
 80015e0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	6985      	ldr	r5, [r0, #24]
 80015e4:	432b      	orrs	r3, r5
 80015e6:	69c5      	ldr	r5, [r0, #28]
 80015e8:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ea:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015ec:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80015f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f4:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80015f6:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015f8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80015fc:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015fe:	d014      	beq.n	800162a <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001600:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_DMA_Init+0xb0>)
 8001604:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001606:	bf0c      	ite	eq
 8001608:	4914      	ldreq	r1, [pc, #80]	; (800165c <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800160a:	4915      	ldrne	r1, [pc, #84]	; (8001660 <HAL_DMA_Init+0xb8>)
 800160c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800160e:	680a      	ldr	r2, [r1, #0]
 8001610:	f003 031c 	and.w	r3, r3, #28
 8001614:	240f      	movs	r4, #15
 8001616:	409c      	lsls	r4, r3
 8001618:	ea22 0204 	bic.w	r2, r2, r4
 800161c:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800161e:	6842      	ldr	r2, [r0, #4]
 8001620:	680c      	ldr	r4, [r1, #0]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	4323      	orrs	r3, r4
 8001628:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001630:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8001634:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001638:	4618      	mov	r0, r3
 800163a:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_DMA_Init+0xbc>)
 800163e:	440b      	add	r3, r1
 8001640:	fbb3 f3f4 	udiv	r3, r3, r4
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_DMA_Init+0xc0>)
 800164a:	e7be      	b.n	80015ca <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
}
 800164e:	bd30      	pop	{r4, r5, pc}
 8001650:	40020407 	.word	0x40020407
 8001654:	bffdfff8 	.word	0xbffdfff8
 8001658:	40020000 	.word	0x40020000
 800165c:	400200a8 	.word	0x400200a8
 8001660:	400204a8 	.word	0x400204a8
 8001664:	bffdfbf8 	.word	0xbffdfbf8
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800166e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001672:	2c01      	cmp	r4, #1
 8001674:	d038      	beq.n	80016e8 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8001676:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800167a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800167c:	b2ed      	uxtb	r5, r5
 800167e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001680:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8001684:	f04f 0600 	mov.w	r6, #0
 8001688:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 800168c:	d12a      	bne.n	80016e4 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800168e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001692:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001696:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001698:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800169a:	f026 0601 	bic.w	r6, r6, #1
 800169e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a0:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80016a2:	f006 061c 	and.w	r6, r6, #28
 80016a6:	40b5      	lsls	r5, r6
 80016a8:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016aa:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ac:	6883      	ldr	r3, [r0, #8]
 80016ae:	6805      	ldr	r5, [r0, #0]
 80016b0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80016b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016b4:	bf0b      	itete	eq
 80016b6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80016b8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80016ba:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80016bc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80016be:	b14b      	cbz	r3, 80016d4 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016c6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d0:	2000      	movs	r0, #0
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	f043 030a 	orr.w	r3, r3, #10
 80016e2:	e7f0      	b.n	80016c6 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 80016e4:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80016e8:	2002      	movs	r0, #2
}
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ec <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d006      	beq.n	8001702 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f4:	2304      	movs	r3, #4
 80016f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80016f8:	2300      	movs	r3, #0
 80016fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80016fe:	2001      	movs	r0, #1
 8001700:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001702:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001704:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	f022 020e 	bic.w	r2, r2, #14
 800170c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001716:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001718:	2201      	movs	r2, #1
 800171a:	f003 031c 	and.w	r3, r3, #28
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001724:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001726:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800172a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 800172e:	4618      	mov	r0, r3
}
 8001730:	4770      	bx	lr

08001732 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001732:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001734:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001736:	6803      	ldr	r3, [r0, #0]
{
 8001738:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800173a:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800173e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001740:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001742:	2404      	movs	r4, #4
 8001744:	4094      	lsls	r4, r2
 8001746:	4226      	tst	r6, r4
 8001748:	d00e      	beq.n	8001768 <HAL_DMA_IRQHandler+0x36>
 800174a:	f015 0f04 	tst.w	r5, #4
 800174e:	d00b      	beq.n	8001768 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001754:	bf5e      	ittt	pl
 8001756:	681a      	ldrpl	r2, [r3, #0]
 8001758:	f022 0204 	bicpl.w	r2, r2, #4
 800175c:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800175e:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001760:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001762:	b373      	cbz	r3, 80017c2 <HAL_DMA_IRQHandler+0x90>
}
 8001764:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001766:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001768:	2402      	movs	r4, #2
 800176a:	4094      	lsls	r4, r2
 800176c:	4226      	tst	r6, r4
 800176e:	d012      	beq.n	8001796 <HAL_DMA_IRQHandler+0x64>
 8001770:	f015 0f02 	tst.w	r5, #2
 8001774:	d00f      	beq.n	8001796 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	0695      	lsls	r5, r2, #26
 800177a:	d406      	bmi.n	800178a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f022 020a 	bic.w	r2, r2, #10
 8001782:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001784:	2301      	movs	r3, #1
 8001786:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800178a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800178c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800178e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001792:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001794:	e7e5      	b.n	8001762 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001796:	2408      	movs	r4, #8
 8001798:	4094      	lsls	r4, r2
 800179a:	4234      	tst	r4, r6
 800179c:	d011      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x90>
 800179e:	072c      	lsls	r4, r5, #28
 80017a0:	d50f      	bpl.n	80017c2 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	681c      	ldr	r4, [r3, #0]
 80017a4:	f024 040e 	bic.w	r4, r4, #14
 80017a8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017aa:	2301      	movs	r3, #1
 80017ac:	fa03 f202 	lsl.w	r2, r3, r2
 80017b0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80017b4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80017b8:	2300      	movs	r3, #0
 80017ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80017be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017c0:	e7cf      	b.n	8001762 <HAL_DMA_IRQHandler+0x30>
}
 80017c2:	bc70      	pop	{r4, r5, r6}
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017cc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800197c <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017d4:	4c67      	ldr	r4, [pc, #412]	; (8001974 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80017d8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	9a01      	ldr	r2, [sp, #4]
 80017dc:	40da      	lsrs	r2, r3
 80017de:	d102      	bne.n	80017e6 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80017e0:	b005      	add	sp, #20
 80017e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e6:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80017e8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ea:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80017ec:	ea12 0e06 	ands.w	lr, r2, r6
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	684a      	ldr	r2, [r1, #4]
 80017f6:	f022 0710 	bic.w	r7, r2, #16
 80017fa:	2f02      	cmp	r7, #2
 80017fc:	d116      	bne.n	800182c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80017fe:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001802:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001806:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800180a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800180e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001812:	f04f 0c0f 	mov.w	ip, #15
 8001816:	fa0c fc0a 	lsl.w	ip, ip, sl
 800181a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181e:	690d      	ldr	r5, [r1, #16]
 8001820:	fa05 f50a 	lsl.w	r5, r5, sl
 8001824:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001828:	f8c9 5020 	str.w	r5, [r9, #32]
 800182c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001830:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001832:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001836:	fa05 f50c 	lsl.w	r5, r5, ip
 800183a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001840:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001844:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001848:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001850:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001854:	d811      	bhi.n	800187a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001856:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001858:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800185c:	68cf      	ldr	r7, [r1, #12]
 800185e:	fa07 f70c 	lsl.w	r7, r7, ip
 8001862:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001866:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001868:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800186a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800186e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001872:	409f      	lsls	r7, r3
 8001874:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001878:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800187a:	f1ba 0f03 	cmp.w	sl, #3
 800187e:	d107      	bne.n	8001890 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001880:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001882:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001886:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800188a:	409f      	lsls	r7, r3
 800188c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800188e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001890:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001892:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001894:	688e      	ldr	r6, [r1, #8]
 8001896:	fa06 f60c 	lsl.w	r6, r6, ip
 800189a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800189c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	00d5      	lsls	r5, r2, #3
 80018a0:	d559      	bpl.n	8001956 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80018a6:	f045 0501 	orr.w	r5, r5, #1
 80018aa:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80018ae:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80018b2:	f023 0603 	bic.w	r6, r3, #3
 80018b6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80018ba:	f005 0501 	and.w	r5, r5, #1
 80018be:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80018c2:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80018ca:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018d0:	270f      	movs	r7, #15
 80018d2:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018da:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018de:	d03c      	beq.n	800195a <HAL_GPIO_Init+0x192>
 80018e0:	4d25      	ldr	r5, [pc, #148]	; (8001978 <HAL_GPIO_Init+0x1b0>)
 80018e2:	42a8      	cmp	r0, r5
 80018e4:	d03b      	beq.n	800195e <HAL_GPIO_Init+0x196>
 80018e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ea:	42a8      	cmp	r0, r5
 80018ec:	d039      	beq.n	8001962 <HAL_GPIO_Init+0x19a>
 80018ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f2:	42a8      	cmp	r0, r5
 80018f4:	d037      	beq.n	8001966 <HAL_GPIO_Init+0x19e>
 80018f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018fa:	42a8      	cmp	r0, r5
 80018fc:	d035      	beq.n	800196a <HAL_GPIO_Init+0x1a2>
 80018fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001902:	42a8      	cmp	r0, r5
 8001904:	d033      	beq.n	800196e <HAL_GPIO_Init+0x1a6>
 8001906:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800190a:	42a8      	cmp	r0, r5
 800190c:	bf14      	ite	ne
 800190e:	2507      	movne	r5, #7
 8001910:	2506      	moveq	r5, #6
 8001912:	fa05 f50c 	lsl.w	r5, r5, ip
 8001916:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001918:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800191a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800191c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001920:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001922:	bf54      	ite	pl
 8001924:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001926:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800192a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800192c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001930:	bf54      	ite	pl
 8001932:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001934:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001938:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800193a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800193e:	bf54      	ite	pl
 8001940:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001942:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001946:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001948:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800194c:	bf54      	ite	pl
 800194e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001950:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001954:	60e5      	str	r5, [r4, #12]
    position++;
 8001956:	3301      	adds	r3, #1
 8001958:	e73f      	b.n	80017da <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800195a:	2500      	movs	r5, #0
 800195c:	e7d9      	b.n	8001912 <HAL_GPIO_Init+0x14a>
 800195e:	2501      	movs	r5, #1
 8001960:	e7d7      	b.n	8001912 <HAL_GPIO_Init+0x14a>
 8001962:	2502      	movs	r5, #2
 8001964:	e7d5      	b.n	8001912 <HAL_GPIO_Init+0x14a>
 8001966:	2503      	movs	r5, #3
 8001968:	e7d3      	b.n	8001912 <HAL_GPIO_Init+0x14a>
 800196a:	2504      	movs	r5, #4
 800196c:	e7d1      	b.n	8001912 <HAL_GPIO_Init+0x14a>
 800196e:	2505      	movs	r5, #5
 8001970:	e7cf      	b.n	8001912 <HAL_GPIO_Init+0x14a>
 8001972:	bf00      	nop
 8001974:	40010400 	.word	0x40010400
 8001978:	48000400 	.word	0x48000400
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001984:	4c40      	ldr	r4, [pc, #256]	; (8001a88 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001986:	f8df b108 	ldr.w	fp, [pc, #264]	; 8001a90 <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 800198c:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001990:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 8001994:	fa31 f203 	lsrs.w	r2, r1, r3
 8001998:	d101      	bne.n	800199e <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 800199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800199e:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 80019a2:	ea11 0605 	ands.w	r6, r1, r5
 80019a6:	d060      	beq.n	8001a6a <HAL_GPIO_DeInit+0xea>
 80019a8:	f023 0703 	bic.w	r7, r3, #3
 80019ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80019b0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80019b4:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80019b8:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80019ba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019be:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80019c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80019c6:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80019ca:	d050      	beq.n	8001a6e <HAL_GPIO_DeInit+0xee>
 80019cc:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_GPIO_DeInit+0x10c>)
 80019ce:	4290      	cmp	r0, r2
 80019d0:	d04f      	beq.n	8001a72 <HAL_GPIO_DeInit+0xf2>
 80019d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d6:	4290      	cmp	r0, r2
 80019d8:	d04d      	beq.n	8001a76 <HAL_GPIO_DeInit+0xf6>
 80019da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019de:	4290      	cmp	r0, r2
 80019e0:	d04b      	beq.n	8001a7a <HAL_GPIO_DeInit+0xfa>
 80019e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d049      	beq.n	8001a7e <HAL_GPIO_DeInit+0xfe>
 80019ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ee:	4290      	cmp	r0, r2
 80019f0:	d047      	beq.n	8001a82 <HAL_GPIO_DeInit+0x102>
 80019f2:	4558      	cmp	r0, fp
 80019f4:	bf0c      	ite	eq
 80019f6:	2206      	moveq	r2, #6
 80019f8:	2207      	movne	r2, #7
 80019fa:	fa02 f20e 	lsl.w	r2, r2, lr
 80019fe:	4594      	cmp	ip, r2
 8001a00:	d110      	bne.n	8001a24 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	43f6      	mvns	r6, r6
 8001a06:	4032      	ands	r2, r6
 8001a08:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001a0a:	6862      	ldr	r2, [r4, #4]
 8001a0c:	4032      	ands	r2, r6
 8001a0e:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001a10:	68a2      	ldr	r2, [r4, #8]
 8001a12:	4032      	ands	r2, r6
 8001a14:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001a16:	68e2      	ldr	r2, [r4, #12]
 8001a18:	4016      	ands	r6, r2
 8001a1a:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	ea22 0209 	bic.w	r2, r2, r9
 8001a22:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a24:	6806      	ldr	r6, [r0, #0]
 8001a26:	2703      	movs	r7, #3
 8001a28:	005a      	lsls	r2, r3, #1
 8001a2a:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001a2e:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a32:	4316      	orrs	r6, r2
 8001a34:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001a38:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001a3a:	f003 0607 	and.w	r6, r3, #7
 8001a3e:	f8d7 e020 	ldr.w	lr, [r7, #32]
 8001a42:	00b6      	lsls	r6, r6, #2
 8001a44:	fa08 f606 	lsl.w	r6, r8, r6
 8001a48:	ea2e 0606 	bic.w	r6, lr, r6
 8001a4c:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a4e:	6886      	ldr	r6, [r0, #8]
 8001a50:	43d2      	mvns	r2, r2
 8001a52:	4016      	ands	r6, r2
 8001a54:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a56:	6846      	ldr	r6, [r0, #4]
 8001a58:	43ed      	mvns	r5, r5
 8001a5a:	402e      	ands	r6, r5
 8001a5c:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a5e:	68c6      	ldr	r6, [r0, #12]
 8001a60:	4032      	ands	r2, r6
 8001a62:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001a64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001a66:	4015      	ands	r5, r2
 8001a68:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	e792      	b.n	8001994 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a6e:	2200      	movs	r2, #0
 8001a70:	e7c3      	b.n	80019fa <HAL_GPIO_DeInit+0x7a>
 8001a72:	2201      	movs	r2, #1
 8001a74:	e7c1      	b.n	80019fa <HAL_GPIO_DeInit+0x7a>
 8001a76:	2202      	movs	r2, #2
 8001a78:	e7bf      	b.n	80019fa <HAL_GPIO_DeInit+0x7a>
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	e7bd      	b.n	80019fa <HAL_GPIO_DeInit+0x7a>
 8001a7e:	2204      	movs	r2, #4
 8001a80:	e7bb      	b.n	80019fa <HAL_GPIO_DeInit+0x7a>
 8001a82:	2205      	movs	r2, #5
 8001a84:	e7b9      	b.n	80019fa <HAL_GPIO_DeInit+0x7a>
 8001a86:	bf00      	nop
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48001800 	.word	0x48001800

08001a94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	b10a      	cbz	r2, 8001a9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a96:	6181      	str	r1, [r0, #24]
 8001a98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a9a:	6281      	str	r1, [r0, #40]	; 0x28
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001a9e:	6943      	ldr	r3, [r0, #20]
 8001aa0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa2:	bf14      	ite	ne
 8001aa4:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa6:	6181      	streq	r1, [r0, #24]
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001ab0:	6959      	ldr	r1, [r3, #20]
 8001ab2:	4201      	tst	r1, r0
 8001ab4:	d002      	beq.n	8001abc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ab6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab8:	f002 f9b4 	bl	8003e24 <HAL_GPIO_EXTI_Callback>
 8001abc:	bd08      	pop	{r3, pc}
 8001abe:	bf00      	nop
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8001ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac8:	461d      	mov	r5, r3
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001aca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	2b01      	cmp	r3, #1
{
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	460f      	mov	r7, r1
 8001ad6:	4616      	mov	r6, r2
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001ad8:	d82e      	bhi.n	8001b38 <HAL_LCD_Write+0x74>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8001ada:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d009      	beq.n	8001af8 <HAL_LCD_Write+0x34>
 8001ae4:	6821      	ldr	r1, [r4, #0]
 8001ae6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);

    return HAL_OK;
 8001aea:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8001aec:	694b      	ldr	r3, [r1, #20]
 8001aee:	4033      	ands	r3, r6
 8001af0:	432b      	orrs	r3, r5
 8001af2:	614b      	str	r3, [r1, #20]
    return HAL_OK;
 8001af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_LOCK(hlcd);
 8001af8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8001afc:	2a01      	cmp	r2, #1
 8001afe:	f04f 0002 	mov.w	r0, #2
 8001b02:	d01a      	beq.n	8001b3a <HAL_LCD_Write+0x76>
 8001b04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8001b08:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fa36 	bl	8000f7c <HAL_GetTick>
 8001b10:	4680      	mov	r8, r0
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	075b      	lsls	r3, r3, #29
 8001b18:	d5e4      	bpl.n	8001ae4 <HAL_LCD_Write+0x20>
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b1a:	f7ff fa2f 	bl	8000f7c <HAL_GetTick>
 8001b1e:	eba0 0008 	sub.w	r0, r0, r8
 8001b22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b26:	d9f4      	bls.n	8001b12 <HAL_LCD_Write+0x4e>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hlcd);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8001b32:	2003      	movs	r0, #3
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
  }
}
 8001b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b3e <HAL_LCD_UpdateDisplayRequest>:
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001b3e:	6803      	ldr	r3, [r0, #0]
 8001b40:	2208      	movs	r2, #8
{
 8001b42:	b570      	push	{r4, r5, r6, lr}
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001b44:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	f042 0204 	orr.w	r2, r2, #4
 8001b4c:	609a      	str	r2, [r3, #8]
{
 8001b4e:	4604      	mov	r4, r0

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001b50:	f7ff fa14 	bl	8000f7c <HAL_GetTick>
 8001b54:	4606      	mov	r6, r0

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	689d      	ldr	r5, [r3, #8]
 8001b5a:	f015 0508 	ands.w	r5, r5, #8
 8001b5e:	d006      	beq.n	8001b6e <HAL_LCD_UpdateDisplayRequest+0x30>

      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8001b60:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8001b62:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 8001b64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hlcd);
 8001b68:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

  return HAL_OK;
}
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001b6e:	f7ff fa05 	bl	8000f7c <HAL_GetTick>
 8001b72:	1b80      	subs	r0, r0, r6
 8001b74:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b78:	d9ed      	bls.n	8001b56 <HAL_LCD_UpdateDisplayRequest+0x18>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hlcd);
 8001b7e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8001b82:	2003      	movs	r0, #3
 8001b84:	bd70      	pop	{r4, r5, r6, pc}

08001b86 <HAL_LCD_Clear>:
{
 8001b86:	b538      	push	{r3, r4, r5, lr}
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001b88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	2b01      	cmp	r3, #1
{
 8001b90:	4604      	mov	r4, r0
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001b92:	d82c      	bhi.n	8001bee <HAL_LCD_Clear+0x68>
    __HAL_LOCK(hlcd);
 8001b94:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	f04f 0002 	mov.w	r0, #2
 8001b9e:	d027      	beq.n	8001bf0 <HAL_LCD_Clear+0x6a>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hlcd->State = HAL_LCD_STATE_BUSY;
 8001ba6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    tickstart = HAL_GetTick();
 8001baa:	f7ff f9e7 	bl	8000f7c <HAL_GetTick>
 8001bae:	4605      	mov	r5, r0
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001bb0:	6821      	ldr	r1, [r4, #0]
 8001bb2:	688b      	ldr	r3, [r1, #8]
 8001bb4:	f013 0304 	ands.w	r3, r3, #4
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_LCD_Clear+0x4e>
      hlcd->Instance->RAM[counter] = 0;
 8001bba:	4618      	mov	r0, r3
 8001bbc:	1d1a      	adds	r2, r3, #4
 8001bbe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2b10      	cmp	r3, #16
      hlcd->Instance->RAM[counter] = 0;
 8001bc6:	6050      	str	r0, [r2, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001bc8:	d1f8      	bne.n	8001bbc <HAL_LCD_Clear+0x36>
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8001bca:	4620      	mov	r0, r4
}
 8001bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8001bd0:	f7ff bfb5 	b.w	8001b3e <HAL_LCD_UpdateDisplayRequest>
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001bd4:	f7ff f9d2 	bl	8000f7c <HAL_GetTick>
 8001bd8:	1b40      	subs	r0, r0, r5
 8001bda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001bde:	d9e7      	bls.n	8001bb0 <HAL_LCD_Clear+0x2a>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001be0:	2302      	movs	r3, #2
 8001be2:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hlcd);
 8001be4:	2300      	movs	r3, #0
 8001be6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001bea:	2003      	movs	r0, #3
 8001bec:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
}
 8001bf0:	bd38      	pop	{r3, r4, r5, pc}

08001bf2 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001bf2:	b538      	push	{r3, r4, r5, lr}
 8001bf4:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001bf6:	f7ff f9c1 	bl	8000f7c <HAL_GetTick>
 8001bfa:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	069b      	lsls	r3, r3, #26
 8001c02:	d501      	bpl.n	8001c08 <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001c04:	2000      	movs	r0, #0
}
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001c08:	f7ff f9b8 	bl	8000f7c <HAL_GetTick>
 8001c0c:	1b40      	subs	r0, r0, r5
 8001c0e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c12:	d9f3      	bls.n	8001bfc <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001c14:	2301      	movs	r3, #1
 8001c16:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8001c18:	2003      	movs	r0, #3
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}

08001c1c <HAL_LCD_Init>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
  if (hlcd == NULL)
 8001c1e:	4604      	mov	r4, r0
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d074      	beq.n	8001d0e <HAL_LCD_Init+0xf2>
  if (hlcd->State == HAL_LCD_STATE_RESET)
 8001c24:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001c28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c2c:	b91b      	cbnz	r3, 8001c36 <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 8001c2e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 8001c32:	f002 f883 	bl	8003d3c <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001c36:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 8001c38:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001c3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001c46:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 8001c48:	4618      	mov	r0, r3
 8001c4a:	1d19      	adds	r1, r3, #4
 8001c4c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001c50:	3301      	adds	r3, #1
 8001c52:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 8001c54:	6048      	str	r0, [r1, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001c56:	d1f8      	bne.n	8001c4a <HAL_LCD_Init+0x2e>
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001c58:	6893      	ldr	r3, [r2, #8]
  MODIFY_REG(hlcd->Instance->FCR, \
 8001c5a:	68a0      	ldr	r0, [r4, #8]
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hlcd->Instance->FCR, \
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	6851      	ldr	r1, [r2, #4]
 8001c66:	4303      	orrs	r3, r0
 8001c68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c6a:	4303      	orrs	r3, r0
 8001c6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c6e:	4303      	orrs	r3, r0
 8001c70:	69e0      	ldr	r0, [r4, #28]
 8001c72:	4303      	orrs	r3, r0
 8001c74:	6a20      	ldr	r0, [r4, #32]
 8001c76:	4303      	orrs	r3, r0
 8001c78:	69a0      	ldr	r0, [r4, #24]
 8001c7a:	f021 717f 	bic.w	r1, r1, #66846720	; 0x3fc0000
 8001c7e:	4303      	orrs	r3, r0
 8001c80:	f421 317f 	bic.w	r1, r1, #261120	; 0x3fc00
 8001c84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c86:	f421 717c 	bic.w	r1, r1, #1008	; 0x3f0
 8001c8a:	4303      	orrs	r3, r0
 8001c8c:	f021 0101 	bic.w	r1, r1, #1
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6053      	str	r3, [r2, #4]
  status = LCD_WaitForSynchro(hlcd);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ffac 	bl	8001bf2 <LCD_WaitForSynchro>
  if (status != HAL_OK)
 8001c9a:	4605      	mov	r5, r0
 8001c9c:	bb68      	cbnz	r0, 8001cfa <HAL_LCD_Init+0xde>
  MODIFY_REG(hlcd->Instance->CR, \
 8001c9e:	6920      	ldr	r0, [r4, #16]
 8001ca0:	68e3      	ldr	r3, [r4, #12]
 8001ca2:	6822      	ldr	r2, [r4, #0]
 8001ca4:	4303      	orrs	r3, r0
 8001ca6:	6960      	ldr	r0, [r4, #20]
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	4303      	orrs	r3, r0
 8001cac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001cae:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 8001cb2:	4303      	orrs	r3, r0
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001cc0:	f7ff f95c 	bl	8000f7c <HAL_GetTick>
 8001cc4:	4606      	mov	r6, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	07da      	lsls	r2, r3, #31
 8001ccc:	d50c      	bpl.n	8001ce8 <HAL_LCD_Init+0xcc>
  tickstart = HAL_GetTick();
 8001cce:	f7ff f955 	bl	8000f7c <HAL_GetTick>
 8001cd2:	4606      	mov	r6, r0
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	06db      	lsls	r3, r3, #27
 8001cda:	d510      	bpl.n	8001cfe <HAL_LCD_Init+0xe2>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63a3      	str	r3, [r4, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return status;
 8001ce6:	e008      	b.n	8001cfa <HAL_LCD_Init+0xde>
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001ce8:	f7ff f948 	bl	8000f7c <HAL_GetTick>
 8001cec:	1b80      	subs	r0, r0, r6
 8001cee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cf2:	d9e8      	bls.n	8001cc6 <HAL_LCD_Init+0xaa>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8001cf4:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001cf6:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8001cf8:	2503      	movs	r5, #3
}
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001cfe:	f7ff f93d 	bl	8000f7c <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d08:	d9e4      	bls.n	8001cd4 <HAL_LCD_Init+0xb8>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	e7f3      	b.n	8001cf6 <HAL_LCD_Init+0xda>
    return HAL_ERROR;
 8001d0e:	2501      	movs	r5, #1
 8001d10:	e7f3      	b.n	8001cfa <HAL_LCD_Init+0xde>
	...

08001d14 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_PWREx_GetVoltageRange+0xc>)
 8001d16:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d18:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40007000 	.word	0x40007000

08001d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d26:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d30:	d11c      	bne.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d32:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001d36:	d015      	beq.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d42:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d44:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001d46:	6811      	ldr	r1, [r2, #0]
 8001d48:	2232      	movs	r2, #50	; 0x32
 8001d4a:	434a      	muls	r2, r1
 8001d4c:	490f      	ldr	r1, [pc, #60]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001d4e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d52:	4619      	mov	r1, r3
 8001d54:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d56:	6958      	ldr	r0, [r3, #20]
 8001d58:	0540      	lsls	r0, r0, #21
 8001d5a:	d500      	bpl.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001d5c:	b922      	cbnz	r2, 8001d68 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d5e:	694b      	ldr	r3, [r1, #20]
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	d40d      	bmi.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d64:	2000      	movs	r0, #0
 8001d66:	4770      	bx	lr
        wait_loop_index--;
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	e7f4      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d70:	bf1f      	itttt	ne
 8001d72:	681a      	ldrne	r2, [r3, #0]
 8001d74:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001d78:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001d7c:	601a      	strne	r2, [r3, #0]
 8001d7e:	e7f1      	b.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001d80:	2003      	movs	r0, #3
}
 8001d82:	4770      	bx	lr
 8001d84:	40007000 	.word	0x40007000
 8001d88:	20000070 	.word	0x20000070
 8001d8c:	000f4240 	.word	0x000f4240

08001d90 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d94:	4604      	mov	r4, r0
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001d96:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001d98:	b138      	cbz	r0, 8001daa <QSPI_Config+0x1a>
 8001d9a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001d9e:	bf1f      	itttt	ne
 8001da0:	6a8b      	ldrne	r3, [r1, #40]	; 0x28
 8001da2:	6825      	ldrne	r5, [r4, #0]
 8001da4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8001da8:	612b      	strne	r3, [r5, #16]
 8001daa:	f101 0318 	add.w	r3, r1, #24
 8001dae:	e893 0308 	ldmia.w	r3, {r3, r8, r9}
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04f      	beq.n	8001e56 <QSPI_Config+0xc6>
 8001db6:	6824      	ldr	r4, [r4, #0]
 8001db8:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8001dbc:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8001dc0:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8001dc2:	680e      	ldr	r6, [r1, #0]
 8001dc4:	694d      	ldr	r5, [r1, #20]
 8001dc6:	4303      	orrs	r3, r0
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001dc8:	f1b9 0f00 	cmp.w	r9, #0
 8001dcc:	d023      	beq.n	8001e16 <QSPI_Config+0x86>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001dce:	6888      	ldr	r0, [r1, #8]
 8001dd0:	61e0      	str	r0, [r4, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	6908      	ldr	r0, [r1, #16]
 8001dd6:	ea43 0309 	orr.w	r3, r3, r9
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001dda:	f1b8 0f00 	cmp.w	r8, #0
 8001dde:	d00e      	beq.n	8001dfe <QSPI_Config+0x6e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001de0:	ea43 0308 	orr.w	r3, r3, r8
 8001de4:	ea43 030c 	orr.w	r3, r3, ip
 8001de8:	ea43 030e 	orr.w	r3, r3, lr
 8001dec:	433b      	orrs	r3, r7
 8001dee:	4303      	orrs	r3, r0
 8001df0:	68c8      	ldr	r0, [r1, #12]
 8001df2:	4303      	orrs	r3, r0
 8001df4:	4333      	orrs	r3, r6

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001df6:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
    {
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with only address ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001dfa:	6163      	str	r3, [r4, #20]
 8001dfc:	e01d      	b.n	8001e3a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001dfe:	ea43 030c 	orr.w	r3, r3, ip
 8001e02:	ea43 030e 	orr.w	r3, r3, lr
 8001e06:	433b      	orrs	r3, r7
 8001e08:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e0a:	4333      	orrs	r3, r6
 8001e0c:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
      {
        /*---- Command with only data phase ----*/
        if (cmd->DataMode != QSPI_DATA_NONE)
        {
          /* Configure QSPI: CCR register with all communications parameters */
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e10:	6163      	str	r3, [r4, #20]
 8001e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e16:	f1b8 0f00 	cmp.w	r8, #0
 8001e1a:	d015      	beq.n	8001e48 <QSPI_Config+0xb8>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e1c:	ea43 0002 	orr.w	r0, r3, r2
 8001e20:	ea40 0008 	orr.w	r0, r0, r8
 8001e24:	ea40 000c 	orr.w	r0, r0, ip
 8001e28:	68cb      	ldr	r3, [r1, #12]
 8001e2a:	ea40 000e 	orr.w	r0, r0, lr
 8001e2e:	4338      	orrs	r0, r7
 8001e30:	4318      	orrs	r0, r3
 8001e32:	4330      	orrs	r0, r6
 8001e34:	ea40 4085 	orr.w	r0, r0, r5, lsl #18
 8001e38:	6160      	str	r0, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001e3a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8001e3e:	d0e8      	beq.n	8001e12 <QSPI_Config+0x82>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001e40:	684b      	ldr	r3, [r1, #4]
 8001e42:	61a3      	str	r3, [r4, #24]
 8001e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e48:	4313      	orrs	r3, r2
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e4a:	ea43 030c 	orr.w	r3, r3, ip
 8001e4e:	ea43 030e 	orr.w	r3, r3, lr
 8001e52:	433b      	orrs	r3, r7
 8001e54:	e7d9      	b.n	8001e0a <QSPI_Config+0x7a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001e56:	f1b9 0f00 	cmp.w	r9, #0
 8001e5a:	d01a      	beq.n	8001e92 <QSPI_Config+0x102>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001e5c:	6824      	ldr	r4, [r4, #0]
 8001e5e:	688b      	ldr	r3, [r1, #8]
 8001e60:	61e3      	str	r3, [r4, #28]
 8001e62:	ea40 0309 	orr.w	r3, r0, r9
 8001e66:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8001e6a:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8001e6e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8001e70:	690e      	ldr	r6, [r1, #16]
 8001e72:	694d      	ldr	r5, [r1, #20]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e74:	4313      	orrs	r3, r2
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e76:	f1b8 0f00 	cmp.w	r8, #0
 8001e7a:	d0e6      	beq.n	8001e4a <QSPI_Config+0xba>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e7c:	ea43 0008 	orr.w	r0, r3, r8
 8001e80:	ea40 030c 	orr.w	r3, r0, ip
 8001e84:	ea43 030e 	orr.w	r3, r3, lr
 8001e88:	433b      	orrs	r3, r7
 8001e8a:	68c8      	ldr	r0, [r1, #12]
 8001e8c:	4333      	orrs	r3, r6
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	e7b1      	b.n	8001df6 <QSPI_Config+0x66>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e92:	f1b8 0f00 	cmp.w	r8, #0
 8001e96:	d00f      	beq.n	8001eb8 <QSPI_Config+0x128>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e98:	ea40 0308 	orr.w	r3, r0, r8
 8001e9c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001e9e:	6824      	ldr	r4, [r4, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8001eaa:	4303      	orrs	r3, r0
 8001eac:	68c8      	ldr	r0, [r1, #12]
 8001eae:	4303      	orrs	r3, r0
 8001eb0:	6948      	ldr	r0, [r1, #20]
 8001eb2:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8001eb6:	e7a0      	b.n	8001dfa <QSPI_Config+0x6a>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d0aa      	beq.n	8001e12 <QSPI_Config+0x82>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ebc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001ebe:	6824      	ldr	r4, [r4, #0]
 8001ec0:	4303      	orrs	r3, r0
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	694a      	ldr	r2, [r1, #20]
 8001ece:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8001ed2:	e79d      	b.n	8001e10 <QSPI_Config+0x80>

08001ed4 <QSPI_WaitFlagStateUntilTimeout>:
{
 8001ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed8:	9d06      	ldr	r5, [sp, #24]
 8001eda:	4604      	mov	r4, r0
 8001edc:	460f      	mov	r7, r1
 8001ede:	4616      	mov	r6, r2
 8001ee0:	4698      	mov	r8, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ee2:	6821      	ldr	r1, [r4, #0]
 8001ee4:	688a      	ldr	r2, [r1, #8]
 8001ee6:	423a      	tst	r2, r7
 8001ee8:	bf14      	ite	ne
 8001eea:	2201      	movne	r2, #1
 8001eec:	2200      	moveq	r2, #0
 8001eee:	42b2      	cmp	r2, r6
 8001ef0:	d102      	bne.n	8001ef8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8001ef2:	2000      	movs	r0, #0
}
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001ef8:	1c6b      	adds	r3, r5, #1
 8001efa:	d0f3      	beq.n	8001ee4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efc:	f7ff f83e 	bl	8000f7c <HAL_GetTick>
 8001f00:	eba0 0008 	sub.w	r0, r0, r8
 8001f04:	4285      	cmp	r5, r0
 8001f06:	d301      	bcc.n	8001f0c <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	d1ea      	bne.n	8001ee2 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001f12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f20 <HAL_QSPI_Init>:
{
 8001f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff f82a 	bl	8000f7c <HAL_GetTick>
 8001f28:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d049      	beq.n	8001fc2 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8001f2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d047      	beq.n	8001fc6 <HAL_QSPI_Init+0xa6>
 8001f36:	2301      	movs	r3, #1
 8001f38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001f3c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001f40:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001f44:	b93a      	cbnz	r2, 8001f56 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001f46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f002 fa54 	bl	80043f8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001f50:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f54:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001f56:	6820      	ldr	r0, [r4, #0]
 8001f58:	68a1      	ldr	r1, [r4, #8]
 8001f5a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001f5e:	3901      	subs	r1, #1
 8001f60:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001f64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f68:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	462b      	mov	r3, r5
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff ffae 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001f78:	b9f0      	cbnz	r0, 8001fb8 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	6865      	ldr	r5, [r4, #4]
 8001f7e:	6811      	ldr	r1, [r2, #0]
 8001f80:	68e3      	ldr	r3, [r4, #12]
 8001f82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001f86:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001f8a:	f021 0110 	bic.w	r1, r1, #16
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001f92:	69a1      	ldr	r1, [r4, #24]
 8001f94:	6963      	ldr	r3, [r4, #20]
 8001f96:	6855      	ldr	r5, [r2, #4]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6921      	ldr	r1, [r4, #16]
 8001f9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001fa0:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_QSPI_Init+0xac>)
 8001fa2:	4029      	ands	r1, r5
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001fb0:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fb2:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001fb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001fbe:	b003      	add	sp, #12
 8001fc0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e7fb      	b.n	8001fbe <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	e7f9      	b.n	8001fbe <HAL_QSPI_Init+0x9e>
 8001fca:	bf00      	nop
 8001fcc:	ffe0f8fe 	.word	0xffe0f8fe

08001fd0 <HAL_QSPI_DeInit>:
{
 8001fd0:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	b1a0      	cbz	r0, 8002000 <HAL_QSPI_DeInit+0x30>
  __HAL_LOCK(hqspi);
 8001fd6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d012      	beq.n	8002004 <HAL_QSPI_DeInit+0x34>
  __HAL_QSPI_DISABLE(hqspi);
 8001fde:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hqspi);
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_QSPI_DISABLE(hqspi);
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8001fee:	f002 fa39 	bl	8004464 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001ff6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001ffa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8001ffe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
 8002002:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hqspi);
 8002004:	2002      	movs	r0, #2
}
 8002006:	bd10      	pop	{r4, pc}

08002008 <HAL_QSPI_Command>:
{
 8002008:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800200c:	4604      	mov	r4, r0
 800200e:	468a      	mov	sl, r1
 8002010:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8002012:	f7fe ffb3 	bl	8000f7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8002016:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800201a:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800201c:	4680      	mov	r8, r0
  __HAL_LOCK(hqspi);
 800201e:	d035      	beq.n	800208c <HAL_QSPI_Command+0x84>
 8002020:	2301      	movs	r3, #1
 8002022:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002026:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 800202a:	b2f6      	uxtb	r6, r6
 800202c:	429e      	cmp	r6, r3
 800202e:	f04f 0702 	mov.w	r7, #2
 8002032:	d129      	bne.n	8002088 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002034:	2200      	movs	r2, #0
 8002036:	63e2      	str	r2, [r4, #60]	; 0x3c
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002038:	4603      	mov	r3, r0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800203a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800203e:	f8cd 9000 	str.w	r9, [sp]
 8002042:	2120      	movs	r1, #32
 8002044:	4620      	mov	r0, r4
 8002046:	f7ff ff45 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800204a:	4605      	mov	r5, r0
 800204c:	b9a8      	cbnz	r0, 800207a <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800204e:	4602      	mov	r2, r0
 8002050:	4651      	mov	r1, sl
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fe9c 	bl	8001d90 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8002058:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800205c:	b95b      	cbnz	r3, 8002076 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800205e:	f8cd 9000 	str.w	r9, [sp]
 8002062:	4643      	mov	r3, r8
 8002064:	4632      	mov	r2, r6
 8002066:	4639      	mov	r1, r7
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ff33 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800206e:	4605      	mov	r5, r0
 8002070:	b918      	cbnz	r0, 800207a <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	60df      	str	r7, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8002076:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 800207a:	2300      	movs	r3, #0
 800207c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002080:	4628      	mov	r0, r5
 8002082:	b002      	add	sp, #8
 8002084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8002088:	463d      	mov	r5, r7
 800208a:	e7f6      	b.n	800207a <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 800208c:	2502      	movs	r5, #2
 800208e:	e7f7      	b.n	8002080 <HAL_QSPI_Command+0x78>

08002090 <HAL_QSPI_AutoPolling>:
{
 8002090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002094:	4604      	mov	r4, r0
 8002096:	4698      	mov	r8, r3
 8002098:	4689      	mov	r9, r1
 800209a:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7fe ff6e 	bl	8000f7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80020a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80020a4:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 80020a6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 80020a8:	d042      	beq.n	8002130 <HAL_QSPI_AutoPolling+0xa0>
 80020aa:	2301      	movs	r3, #1
 80020ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80020b0:	f894 5039 	ldrb.w	r5, [r4, #57]	; 0x39
 80020b4:	b2ed      	uxtb	r5, r5
 80020b6:	429d      	cmp	r5, r3
 80020b8:	d138      	bne.n	800212c <HAL_QSPI_AutoPolling+0x9c>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80020ba:	2342      	movs	r3, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80020bc:	2200      	movs	r2, #0
 80020be:	63e2      	str	r2, [r4, #60]	; 0x3c
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80020c0:	f8cd 8000 	str.w	r8, [sp]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80020c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80020c8:	2120      	movs	r1, #32
 80020ca:	4603      	mov	r3, r0
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7ff ff01 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80020d2:	bb28      	cbnz	r0, 8002120 <HAL_QSPI_AutoPolling+0x90>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	6832      	ldr	r2, [r6, #0]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80020da:	6872      	ldr	r2, [r6, #4]
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80020de:	68b2      	ldr	r2, [r6, #8]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	6932      	ldr	r2, [r6, #16]
 80020e6:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80020ea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
      cmd->NbData = cfg->StatusBytesSize;
 80020f2:	68f3      	ldr	r3, [r6, #12]
 80020f4:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80020f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fc:	4649      	mov	r1, r9
 80020fe:	4620      	mov	r0, r4
 8002100:	f7ff fe46 	bl	8001d90 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002104:	f8cd 8000 	str.w	r8, [sp]
 8002108:	463b      	mov	r3, r7
 800210a:	462a      	mov	r2, r5
 800210c:	2108      	movs	r1, #8
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff fee0 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8002114:	b920      	cbnz	r0, 8002120 <HAL_QSPI_AutoPolling+0x90>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	2208      	movs	r2, #8
 800211a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800211c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8002120:	2300      	movs	r3, #0
 8002122:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002126:	b003      	add	sp, #12
 8002128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800212c:	2002      	movs	r0, #2
 800212e:	e7f7      	b.n	8002120 <HAL_QSPI_AutoPolling+0x90>
  __HAL_LOCK(hqspi);
 8002130:	2002      	movs	r0, #2
 8002132:	e7f8      	b.n	8002126 <HAL_QSPI_AutoPolling+0x96>

08002134 <HAL_QSPI_Abort>:
{
 8002134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7fe ff20 	bl	8000f7c <HAL_GetTick>
 800213c:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800213e:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8002142:	f010 0002 	ands.w	r0, r0, #2
 8002146:	d034      	beq.n	80021b2 <HAL_QSPI_Abort+0x7e>
    __HAL_UNLOCK(hqspi);
 8002148:	2300      	movs	r3, #0
 800214a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	0752      	lsls	r2, r2, #29
 8002154:	d50b      	bpl.n	800216e <HAL_QSPI_Abort+0x3a>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002156:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8002158:	6b60      	ldr	r0, [r4, #52]	; 0x34
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8002160:	f7ff fac4 	bl	80016ec <HAL_DMA_Abort>
      if(status != HAL_OK)
 8002164:	b118      	cbz	r0, 800216e <HAL_QSPI_Abort+0x3a>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	63e3      	str	r3, [r4, #60]	; 0x3c
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	6013      	str	r3, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	462b      	mov	r3, r5
 8002180:	2102      	movs	r1, #2
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff fea6 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8002188:	b998      	cbnz	r0, 80021b2 <HAL_QSPI_Abort+0x7e>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	2202      	movs	r2, #2
 800218e:	60da      	str	r2, [r3, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4602      	mov	r2, r0
 8002196:	462b      	mov	r3, r5
 8002198:	2120      	movs	r1, #32
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff fe9a 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80021a0:	b938      	cbnz	r0, 80021b2 <HAL_QSPI_Abort+0x7e>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	6953      	ldr	r3, [r2, #20]
 80021a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80021aa:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80021b2:	b003      	add	sp, #12
 80021b4:	bd30      	pop	{r4, r5, pc}

080021b6 <HAL_QSPI_Transmit>:
{
 80021b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021ba:	4604      	mov	r4, r0
 80021bc:	4688      	mov	r8, r1
 80021be:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7fe fedc 	bl	8000f7c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80021c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80021c8:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 80021ca:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80021cc:	d050      	beq.n	8002270 <HAL_QSPI_Transmit+0xba>
 80021ce:	2301      	movs	r3, #1
 80021d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80021d4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80021d8:	6825      	ldr	r5, [r4, #0]
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80021da:	b2c0      	uxtb	r0, r0
 80021dc:	4298      	cmp	r0, r3
 80021de:	d145      	bne.n	800226c <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(pData != NULL )
 80021e4:	f1b8 0f00 	cmp.w	r8, #0
 80021e8:	d03b      	beq.n	8002262 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80021ea:	2312      	movs	r3, #18
 80021ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80021f0:	692b      	ldr	r3, [r5, #16]
 80021f2:	3301      	adds	r3, #1
 80021f4:	6263      	str	r3, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80021f6:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80021f8:	f8c4 801c 	str.w	r8, [r4, #28]
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80021fc:	3301      	adds	r3, #1
 80021fe:	6223      	str	r3, [r4, #32]
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002200:	696b      	ldr	r3, [r5, #20]
 8002202:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002206:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8002208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800220a:	b9b3      	cbnz	r3, 800223a <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800220c:	9700      	str	r7, [sp, #0]
 800220e:	4633      	mov	r3, r6
 8002210:	2201      	movs	r2, #1
 8002212:	2102      	movs	r1, #2
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff fe5d 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800221a:	b928      	cbnz	r0, 8002228 <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff ff86 	bl	8002134 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8002228:	2301      	movs	r3, #1
 800222a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 800222e:	2300      	movs	r3, #0
 8002230:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002234:	b002      	add	sp, #8
 8002236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800223a:	9700      	str	r7, [sp, #0]
 800223c:	4633      	mov	r3, r6
 800223e:	2201      	movs	r2, #1
 8002240:	2104      	movs	r1, #4
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff fe46 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8002248:	2800      	cmp	r0, #0
 800224a:	d1ed      	bne.n	8002228 <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800224c:	69e3      	ldr	r3, [r4, #28]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8002254:	69e3      	ldr	r3, [r4, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	61e3      	str	r3, [r4, #28]
        hqspi->TxXferCount--;
 800225a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800225c:	3b01      	subs	r3, #1
 800225e:	6263      	str	r3, [r4, #36]	; 0x24
 8002260:	e7d2      	b.n	8002208 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	63e3      	str	r3, [r4, #60]	; 0x3c
 800226a:	e7e0      	b.n	800222e <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 800226c:	2002      	movs	r0, #2
 800226e:	e7de      	b.n	800222e <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 8002270:	2002      	movs	r0, #2
 8002272:	e7df      	b.n	8002234 <HAL_QSPI_Transmit+0x7e>

08002274 <HAL_QSPI_Receive>:
{
 8002274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002278:	4604      	mov	r4, r0
 800227a:	4617      	mov	r7, r2
 800227c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800227e:	f7fe fe7d 	bl	8000f7c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002282:	6825      	ldr	r5, [r4, #0]
 8002284:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8002286:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800228a:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800228c:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800228e:	d052      	beq.n	8002336 <HAL_QSPI_Receive+0xc2>
 8002290:	2301      	movs	r3, #1
 8002292:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002296:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800229a:	b2c0      	uxtb	r0, r0
 800229c:	4298      	cmp	r0, r3
 800229e:	d148      	bne.n	8002332 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(pData != NULL )
 80022a4:	f1b8 0f00 	cmp.w	r8, #0
 80022a8:	d03e      	beq.n	8002328 <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80022aa:	2322      	movs	r3, #34	; 0x22
 80022ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80022b0:	692b      	ldr	r3, [r5, #16]
 80022b2:	3301      	adds	r3, #1
 80022b4:	6323      	str	r3, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80022b6:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80022b8:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80022bc:	3301      	adds	r3, #1
 80022be:	62e3      	str	r3, [r4, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80022c0:	696b      	ldr	r3, [r5, #20]
 80022c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022ca:	616b      	str	r3, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80022cc:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80022ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022d0:	b9b3      	cbnz	r3, 8002300 <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80022d2:	9700      	str	r7, [sp, #0]
 80022d4:	4633      	mov	r3, r6
 80022d6:	2201      	movs	r2, #1
 80022d8:	2102      	movs	r1, #2
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fdfa 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80022e0:	b928      	cbnz	r0, 80022ee <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff ff23 	bl	8002134 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80022f4:	2300      	movs	r3, #0
 80022f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80022fa:	b002      	add	sp, #8
 80022fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002300:	9700      	str	r7, [sp, #0]
 8002302:	4633      	mov	r3, r6
 8002304:	2201      	movs	r2, #1
 8002306:	2106      	movs	r1, #6
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff fde3 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800230e:	2800      	cmp	r0, #0
 8002310:	d1ed      	bne.n	80022ee <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002314:	f895 2020 	ldrb.w	r2, [r5, #32]
 8002318:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800231a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800231c:	3301      	adds	r3, #1
 800231e:	62a3      	str	r3, [r4, #40]	; 0x28
        hqspi->RxXferCount--;
 8002320:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002322:	3b01      	subs	r3, #1
 8002324:	6323      	str	r3, [r4, #48]	; 0x30
 8002326:	e7d2      	b.n	80022ce <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002330:	e7e0      	b.n	80022f4 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 8002332:	2002      	movs	r0, #2
 8002334:	e7de      	b.n	80022f4 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 8002336:	2002      	movs	r0, #2
 8002338:	e7df      	b.n	80022fa <HAL_QSPI_Receive+0x86>
	...

0800233c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800233c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800233e:	4d1e      	ldr	r5, [pc, #120]	; (80023b8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002340:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002342:	00da      	lsls	r2, r3, #3
{
 8002344:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002346:	d518      	bpl.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002348:	f7ff fce4 	bl	8001d14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002350:	d123      	bne.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002352:	2c80      	cmp	r4, #128	; 0x80
 8002354:	d929      	bls.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002356:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002358:	bf8c      	ite	hi
 800235a:	2002      	movhi	r0, #2
 800235c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002360:	6813      	ldr	r3, [r2, #0]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	4303      	orrs	r3, r0
 8002368:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002370:	1a18      	subs	r0, r3, r0
 8002372:	bf18      	it	ne
 8002374:	2001      	movne	r0, #1
 8002376:	b003      	add	sp, #12
 8002378:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	65ab      	str	r3, [r5, #88]	; 0x58
 8002382:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800238c:	f7ff fcc2 	bl	8001d14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002396:	65ab      	str	r3, [r5, #88]	; 0x58
 8002398:	e7d8      	b.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800239a:	2c80      	cmp	r4, #128	; 0x80
 800239c:	d807      	bhi.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800239e:	d008      	beq.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80023a0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80023a4:	4258      	negs	r0, r3
 80023a6:	4158      	adcs	r0, r3
 80023a8:	e7d9      	b.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023aa:	2000      	movs	r0, #0
 80023ac:	e7d7      	b.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80023ae:	2003      	movs	r0, #3
 80023b0:	e7d5      	b.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80023b2:	2002      	movs	r0, #2
 80023b4:	e7d3      	b.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40022000 	.word	0x40022000

080023c0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_GetSysClockFreq+0x8c>)
 80023c2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023c6:	f012 020c 	ands.w	r2, r2, #12
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x18>
 80023cc:	2a0c      	cmp	r2, #12
 80023ce:	d115      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023d4:	2901      	cmp	r1, #1
 80023d6:	d118      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023d8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80023da:	481d      	ldr	r0, [pc, #116]	; (8002450 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023dc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023de:	bf55      	itete	pl
 80023e0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023e6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023ea:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80023ee:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f2:	b34a      	cbz	r2, 8002448 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f4:	2a0c      	cmp	r2, #12
 80023f6:	d009      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x4c>
 80023f8:	2000      	movs	r0, #0
  return sysclockfreq;
 80023fa:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023fc:	2a04      	cmp	r2, #4
 80023fe:	d022      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x86>
 8002400:	2a08      	cmp	r2, #8
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <HAL_RCC_GetSysClockFreq+0x94>)
 8002404:	bf18      	it	ne
 8002406:	2000      	movne	r0, #0
 8002408:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800240a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002412:	2a02      	cmp	r2, #2
 8002414:	d015      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8002416:	490f      	ldr	r1, [pc, #60]	; (8002454 <HAL_RCC_GetSysClockFreq+0x94>)
 8002418:	2a03      	cmp	r2, #3
 800241a:	bf08      	it	eq
 800241c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002420:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002428:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800242c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002430:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002432:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002434:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002436:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002438:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 800243c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002440:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
 8002444:	e7eb      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	08006968 	.word	0x08006968
 8002454:	007a1200 	.word	0x007a1200
 8002458:	00f42400 	.word	0x00f42400

0800245c <HAL_RCC_OscConfig>:
{
 800245c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002460:	4605      	mov	r5, r0
 8002462:	b908      	cbnz	r0, 8002468 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
 8002466:	e047      	b.n	80024f8 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002468:	4ca6      	ldr	r4, [pc, #664]	; (8002704 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800246a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002470:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002476:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800247a:	d573      	bpl.n	8002564 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247c:	b11e      	cbz	r6, 8002486 <HAL_RCC_OscConfig+0x2a>
 800247e:	2e0c      	cmp	r6, #12
 8002480:	d152      	bne.n	8002528 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002482:	2f01      	cmp	r7, #1
 8002484:	d150      	bne.n	8002528 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	0798      	lsls	r0, r3, #30
 800248a:	d502      	bpl.n	8002492 <HAL_RCC_OscConfig+0x36>
 800248c:	69ab      	ldr	r3, [r5, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0e8      	beq.n	8002464 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	6a28      	ldr	r0, [r5, #32]
 8002496:	0719      	lsls	r1, r3, #28
 8002498:	bf56      	itet	pl
 800249a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800249e:	6823      	ldrmi	r3, [r4, #0]
 80024a0:	091b      	lsrpl	r3, r3, #4
 80024a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a6:	4283      	cmp	r3, r0
 80024a8:	d229      	bcs.n	80024fe <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024aa:	f7ff ff47 	bl	800233c <RCC_SetFlashLatencyFromMSIRange>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d1d8      	bne.n	8002464 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	6a2a      	ldr	r2, [r5, #32]
 80024be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c2:	4313      	orrs	r3, r2
 80024c4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c6:	6863      	ldr	r3, [r4, #4]
 80024c8:	69ea      	ldr	r2, [r5, #28]
 80024ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024d2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d4:	f7ff ff74 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 80024d8:	68a3      	ldr	r3, [r4, #8]
 80024da:	4a8b      	ldr	r2, [pc, #556]	; (8002708 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	40d8      	lsrs	r0, r3
 80024e8:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x2b0>)
 80024ea:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80024ec:	4b88      	ldr	r3, [pc, #544]	; (8002710 <HAL_RCC_OscConfig+0x2b4>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	f7fe fcfc 	bl	8000eec <HAL_InitTick>
        if(status != HAL_OK)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d035      	beq.n	8002564 <HAL_RCC_OscConfig+0x108>
}
 80024f8:	b003      	add	sp, #12
 80024fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250c:	4303      	orrs	r3, r0
 800250e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002510:	6863      	ldr	r3, [r4, #4]
 8002512:	69ea      	ldr	r2, [r5, #28]
 8002514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002518:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800251c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800251e:	f7ff ff0d 	bl	800233c <RCC_SetFlashLatencyFromMSIRange>
 8002522:	2800      	cmp	r0, #0
 8002524:	d0d6      	beq.n	80024d4 <HAL_RCC_OscConfig+0x78>
 8002526:	e79d      	b.n	8002464 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002528:	69ab      	ldr	r3, [r5, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d036      	beq.n	800259c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002536:	f7fe fd21 	bl	8000f7c <HAL_GetTick>
 800253a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	079a      	lsls	r2, r3, #30
 8002540:	d524      	bpl.n	800258c <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	6a2a      	ldr	r2, [r5, #32]
 800254e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002552:	4313      	orrs	r3, r2
 8002554:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	69ea      	ldr	r2, [r5, #28]
 800255a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800255e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002562:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	07d8      	lsls	r0, r3, #31
 8002568:	d429      	bmi.n	80025be <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	682b      	ldr	r3, [r5, #0]
 800256c:	0799      	lsls	r1, r3, #30
 800256e:	d467      	bmi.n	8002640 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	0718      	lsls	r0, r3, #28
 8002574:	f100 809c 	bmi.w	80026b0 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	0759      	lsls	r1, r3, #29
 800257c:	f100 80ca 	bmi.w	8002714 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002580:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002582:	2800      	cmp	r0, #0
 8002584:	f040 8133 	bne.w	80027ee <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8002588:	2000      	movs	r0, #0
 800258a:	e7b5      	b.n	80024f8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800258c:	f7fe fcf6 	bl	8000f7c <HAL_GetTick>
 8002590:	eba0 0008 	sub.w	r0, r0, r8
 8002594:	2802      	cmp	r0, #2
 8002596:	d9d1      	bls.n	800253c <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
 800259a:	e7ad      	b.n	80024f8 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025a4:	f7fe fcea 	bl	8000f7c <HAL_GetTick>
 80025a8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	079b      	lsls	r3, r3, #30
 80025ae:	d5d9      	bpl.n	8002564 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b0:	f7fe fce4 	bl	8000f7c <HAL_GetTick>
 80025b4:	eba0 0008 	sub.w	r0, r0, r8
 80025b8:	2802      	cmp	r0, #2
 80025ba:	d9f6      	bls.n	80025aa <HAL_RCC_OscConfig+0x14e>
 80025bc:	e7ec      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025be:	2e08      	cmp	r6, #8
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_OscConfig+0x16e>
 80025c2:	2e0c      	cmp	r6, #12
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025c6:	2f03      	cmp	r7, #3
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	039a      	lsls	r2, r3, #14
 80025ce:	d5cc      	bpl.n	800256a <HAL_RCC_OscConfig+0x10e>
 80025d0:	686b      	ldr	r3, [r5, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1c9      	bne.n	800256a <HAL_RCC_OscConfig+0x10e>
 80025d6:	e745      	b.n	8002464 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d8:	686b      	ldr	r3, [r5, #4]
 80025da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025de:	d110      	bne.n	8002602 <HAL_RCC_OscConfig+0x1a6>
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025e8:	f7fe fcc8 	bl	8000f7c <HAL_GetTick>
 80025ec:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	039b      	lsls	r3, r3, #14
 80025f2:	d4ba      	bmi.n	800256a <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fcc2 	bl	8000f7c <HAL_GetTick>
 80025f8:	eba0 0008 	sub.w	r0, r0, r8
 80025fc:	2864      	cmp	r0, #100	; 0x64
 80025fe:	d9f6      	bls.n	80025ee <HAL_RCC_OscConfig+0x192>
 8002600:	e7ca      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002606:	d104      	bne.n	8002612 <HAL_RCC_OscConfig+0x1b6>
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	e7e6      	b.n	80025e0 <HAL_RCC_OscConfig+0x184>
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002618:	6022      	str	r2, [r4, #0]
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002620:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8002626:	f7fe fca9 	bl	8000f7c <HAL_GetTick>
 800262a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	0398      	lsls	r0, r3, #14
 8002630:	d59b      	bpl.n	800256a <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002632:	f7fe fca3 	bl	8000f7c <HAL_GetTick>
 8002636:	eba0 0008 	sub.w	r0, r0, r8
 800263a:	2864      	cmp	r0, #100	; 0x64
 800263c:	d9f6      	bls.n	800262c <HAL_RCC_OscConfig+0x1d0>
 800263e:	e7ab      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002640:	2e04      	cmp	r6, #4
 8002642:	d003      	beq.n	800264c <HAL_RCC_OscConfig+0x1f0>
 8002644:	2e0c      	cmp	r6, #12
 8002646:	d110      	bne.n	800266a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002648:	2f02      	cmp	r7, #2
 800264a:	d10e      	bne.n	800266a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	0559      	lsls	r1, r3, #21
 8002650:	d503      	bpl.n	800265a <HAL_RCC_OscConfig+0x1fe>
 8002652:	68eb      	ldr	r3, [r5, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f43f af05 	beq.w	8002464 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	692a      	ldr	r2, [r5, #16]
 800265e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002662:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002666:	6063      	str	r3, [r4, #4]
 8002668:	e782      	b.n	8002570 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266a:	68eb      	ldr	r3, [r5, #12]
 800266c:	b17b      	cbz	r3, 800268e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002676:	f7fe fc81 	bl	8000f7c <HAL_GetTick>
 800267a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	055a      	lsls	r2, r3, #21
 8002680:	d4eb      	bmi.n	800265a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe fc7b 	bl	8000f7c <HAL_GetTick>
 8002686:	1bc0      	subs	r0, r0, r7
 8002688:	2802      	cmp	r0, #2
 800268a:	d9f7      	bls.n	800267c <HAL_RCC_OscConfig+0x220>
 800268c:	e784      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002694:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002696:	f7fe fc71 	bl	8000f7c <HAL_GetTick>
 800269a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	f57f af66 	bpl.w	8002570 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe fc6a 	bl	8000f7c <HAL_GetTick>
 80026a8:	1bc0      	subs	r0, r0, r7
 80026aa:	2802      	cmp	r0, #2
 80026ac:	d9f6      	bls.n	800269c <HAL_RCC_OscConfig+0x240>
 80026ae:	e773      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b0:	696b      	ldr	r3, [r5, #20]
 80026b2:	b19b      	cbz	r3, 80026dc <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80026b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026c0:	f7fe fc5c 	bl	8000f7c <HAL_GetTick>
 80026c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026ca:	079a      	lsls	r2, r3, #30
 80026cc:	f53f af54 	bmi.w	8002578 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc54 	bl	8000f7c <HAL_GetTick>
 80026d4:	1bc0      	subs	r0, r0, r7
 80026d6:	2802      	cmp	r0, #2
 80026d8:	d9f5      	bls.n	80026c6 <HAL_RCC_OscConfig+0x26a>
 80026da:	e75d      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 80026dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026e8:	f7fe fc48 	bl	8000f7c <HAL_GetTick>
 80026ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026f2:	079b      	lsls	r3, r3, #30
 80026f4:	f57f af40 	bpl.w	8002578 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fc40 	bl	8000f7c <HAL_GetTick>
 80026fc:	1bc0      	subs	r0, r0, r7
 80026fe:	2802      	cmp	r0, #2
 8002700:	d9f5      	bls.n	80026ee <HAL_RCC_OscConfig+0x292>
 8002702:	e749      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
 8002704:	40021000 	.word	0x40021000
 8002708:	0800694e 	.word	0x0800694e
 800270c:	20000070 	.word	0x20000070
 8002710:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002716:	00d8      	lsls	r0, r3, #3
 8002718:	d429      	bmi.n	800276e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	65a3      	str	r3, [r4, #88]	; 0x58
 8002722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800272c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	4f79      	ldr	r7, [pc, #484]	; (8002918 <HAL_RCC_OscConfig+0x4bc>)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	05d9      	lsls	r1, r3, #23
 8002736:	d51d      	bpl.n	8002774 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	68ab      	ldr	r3, [r5, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d12b      	bne.n	8002796 <HAL_RCC_OscConfig+0x33a>
 800273e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800274a:	f7fe fc17 	bl	8000f7c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002752:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002758:	079b      	lsls	r3, r3, #30
 800275a:	d542      	bpl.n	80027e2 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 800275c:	f1b8 0f00 	cmp.w	r8, #0
 8002760:	f43f af0e 	beq.w	8002580 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	65a3      	str	r3, [r4, #88]	; 0x58
 800276c:	e708      	b.n	8002580 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 800276e:	f04f 0800 	mov.w	r8, #0
 8002772:	e7dd      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800277c:	f7fe fbfe 	bl	8000f7c <HAL_GetTick>
 8002780:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	05da      	lsls	r2, r3, #23
 8002786:	d4d7      	bmi.n	8002738 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fbf8 	bl	8000f7c <HAL_GetTick>
 800278c:	eba0 0009 	sub.w	r0, r0, r9
 8002790:	2802      	cmp	r0, #2
 8002792:	d9f6      	bls.n	8002782 <HAL_RCC_OscConfig+0x326>
 8002794:	e700      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002796:	2b05      	cmp	r3, #5
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x34c>
 800279a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80027a6:	e7ca      	b.n	800273e <HAL_RCC_OscConfig+0x2e2>
 80027a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80027b4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80027b8:	f022 0204 	bic.w	r2, r2, #4
 80027bc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1c2      	bne.n	800274a <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 80027c4:	f7fe fbda 	bl	8000f7c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80027d2:	0798      	lsls	r0, r3, #30
 80027d4:	d5c2      	bpl.n	800275c <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fbd1 	bl	8000f7c <HAL_GetTick>
 80027da:	1bc0      	subs	r0, r0, r7
 80027dc:	4548      	cmp	r0, r9
 80027de:	d9f6      	bls.n	80027ce <HAL_RCC_OscConfig+0x372>
 80027e0:	e6da      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe fbcb 	bl	8000f7c <HAL_GetTick>
 80027e6:	1bc0      	subs	r0, r0, r7
 80027e8:	4548      	cmp	r0, r9
 80027ea:	d9b3      	bls.n	8002754 <HAL_RCC_OscConfig+0x2f8>
 80027ec:	e6d4      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ee:	2e0c      	cmp	r6, #12
 80027f0:	d05c      	beq.n	80028ac <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 80027f2:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fc:	d13b      	bne.n	8002876 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 80027fe:	f7fe fbbd 	bl	8000f7c <HAL_GetTick>
 8002802:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	0199      	lsls	r1, r3, #6
 8002808:	d42f      	bmi.n	800286a <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280a:	68e2      	ldr	r2, [r4, #12]
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x4c0>)
 800280e:	4013      	ands	r3, r2
 8002810:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002812:	4313      	orrs	r3, r2
 8002814:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800281a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800281c:	3a01      	subs	r2, #1
 800281e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002822:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002824:	0912      	lsrs	r2, r2, #4
 8002826:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800282a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800282c:	0852      	lsrs	r2, r2, #1
 800282e:	3a01      	subs	r2, #1
 8002830:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002834:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800283e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002846:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002848:	68e3      	ldr	r3, [r4, #12]
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002850:	f7fe fb94 	bl	8000f7c <HAL_GetTick>
 8002854:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	019a      	lsls	r2, r3, #6
 800285a:	f53f ae95 	bmi.w	8002588 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fb8d 	bl	8000f7c <HAL_GetTick>
 8002862:	1b40      	subs	r0, r0, r5
 8002864:	2802      	cmp	r0, #2
 8002866:	d9f6      	bls.n	8002856 <HAL_RCC_OscConfig+0x3fa>
 8002868:	e696      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fb87 	bl	8000f7c <HAL_GetTick>
 800286e:	1b80      	subs	r0, r0, r6
 8002870:	2802      	cmp	r0, #2
 8002872:	d9c7      	bls.n	8002804 <HAL_RCC_OscConfig+0x3a8>
 8002874:	e690      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800287c:	bf02      	ittt	eq
 800287e:	68e3      	ldreq	r3, [r4, #12]
 8002880:	f023 0303 	biceq.w	r3, r3, #3
 8002884:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002886:	68e3      	ldr	r3, [r4, #12]
 8002888:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002892:	f7fe fb73 	bl	8000f7c <HAL_GetTick>
 8002896:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	019b      	lsls	r3, r3, #6
 800289c:	f57f ae74 	bpl.w	8002588 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fb6c 	bl	8000f7c <HAL_GetTick>
 80028a4:	1b40      	subs	r0, r0, r5
 80028a6:	2802      	cmp	r0, #2
 80028a8:	d9f6      	bls.n	8002898 <HAL_RCC_OscConfig+0x43c>
 80028aa:	e675      	b.n	8002598 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	2801      	cmp	r0, #1
 80028ae:	f43f ae23 	beq.w	80024f8 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 80028b2:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80028b6:	f003 0103 	and.w	r1, r3, #3
 80028ba:	4291      	cmp	r1, r2
 80028bc:	f47f add2 	bne.w	8002464 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028c6:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80028cc:	f47f adca 	bne.w	8002464 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80028d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028da:	f47f adc3 	bne.w	8002464 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028de:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80028e0:	3a07      	subs	r2, #7
 80028e2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80028e6:	bf18      	it	ne
 80028e8:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ea:	4291      	cmp	r1, r2
 80028ec:	f47f adba 	bne.w	8002464 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80028f2:	0852      	lsrs	r2, r2, #1
 80028f4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80028f8:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028fa:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80028fe:	f47f adb1 	bne.w	8002464 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002902:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002904:	0852      	lsrs	r2, r2, #1
 8002906:	3a01      	subs	r2, #1
 8002908:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8002910:	bf14      	ite	ne
 8002912:	2001      	movne	r0, #1
 8002914:	2000      	moveq	r0, #0
 8002916:	e5ef      	b.n	80024f8 <HAL_RCC_OscConfig+0x9c>
 8002918:	40007000 	.word	0x40007000
 800291c:	f99d808c 	.word	0xf99d808c

08002920 <HAL_RCC_ClockConfig>:
{
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002926:	4604      	mov	r4, r0
 8002928:	b910      	cbnz	r0, 8002930 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800292a:	2001      	movs	r0, #1
 800292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <HAL_RCC_ClockConfig+0x118>)
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	428b      	cmp	r3, r1
 800293a:	d32a      	bcc.n	8002992 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	07d9      	lsls	r1, r3, #31
 8002940:	d432      	bmi.n	80029a8 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002942:	6821      	ldr	r1, [r4, #0]
 8002944:	078a      	lsls	r2, r1, #30
 8002946:	d45c      	bmi.n	8002a02 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <HAL_RCC_ClockConfig+0x118>)
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	429e      	cmp	r6, r3
 8002952:	d35e      	bcc.n	8002a12 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	f011 0f04 	tst.w	r1, #4
 8002958:	4d38      	ldr	r5, [pc, #224]	; (8002a3c <HAL_RCC_ClockConfig+0x11c>)
 800295a:	d165      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	070b      	lsls	r3, r1, #28
 800295e:	d506      	bpl.n	800296e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002960:	68ab      	ldr	r3, [r5, #8]
 8002962:	6922      	ldr	r2, [r4, #16]
 8002964:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002968:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800296c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800296e:	f7ff fd27 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002972:	68ab      	ldr	r3, [r5, #8]
 8002974:	4a32      	ldr	r2, [pc, #200]	; (8002a40 <HAL_RCC_ClockConfig+0x120>)
 8002976:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800297a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	40d8      	lsrs	r0, r3
 8002986:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <HAL_RCC_ClockConfig+0x124>)
 8002988:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_ClockConfig+0x128>)
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	f7fe baad 	b.w	8000eec <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	6813      	ldr	r3, [r2, #0]
 8002994:	f023 0307 	bic.w	r3, r3, #7
 8002998:	430b      	orrs	r3, r1
 800299a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d1c1      	bne.n	800292a <HAL_RCC_ClockConfig+0xa>
 80029a6:	e7c9      	b.n	800293c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a8:	6862      	ldr	r2, [r4, #4]
 80029aa:	4d24      	ldr	r5, [pc, #144]	; (8002a3c <HAL_RCC_ClockConfig+0x11c>)
 80029ac:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b0:	d11b      	bne.n	80029ea <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b6:	d0b8      	beq.n	800292a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b8:	68ab      	ldr	r3, [r5, #8]
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	4313      	orrs	r3, r2
 80029c0:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80029c2:	f7fe fadb 	bl	8000f7c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029ca:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029cc:	68ab      	ldr	r3, [r5, #8]
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029d8:	d0b3      	beq.n	8002942 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029da:	f7fe facf 	bl	8000f7c <HAL_GetTick>
 80029de:	1bc0      	subs	r0, r0, r7
 80029e0:	4540      	cmp	r0, r8
 80029e2:	d9f3      	bls.n	80029cc <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80029e4:	2003      	movs	r0, #3
}
 80029e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	2a02      	cmp	r2, #2
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029f2:	e7e0      	b.n	80029b6 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029f4:	b912      	cbnz	r2, 80029fc <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f6:	f013 0f02 	tst.w	r3, #2
 80029fa:	e7dc      	b.n	80029b6 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a00:	e7d9      	b.n	80029b6 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <HAL_RCC_ClockConfig+0x11c>)
 8002a04:	68a0      	ldr	r0, [r4, #8]
 8002a06:	6893      	ldr	r3, [r2, #8]
 8002a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0c:	4303      	orrs	r3, r0
 8002a0e:	6093      	str	r3, [r2, #8]
 8002a10:	e79a      	b.n	8002948 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	4333      	orrs	r3, r6
 8002a1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1c:	6813      	ldr	r3, [r2, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	429e      	cmp	r6, r3
 8002a24:	d181      	bne.n	800292a <HAL_RCC_ClockConfig+0xa>
 8002a26:	e795      	b.n	8002954 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	68ab      	ldr	r3, [r5, #8]
 8002a2a:	68e2      	ldr	r2, [r4, #12]
 8002a2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60ab      	str	r3, [r5, #8]
 8002a34:	e792      	b.n	800295c <HAL_RCC_ClockConfig+0x3c>
 8002a36:	bf00      	nop
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	0800694e 	.word	0x0800694e
 8002a44:	20000070 	.word	0x20000070
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a4e:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a5a:	6810      	ldr	r0, [r2, #0]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
}
 8002a60:	40d8      	lsrs	r0, r3
 8002a62:	4770      	bx	lr
 8002a64:	40021000 	.word	0x40021000
 8002a68:	0800695e 	.word	0x0800695e
 8002a6c:	20000070 	.word	0x20000070

08002a70 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7e:	6810      	ldr	r0, [r2, #0]
 8002a80:	f003 031f 	and.w	r3, r3, #31
}
 8002a84:	40d8      	lsrs	r0, r3
 8002a86:	4770      	bx	lr
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	0800695e 	.word	0x0800695e
 8002a90:	20000070 	.word	0x20000070

08002a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a96:	4b45      	ldr	r3, [pc, #276]	; (8002bac <RCCEx_PLLSAI1_Config+0x118>)
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	f012 0f03 	tst.w	r2, #3
{
 8002a9e:	4605      	mov	r5, r0
 8002aa0:	460e      	mov	r6, r1
 8002aa2:	461c      	mov	r4, r3
 8002aa4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa6:	d02a      	beq.n	8002afe <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	4282      	cmp	r2, r0
 8002ab0:	d13c      	bne.n	8002b2c <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002ab2:	2a00      	cmp	r2, #0
 8002ab4:	d03a      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ab6:	68db      	ldr	r3, [r3, #12]
       ||
 8002ab8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002abe:	3301      	adds	r3, #1
       ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d133      	bne.n	8002b2c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002acc:	f7fe fa56 	bl	8000f7c <HAL_GetTick>
 8002ad0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	011a      	lsls	r2, r3, #4
 8002ad6:	d432      	bmi.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
 8002ad8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ada:	2e00      	cmp	r6, #0
 8002adc:	d036      	beq.n	8002b4c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ade:	2e01      	cmp	r6, #1
 8002ae0:	d150      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae2:	6922      	ldr	r2, [r4, #16]
 8002ae4:	6928      	ldr	r0, [r5, #16]
 8002ae6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002aea:	0840      	lsrs	r0, r0, #1
 8002aec:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002af0:	3801      	subs	r0, #1
 8002af2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002af6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002afa:	6122      	str	r2, [r4, #16]
 8002afc:	e032      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002afe:	2802      	cmp	r0, #2
 8002b00:	d010      	beq.n	8002b24 <RCCEx_PLLSAI1_Config+0x90>
 8002b02:	2803      	cmp	r0, #3
 8002b04:	d014      	beq.n	8002b30 <RCCEx_PLLSAI1_Config+0x9c>
 8002b06:	2801      	cmp	r0, #1
 8002b08:	d110      	bne.n	8002b2c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	079f      	lsls	r7, r3, #30
 8002b0e:	d538      	bpl.n	8002b82 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b10:	68e3      	ldr	r3, [r4, #12]
 8002b12:	686a      	ldr	r2, [r5, #4]
 8002b14:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	4318      	orrs	r0, r3
 8002b1c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002b20:	60e0      	str	r0, [r4, #12]
 8002b22:	e7cf      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2a:	d1f1      	bne.n	8002b10 <RCCEx_PLLSAI1_Config+0x7c>
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	0391      	lsls	r1, r2, #14
 8002b34:	d4ec      	bmi.n	8002b10 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002b3c:	e7f5      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b3e:	f7fe fa1d 	bl	8000f7c <HAL_GetTick>
 8002b42:	1bc0      	subs	r0, r0, r7
 8002b44:	2802      	cmp	r0, #2
 8002b46:	d9c4      	bls.n	8002ad2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002b48:	2003      	movs	r0, #3
 8002b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b4c:	6921      	ldr	r1, [r4, #16]
 8002b4e:	68eb      	ldr	r3, [r5, #12]
 8002b50:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002b54:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002b58:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002b62:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fa06 	bl	8000f7c <HAL_GetTick>
 8002b70:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	d513      	bpl.n	8002ba0 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b78:	6923      	ldr	r3, [r4, #16]
 8002b7a:	69aa      	ldr	r2, [r5, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6123      	str	r3, [r4, #16]
 8002b80:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b84:	6923      	ldr	r3, [r4, #16]
 8002b86:	6968      	ldr	r0, [r5, #20]
 8002b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b8c:	0840      	lsrs	r0, r0, #1
 8002b8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b92:	3801      	subs	r0, #1
 8002b94:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002b98:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002b9c:	6123      	str	r3, [r4, #16]
 8002b9e:	e7e1      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba0:	f7fe f9ec 	bl	8000f7c <HAL_GetTick>
 8002ba4:	1b80      	subs	r0, r0, r6
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	d9e3      	bls.n	8002b72 <RCCEx_PLLSAI1_Config+0xde>
 8002baa:	e7cd      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
 8002bac:	40021000 	.word	0x40021000

08002bb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <RCCEx_PLLSAI2_Config+0xf8>)
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	f012 0f03 	tst.w	r2, #3
{
 8002bba:	4605      	mov	r5, r0
 8002bbc:	460e      	mov	r6, r1
 8002bbe:	461c      	mov	r4, r3
 8002bc0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bc2:	d028      	beq.n	8002c16 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	f002 0203 	and.w	r2, r2, #3
 8002bca:	4282      	cmp	r2, r0
 8002bcc:	d13a      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002bce:	2a00      	cmp	r2, #0
 8002bd0:	d038      	beq.n	8002c44 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bd2:	68db      	ldr	r3, [r3, #12]
       ||
 8002bd4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bd6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002bda:	3301      	adds	r3, #1
       ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d131      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f9c8 	bl	8000f7c <HAL_GetTick>
 8002bec:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	009a      	lsls	r2, r3, #2
 8002bf2:	d430      	bmi.n	8002c56 <RCCEx_PLLSAI2_Config+0xa6>
 8002bf4:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bf6:	2e00      	cmp	r6, #0
 8002bf8:	d034      	beq.n	8002c64 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bfa:	6963      	ldr	r3, [r4, #20]
 8002bfc:	6929      	ldr	r1, [r5, #16]
 8002bfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c02:	0849      	lsrs	r1, r1, #1
 8002c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c08:	3901      	subs	r1, #1
 8002c0a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c0e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002c12:	6163      	str	r3, [r4, #20]
 8002c14:	e032      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002c16:	2802      	cmp	r0, #2
 8002c18:	d010      	beq.n	8002c3c <RCCEx_PLLSAI2_Config+0x8c>
 8002c1a:	2803      	cmp	r0, #3
 8002c1c:	d014      	beq.n	8002c48 <RCCEx_PLLSAI2_Config+0x98>
 8002c1e:	2801      	cmp	r0, #1
 8002c20:	d110      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	079f      	lsls	r7, r3, #30
 8002c26:	d538      	bpl.n	8002c9a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c28:	68e3      	ldr	r3, [r4, #12]
 8002c2a:	686a      	ldr	r2, [r5, #4]
 8002c2c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002c30:	3a01      	subs	r2, #1
 8002c32:	4318      	orrs	r0, r3
 8002c34:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002c38:	60e0      	str	r0, [r4, #12]
 8002c3a:	e7d1      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c42:	d1f1      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0x78>
 8002c44:	2001      	movs	r0, #1
 8002c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	0391      	lsls	r1, r2, #14
 8002c4c:	d4ec      	bmi.n	8002c28 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002c54:	e7f5      	b.n	8002c42 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c56:	f7fe f991 	bl	8000f7c <HAL_GetTick>
 8002c5a:	1bc0      	subs	r0, r0, r7
 8002c5c:	2802      	cmp	r0, #2
 8002c5e:	d9c6      	bls.n	8002bee <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002c60:	2003      	movs	r0, #3
 8002c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c64:	6962      	ldr	r2, [r4, #20]
 8002c66:	68eb      	ldr	r3, [r5, #12]
 8002c68:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002c6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c70:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002c7a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe f97a 	bl	8000f7c <HAL_GetTick>
 8002c88:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	d505      	bpl.n	8002c9c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c90:	6963      	ldr	r3, [r4, #20]
 8002c92:	696a      	ldr	r2, [r5, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	6163      	str	r3, [r4, #20]
 8002c98:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c9c:	f7fe f96e 	bl	8000f7c <HAL_GetTick>
 8002ca0:	1b80      	subs	r0, r0, r6
 8002ca2:	2802      	cmp	r0, #2
 8002ca4:	d9f1      	bls.n	8002c8a <RCCEx_PLLSAI2_Config+0xda>
 8002ca6:	e7db      	b.n	8002c60 <RCCEx_PLLSAI2_Config+0xb0>
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_RCCEx_PeriphCLKConfig>:
{
 8002cac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cb0:	6806      	ldr	r6, [r0, #0]
 8002cb2:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002cb6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cb8:	d024      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002cba:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002cbc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002cc0:	d02c      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002cc2:	d802      	bhi.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cc4:	b1c1      	cbz	r1, 8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002cc6:	2601      	movs	r6, #1
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002cca:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002cce:	d00d      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002cd0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002cd4:	d1f7      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd6:	4a4d      	ldr	r2, [pc, #308]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002cda:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ce8:	2600      	movs	r6, #0
 8002cea:	e00b      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	68d3      	ldr	r3, [r2, #12]
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	60d3      	str	r3, [r2, #12]
      break;
 8002cf6:	e7ee      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf8:	3004      	adds	r0, #4
 8002cfa:	f7ff fecb 	bl	8002a94 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cfe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d0e8      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	04d8      	lsls	r0, r3, #19
 8002d08:	d506      	bpl.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d0a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d0c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002d10:	d074      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002d12:	d808      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d14:	b1a9      	cbz	r1, 8002d42 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002d16:	2601      	movs	r6, #1
 8002d18:	4635      	mov	r5, r6
 8002d1a:	e021      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	3020      	adds	r0, #32
 8002d20:	f7ff ff46 	bl	8002bb0 <RCCEx_PLLSAI2_Config>
 8002d24:	e7eb      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d26:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002d2a:	d004      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002d2c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002d30:	d1f1      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d32:	4635      	mov	r5, r6
 8002d34:	e009      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d36:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	68d3      	ldr	r3, [r2, #12]
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	60d3      	str	r3, [r2, #12]
 8002d40:	e7f7      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d42:	1d20      	adds	r0, r4, #4
 8002d44:	f7ff fea6 	bl	8002a94 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d48:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d4a:	2d00      	cmp	r5, #0
 8002d4c:	d15c      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d4e:	4a2f      	ldr	r2, [pc, #188]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d50:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d56:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	0399      	lsls	r1, r3, #14
 8002d64:	f140 814f 	bpl.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d68:	4f28      	ldr	r7, [pc, #160]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d6c:	00da      	lsls	r2, r3, #3
 8002d6e:	f140 8176 	bpl.w	800305e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d76:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002e10 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002d7a:	f8d9 3000 	ldr.w	r3, [r9]
 8002d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d82:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002d86:	f7fe f8f9 	bl	8000f7c <HAL_GetTick>
 8002d8a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d8c:	f8d9 3000 	ldr.w	r3, [r9]
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	d53f      	bpl.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002d94:	2d00      	cmp	r5, #0
 8002d96:	d144      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d9c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002da0:	d015      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002da2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d011      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002db2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002db6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dce:	07d8      	lsls	r0, r3, #31
 8002dd0:	d509      	bpl.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002dd2:	f7fe f8d3 	bl	8000f7c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002dda:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002de0:	0799      	lsls	r1, r3, #30
 8002de2:	f140 8109 	bpl.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002df8:	4635      	mov	r5, r6
 8002dfa:	e012      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f104 0020 	add.w	r0, r4, #32
 8002e02:	f7ff fed5 	bl	8002bb0 <RCCEx_PLLSAI2_Config>
 8002e06:	e79f      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002e08:	462e      	mov	r6, r5
 8002e0a:	e7a9      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe f8b2 	bl	8000f7c <HAL_GetTick>
 8002e18:	eba0 000a 	sub.w	r0, r0, sl
 8002e1c:	2802      	cmp	r0, #2
 8002e1e:	d9b5      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002e20:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002e22:	f1b8 0f00 	cmp.w	r8, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	d508      	bpl.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e36:	4990      	ldr	r1, [pc, #576]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e3e:	f022 0203 	bic.w	r2, r2, #3
 8002e42:	4302      	orrs	r2, r0
 8002e44:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e48:	079f      	lsls	r7, r3, #30
 8002e4a:	d508      	bpl.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e4c:	498a      	ldr	r1, [pc, #552]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e54:	f022 020c 	bic.w	r2, r2, #12
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5e:	075e      	lsls	r6, r3, #29
 8002e60:	d508      	bpl.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e62:	4985      	ldr	r1, [pc, #532]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e64:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002e66:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e6a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002e6e:	4302      	orrs	r2, r0
 8002e70:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e74:	0718      	lsls	r0, r3, #28
 8002e76:	d508      	bpl.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e78:	497f      	ldr	r1, [pc, #508]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002e7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e80:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e84:	4302      	orrs	r2, r0
 8002e86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e8a:	06d9      	lsls	r1, r3, #27
 8002e8c:	d508      	bpl.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8e:	497a      	ldr	r1, [pc, #488]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002e92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e9a:	4302      	orrs	r2, r0
 8002e9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea0:	069a      	lsls	r2, r3, #26
 8002ea2:	d508      	bpl.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea4:	4974      	ldr	r1, [pc, #464]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ea6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ea8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002eac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002eb0:	4302      	orrs	r2, r0
 8002eb2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb6:	059f      	lsls	r7, r3, #22
 8002eb8:	d508      	bpl.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eba:	496f      	ldr	r1, [pc, #444]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ebc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002ebe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ec2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ecc:	055e      	lsls	r6, r3, #21
 8002ece:	d508      	bpl.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ed0:	4969      	ldr	r1, [pc, #420]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ed2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002ed4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ed8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002edc:	4302      	orrs	r2, r0
 8002ede:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	0658      	lsls	r0, r3, #25
 8002ee4:	d508      	bpl.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee6:	4964      	ldr	r1, [pc, #400]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ee8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002eea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002eee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ef2:	4302      	orrs	r2, r0
 8002ef4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef8:	0619      	lsls	r1, r3, #24
 8002efa:	d508      	bpl.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efc:	495e      	ldr	r1, [pc, #376]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f04:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002f08:	4302      	orrs	r2, r0
 8002f0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f0e:	05da      	lsls	r2, r3, #23
 8002f10:	d508      	bpl.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f12:	4959      	ldr	r1, [pc, #356]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f1a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002f1e:	4302      	orrs	r2, r0
 8002f20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f24:	049b      	lsls	r3, r3, #18
 8002f26:	d50f      	bpl.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f28:	4a53      	ldr	r2, [pc, #332]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f2a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002f2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f30:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f34:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f3e:	d164      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f40:	68d3      	ldr	r3, [r2, #12]
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f46:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	031f      	lsls	r7, r3, #12
 8002f4c:	d50f      	bpl.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4e:	4a4a      	ldr	r2, [pc, #296]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f50:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002f52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f56:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f5a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f64:	d15c      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f66:	68d3      	ldr	r3, [r2, #12]
 8002f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	035e      	lsls	r6, r3, #13
 8002f72:	d50f      	bpl.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f74:	4a40      	ldr	r2, [pc, #256]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f76:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002f78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f7c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f80:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f82:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f8a:	d154      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8c:	68d3      	ldr	r3, [r2, #12]
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	0458      	lsls	r0, r3, #17
 8002f98:	d512      	bpl.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f9a:	4937      	ldr	r1, [pc, #220]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f9c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002f9e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002fa2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002fa6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fa8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fb0:	d14c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	1d20      	adds	r0, r4, #4
 8002fb6:	f7ff fd6d 	bl	8002a94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	bf18      	it	ne
 8002fbe:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	0411      	lsls	r1, r2, #16
 8002fc4:	d508      	bpl.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fc6:	492c      	ldr	r1, [pc, #176]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fc8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002fca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd2:	4303      	orrs	r3, r0
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fd8:	03d3      	lsls	r3, r2, #15
 8002fda:	d509      	bpl.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fdc:	4a26      	ldr	r2, [pc, #152]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fde:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002fe2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fea:	430b      	orrs	r3, r1
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	b002      	add	sp, #8
 8002ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fd ffc0 	bl	8000f7c <HAL_GetTick>
 8002ffc:	1b40      	subs	r0, r0, r5
 8002ffe:	4548      	cmp	r0, r9
 8003000:	f67f aeec 	bls.w	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003004:	e70c      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003006:	4635      	mov	r5, r6
 8003008:	e712      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800300a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800300e:	d19b      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003010:	2101      	movs	r1, #1
 8003012:	1d20      	adds	r0, r4, #4
 8003014:	f7ff fd3e 	bl	8002a94 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003018:	2800      	cmp	r0, #0
 800301a:	bf18      	it	ne
 800301c:	4605      	movne	r5, r0
 800301e:	e793      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003020:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003024:	d1a3      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003026:	2101      	movs	r1, #1
 8003028:	1d20      	adds	r0, r4, #4
 800302a:	f7ff fd33 	bl	8002a94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800302e:	2800      	cmp	r0, #0
 8003030:	bf18      	it	ne
 8003032:	4605      	movne	r5, r0
 8003034:	e79b      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003036:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800303a:	d1ab      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800303c:	2101      	movs	r1, #1
 800303e:	1d20      	adds	r0, r4, #4
 8003040:	f7ff fd28 	bl	8002a94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003044:	2800      	cmp	r0, #0
 8003046:	bf18      	it	ne
 8003048:	4605      	movne	r5, r0
 800304a:	e7a3      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800304c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003050:	d1b6      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003052:	2102      	movs	r1, #2
 8003054:	f104 0020 	add.w	r0, r4, #32
 8003058:	f7ff fdaa 	bl	8002bb0 <RCCEx_PLLSAI2_Config>
 800305c:	e7ad      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	65bb      	str	r3, [r7, #88]	; 0x58
 8003066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003070:	f04f 0801 	mov.w	r8, #1
 8003074:	e67f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800307c:	6802      	ldr	r2, [r0, #0]
{
 800307e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003080:	68d3      	ldr	r3, [r2, #12]
 8003082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003086:	60d3      	str	r3, [r2, #12]
{
 8003088:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 800308a:	f7fd ff77 	bl	8000f7c <HAL_GetTick>
 800308e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	d501      	bpl.n	800309c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003098:	2000      	movs	r0, #0
 800309a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800309c:	f7fd ff6e 	bl	8000f7c <HAL_GetTick>
 80030a0:	1b40      	subs	r0, r0, r5
 80030a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030a6:	d9f3      	bls.n	8003090 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80030a8:	2003      	movs	r0, #3
}
 80030aa:	bd38      	pop	{r3, r4, r5, pc}

080030ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	68dc      	ldr	r4, [r3, #12]
 80030b2:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 80030b6:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030b8:	d118      	bne.n	80030ec <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295
 80030be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80030c0:	f7fd ff5c 	bl	8000f7c <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030c4:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80030c6:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	065b      	lsls	r3, r3, #25
 80030ce:	d401      	bmi.n	80030d4 <RTC_EnterInitMode+0x28>
 80030d0:	2c03      	cmp	r4, #3
 80030d2:	d101      	bne.n	80030d8 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 80030d4:	4620      	mov	r0, r4
 80030d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80030d8:	f7fd ff50 	bl	8000f7c <HAL_GetTick>
 80030dc:	1b80      	subs	r0, r0, r6
 80030de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030e2:	bf84      	itt	hi
 80030e4:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80030e8:	2403      	movhi	r4, #3
 80030ea:	e7ed      	b.n	80030c8 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2400      	movs	r4, #0
 80030ee:	e7f1      	b.n	80030d4 <RTC_EnterInitMode+0x28>

080030f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030f0:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80030f2:	4c0f      	ldr	r4, [pc, #60]	; (8003130 <RTC_ExitInitMode+0x40>)
 80030f4:	68e3      	ldr	r3, [r4, #12]
 80030f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030fa:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80030fc:	68a3      	ldr	r3, [r4, #8]
 80030fe:	069b      	lsls	r3, r3, #26
{
 8003100:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003102:	d406      	bmi.n	8003112 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003104:	f7ff ffba 	bl	800307c <HAL_RTC_WaitForSynchro>
 8003108:	b188      	cbz	r0, 800312e <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800310a:	2003      	movs	r0, #3
 800310c:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8003110:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003112:	68a3      	ldr	r3, [r4, #8]
 8003114:	f023 0320 	bic.w	r3, r3, #32
 8003118:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800311a:	f7ff ffaf 	bl	800307c <HAL_RTC_WaitForSynchro>
 800311e:	b110      	cbz	r0, 8003126 <RTC_ExitInitMode+0x36>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003120:	2003      	movs	r0, #3
 8003122:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003126:	68a3      	ldr	r3, [r4, #8]
 8003128:	f043 0320 	orr.w	r3, r3, #32
 800312c:	60a3      	str	r3, [r4, #8]
  }

  return status;
}
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	40002800 	.word	0x40002800

08003134 <HAL_RTC_Init>:
{
 8003134:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8003136:	4604      	mov	r4, r0
 8003138:	2800      	cmp	r0, #0
 800313a:	d040      	beq.n	80031be <HAL_RTC_Init+0x8a>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800313c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003140:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003144:	b91b      	cbnz	r3, 800314e <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8003146:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800314a:	f001 f9e9 	bl	8004520 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	22ca      	movs	r2, #202	; 0xca
 8003158:	625a      	str	r2, [r3, #36]	; 0x24
 800315a:	2253      	movs	r2, #83	; 0x53
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff ffa4 	bl	80030ac <RTC_EnterInitMode>
    if (status == HAL_OK)
 8003164:	2800      	cmp	r0, #0
 8003166:	d12b      	bne.n	80031c0 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003168:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800316a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8003172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003176:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003178:	6862      	ldr	r2, [r4, #4]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	4302      	orrs	r2, r0
 800317e:	69a0      	ldr	r0, [r4, #24]
 8003180:	4302      	orrs	r2, r0
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003186:	68e2      	ldr	r2, [r4, #12]
 8003188:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68a1      	ldr	r1, [r4, #8]
 800318e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003192:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff ffab 	bl	80030f0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800319a:	b988      	cbnz	r0, 80031c0 <HAL_RTC_Init+0x8c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800319c:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800319e:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80031a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a2:	f022 0203 	bic.w	r2, r2, #3
 80031a6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80031a8:	69e2      	ldr	r2, [r4, #28]
 80031aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80031ac:	432a      	orrs	r2, r5
 80031ae:	430a      	orrs	r2, r1
 80031b0:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b2:	22ff      	movs	r2, #255	; 0xff
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80031bc:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80031be:	2001      	movs	r0, #1
}
 80031c0:	bd38      	pop	{r3, r4, r5, pc}

080031c2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80031c2:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 80031c4:	2809      	cmp	r0, #9
 80031c6:	d803      	bhi.n	80031d0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80031c8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80031cc:	b2c0      	uxtb	r0, r0
 80031ce:	4770      	bx	lr
    temp -= 10U;
 80031d0:	380a      	subs	r0, #10
    bcdhigh++;
 80031d2:	3301      	adds	r3, #1
    temp -= 10U;
 80031d4:	b2c0      	uxtb	r0, r0
 80031d6:	e7f5      	b.n	80031c4 <RTC_ByteToBcd2+0x2>

080031d8 <HAL_RTC_SetTime>:
{
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80031da:	f890 3020 	ldrb.w	r3, [r0, #32]
 80031de:	2b01      	cmp	r3, #1
{
 80031e0:	4605      	mov	r5, r0
 80031e2:	460e      	mov	r6, r1
 80031e4:	4617      	mov	r7, r2
 80031e6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 80031ea:	d052      	beq.n	8003292 <HAL_RTC_SetTime+0xba>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 80031f0:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 80031f4:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f8:	22ca      	movs	r2, #202	; 0xca
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
 80031fc:	2253      	movs	r2, #83	; 0x53
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003200:	f7ff ff54 	bl	80030ac <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003204:	bb68      	cbnz	r0, 8003262 <HAL_RTC_SetTime+0x8a>
 8003206:	682b      	ldr	r3, [r5, #0]
 8003208:	7830      	ldrb	r0, [r6, #0]
 800320a:	7874      	ldrb	r4, [r6, #1]
 800320c:	78b1      	ldrb	r1, [r6, #2]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800320e:	689b      	ldr	r3, [r3, #8]
    if (Format == RTC_FORMAT_BIN)
 8003210:	bb97      	cbnz	r7, 8003278 <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003212:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 8003216:	bf08      	it	eq
 8003218:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800321a:	f7ff ffd2 	bl	80031c2 <RTC_ByteToBcd2>
 800321e:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff ffce 	bl	80031c2 <RTC_ByteToBcd2>
 8003226:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003228:	4608      	mov	r0, r1
 800322a:	f7ff ffca 	bl	80031c2 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800322e:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003230:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8003234:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003238:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8003242:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8003246:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003248:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800324a:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800324c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003250:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003252:	68f2      	ldr	r2, [r6, #12]
 8003254:	6899      	ldr	r1, [r3, #8]
 8003256:	4302      	orrs	r2, r0
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 800325c:	4628      	mov	r0, r5
 800325e:	f7ff ff47 	bl	80030f0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8003268:	b910      	cbnz	r0, 8003270 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 800326a:	2301      	movs	r3, #1
 800326c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8003270:	2300      	movs	r3, #0
 8003272:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8003276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003278:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800327c:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8003280:	bf08      	it	eq
 8003282:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003284:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003288:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800328a:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800328c:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8003290:	e7d4      	b.n	800323c <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8003292:	4618      	mov	r0, r3
}
 8003294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003296 <HAL_RTC_SetDate>:
{
 8003296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003298:	f890 3020 	ldrb.w	r3, [r0, #32]
 800329c:	2b01      	cmp	r3, #1
{
 800329e:	4605      	mov	r5, r0
 80032a0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80032a4:	d043      	beq.n	800332e <HAL_RTC_SetDate+0x98>
 80032a6:	2301      	movs	r3, #1
 80032a8:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ac:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 80032b0:	784b      	ldrb	r3, [r1, #1]
 80032b2:	78c8      	ldrb	r0, [r1, #3]
 80032b4:	788e      	ldrb	r6, [r1, #2]
 80032b6:	780c      	ldrb	r4, [r1, #0]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032b8:	bb92      	cbnz	r2, 8003320 <HAL_RTC_SetDate+0x8a>
 80032ba:	06da      	lsls	r2, r3, #27
 80032bc:	d503      	bpl.n	80032c6 <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032be:	f023 0310 	bic.w	r3, r3, #16
 80032c2:	330a      	adds	r3, #10
 80032c4:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032c6:	f7ff ff7c 	bl	80031c2 <RTC_ByteToBcd2>
 80032ca:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032cc:	7848      	ldrb	r0, [r1, #1]
 80032ce:	f7ff ff78 	bl	80031c2 <RTC_ByteToBcd2>
 80032d2:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80032d4:	4630      	mov	r0, r6
 80032d6:	f7ff ff74 	bl	80031c2 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032da:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80032de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80032e2:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e6:	682b      	ldr	r3, [r5, #0]
 80032e8:	22ca      	movs	r2, #202	; 0xca
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
 80032ec:	2253      	movs	r2, #83	; 0x53
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80032f0:	4628      	mov	r0, r5
 80032f2:	f7ff fedb 	bl	80030ac <RTC_EnterInitMode>
  if (status == HAL_OK)
 80032f6:	b940      	cbnz	r0, 800330a <HAL_RTC_SetDate+0x74>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80032fe:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003302:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff fef3 	bl	80030f0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8003310:	b910      	cbnz	r0, 8003318 <HAL_RTC_SetDate+0x82>
    hrtc->State = HAL_RTC_STATE_READY ;
 8003312:	2301      	movs	r3, #1
 8003314:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8003318:	2300      	movs	r3, #0
 800331a:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 800331e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003320:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003322:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003326:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003328:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800332c:	e7db      	b.n	80032e6 <HAL_RTC_SetDate+0x50>
}
 800332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003330 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003330:	0903      	lsrs	r3, r0, #4
 8003332:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 8003336:	f000 000f 	and.w	r0, r0, #15
 800333a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800333e:	b2c0      	uxtb	r0, r0
 8003340:	4770      	bx	lr

08003342 <HAL_RTC_GetTime>:
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003342:	6800      	ldr	r0, [r0, #0]
{
 8003344:	b538      	push	{r3, r4, r5, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003346:	6903      	ldr	r3, [r0, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003348:	6804      	ldr	r4, [r0, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800334a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800334e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003350:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 8003354:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003358:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800335c:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003360:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003364:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003366:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003368:	704d      	strb	r5, [r1, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800336a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800336c:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800336e:	b952      	cbnz	r2, 8003386 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003370:	f7ff ffde 	bl	8003330 <RTC_Bcd2ToByte>
 8003374:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003376:	4628      	mov	r0, r5
 8003378:	f7ff ffda 	bl	8003330 <RTC_Bcd2ToByte>
 800337c:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff ffd6 	bl	8003330 <RTC_Bcd2ToByte>
 8003384:	7088      	strb	r0, [r1, #2]
}
 8003386:	2000      	movs	r0, #0
 8003388:	bd38      	pop	{r3, r4, r5, pc}

0800338a <HAL_RTC_GetDate>:
{
 800338a:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800338c:	6803      	ldr	r3, [r0, #0]
 800338e:	685c      	ldr	r4, [r3, #4]
 8003390:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8003394:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003398:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800339a:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800339e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80033a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033a6:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033a8:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80033aa:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80033ac:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80033ae:	b952      	cbnz	r2, 80033c6 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033b0:	f7ff ffbe 	bl	8003330 <RTC_Bcd2ToByte>
 80033b4:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033b6:	4628      	mov	r0, r5
 80033b8:	f7ff ffba 	bl	8003330 <RTC_Bcd2ToByte>
 80033bc:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff ffb6 	bl	8003330 <RTC_Bcd2ToByte>
 80033c4:	7088      	strb	r0, [r1, #2]
}
 80033c6:	2000      	movs	r0, #0
 80033c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080033cc <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80033cc:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ce:	69c1      	ldr	r1, [r0, #28]
{
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033d4:	6883      	ldr	r3, [r0, #8]
 80033d6:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033d8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033da:	4303      	orrs	r3, r0
 80033dc:	6960      	ldr	r0, [r4, #20]
 80033de:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e0:	48ba      	ldr	r0, [pc, #744]	; (80036cc <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e4:	4028      	ands	r0, r5
 80033e6:	4303      	orrs	r3, r0
 80033e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ea:	6853      	ldr	r3, [r2, #4]
 80033ec:	68e0      	ldr	r0, [r4, #12]
 80033ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033f2:	4303      	orrs	r3, r0
 80033f4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033f6:	4bb6      	ldr	r3, [pc, #728]	; (80036d0 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033f8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033fa:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033fc:	bf1c      	itt	ne
 80033fe:	6a23      	ldrne	r3, [r4, #32]
 8003400:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003402:	6893      	ldr	r3, [r2, #8]
 8003404:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003408:	4303      	orrs	r3, r0
 800340a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800340c:	4bb1      	ldr	r3, [pc, #708]	; (80036d4 <UART_SetConfig+0x308>)
 800340e:	429a      	cmp	r2, r3
 8003410:	d119      	bne.n	8003446 <UART_SetConfig+0x7a>
 8003412:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003416:	4ab0      	ldr	r2, [pc, #704]	; (80036d8 <UART_SetConfig+0x30c>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003420:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	f040 8138 	bne.w	800369a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800342a:	2b08      	cmp	r3, #8
 800342c:	f200 808f 	bhi.w	800354e <UART_SetConfig+0x182>
 8003430:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003434:	00ca011a 	.word	0x00ca011a
 8003438:	008d00f9 	.word	0x008d00f9
 800343c:	008d0114 	.word	0x008d0114
 8003440:	008d008d 	.word	0x008d008d
 8003444:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003446:	4ba5      	ldr	r3, [pc, #660]	; (80036dc <UART_SetConfig+0x310>)
 8003448:	429a      	cmp	r2, r3
 800344a:	d107      	bne.n	800345c <UART_SetConfig+0x90>
 800344c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003450:	4aa3      	ldr	r2, [pc, #652]	; (80036e0 <UART_SetConfig+0x314>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	e7e1      	b.n	8003420 <UART_SetConfig+0x54>
 800345c:	4ba1      	ldr	r3, [pc, #644]	; (80036e4 <UART_SetConfig+0x318>)
 800345e:	429a      	cmp	r2, r3
 8003460:	d123      	bne.n	80034aa <UART_SetConfig+0xde>
 8003462:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800346e:	2b10      	cmp	r3, #16
 8003470:	f000 80f1 	beq.w	8003656 <UART_SetConfig+0x28a>
 8003474:	d80b      	bhi.n	800348e <UART_SetConfig+0xc2>
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80f3 	beq.w	8003662 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003480:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003484:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003488:	f000 80f8 	beq.w	800367c <UART_SetConfig+0x2b0>
 800348c:	e0a8      	b.n	80035e0 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800348e:	2b20      	cmp	r3, #32
 8003490:	f000 80c6 	beq.w	8003620 <UART_SetConfig+0x254>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d1f1      	bne.n	800347c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003498:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800349c:	f040 80b8 	bne.w	8003610 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034a0:	6860      	ldr	r0, [r4, #4]
 80034a2:	0843      	lsrs	r3, r0, #1
 80034a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80034a8:	e0c3      	b.n	8003632 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034aa:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <UART_SetConfig+0x31c>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d11e      	bne.n	80034ee <UART_SetConfig+0x122>
 80034b0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	f000 80bb 	beq.w	8003638 <UART_SetConfig+0x26c>
 80034c2:	d80a      	bhi.n	80034da <UART_SetConfig+0x10e>
 80034c4:	b97b      	cbnz	r3, 80034e6 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80034c6:	4b82      	ldr	r3, [pc, #520]	; (80036d0 <UART_SetConfig+0x304>)
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f040 80ca 	bne.w	8003662 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7ff fabd 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
        break;
 80034d2:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80034d4:	bbb0      	cbnz	r0, 8003544 <UART_SetConfig+0x178>
 80034d6:	4602      	mov	r2, r0
 80034d8:	e03a      	b.n	8003550 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	f000 809d 	beq.w	800361a <UART_SetConfig+0x24e>
 80034e0:	2bc0      	cmp	r3, #192	; 0xc0
 80034e2:	f000 80b0 	beq.w	8003646 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80034e6:	4b7a      	ldr	r3, [pc, #488]	; (80036d0 <UART_SetConfig+0x304>)
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1c7      	bne.n	800347c <UART_SetConfig+0xb0>
 80034ec:	e02f      	b.n	800354e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <UART_SetConfig+0x320>)
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d111      	bne.n	8003518 <UART_SetConfig+0x14c>
 80034f4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003504:	f000 8098 	beq.w	8003638 <UART_SetConfig+0x26c>
 8003508:	d9dc      	bls.n	80034c4 <UART_SetConfig+0xf8>
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	f000 8084 	beq.w	800361a <UART_SetConfig+0x24e>
 8003512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003516:	e7e4      	b.n	80034e2 <UART_SetConfig+0x116>
 8003518:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <UART_SetConfig+0x304>)
 800351a:	429a      	cmp	r2, r3
 800351c:	d1ae      	bne.n	800347c <UART_SetConfig+0xb0>
 800351e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	f000 8083 	beq.w	8003638 <UART_SetConfig+0x26c>
 8003532:	d9c7      	bls.n	80034c4 <UART_SetConfig+0xf8>
 8003534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003538:	d06f      	beq.n	800361a <UART_SetConfig+0x24e>
 800353a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800353e:	e7d0      	b.n	80034e2 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003540:	486b      	ldr	r0, [pc, #428]	; (80036f0 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003542:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003544:	6862      	ldr	r2, [r4, #4]
 8003546:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800354a:	4281      	cmp	r1, r0
 800354c:	d905      	bls.n	800355a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800354e:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003554:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003556:	4610      	mov	r0, r2
 8003558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800355a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800355e:	d8f6      	bhi.n	800354e <UART_SetConfig+0x182>
        switch (clocksource)
 8003560:	2b08      	cmp	r3, #8
 8003562:	d82e      	bhi.n	80035c2 <UART_SetConfig+0x1f6>
 8003564:	e8df f003 	tbb	[pc, r3]
 8003568:	2d1c2d05 	.word	0x2d1c2d05
 800356c:	2d2d2d24 	.word	0x2d2d2d24
 8003570:	27          	.byte	0x27
 8003571:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003572:	f7ff fa6b 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357c:	0856      	lsrs	r6, r2, #1
 800357e:	2700      	movs	r7, #0
 8003580:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003584:	2300      	movs	r3, #0
 8003586:	4630      	mov	r0, r6
 8003588:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800358a:	f7fd facb 	bl	8000b24 <__aeabi_uldivmod>
            break;
 800358e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <UART_SetConfig+0x328>)
 8003592:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003596:	4299      	cmp	r1, r3
 8003598:	d8d9      	bhi.n	800354e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	60d8      	str	r0, [r3, #12]
 800359e:	e7d7      	b.n	8003550 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80035a0:	4855      	ldr	r0, [pc, #340]	; (80036f8 <UART_SetConfig+0x32c>)
 80035a2:	0855      	lsrs	r5, r2, #1
 80035a4:	2300      	movs	r3, #0
 80035a6:	2100      	movs	r1, #0
 80035a8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80035aa:	f141 0100 	adc.w	r1, r1, #0
 80035ae:	e7ec      	b.n	800358a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035b0:	f7fe ff06 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 80035b4:	e7df      	b.n	8003576 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80035b6:	0850      	lsrs	r0, r2, #1
 80035b8:	2100      	movs	r1, #0
 80035ba:	2300      	movs	r3, #0
 80035bc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80035c0:	e7f3      	b.n	80035aa <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 80035c2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80035c4:	2000      	movs	r0, #0
 80035c6:	e7e3      	b.n	8003590 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035c8:	f7ff fa52 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 80035cc:	e04e      	b.n	800366c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035ce:	f7ff fa3d 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035d2:	6862      	ldr	r2, [r4, #4]
 80035d4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80035d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80035dc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80035de:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e0:	f1a3 0010 	sub.w	r0, r3, #16
 80035e4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80035e8:	4288      	cmp	r0, r1
 80035ea:	d8b0      	bhi.n	800354e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80035ec:	6821      	ldr	r1, [r4, #0]
 80035ee:	60cb      	str	r3, [r1, #12]
 80035f0:	e7ae      	b.n	8003550 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035f2:	f7ff fa3d 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 80035f6:	e7ec      	b.n	80035d2 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035f8:	6860      	ldr	r0, [r4, #4]
 80035fa:	0843      	lsrs	r3, r0, #1
 80035fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003600:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003604:	fbb3 f3f0 	udiv	r3, r3, r0
 8003608:	e7e8      	b.n	80035dc <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800360a:	f7fe fed9 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800360e:	e7e0      	b.n	80035d2 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003610:	6860      	ldr	r0, [r4, #4]
 8003612:	0843      	lsrs	r3, r0, #1
 8003614:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003618:	e7f4      	b.n	8003604 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800361a:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <UART_SetConfig+0x304>)
 800361c:	429a      	cmp	r2, r3
 800361e:	d08f      	beq.n	8003540 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003620:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003624:	d1e8      	bne.n	80035f8 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003626:	6860      	ldr	r0, [r4, #4]
 8003628:	0843      	lsrs	r3, r0, #1
 800362a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800362e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003632:	fbb3 f3f0 	udiv	r3, r3, r0
 8003636:	e01f      	b.n	8003678 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <UART_SetConfig+0x304>)
 800363a:	429a      	cmp	r2, r3
 800363c:	d10b      	bne.n	8003656 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800363e:	f7fe febf 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
        break;
 8003642:	2304      	movs	r3, #4
 8003644:	e746      	b.n	80034d4 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <UART_SetConfig+0x304>)
 8003648:	429a      	cmp	r2, r3
 800364a:	f47f af25 	bne.w	8003498 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800364e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003652:	2308      	movs	r3, #8
 8003654:	e776      	b.n	8003544 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800365a:	d1d6      	bne.n	800360a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800365c:	f7fe feb0 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003660:	e004      	b.n	800366c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003662:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003666:	d1b2      	bne.n	80035ce <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003668:	f7ff f9f0 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800366c:	6861      	ldr	r1, [r4, #4]
 800366e:	084a      	lsrs	r2, r1, #1
 8003670:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003674:	fbb3 f3f1 	udiv	r3, r3, r1
 8003678:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800367a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367c:	f1a3 0010 	sub.w	r0, r3, #16
 8003680:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003684:	4288      	cmp	r0, r1
 8003686:	f63f af62 	bhi.w	800354e <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800368a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800368e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003690:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003694:	430b      	orrs	r3, r1
 8003696:	60c3      	str	r3, [r0, #12]
 8003698:	e75a      	b.n	8003550 <UART_SetConfig+0x184>
    switch (clocksource)
 800369a:	2b08      	cmp	r3, #8
 800369c:	f63f af57 	bhi.w	800354e <UART_SetConfig+0x182>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0x2dc>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080035cf 	.word	0x080035cf
 80036ac:	080035f3 	.word	0x080035f3
 80036b0:	080035f9 	.word	0x080035f9
 80036b4:	0800354f 	.word	0x0800354f
 80036b8:	0800360b 	.word	0x0800360b
 80036bc:	0800354f 	.word	0x0800354f
 80036c0:	0800354f 	.word	0x0800354f
 80036c4:	0800354f 	.word	0x0800354f
 80036c8:	08003611 	.word	0x08003611
 80036cc:	efff69f3 	.word	0xefff69f3
 80036d0:	40008000 	.word	0x40008000
 80036d4:	40013800 	.word	0x40013800
 80036d8:	080067f0 	.word	0x080067f0
 80036dc:	40004400 	.word	0x40004400
 80036e0:	080067f4 	.word	0x080067f4
 80036e4:	40004800 	.word	0x40004800
 80036e8:	40004c00 	.word	0x40004c00
 80036ec:	40005000 	.word	0x40005000
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	000ffcff 	.word	0x000ffcff
 80036f8:	f4240000 	.word	0xf4240000

080036fc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036fe:	07da      	lsls	r2, r3, #31
{
 8003700:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003702:	d506      	bpl.n	8003712 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003704:	6801      	ldr	r1, [r0, #0]
 8003706:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003708:	684a      	ldr	r2, [r1, #4]
 800370a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800370e:	4322      	orrs	r2, r4
 8003710:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003712:	079c      	lsls	r4, r3, #30
 8003714:	d506      	bpl.n	8003724 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003716:	6801      	ldr	r1, [r0, #0]
 8003718:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800371a:	684a      	ldr	r2, [r1, #4]
 800371c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003720:	4322      	orrs	r2, r4
 8003722:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003724:	0759      	lsls	r1, r3, #29
 8003726:	d506      	bpl.n	8003736 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003728:	6801      	ldr	r1, [r0, #0]
 800372a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800372c:	684a      	ldr	r2, [r1, #4]
 800372e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003732:	4322      	orrs	r2, r4
 8003734:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003736:	071a      	lsls	r2, r3, #28
 8003738:	d506      	bpl.n	8003748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373a:	6801      	ldr	r1, [r0, #0]
 800373c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800373e:	684a      	ldr	r2, [r1, #4]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003744:	4322      	orrs	r2, r4
 8003746:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003748:	06dc      	lsls	r4, r3, #27
 800374a:	d506      	bpl.n	800375a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	6801      	ldr	r1, [r0, #0]
 800374e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003750:	688a      	ldr	r2, [r1, #8]
 8003752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003756:	4322      	orrs	r2, r4
 8003758:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800375a:	0699      	lsls	r1, r3, #26
 800375c:	d506      	bpl.n	800376c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375e:	6801      	ldr	r1, [r0, #0]
 8003760:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003762:	688a      	ldr	r2, [r1, #8]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003768:	4322      	orrs	r2, r4
 800376a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800376c:	065a      	lsls	r2, r3, #25
 800376e:	d50f      	bpl.n	8003790 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003770:	6801      	ldr	r1, [r0, #0]
 8003772:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003774:	684a      	ldr	r2, [r1, #4]
 8003776:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800377a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800377c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003780:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003782:	d105      	bne.n	8003790 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003784:	684a      	ldr	r2, [r1, #4]
 8003786:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003788:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800378c:	4322      	orrs	r2, r4
 800378e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	d506      	bpl.n	80037a2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003794:	6802      	ldr	r2, [r0, #0]
 8003796:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003798:	6853      	ldr	r3, [r2, #4]
 800379a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800379e:	430b      	orrs	r3, r1
 80037a0:	6053      	str	r3, [r2, #4]
 80037a2:	bd10      	pop	{r4, pc}

080037a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a8:	9d06      	ldr	r5, [sp, #24]
 80037aa:	4604      	mov	r4, r0
 80037ac:	460f      	mov	r7, r1
 80037ae:	4616      	mov	r6, r2
 80037b0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b2:	6821      	ldr	r1, [r4, #0]
 80037b4:	69ca      	ldr	r2, [r1, #28]
 80037b6:	ea37 0302 	bics.w	r3, r7, r2
 80037ba:	bf0c      	ite	eq
 80037bc:	2201      	moveq	r2, #1
 80037be:	2200      	movne	r2, #0
 80037c0:	42b2      	cmp	r2, r6
 80037c2:	d002      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80037c4:	2000      	movs	r0, #0
}
 80037c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	1c6b      	adds	r3, r5, #1
 80037cc:	d0f2      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fd fbd5 	bl	8000f7c <HAL_GetTick>
 80037d2:	eba0 0008 	sub.w	r0, r0, r8
 80037d6:	4285      	cmp	r5, r0
 80037d8:	d301      	bcc.n	80037de <UART_WaitOnFlagUntilTimeout+0x3a>
 80037da:	2d00      	cmp	r5, #0
 80037dc:	d1e9      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80037f0:	2320      	movs	r3, #32
 80037f2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037f4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80037f6:	2300      	movs	r3, #0
 80037f8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80037fc:	2003      	movs	r0, #3
 80037fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003802 <HAL_UART_Transmit>:
{
 8003802:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003806:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003808:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800380a:	2b20      	cmp	r3, #32
{
 800380c:	4604      	mov	r4, r0
 800380e:	460e      	mov	r6, r1
 8003810:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003812:	d14b      	bne.n	80038ac <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8003814:	2900      	cmp	r1, #0
 8003816:	d047      	beq.n	80038a8 <HAL_UART_Transmit+0xa6>
 8003818:	2a00      	cmp	r2, #0
 800381a:	d045      	beq.n	80038a8 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800381c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003820:	2b01      	cmp	r3, #1
 8003822:	d043      	beq.n	80038ac <HAL_UART_Transmit+0xaa>
 8003824:	2301      	movs	r3, #1
 8003826:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003830:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8003832:	f7fd fba3 	bl	8000f7c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003836:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003838:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003840:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003842:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	d103      	bne.n	8003850 <HAL_UART_Transmit+0x4e>
 8003848:	6923      	ldr	r3, [r4, #16]
 800384a:	b90b      	cbnz	r3, 8003850 <HAL_UART_Transmit+0x4e>
 800384c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800384e:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003850:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003854:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003858:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 800385c:	b94a      	cbnz	r2, 8003872 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	2140      	movs	r1, #64	; 0x40
 8003860:	4620      	mov	r0, r4
 8003862:	f7ff ff9f 	bl	80037a4 <UART_WaitOnFlagUntilTimeout>
 8003866:	b950      	cbnz	r0, 800387e <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8003868:	2320      	movs	r3, #32
 800386a:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 800386c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003870:	e006      	b.n	8003880 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	4620      	mov	r0, r4
 8003878:	f7ff ff94 	bl	80037a4 <UART_WaitOnFlagUntilTimeout>
 800387c:	b118      	cbz	r0, 8003886 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800387e:	2003      	movs	r0, #3
}
 8003880:	b003      	add	sp, #12
 8003882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003886:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003888:	b95e      	cbnz	r6, 80038a2 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003892:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003894:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003898:	3b01      	subs	r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80038a0:	e7d6      	b.n	8003850 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	f816 3b01 	ldrb.w	r3, [r6], #1
 80038a6:	e7f4      	b.n	8003892 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7e9      	b.n	8003880 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 80038ac:	2002      	movs	r0, #2
 80038ae:	e7e7      	b.n	8003880 <HAL_UART_Transmit+0x7e>

080038b0 <UART_CheckIdleState>:
{
 80038b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038b2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	2600      	movs	r6, #0
 80038b6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80038b8:	f7fd fb60 	bl	8000f7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80038c2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c4:	d415      	bmi.n	80038f2 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	075b      	lsls	r3, r3, #29
 80038cc:	d50a      	bpl.n	80038e4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	462b      	mov	r3, r5
 80038d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038dc:	4620      	mov	r0, r4
 80038de:	f7ff ff61 	bl	80037a4 <UART_WaitOnFlagUntilTimeout>
 80038e2:	b990      	cbnz	r0, 800390a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80038e6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80038e8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80038ea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80038ee:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 80038f0:	e00c      	b.n	800390c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4632      	mov	r2, r6
 80038fa:	4603      	mov	r3, r0
 80038fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff ff4f 	bl	80037a4 <UART_WaitOnFlagUntilTimeout>
 8003906:	2800      	cmp	r0, #0
 8003908:	d0dd      	beq.n	80038c6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800390a:	2003      	movs	r0, #3
}
 800390c:	b002      	add	sp, #8
 800390e:	bd70      	pop	{r4, r5, r6, pc}

08003910 <HAL_UART_Init>:
{
 8003910:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003912:	4604      	mov	r4, r0
 8003914:	b340      	cbz	r0, 8003968 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003916:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003918:	b91b      	cbnz	r3, 8003922 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800391a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800391e:	f001 fc6f 	bl	8005200 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003922:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	2324      	movs	r3, #36	; 0x24
 8003926:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003928:	6813      	ldr	r3, [r2, #0]
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff fd4b 	bl	80033cc <UART_SetConfig>
 8003936:	2801      	cmp	r0, #1
 8003938:	d016      	beq.n	8003968 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393c:	b113      	cbz	r3, 8003944 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800393e:	4620      	mov	r0, r4
 8003940:	f7ff fedc 	bl	80036fc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800394c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003954:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800395c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003964:	f7ff bfa4 	b.w	80038b0 <UART_CheckIdleState>
}
 8003968:	2001      	movs	r0, #1
 800396a:	bd10      	pop	{r4, pc}

0800396c <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800396c:	4822      	ldr	r0, [pc, #136]	; (80039f8 <MX_DFSDM1_Init+0x8c>)
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800396e:	2200      	movs	r2, #0
{
 8003970:	b508      	push	{r3, lr}
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8003972:	6042      	str	r2, [r0, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8003974:	60c2      	str	r2, [r0, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = ENABLE;
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8003976:	7442      	strb	r2, [r0, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8003978:	6142      	str	r2, [r0, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800397a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800397e:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <MX_DFSDM1_Init+0x90>)
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8003980:	6182      	str	r2, [r0, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003982:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8003986:	6003      	str	r3, [r0, #0]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003988:	61c2      	str	r2, [r0, #28]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800398a:	2301      	movs	r3, #1
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 800398c:	2240      	movs	r2, #64	; 0x40
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800398e:	7203      	strb	r3, [r0, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8003990:	7243      	strb	r3, [r0, #9]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = ENABLE;
 8003992:	7403      	strb	r3, [r0, #16]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8003994:	6202      	str	r2, [r0, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8003996:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8003998:	f7fd fc42 	bl	8001220 <HAL_DFSDM_FilterInit>
 800399c:	b108      	cbz	r0, 80039a2 <MX_DFSDM1_Init+0x36>
  {
    Error_Handler();
 800399e:	f000 faaf 	bl	8003f00 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80039a2:	4817      	ldr	r0, [pc, #92]	; (8003a00 <MX_DFSDM1_Init+0x94>)
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <MX_DFSDM1_Init+0x98>)
 80039a6:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80039a8:	2301      	movs	r3, #1
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel2.Init.OutputClock.Divider = 4;
 80039aa:	2204      	movs	r2, #4
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80039ac:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80039ae:	2300      	movs	r3, #0
 80039b0:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 4;
 80039b2:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80039b4:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80039b6:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80039b8:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80039ba:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80039bc:	6202      	str	r2, [r0, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80039be:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 80039c0:	220a      	movs	r2, #10
  hdfsdm1_channel2.Init.Offset = 0;
 80039c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x02;
 80039c4:	2302      	movs	r3, #2
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 80039c6:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel2.Init.RightBitShift = 0x02;
 80039c8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80039ca:	f7fd fbb3 	bl	8001134 <HAL_DFSDM_ChannelInit>
 80039ce:	b108      	cbz	r0, 80039d4 <MX_DFSDM1_Init+0x68>
  {
    Error_Handler();
 80039d0:	f000 fa96 	bl	8003f00 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80039d4:	2201      	movs	r2, #1
 80039d6:	490c      	ldr	r1, [pc, #48]	; (8003a08 <MX_DFSDM1_Init+0x9c>)
 80039d8:	4807      	ldr	r0, [pc, #28]	; (80039f8 <MX_DFSDM1_Init+0x8c>)
 80039da:	f7fd fc93 	bl	8001304 <HAL_DFSDM_FilterConfigRegChannel>
 80039de:	b108      	cbz	r0, 80039e4 <MX_DFSDM1_Init+0x78>
  {
    Error_Handler();
 80039e0:	f000 fa8e 	bl	8003f00 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2) != HAL_OK)
 80039e4:	4908      	ldr	r1, [pc, #32]	; (8003a08 <MX_DFSDM1_Init+0x9c>)
 80039e6:	4804      	ldr	r0, [pc, #16]	; (80039f8 <MX_DFSDM1_Init+0x8c>)
 80039e8:	f7fd fca9 	bl	800133e <HAL_DFSDM_FilterConfigInjChannel>
 80039ec:	b118      	cbz	r0, 80039f6 <MX_DFSDM1_Init+0x8a>
  {
    Error_Handler();
  }

}
 80039ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80039f2:	f000 ba85 	b.w	8003f00 <Error_Handler>
 80039f6:	bd08      	pop	{r3, pc}
 80039f8:	20000148 	.word	0x20000148
 80039fc:	40016100 	.word	0x40016100
 8003a00:	200001e4 	.word	0x200001e4
 8003a04:	40016040 	.word	0x40016040
 8003a08:	00020004 	.word	0x00020004

08003a0c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8003a0c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8003a0e:	4c2d      	ldr	r4, [pc, #180]	; (8003ac4 <HAL_DFSDM_FilterMspInit+0xb8>)
{
 8003a10:	b089      	sub	sp, #36	; 0x24
 8003a12:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	2214      	movs	r2, #20
 8003a16:	2100      	movs	r1, #0
 8003a18:	a803      	add	r0, sp, #12
 8003a1a:	f001 fcb8 	bl	800538e <memset>
  if(DFSDM1_Init == 0)
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d129      	bne.n	8003a78 <HAL_DFSDM_FilterMspInit+0x6c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <HAL_DFSDM_FilterMspInit+0xbc>)
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003a2a:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b27      	ldr	r3, [pc, #156]	; (8003acc <HAL_DFSDM_FilterMspInit+0xc0>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003a30:	d108      	bne.n	8003a44 <HAL_DFSDM_FilterMspInit+0x38>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003a32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a34:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003a38:	661a      	str	r2, [r3, #96]	; 0x60
 8003a3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a3c:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a46:	4822      	ldr	r0, [pc, #136]	; (8003ad0 <HAL_DFSDM_FilterMspInit+0xc4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a48:	f042 0210 	orr.w	r2, r2, #16
 8003a4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003a58:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003a5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a68:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003a6a:	2306      	movs	r3, #6
 8003a6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a6e:	f7fd feab 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	6023      	str	r3, [r4, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8003a78:	682a      	ldr	r2, [r5, #0]
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <HAL_DFSDM_FilterMspInit+0xc8>)
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d11e      	bne.n	8003abe <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003a80:	4c15      	ldr	r4, [pc, #84]	; (8003ad8 <HAL_DFSDM_FilterMspInit+0xcc>)
 8003a82:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
 8003a86:	3344      	adds	r3, #68	; 0x44
 8003a88:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6063      	str	r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a8e:	60a3      	str	r3, [r4, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a90:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	6123      	str	r3, [r4, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9a:	6163      	str	r3, [r4, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aa0:	61a3      	str	r3, [r4, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	61e3      	str	r3, [r4, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003aa6:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8003aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aac:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003aae:	f7fd fd7b 	bl	80015a8 <HAL_DMA_Init>
 8003ab2:	b108      	cbz	r0, 8003ab8 <HAL_DFSDM_FilterMspInit+0xac>
    {
      Error_Handler();
 8003ab4:	f000 fa24 	bl	8003f00 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8003ab8:	62a5      	str	r5, [r4, #40]	; 0x28
 8003aba:	62ec      	str	r4, [r5, #44]	; 0x2c
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8003abc:	62ac      	str	r4, [r5, #40]	; 0x28
  }

}
 8003abe:	b009      	add	sp, #36	; 0x24
 8003ac0:	bd30      	pop	{r4, r5, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000118 	.word	0x20000118
 8003ac8:	2000011c 	.word	0x2000011c
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	48001000 	.word	0x48001000
 8003ad4:	40016100 	.word	0x40016100
 8003ad8:	2000019c 	.word	0x2000019c

08003adc <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8003adc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8003ade:	4c1f      	ldr	r4, [pc, #124]	; (8003b5c <HAL_DFSDM_ChannelMspInit+0x80>)
{
 8003ae0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae2:	2214      	movs	r2, #20
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	a803      	add	r0, sp, #12
 8003ae8:	f001 fc51 	bl	800538e <memset>
  if(DFSDM1_Init == 0)
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d131      	bne.n	8003b56 <HAL_DFSDM_ChannelMspInit+0x7a>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003af2:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003af8:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_DFSDM_ChannelMspInit+0x88>)
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003afe:	d108      	bne.n	8003b12 <HAL_DFSDM_ChannelMspInit+0x36>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b06:	661a      	str	r2, [r3, #96]	; 0x60
 8003b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b0a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003b0e:	9201      	str	r2, [sp, #4]
 8003b10:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b14:	4814      	ldr	r0, [pc, #80]	; (8003b68 <HAL_DFSDM_ChannelMspInit+0x8c>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b16:	f042 0210 	orr.w	r2, r2, #16
 8003b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003b26:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003b2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b36:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003b38:	2306      	movs	r3, #6
 8003b3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b3c:	f7fd fe44 	bl	80017c8 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	4611      	mov	r1, r2
 8003b44:	203d      	movs	r0, #61	; 0x3d
 8003b46:	f7fd fa45 	bl	8000fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8003b4a:	203d      	movs	r0, #61	; 0x3d
 8003b4c:	f7fd fa76 	bl	800103c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	3301      	adds	r3, #1
 8003b54:	6023      	str	r3, [r4, #0]
  }
}
 8003b56:	b008      	add	sp, #32
 8003b58:	bd10      	pop	{r4, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000118 	.word	0x20000118
 8003b60:	2000011c 	.word	0x2000011c
 8003b64:	40021000 	.word	0x40021000
 8003b68:	48001000 	.word	0x48001000

08003b6c <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <MX_DMA_Init+0x4c>)
{
 8003b6e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	649a      	str	r2, [r3, #72]	; 0x48
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003b7a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b7c:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003b80:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b82:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003b84:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003b88:	f7fd fa24 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003b8c:	200e      	movs	r0, #14
 8003b8e:	f7fd fa55 	bl	800103c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	4611      	mov	r1, r2
 8003b96:	2010      	movs	r0, #16
 8003b98:	f7fd fa1c 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003b9c:	2010      	movs	r0, #16
 8003b9e:	f7fd fa4d 	bl	800103c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	2011      	movs	r0, #17
 8003ba8:	f7fd fa14 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003bac:	2011      	movs	r0, #17
 8003bae:	f7fd fa45 	bl	800103c <HAL_NVIC_EnableIRQ>

}
 8003bb2:	b003      	add	sp, #12
 8003bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bb8:	40021000 	.word	0x40021000

08003bbc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	2214      	movs	r2, #20
{
 8003bc2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	eb0d 0002 	add.w	r0, sp, r2
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f001 fbe0 	bl	800538e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bce:	4b47      	ldr	r3, [pc, #284]	; (8003cec <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8003bd0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8003cfc <MX_GPIO_Init+0x140>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8003bd6:	4e46      	ldr	r6, [pc, #280]	; (8003cf0 <MX_GPIO_Init+0x134>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd8:	f042 0204 	orr.w	r2, r2, #4
 8003bdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be0:	f002 0204 	and.w	r2, r2, #4
 8003be4:	9200      	str	r2, [sp, #0]
 8003be6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bf2:	f002 0201 	and.w	r2, r2, #1
 8003bf6:	9201      	str	r2, [sp, #4]
 8003bf8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bfc:	f042 0202 	orr.w	r2, r2, #2
 8003c00:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c04:	f002 0202 	and.w	r2, r2, #2
 8003c08:	9202      	str	r2, [sp, #8]
 8003c0a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c0e:	f042 0210 	orr.w	r2, r2, #16
 8003c12:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c16:	f002 0210 	and.w	r2, r2, #16
 8003c1a:	9203      	str	r2, [sp, #12]
 8003c1c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c20:	f042 0208 	orr.w	r2, r2, #8
 8003c24:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8003c2e:	4640      	mov	r0, r8
 8003c30:	2200      	movs	r2, #0
 8003c32:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c34:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8003c36:	f7fd ff2d 	bl	8001a94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f44f 7180 	mov.w	r1, #256	; 0x100

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c42:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8003c44:	f7fd ff26 	bl	8001a94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c48:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4a:	a905      	add	r1, sp, #20
 8003c4c:	4829      	ldr	r0, [pc, #164]	; (8003cf4 <MX_GPIO_Init+0x138>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c4e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c50:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c54:	f7fd fdb8 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = JCenter_EXTI0_Pin|JLeft_EXTI1_Pin|JRight_EXTI2_Pin|JUp_EXTI2_Pin 
 8003c58:	232f      	movs	r3, #47	; 0x2f
 8003c5a:	9305      	str	r3, [sp, #20]
                          |JDown_EXTI5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <MX_GPIO_Init+0x13c>)
 8003c5e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c60:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c62:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c68:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	f7fd fdac 	bl	80017c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD_R_Pin;
 8003c70:	2304      	movs	r3, #4
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8003c72:	a905      	add	r1, sp, #20
 8003c74:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD_R_Pin;
 8003c76:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c78:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c7a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8003c7e:	f7fd fda3 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8003c82:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8003c86:	a905      	add	r1, sp, #20
 8003c88:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD_G_Pin;
 8003c8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c8e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8003c92:	f7fd fd99 	bl	80017c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003c96:	4622      	mov	r2, r4
 8003c98:	4621      	mov	r1, r4
 8003c9a:	2006      	movs	r0, #6
 8003c9c:	f7fd f99a 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ca0:	2006      	movs	r0, #6
 8003ca2:	f7fd f9cb 	bl	800103c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	4621      	mov	r1, r4
 8003caa:	2007      	movs	r0, #7
 8003cac:	f7fd f992 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003cb0:	2007      	movs	r0, #7
 8003cb2:	f7fd f9c3 	bl	800103c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4621      	mov	r1, r4
 8003cba:	2008      	movs	r0, #8
 8003cbc:	f7fd f98a 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003cc0:	2008      	movs	r0, #8
 8003cc2:	f7fd f9bb 	bl	800103c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4621      	mov	r1, r4
 8003cca:	2009      	movs	r0, #9
 8003ccc:	f7fd f982 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003cd0:	2009      	movs	r0, #9
 8003cd2:	f7fd f9b3 	bl	800103c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4621      	mov	r1, r4
 8003cda:	2017      	movs	r0, #23
 8003cdc:	f7fd f97a 	bl	8000fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ce0:	2017      	movs	r0, #23
 8003ce2:	f7fd f9ab 	bl	800103c <HAL_NVIC_EnableIRQ>

}
 8003ce6:	b00a      	add	sp, #40	; 0x28
 8003ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	48001000 	.word	0x48001000
 8003cf4:	48000800 	.word	0x48000800
 8003cf8:	10110000 	.word	0x10110000
 8003cfc:	48000400 	.word	0x48000400

08003d00 <MX_LCD_Init>:

/* LCD init function */
void MX_LCD_Init(void)
{

  hlcd.Instance = LCD;
 8003d00:	480c      	ldr	r0, [pc, #48]	; (8003d34 <MX_LCD_Init+0x34>)
{
 8003d02:	b508      	push	{r3, lr}
  hlcd.Instance = LCD;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_LCD_Init+0x38>)
 8003d06:	6003      	str	r3, [r0, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
  hlcd.Init.Divider = LCD_DIVIDER_16;
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8003d08:	220c      	movs	r2, #12
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	6043      	str	r3, [r0, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8003d0e:	6083      	str	r3, [r0, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8003d10:	60c2      	str	r2, [r0, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8003d12:	6103      	str	r3, [r0, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8003d14:	6143      	str	r3, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8003d16:	6183      	str	r3, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8003d18:	61c3      	str	r3, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8003d1a:	6203      	str	r3, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8003d1c:	6303      	str	r3, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8003d1e:	6283      	str	r3, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8003d20:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8003d22:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8003d24:	f7fd ff7a 	bl	8001c1c <HAL_LCD_Init>
 8003d28:	b118      	cbz	r0, 8003d32 <MX_LCD_Init+0x32>
  {
    Error_Handler();
  }

}
 8003d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003d2e:	f000 b8e7 	b.w	8003f00 <Error_Handler>
 8003d32:	bd08      	pop	{r3, pc}
 8003d34:	2000021c 	.word	0x2000021c
 8003d38:	40002400 	.word	0x40002400

08003d3c <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8003d3c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3e:	2214      	movs	r2, #20
{
 8003d40:	b08a      	sub	sp, #40	; 0x28
 8003d42:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	2100      	movs	r1, #0
 8003d46:	eb0d 0002 	add.w	r0, sp, r2
 8003d4a:	f001 fb20 	bl	800538e <memset>
  if(lcdHandle->Instance==LCD)
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_LCD_MspInit+0xd8>)
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d15c      	bne.n	8003e10 <HAL_LCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8003d56:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 8003d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d5e:	482e      	ldr	r0, [pc, #184]	; (8003e18 <HAL_LCD_MspInit+0xdc>)
    __HAL_RCC_LCD_CLK_ENABLE();
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	659a      	str	r2, [r3, #88]	; 0x58
 8003d66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d68:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d6c:	9200      	str	r2, [sp, #0]
 8003d6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d72:	f042 0204 	orr.w	r2, r2, #4
 8003d76:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d7a:	f002 0204 	and.w	r2, r2, #4
 8003d7e:	9201      	str	r2, [sp, #4]
 8003d80:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d8c:	f002 0201 	and.w	r2, r2, #1
 8003d90:	9202      	str	r2, [sp, #8]
 8003d92:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d96:	f042 0202 	orr.w	r2, r2, #2
 8003d9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d9e:	f002 0202 	and.w	r2, r2, #2
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da8:	f042 0208 	orr.w	r2, r2, #8
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003db8:	250b      	movs	r5, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dba:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003dbc:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8003dbe:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc2:	a905      	add	r1, sp, #20

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8003dc6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc8:	f7fd fcfe 	bl	80017c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8003dcc:	f248 73c0 	movw	r3, #34752	; 0x87c0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	a905      	add	r1, sp, #20
 8003dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8003dd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ddc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003dde:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de0:	f7fd fcf2 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8003de4:	f24f 2333 	movw	r3, #62003	; 0xf233
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de8:	a905      	add	r1, sp, #20
 8003dea:	480c      	ldr	r0, [pc, #48]	; (8003e1c <HAL_LCD_MspInit+0xe0>)
    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8003dec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003df4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df6:	f7fd fce7 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8003dfa:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dfe:	a905      	add	r1, sp, #20
 8003e00:	4807      	ldr	r0, [pc, #28]	; (8003e20 <HAL_LCD_MspInit+0xe4>)
    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8003e02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e08:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003e0a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0c:	f7fd fcdc 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8003e10:	b00a      	add	sp, #40	; 0x28
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	40002400 	.word	0x40002400
 8003e18:	48000800 	.word	0x48000800
 8003e1c:	48000400 	.word	0x48000400
 8003e20:	48000c00 	.word	0x48000c00

08003e24 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == JCenter_EXTI0_Pin){
 8003e24:	2801      	cmp	r0, #1
 8003e26:	d102      	bne.n	8003e2e <HAL_GPIO_EXTI_Callback+0xa>
		JCenter_flag = 1;
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_GPIO_EXTI_Callback+0x34>)
 8003e2a:	6018      	str	r0, [r3, #0]
 8003e2c:	4770      	bx	lr
	}
	if(GPIO_Pin == JLeft_EXTI1_Pin){
 8003e2e:	2802      	cmp	r0, #2
 8003e30:	d103      	bne.n	8003e3a <HAL_GPIO_EXTI_Callback+0x16>
		JLeft_flag = 1;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_GPIO_EXTI_Callback+0x38>)
 8003e34:	2201      	movs	r2, #1
	}
	if(GPIO_Pin == JUp_EXTI2_Pin){
		JUp_flag = 1;
	}
	if(GPIO_Pin == JDown_EXTI5_Pin){
		JDown_flag = 1;
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	4770      	bx	lr
	if(GPIO_Pin == JRight_EXTI2_Pin){
 8003e3a:	2804      	cmp	r0, #4
 8003e3c:	d102      	bne.n	8003e44 <HAL_GPIO_EXTI_Callback+0x20>
		JRight_flag = 1;
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003e42:	e7f8      	b.n	8003e36 <HAL_GPIO_EXTI_Callback+0x12>
	if(GPIO_Pin == JUp_EXTI2_Pin){
 8003e44:	2808      	cmp	r0, #8
 8003e46:	d102      	bne.n	8003e4e <HAL_GPIO_EXTI_Callback+0x2a>
		JUp_flag = 1;
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_GPIO_EXTI_Callback+0x40>)
 8003e4c:	e7f3      	b.n	8003e36 <HAL_GPIO_EXTI_Callback+0x12>
	if(GPIO_Pin == JDown_EXTI5_Pin){
 8003e4e:	2820      	cmp	r0, #32
 8003e50:	d1f2      	bne.n	8003e38 <HAL_GPIO_EXTI_Callback+0x14>
		JDown_flag = 1;
 8003e52:	2201      	movs	r2, #1
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_GPIO_EXTI_Callback+0x44>)
 8003e56:	e7ee      	b.n	8003e36 <HAL_GPIO_EXTI_Callback+0x12>
 8003e58:	20000120 	.word	0x20000120
 8003e5c:	20000128 	.word	0x20000128
 8003e60:	2000012c 	.word	0x2000012c
 8003e64:	20000130 	.word	0x20000130
 8003e68:	20000124 	.word	0x20000124

08003e6c <_write>:
	}
}

int _write(int file, char *ptr, int len){
 8003e6c:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 8003e6e:	2332      	movs	r3, #50	; 0x32
int _write(int file, char *ptr, int len){
 8003e70:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 8003e72:	4803      	ldr	r0, [pc, #12]	; (8003e80 <_write+0x14>)
 8003e74:	b292      	uxth	r2, r2
 8003e76:	f7ff fcc4 	bl	8003802 <HAL_UART_Transmit>
	return len;
}
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	bf00      	nop
 8003e80:	200023f8 	.word	0x200023f8

08003e84 <Probki_callback>:
		}
	}

}

void Probki_callback(void){
 8003e84:	b538      	push	{r3, r4, r5, lr}
	printf("Rozpoczynam zbieranie probek\r\n");
 8003e86:	480c      	ldr	r0, [pc, #48]	; (8003eb8 <Probki_callback+0x34>)
	while(!JUp_flag){
 8003e88:	4c0c      	ldr	r4, [pc, #48]	; (8003ebc <Probki_callback+0x38>)
		HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <Probki_callback+0x3c>)
	printf("Rozpoczynam zbieranie probek\r\n");
 8003e8c:	f001 fafc 	bl	8005488 <puts>
	while(!JUp_flag){
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	b14b      	cbz	r3, 8003ea8 <Probki_callback+0x24>
		HAL_Delay(50);
	}
	printf("Koncze zbieranie probek\r\n");
 8003e94:	480b      	ldr	r0, [pc, #44]	; (8003ec4 <Probki_callback+0x40>)
 8003e96:	f001 faf7 	bl	8005488 <puts>
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	4808      	ldr	r0, [pc, #32]	; (8003ec0 <Probki_callback+0x3c>)
}
 8003ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8003ea4:	f7fd bdf6 	b.w	8001a94 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	2104      	movs	r1, #4
 8003eac:	f7fd fdf7 	bl	8001a9e <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8003eb0:	2032      	movs	r0, #50	; 0x32
 8003eb2:	f7fd f869 	bl	8000f88 <HAL_Delay>
 8003eb6:	e7eb      	b.n	8003e90 <Probki_callback+0xc>
 8003eb8:	08006810 	.word	0x08006810
 8003ebc:	20000130 	.word	0x20000130
 8003ec0:	48000400 	.word	0x48000400
 8003ec4:	0800682e 	.word	0x0800682e

08003ec8 <Wyswietl_Prog_callback>:

void Wyswietl_Prog_callback(void){
 8003ec8:	b500      	push	{lr}
 8003eca:	b08b      	sub	sp, #44	; 0x2c
	uint8_t* WartoscProgu[10]={};
 8003ecc:	2228      	movs	r2, #40	; 0x28
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4668      	mov	r0, sp
 8003ed2:	f001 fa5c 	bl	800538e <memset>
	sprintf(WartoscProgu, "%d", ProgDzwieku);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <Wyswietl_Prog_callback+0x30>)
 8003ed8:	4908      	ldr	r1, [pc, #32]	; (8003efc <Wyswietl_Prog_callback+0x34>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4668      	mov	r0, sp
 8003ede:	f001 fadb 	bl	8005498 <siprintf>
	BSP_LCD_GLASS_DisplayString(WartoscProgu);
 8003ee2:	4668      	mov	r0, sp
 8003ee4:	f000 fe78 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
	HAL_Delay(1000);
 8003ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eec:	f7fd f84c 	bl	8000f88 <HAL_Delay>
}
 8003ef0:	b00b      	add	sp, #44	; 0x2c
 8003ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ef6:	bf00      	nop
 8003ef8:	20000008 	.word	0x20000008
 8003efc:	080068bd 	.word	0x080068bd

08003f00 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error Handler\r\n");
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <Error_Handler+0x8>)
 8003f02:	f001 bac1 	b.w	8005488 <puts>
 8003f06:	bf00      	nop
 8003f08:	08006801 	.word	0x08006801
 8003f0c:	00000000 	.word	0x00000000

08003f10 <Prog_callback>:
void Prog_callback(void){
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	ed2d 8b02 	vpush	{d8}
 8003f18:	f5ad 4d84 	sub.w	sp, sp, #16896	; 0x4200
 8003f1c:	b087      	sub	sp, #28
	double const filtr[64]={0.00234434917719461,0.00253607247271912,0.00285229122268397,0.00329035375942028,0.00384640000611839,0.00451539722262479,0.00529118751439567,0.00616654664968141,0.00713325361488786,0.00818217022853550,0.00930333003144620,0.0104860355757936,0.0117189631494397,0.0129902738954427,0.0142877302205574,0.0155988163316447,0.0169108616957447,0.0182111661885955,0.0194871256779324,0.0207263567821822,0.0219168195522430,0.0230469368438535,0.0241057091804112,0.0250828239506856,0.0259687578422278,0.0267548714788497,0.0274334953086374,0.0279980058767921,0.0284428917142534,0.0287638081775825,0.0289576206868904,0.0290224359255544,0.0289576206868904,0.0287638081775825,0.0284428917142534,0.0279980058767921,0.0274334953086374,0.0267548714788497,0.0259687578422278,0.0250828239506856,0.0241057091804112,0.0230469368438535,0.0219168195522430,0.0207263567821822,0.0194871256779324,0.0182111661885955,0.0169108616957447,0.0155988163316447,0.0142877302205574,0.0129902738954427,0.0117189631494397,0.0104860355757936,0.00930333003144620,0.00818217022853550,0.00713325361488786,0.00616654664968141,0.00529118751439567,0.00451539722262479,0.00384640000611839,0.00329035375942028,0.00285229122268397,0.00253607247271912,0.00234434917719461,0.00227854094737764};
 8003f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f22:	4989      	ldr	r1, [pc, #548]	; (8004148 <Prog_callback+0x238>)
 8003f24:	a806      	add	r0, sp, #24
 8003f26:	f001 fa27 	bl	8005378 <memcpy>
	uint8_t DaneDoZapisu[N_DANYCH] = {};		// Dane w formacie szesciu liczb uint
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8003f30:	f88d 000a 	strb.w	r0, [sp, #10]
	if(BSP_QSPI_Erase_Block(AdresKomorki) != QSPI_OK){	// Wyczyszczenie bloku, z pierwszym bajtem
 8003f34:	f001 f876 	bl	8005024 <BSP_QSPI_Erase_Block>
 8003f38:	b108      	cbz	r0, 8003f3e <Prog_callback+0x2e>
		Error_Handler();
 8003f3a:	f7ff ffe1 	bl	8003f00 <Error_Handler>
	HAL_RTC_GetDate(&hrtc, &RTC_Calendar, RTC_FORMAT_BIN); //pobranie do RTC_Calendar daty
 8003f3e:	4c83      	ldr	r4, [pc, #524]	; (800414c <Prog_callback+0x23c>)
 8003f40:	4883      	ldr	r0, [pc, #524]	; (8004150 <Prog_callback+0x240>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	4621      	mov	r1, r4
 8003f46:	f7ff fa20 	bl	800338a <HAL_RTC_GetDate>
	printf("Data Data rtc:%d.%d.20%d\r\n", RTC_Calendar.Date, RTC_Calendar.Month, RTC_Calendar.Year);
 8003f4a:	78e3      	ldrb	r3, [r4, #3]
 8003f4c:	7862      	ldrb	r2, [r4, #1]
 8003f4e:	78a1      	ldrb	r1, [r4, #2]
 8003f50:	4880      	ldr	r0, [pc, #512]	; (8004154 <Prog_callback+0x244>)
 8003f52:	f001 fa25 	bl	80053a0 <iprintf>
	DaneDoZapisu[0] = RTC_Calendar.Date;
 8003f56:	78a3      	ldrb	r3, [r4, #2]
 8003f58:	f88d 3008 	strb.w	r3, [sp, #8]
	DaneDoZapisu[1] = RTC_Calendar.Month;
 8003f5c:	7863      	ldrb	r3, [r4, #1]
 8003f5e:	f88d 3009 	strb.w	r3, [sp, #9]
	if (BSP_QSPI_Write(PtrDaneZapis, AdresKomorki, RozmiarPaczkiDanych) != QSPI_OK){
 8003f62:	2203      	movs	r2, #3
	DaneDoZapisu[2] = RTC_Calendar.Year;
 8003f64:	78e3      	ldrb	r3, [r4, #3]
 8003f66:	f88d 300a 	strb.w	r3, [sp, #10]
	if (BSP_QSPI_Write(PtrDaneZapis, AdresKomorki, RozmiarPaczkiDanych) != QSPI_OK){
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	a802      	add	r0, sp, #8
 8003f6e:	f001 f809 	bl	8004f84 <BSP_QSPI_Write>
 8003f72:	b110      	cbz	r0, 8003f7a <Prog_callback+0x6a>
		printf("Blad zapisu!\r\n");
 8003f74:	4878      	ldr	r0, [pc, #480]	; (8004158 <Prog_callback+0x248>)
 8003f76:	f001 fa87 	bl	8005488 <puts>
			filtrowany[i3] = 0;//zerowanie po poprzedniej filtracji
 8003f7a:	ed9f 8b71 	vldr	d8, [pc, #452]	; 8004140 <Prog_callback+0x230>
					filtrowany[i3]=filtrowany[i3]+(  ( (double)RecBuff[i3-i4] )  *filtr[i4]);
 8003f7e:	f8df b208 	ldr.w	fp, [pc, #520]	; 8004188 <Prog_callback+0x278>
		for (int i3 = 0; i3 < 2048; i3++){
 8003f82:	2503      	movs	r5, #3
	while(!JUp_flag){
 8003f84:	4b75      	ldr	r3, [pc, #468]	; (800415c <Prog_callback+0x24c>)
 8003f86:	681c      	ldr	r4, [r3, #0]
 8003f88:	b364      	cbz	r4, 8003fe4 <Prog_callback+0xd4>
	BSP_LCD_GLASS_DisplayString("KONIEC");
 8003f8a:	4875      	ldr	r0, [pc, #468]	; (8004160 <Prog_callback+0x250>)
 8003f8c:	f000 fe24 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
	HAL_Delay(500);
 8003f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f94:	f7fc fff8 	bl	8000f88 <HAL_Delay>
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	4871      	ldr	r0, [pc, #452]	; (8004164 <Prog_callback+0x254>)
 8003f9e:	f7fd fd79 	bl	8001a94 <HAL_GPIO_WritePin>
	if (BSP_QSPI_Read(PtrOdczytano, 0x00, RozmiarPaczkiDanych) == QSPI_OK){
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	a803      	add	r0, sp, #12
 8003fa8:	f000 ffbc 	bl	8004f24 <BSP_QSPI_Read>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	f040 8086 	bne.w	80040be <Prog_callback+0x1ae>
		printf("Data: %d.%d.%d \r\n", Odczytano[0], Odczytano[1], Odczytano[2]);
 8003fb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003fb6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003fba:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003fbe:	486a      	ldr	r0, [pc, #424]	; (8004168 <Prog_callback+0x258>)
 8003fc0:	f001 f9ee 	bl	80053a0 <iprintf>
		sprintf(buffor, "LOG %d", i/3);
 8003fc4:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800418c <Prog_callback+0x27c>
			printf("Blad odczytu!\r\n");
 8003fc8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800417c <Prog_callback+0x26c>
			BSP_LCD_GLASS_DisplayString("BLAD");
 8003fcc:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8004190 <Prog_callback+0x280>
		for (int i3 = 0; i3 < 2048; i3++){
 8003fd0:	2403      	movs	r4, #3
	for(uint32_t i = 0x03; i < AdresKomorki; i+= RozmiarPaczkiDanych){
 8003fd2:	42ac      	cmp	r4, r5
 8003fd4:	d377      	bcc.n	80040c6 <Prog_callback+0x1b6>
}
 8003fd6:	f50d 4d84 	add.w	sp, sp, #16896	; 0x4200
 8003fda:	b007      	add	sp, #28
 8003fdc:	ecbd 8b02 	vpop	{d8}
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BSP_LCD_GLASS_DisplayString("LOGUJE");
 8003fe4:	4861      	ldr	r0, [pc, #388]	; (800416c <Prog_callback+0x25c>)
 8003fe6:	f000 fdf7 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
 8003fea:	f50d 7a06 	add.w	sl, sp, #536	; 0x218
 8003fee:	4657      	mov	r7, sl
			filtrowany[i3] = 0;//zerowanie po poprzedniej filtracji
 8003ff0:	ed87 8b00 	vstr	d8, [r7]
			 for (int i4 = 0; i4 < 64; i4++){
 8003ff4:	2600      	movs	r6, #0
				if (i3>=i4){
 8003ff6:	42b4      	cmp	r4, r6
 8003ff8:	db13      	blt.n	8004022 <Prog_callback+0x112>
					filtrowany[i3]=filtrowany[i3]+(  ( (double)RecBuff[i3-i4] )  *filtr[i4]);
 8003ffa:	1ba3      	subs	r3, r4, r6
 8003ffc:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 8004000:	f7fc fa90 	bl	8000524 <__aeabi_i2d>
 8004004:	ab06      	add	r3, sp, #24
 8004006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc faef 	bl	80005f0 <__aeabi_dmul>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800401a:	f7fc f937 	bl	800028c <__adddf3>
 800401e:	e9c7 0100 	strd	r0, r1, [r7]
			 for (int i4 = 0; i4 < 64; i4++){
 8004022:	3601      	adds	r6, #1
 8004024:	2e40      	cmp	r6, #64	; 0x40
 8004026:	d1e6      	bne.n	8003ff6 <Prog_callback+0xe6>
		for (int i3 = 0; i3 < 2048; i3++){
 8004028:	3401      	adds	r4, #1
 800402a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800402e:	f107 0708 	add.w	r7, r7, #8
 8004032:	d1dd      	bne.n	8003ff0 <Prog_callback+0xe0>
 8004034:	f50d 5450 	add.w	r4, sp, #13312	; 0x3400
 8004038:	3418      	adds	r4, #24
 800403a:	2600      	movs	r6, #0
 800403c:	2700      	movs	r7, #0
			if (filtrowany[var]>max){
 800403e:	4630      	mov	r0, r6
 8004040:	4639      	mov	r1, r7
 8004042:	f7fc faa7 	bl	8000594 <__aeabi_l2d>
 8004046:	e8fa 8902 	ldrd	r8, r9, [sl], #8
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f7fc fd5d 	bl	8000b10 <__aeabi_dcmpgt>
 8004056:	b128      	cbz	r0, 8004064 <Prog_callback+0x154>
				max = filtrowany[var];
 8004058:	4640      	mov	r0, r8
 800405a:	4649      	mov	r1, r9
 800405c:	f7fc fd7a 	bl	8000b54 <__aeabi_d2lz>
 8004060:	4606      	mov	r6, r0
 8004062:	460f      	mov	r7, r1
		for (int var = 0; var < 1600; ++var) {
 8004064:	45a2      	cmp	sl, r4
 8004066:	d1ea      	bne.n	800403e <Prog_callback+0x12e>
		if (max >= ProgDzwieku){
 8004068:	4b41      	ldr	r3, [pc, #260]	; (8004170 <Prog_callback+0x260>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	17d3      	asrs	r3, r2, #31
 800406e:	4296      	cmp	r6, r2
 8004070:	eb77 0303 	sbcs.w	r3, r7, r3
 8004074:	db86      	blt.n	8003f84 <Prog_callback+0x74>
			HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN); //zaktualizowanie czasu RTC_Time
 8004076:	4c3f      	ldr	r4, [pc, #252]	; (8004174 <Prog_callback+0x264>)
			HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 8004078:	483a      	ldr	r0, [pc, #232]	; (8004164 <Prog_callback+0x254>)
 800407a:	2104      	movs	r1, #4
 800407c:	f7fd fd0f 	bl	8001a9e <HAL_GPIO_TogglePin>
			HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN); //zaktualizowanie czasu RTC_Time
 8004080:	2200      	movs	r2, #0
 8004082:	4621      	mov	r1, r4
 8004084:	4832      	ldr	r0, [pc, #200]	; (8004150 <Prog_callback+0x240>)
 8004086:	f7ff f95c 	bl	8003342 <HAL_RTC_GetTime>
			printf(" Czas rtc: %dh\t%dm\t%ds \r\n", RTC_Time.Hours, RTC_Time.Minutes, RTC_Time.Seconds);
 800408a:	78a3      	ldrb	r3, [r4, #2]
 800408c:	7862      	ldrb	r2, [r4, #1]
 800408e:	7821      	ldrb	r1, [r4, #0]
 8004090:	4839      	ldr	r0, [pc, #228]	; (8004178 <Prog_callback+0x268>)
 8004092:	f001 f985 	bl	80053a0 <iprintf>
			DaneDoZapisu[0] = RTC_Time.Hours;
 8004096:	7823      	ldrb	r3, [r4, #0]
 8004098:	f88d 3008 	strb.w	r3, [sp, #8]
			DaneDoZapisu[1] = RTC_Time.Minutes;
 800409c:	7863      	ldrb	r3, [r4, #1]
 800409e:	f88d 3009 	strb.w	r3, [sp, #9]
			if (BSP_QSPI_Write(PtrDaneZapis, AdresKomorki, RozmiarPaczkiDanych) != QSPI_OK){
 80040a2:	2203      	movs	r2, #3
			DaneDoZapisu[2] = RTC_Time.Seconds;
 80040a4:	78a3      	ldrb	r3, [r4, #2]
 80040a6:	f88d 300a 	strb.w	r3, [sp, #10]
			if (BSP_QSPI_Write(PtrDaneZapis, AdresKomorki, RozmiarPaczkiDanych) != QSPI_OK){
 80040aa:	4629      	mov	r1, r5
 80040ac:	a802      	add	r0, sp, #8
 80040ae:	f000 ff69 	bl	8004f84 <BSP_QSPI_Write>
 80040b2:	b110      	cbz	r0, 80040ba <Prog_callback+0x1aa>
				printf("Blad zapisu!\r\n");
 80040b4:	4828      	ldr	r0, [pc, #160]	; (8004158 <Prog_callback+0x248>)
 80040b6:	f001 f9e7 	bl	8005488 <puts>
			AdresKomorki += RozmiarPaczkiDanych;
 80040ba:	3503      	adds	r5, #3
 80040bc:	e762      	b.n	8003f84 <Prog_callback+0x74>
		printf("Blad odczytu!\r\n");
 80040be:	482f      	ldr	r0, [pc, #188]	; (800417c <Prog_callback+0x26c>)
 80040c0:	f001 f9e2 	bl	8005488 <puts>
 80040c4:	e77e      	b.n	8003fc4 <Prog_callback+0xb4>
		sprintf(buffor, "LOG %d", i/3);
 80040c6:	4641      	mov	r1, r8
 80040c8:	2703      	movs	r7, #3
 80040ca:	a804      	add	r0, sp, #16
 80040cc:	fbb4 f6f7 	udiv	r6, r4, r7
 80040d0:	4632      	mov	r2, r6
 80040d2:	f001 f9e1 	bl	8005498 <siprintf>
		BSP_LCD_GLASS_DisplayString(buffor);
 80040d6:	a804      	add	r0, sp, #16
 80040d8:	f000 fd7e 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
		HAL_Delay(500);
 80040dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040e0:	f7fc ff52 	bl	8000f88 <HAL_Delay>
		if (BSP_QSPI_Read(PtrOdczytano, i, RozmiarPaczkiDanych) == QSPI_OK){
 80040e4:	463a      	mov	r2, r7
 80040e6:	4621      	mov	r1, r4
 80040e8:	a803      	add	r0, sp, #12
 80040ea:	f000 ff1b 	bl	8004f24 <BSP_QSPI_Read>
 80040ee:	b9f0      	cbnz	r0, 800412e <Prog_callback+0x21e>
			printf("Log %d: %dh\t%dm\t%ds \r\n", i/3, Odczytano[0], Odczytano[1], Odczytano[2]);
 80040f0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80040f4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80040f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80040fc:	9100      	str	r1, [sp, #0]
 80040fe:	4820      	ldr	r0, [pc, #128]	; (8004180 <Prog_callback+0x270>)
 8004100:	4631      	mov	r1, r6
 8004102:	f001 f94d 	bl	80053a0 <iprintf>
			sprintf(buffor, "%d%d%d", Odczytano[0], Odczytano[1], Odczytano[2]);
 8004106:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800410a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800410e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004112:	9100      	str	r1, [sp, #0]
 8004114:	a804      	add	r0, sp, #16
 8004116:	491b      	ldr	r1, [pc, #108]	; (8004184 <Prog_callback+0x274>)
 8004118:	f001 f9be 	bl	8005498 <siprintf>
			BSP_LCD_GLASS_DisplayString(buffor);
 800411c:	a804      	add	r0, sp, #16
 800411e:	f000 fd5b 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
			HAL_Delay(1000);
 8004122:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004126:	f7fc ff2f 	bl	8000f88 <HAL_Delay>
	for(uint32_t i = 0x03; i < AdresKomorki; i+= RozmiarPaczkiDanych){
 800412a:	3403      	adds	r4, #3
 800412c:	e751      	b.n	8003fd2 <Prog_callback+0xc2>
			printf("Blad odczytu!\r\n");
 800412e:	4648      	mov	r0, r9
 8004130:	f001 f9aa 	bl	8005488 <puts>
			BSP_LCD_GLASS_DisplayString("BLAD");
 8004134:	4650      	mov	r0, sl
 8004136:	f000 fd4f 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
 800413a:	e7f6      	b.n	800412a <Prog_callback+0x21a>
 800413c:	f3af 8000 	nop.w
	...
 8004148:	080065f0 	.word	0x080065f0
 800414c:	2000226c 	.word	0x2000226c
 8004150:	200022b4 	.word	0x200022b4
 8004154:	08006847 	.word	0x08006847
 8004158:	08006862 	.word	0x08006862
 800415c:	20000130 	.word	0x20000130
 8004160:	08006891 	.word	0x08006891
 8004164:	48000400 	.word	0x48000400
 8004168:	08006898 	.word	0x08006898
 800416c:	08006870 	.word	0x08006870
 8004170:	20000008 	.word	0x20000008
 8004174:	20002258 	.word	0x20002258
 8004178:	08006877 	.word	0x08006877
 800417c:	080068aa 	.word	0x080068aa
 8004180:	080068c0 	.word	0x080068c0
 8004184:	080068d7 	.word	0x080068d7
 8004188:	20000258 	.word	0x20000258
 800418c:	080068b9 	.word	0x080068b9
 8004190:	080068de 	.word	0x080068de

08004194 <SystemClock_Config>:
{
 8004194:	b510      	push	{r4, lr}
 8004196:	b0b8      	sub	sp, #224	; 0xe0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004198:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800419a:	2244      	movs	r2, #68	; 0x44
 800419c:	2100      	movs	r1, #0
 800419e:	a805      	add	r0, sp, #20
 80041a0:	f001 f8f5 	bl	800538e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041a4:	4622      	mov	r2, r4
 80041a6:	2100      	movs	r1, #0
 80041a8:	4668      	mov	r0, sp
 80041aa:	f001 f8f0 	bl	800538e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041ae:	2288      	movs	r2, #136	; 0x88
 80041b0:	2100      	movs	r1, #0
 80041b2:	a816      	add	r0, sp, #88	; 0x58
 80041b4:	f001 f8eb 	bl	800538e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80041b8:	2318      	movs	r3, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80041ba:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80041bc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80041be:	2301      	movs	r3, #1
 80041c0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80041c2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80041c4:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80041c6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041c8:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041ca:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041cc:	eb0d 0004 	add.w	r0, sp, r4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80041d0:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041d2:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80041d4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80041d6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041d8:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041da:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041dc:	f7fe f93e 	bl	800245c <HAL_RCC_OscConfig>
 80041e0:	b108      	cbz	r0, 80041e6 <SystemClock_Config+0x52>
    Error_Handler();
 80041e2:	f7ff fe8d 	bl	8003f00 <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041e6:	210f      	movs	r1, #15
 80041e8:	2400      	movs	r4, #0
 80041ea:	2203      	movs	r2, #3
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	e88d 001e 	stmia.w	sp, {r1, r2, r3, r4}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041f2:	4668      	mov	r0, sp
 80041f4:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041f6:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041f8:	f7fe fb92 	bl	8002920 <HAL_RCC_ClockConfig>
 80041fc:	b108      	cbz	r0, 8004202 <SystemClock_Config+0x6e>
    Error_Handler();
 80041fe:	f7ff fe7f 	bl	8003f00 <Error_Handler>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <SystemClock_Config+0x9c>)
 8004204:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004206:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004208:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800420c:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800420e:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004210:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004212:	f7fe fd4b 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8004216:	b108      	cbz	r0, 800421c <SystemClock_Config+0x88>
    Error_Handler();
 8004218:	f7ff fe72 	bl	8003f00 <Error_Handler>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800421c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004220:	f7fd fd80 	bl	8001d24 <HAL_PWREx_ControlVoltageScaling>
 8004224:	b108      	cbz	r0, 800422a <SystemClock_Config+0x96>
    Error_Handler();
 8004226:	f7ff fe6b 	bl	8003f00 <Error_Handler>
}
 800422a:	b038      	add	sp, #224	; 0xe0
 800422c:	bd10      	pop	{r4, pc}
 800422e:	bf00      	nop
 8004230:	00030002 	.word	0x00030002

08004234 <main>:
{
 8004234:	b580      	push	{r7, lr}
  HAL_Init();
 8004236:	f7fc fe7f 	bl	8000f38 <HAL_Init>
  BSP_LCD_GLASS_Init();
 800423a:	f000 fc1f 	bl	8004a7c <BSP_LCD_GLASS_Init>
  SystemClock_Config();
 800423e:	f7ff ffa9 	bl	8004194 <SystemClock_Config>
  MX_GPIO_Init();
 8004242:	f7ff fcbb 	bl	8003bbc <MX_GPIO_Init>
  MX_DMA_Init();
 8004246:	f7ff fc91 	bl	8003b6c <MX_DMA_Init>
  MX_LCD_Init();
 800424a:	f7ff fd59 	bl	8003d00 <MX_LCD_Init>
  MX_QUADSPI_Init();
 800424e:	f000 f8b9 	bl	80043c4 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 8004252:	f000 ffb7 	bl	80051c4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004256:	f000 f91b 	bl	8004490 <MX_RTC_Init>
  MX_DFSDM1_Init();
 800425a:	f7ff fb87 	bl	800396c <MX_DFSDM1_Init>
	RTC_Calendar.Year = 19;
 800425e:	4929      	ldr	r1, [pc, #164]	; (8004304 <main+0xd0>)
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8004260:	4c29      	ldr	r4, [pc, #164]	; (8004308 <main+0xd4>)
	HAL_RTC_SetDate(&hrtc, &RTC_Calendar, RTC_FORMAT_BIN);
 8004262:	482a      	ldr	r0, [pc, #168]	; (800430c <main+0xd8>)
	RTC_Calendar.Year = 19;
 8004264:	2313      	movs	r3, #19
 8004266:	70cb      	strb	r3, [r1, #3]
	RTC_Calendar.Month = 06;
 8004268:	2306      	movs	r3, #6
 800426a:	704b      	strb	r3, [r1, #1]
	HAL_RTC_SetDate(&hrtc, &RTC_Calendar, RTC_FORMAT_BIN);
 800426c:	2200      	movs	r2, #0
	RTC_Calendar.Date = 12;
 800426e:	230c      	movs	r3, #12
 8004270:	708b      	strb	r3, [r1, #2]
	HAL_RTC_SetDate(&hrtc, &RTC_Calendar, RTC_FORMAT_BIN);
 8004272:	f7ff f810 	bl	8003296 <HAL_RTC_SetDate>
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8004276:	2200      	movs	r2, #0
 8004278:	4621      	mov	r1, r4
 800427a:	4824      	ldr	r0, [pc, #144]	; (800430c <main+0xd8>)
 800427c:	f7ff f861 	bl	8003342 <HAL_RTC_GetTime>
	RTC_Time.Hours = 0;
 8004280:	2200      	movs	r2, #0
	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8004282:	4621      	mov	r1, r4
 8004284:	4821      	ldr	r0, [pc, #132]	; (800430c <main+0xd8>)
	RTC_Time.Hours = 0;
 8004286:	7022      	strb	r2, [r4, #0]
	RTC_Time.Minutes = 0;
 8004288:	7062      	strb	r2, [r4, #1]
	RTC_Time.Seconds = 0;
 800428a:	70a2      	strb	r2, [r4, #2]
	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800428c:	f7fe ffa4 	bl	80031d8 <HAL_RTC_SetTime>
	if (HAL_OK!= HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff,2048)) {
 8004290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004294:	491e      	ldr	r1, [pc, #120]	; (8004310 <main+0xdc>)
 8004296:	481f      	ldr	r0, [pc, #124]	; (8004314 <main+0xe0>)
 8004298:	f7fd f86c 	bl	8001374 <HAL_DFSDM_FilterRegularStart_DMA>
 800429c:	b108      	cbz	r0, 80042a2 <main+0x6e>
		Error_Handler();
 800429e:	f7ff fe2f 	bl	8003f00 <Error_Handler>
	if(BSP_QSPI_Init() != QSPI_OK){
 80042a2:	f000 fd7d 	bl	8004da0 <BSP_QSPI_Init>
 80042a6:	b108      	cbz	r0, 80042ac <main+0x78>
		Error_Handler();
 80042a8:	f7ff fe2a 	bl	8003f00 <Error_Handler>
  Menu_Odswiez();
 80042ac:	f000 f83e 	bl	800432c <Menu_Odswiez>
		  if(JRight_flag == 1){
 80042b0:	4d19      	ldr	r5, [pc, #100]	; (8004318 <main+0xe4>)
		  if(JLeft_flag == 1){
 80042b2:	4e1a      	ldr	r6, [pc, #104]	; (800431c <main+0xe8>)
		  if(JDown_flag == 1){
 80042b4:	4f1a      	ldr	r7, [pc, #104]	; (8004320 <main+0xec>)
		  if(JRight_flag == 1){
 80042b6:	682b      	ldr	r3, [r5, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d103      	bne.n	80042c4 <main+0x90>
			 Menu_Nast();
 80042bc:	f000 f84e 	bl	800435c <Menu_Nast>
			 JRight_flag = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	602b      	str	r3, [r5, #0]
		  if(JLeft_flag == 1){
 80042c4:	6833      	ldr	r3, [r6, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d103      	bne.n	80042d2 <main+0x9e>
			 Menu_Poprz();
 80042ca:	f000 f851 	bl	8004370 <Menu_Poprz>
			 JLeft_flag  = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	6033      	str	r3, [r6, #0]
		  if(JDown_flag == 1){
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d103      	bne.n	80042e0 <main+0xac>
			  Menu_Dziecko();
 80042d8:	f000 f854 	bl	8004384 <Menu_Dziecko>
			 JDown_flag  = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	603b      	str	r3, [r7, #0]
		  if(JUp_flag == 1){
 80042e0:	4c10      	ldr	r4, [pc, #64]	; (8004324 <main+0xf0>)
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d103      	bne.n	80042f0 <main+0xbc>
			  	 Menu_Rodzic();
 80042e8:	f000 f856 	bl	8004398 <Menu_Rodzic>
		  		 JUp_flag  = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	6023      	str	r3, [r4, #0]
		  if(JCenter_flag == 1){
 80042f0:	4c0d      	ldr	r4, [pc, #52]	; (8004328 <main+0xf4>)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d1de      	bne.n	80042b6 <main+0x82>
			 Menu_Funkcja();
 80042f8:	f000 f858 	bl	80043ac <Menu_Funkcja>
			 JCenter_flag  = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	e7d9      	b.n	80042b6 <main+0x82>
 8004302:	bf00      	nop
 8004304:	2000226c 	.word	0x2000226c
 8004308:	20002258 	.word	0x20002258
 800430c:	200022b4 	.word	0x200022b4
 8004310:	20000258 	.word	0x20000258
 8004314:	20000148 	.word	0x20000148
 8004318:	2000012c 	.word	0x2000012c
 800431c:	20000128 	.word	0x20000128
 8004320:	20000124 	.word	0x20000124
 8004324:	20000130 	.word	0x20000130
 8004328:	20000120 	.word	0x20000120

0800432c <Menu_Odswiez>:
//	Menu Wyswietl_Info_T1;

Pozycja_Menu *AktualnaPozycja = &Start;

void Menu_Odswiez(void){
	int ileZnakow = strlen(AktualnaPozycja->Nazwa_Pozycji);
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <Menu_Odswiez+0x2c>)
 800432e:	681b      	ldr	r3, [r3, #0]
void Menu_Odswiez(void){
 8004330:	b510      	push	{r4, lr}
	int ileZnakow = strlen(AktualnaPozycja->Nazwa_Pozycji);
 8004332:	681c      	ldr	r4, [r3, #0]
 8004334:	4620      	mov	r0, r4
 8004336:	f7fb ff4b 	bl	80001d0 <strlen>
	if(ileZnakow < 7){  // LCD ma 6 znakow
 800433a:	2806      	cmp	r0, #6
 800433c:	dc04      	bgt.n	8004348 <Menu_Odswiez+0x1c>
		BSP_LCD_GLASS_DisplayString(AktualnaPozycja->Nazwa_Pozycji);
 800433e:	4620      	mov	r0, r4
	} else {
		BSP_LCD_GLASS_ScrollSentence(AktualnaPozycja->Nazwa_Pozycji, 1, 200);
	}
}
 8004340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BSP_LCD_GLASS_DisplayString(AktualnaPozycja->Nazwa_Pozycji);
 8004344:	f000 bc48 	b.w	8004bd8 <BSP_LCD_GLASS_DisplayString>
		BSP_LCD_GLASS_ScrollSentence(AktualnaPozycja->Nazwa_Pozycji, 1, 200);
 8004348:	4620      	mov	r0, r4
 800434a:	22c8      	movs	r2, #200	; 0xc8
 800434c:	2101      	movs	r1, #1
}
 800434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BSP_LCD_GLASS_ScrollSentence(AktualnaPozycja->Nazwa_Pozycji, 1, 200);
 8004352:	f000 bc59 	b.w	8004c08 <BSP_LCD_GLASS_ScrollSentence>
 8004356:	bf00      	nop
 8004358:	2000000c 	.word	0x2000000c

0800435c <Menu_Nast>:

void Menu_Nast(void){
	if(AktualnaPozycja->Nastepna){
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <Menu_Nast+0x10>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	6852      	ldr	r2, [r2, #4]
 8004362:	b102      	cbz	r2, 8004366 <Menu_Nast+0xa>
		AktualnaPozycja = AktualnaPozycja->Nastepna;
 8004364:	601a      	str	r2, [r3, #0]
	}
	Menu_Odswiez();
 8004366:	f7ff bfe1 	b.w	800432c <Menu_Odswiez>
 800436a:	bf00      	nop
 800436c:	2000000c 	.word	0x2000000c

08004370 <Menu_Poprz>:
}

void Menu_Poprz(void){
	if(AktualnaPozycja->Poprzednia){
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <Menu_Poprz+0x10>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	6892      	ldr	r2, [r2, #8]
 8004376:	b102      	cbz	r2, 800437a <Menu_Poprz+0xa>
		AktualnaPozycja = AktualnaPozycja->Poprzednia;
 8004378:	601a      	str	r2, [r3, #0]
	}
	Menu_Odswiez();
 800437a:	f7ff bfd7 	b.w	800432c <Menu_Odswiez>
 800437e:	bf00      	nop
 8004380:	2000000c 	.word	0x2000000c

08004384 <Menu_Dziecko>:
}

void Menu_Dziecko(void){
	if(AktualnaPozycja->Dziecko){
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <Menu_Dziecko+0x10>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	6912      	ldr	r2, [r2, #16]
 800438a:	b102      	cbz	r2, 800438e <Menu_Dziecko+0xa>
		AktualnaPozycja = AktualnaPozycja->Dziecko;
 800438c:	601a      	str	r2, [r3, #0]
	}
	Menu_Odswiez();
 800438e:	f7ff bfcd 	b.w	800432c <Menu_Odswiez>
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c

08004398 <Menu_Rodzic>:
}

void Menu_Rodzic(void){
	if(AktualnaPozycja->Rodzic){
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <Menu_Rodzic+0x10>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68d2      	ldr	r2, [r2, #12]
 800439e:	b102      	cbz	r2, 80043a2 <Menu_Rodzic+0xa>
		AktualnaPozycja = AktualnaPozycja->Rodzic;
 80043a0:	601a      	str	r2, [r3, #0]
	}
	Menu_Odswiez();
 80043a2:	f7ff bfc3 	b.w	800432c <Menu_Odswiez>
 80043a6:	bf00      	nop
 80043a8:	2000000c 	.word	0x2000000c

080043ac <Menu_Funkcja>:
}

void Menu_Funkcja(void){
 80043ac:	b508      	push	{r3, lr}
	if (AktualnaPozycja->Funkcja_Pozycji){
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <Menu_Funkcja+0x14>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	b103      	cbz	r3, 80043b8 <Menu_Funkcja+0xc>
		AktualnaPozycja->Funkcja_Pozycji();
 80043b6:	4798      	blx	r3
	}
	Menu_Odswiez();
}
 80043b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Menu_Odswiez();
 80043bc:	f7ff bfb6 	b.w	800432c <Menu_Odswiez>
 80043c0:	2000000c 	.word	0x2000000c

080043c4 <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 80043c4:	480a      	ldr	r0, [pc, #40]	; (80043f0 <MX_QUADSPI_Init+0x2c>)
  hqspi.Init.ClockPrescaler = 255;
 80043c6:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <MX_QUADSPI_Init+0x30>)
{
 80043c8:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 255;
 80043ca:	23ff      	movs	r3, #255	; 0xff
 80043cc:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80043d0:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 80043d2:	2201      	movs	r2, #1
 80043d4:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80043d6:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 80043d8:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80043da:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80043dc:	6183      	str	r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80043de:	f7fd fd9f 	bl	8001f20 <HAL_QSPI_Init>
 80043e2:	b118      	cbz	r0, 80043ec <MX_QUADSPI_Init+0x28>
  {
    Error_Handler();
  }

}
 80043e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80043e8:	f7ff bd8a 	b.w	8003f00 <Error_Handler>
 80043ec:	bd08      	pop	{r3, pc}
 80043ee:	bf00      	nop
 80043f0:	20002270 	.word	0x20002270
 80043f4:	a0001000 	.word	0xa0001000

080043f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80043f8:	b510      	push	{r4, lr}
 80043fa:	4604      	mov	r4, r0
 80043fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fe:	2214      	movs	r2, #20
 8004400:	2100      	movs	r1, #0
 8004402:	a803      	add	r0, sp, #12
 8004404:	f000 ffc3 	bl	800538e <memset>
  if(qspiHandle->Instance==QUADSPI)
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <HAL_QSPI_MspInit+0x64>)
 800440c:	429a      	cmp	r2, r3
 800440e:	d122      	bne.n	8004456 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004410:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8004414:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004418:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 800441a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800441c:	4810      	ldr	r0, [pc, #64]	; (8004460 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800441e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004422:	651a      	str	r2, [r3, #80]	; 0x50
 8004424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004426:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800442a:	9201      	str	r2, [sp, #4]
 800442c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800442e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004430:	f042 0210 	orr.w	r2, r2, #16
 8004434:	64da      	str	r2, [r3, #76]	; 0x4c
 8004436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	9302      	str	r3, [sp, #8]
 800443e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8004440:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004444:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	2302      	movs	r3, #2
 8004448:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444a:	2303      	movs	r3, #3
 800444c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800444e:	230a      	movs	r3, #10
 8004450:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004452:	f7fd f9b9 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8004456:	b008      	add	sp, #32
 8004458:	bd10      	pop	{r4, pc}
 800445a:	bf00      	nop
 800445c:	a0001000 	.word	0xa0001000
 8004460:	48001000 	.word	0x48001000

08004464 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
 8004464:	6802      	ldr	r2, [r0, #0]
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <HAL_QSPI_MspDeInit+0x20>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d109      	bne.n	8004480 <HAL_QSPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800446c:	4a06      	ldr	r2, [pc, #24]	; (8004488 <HAL_QSPI_MspDeInit+0x24>)
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800446e:	4807      	ldr	r0, [pc, #28]	; (800448c <HAL_QSPI_MspDeInit+0x28>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8004470:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004476:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_GPIO_DeInit(GPIOE, QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8004478:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800447c:	f7fd ba80 	b.w	8001980 <HAL_GPIO_DeInit>
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	a0001000 	.word	0xa0001000
 8004488:	40021000 	.word	0x40021000
 800448c:	48001000 	.word	0x48001000

08004490 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RTC_TimeTypeDef sTime = {0};
 8004492:	2214      	movs	r2, #20
 8004494:	2100      	movs	r1, #0
 8004496:	a801      	add	r0, sp, #4
 8004498:	f000 ff79 	bl	800538e <memset>
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800449c:	481e      	ldr	r0, [pc, #120]	; (8004518 <MX_RTC_Init+0x88>)
 800449e:	4a1f      	ldr	r2, [pc, #124]	; (800451c <MX_RTC_Init+0x8c>)
  RTC_DateTypeDef sDate = {0};
 80044a0:	2300      	movs	r3, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80044a2:	e880 000c 	stmia.w	r0, {r2, r3}
  hrtc.Init.AsynchPrediv = 127;
 80044a6:	227f      	movs	r2, #127	; 0x7f
 80044a8:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80044aa:	22ff      	movs	r2, #255	; 0xff
  RTC_DateTypeDef sDate = {0};
 80044ac:	9300      	str	r3, [sp, #0]
  hrtc.Init.SynchPrediv = 255;
 80044ae:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80044b0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80044b2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80044b4:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80044b6:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80044b8:	f7fe fe3c 	bl	8003134 <HAL_RTC_Init>
 80044bc:	b108      	cbz	r0, 80044c2 <MX_RTC_Init+0x32>
  {
    Error_Handler();
 80044be:	f7ff fd1f 	bl	8003f00 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 23;
 80044c2:	2317      	movs	r3, #23
 80044c4:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 59;
 80044c8:	233b      	movs	r3, #59	; 0x3b
  sTime.Seconds = 50;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044ca:	2200      	movs	r2, #0
  sTime.Minutes = 59;
 80044cc:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80044d0:	a901      	add	r1, sp, #4
  sTime.Seconds = 50;
 80044d2:	2332      	movs	r3, #50	; 0x32
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80044d4:	4810      	ldr	r0, [pc, #64]	; (8004518 <MX_RTC_Init+0x88>)
  sTime.Seconds = 50;
 80044d6:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044da:	9204      	str	r2, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80044dc:	9205      	str	r2, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80044de:	f7fe fe7b 	bl	80031d8 <HAL_RTC_SetTime>
 80044e2:	b108      	cbz	r0, 80044e8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80044e4:	f7ff fd0c 	bl	8003f00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80044e8:	2303      	movs	r3, #3
 80044ea:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_APRIL;
 80044ee:	2304      	movs	r3, #4
 80044f0:	f88d 3001 	strb.w	r3, [sp, #1]
  sDate.Date = 23;
 80044f4:	2317      	movs	r3, #23
 80044f6:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 19;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80044fa:	2200      	movs	r2, #0
  sDate.Year = 19;
 80044fc:	2313      	movs	r3, #19
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80044fe:	4669      	mov	r1, sp
 8004500:	4805      	ldr	r0, [pc, #20]	; (8004518 <MX_RTC_Init+0x88>)
  sDate.Year = 19;
 8004502:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004506:	f7fe fec6 	bl	8003296 <HAL_RTC_SetDate>
 800450a:	b108      	cbz	r0, 8004510 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800450c:	f7ff fcf8 	bl	8003f00 <Error_Handler>
  }

}
 8004510:	b007      	add	sp, #28
 8004512:	f85d fb04 	ldr.w	pc, [sp], #4
 8004516:	bf00      	nop
 8004518:	200022b4 	.word	0x200022b4
 800451c:	40002800 	.word	0x40002800

08004520 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8004520:	6802      	ldr	r2, [r0, #0]
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RTC_MspInit+0x18>)
 8004524:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004526:	bf01      	itttt	eq
 8004528:	4a04      	ldreq	r2, [pc, #16]	; (800453c <HAL_RTC_MspInit+0x1c>)
 800452a:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 800452e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8004532:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8004536:	4770      	bx	lr
 8004538:	40002800 	.word	0x40002800
 800453c:	40021000 	.word	0x40021000

08004540 <WriteChar.isra.3>:
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
  uint16_t ch = 0 ;
  uint8_t loop = 0, index = 0;

  switch (*Char)
 8004540:	282f      	cmp	r0, #47	; 0x2f
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
 8004542:	b570      	push	{r4, r5, r6, lr}
  switch (*Char)
 8004544:	d06d      	beq.n	8004622 <WriteChar.isra.3+0xe2>
 8004546:	d821      	bhi.n	800458c <WriteChar.isra.3+0x4c>
 8004548:	2829      	cmp	r0, #41	; 0x29
 800454a:	d05c      	beq.n	8004606 <WriteChar.isra.3+0xc6>
 800454c:	d807      	bhi.n	800455e <WriteChar.isra.3+0x1e>
 800454e:	2825      	cmp	r0, #37	; 0x25
 8004550:	d06c      	beq.n	800462c <WriteChar.isra.3+0xec>
 8004552:	2828      	cmp	r0, #40	; 0x28
 8004554:	d055      	beq.n	8004602 <WriteChar.isra.3+0xc2>
 8004556:	2820      	cmp	r0, #32
 8004558:	d106      	bne.n	8004568 <WriteChar.isra.3+0x28>
      ch = 0x00;
 800455a:	2400      	movs	r4, #0
 800455c:	e031      	b.n	80045c2 <WriteChar.isra.3+0x82>
  switch (*Char)
 800455e:	282b      	cmp	r0, #43	; 0x2b
 8004560:	d05c      	beq.n	800461c <WriteChar.isra.3+0xdc>
 8004562:	d32c      	bcc.n	80045be <WriteChar.isra.3+0x7e>
 8004564:	282d      	cmp	r0, #45	; 0x2d
 8004566:	d056      	beq.n	8004616 <WriteChar.isra.3+0xd6>
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8004568:	f1a0 0441 	sub.w	r4, r0, #65	; 0x41
 800456c:	b2e5      	uxtb	r5, r4
 800456e:	2d19      	cmp	r5, #25
        ch = CapLetterMap[*Char - 'A'];
 8004570:	bf98      	it	ls
 8004572:	4da7      	ldrls	r5, [pc, #668]	; (8004810 <WriteChar.isra.3+0x2d0>)
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8004574:	f1a0 0061 	sub.w	r0, r0, #97	; 0x61
        ch = CapLetterMap[*Char - 'A'];
 8004578:	bf98      	it	ls
 800457a:	f835 4014 	ldrhls.w	r4, [r5, r4, lsl #1]
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 800457e:	b2c5      	uxtb	r5, r0
  uint16_t ch = 0 ;
 8004580:	bf88      	it	hi
 8004582:	2400      	movhi	r4, #0
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8004584:	2d19      	cmp	r5, #25
 8004586:	d81c      	bhi.n	80045c2 <WriteChar.isra.3+0x82>
        ch = CapLetterMap[*Char - 'a'];
 8004588:	4ca1      	ldr	r4, [pc, #644]	; (8004810 <WriteChar.isra.3+0x2d0>)
 800458a:	e054      	b.n	8004636 <WriteChar.isra.3+0xf6>
  switch (*Char)
 800458c:	286d      	cmp	r0, #109	; 0x6d
 800458e:	d03c      	beq.n	800460a <WriteChar.isra.3+0xca>
 8004590:	d806      	bhi.n	80045a0 <WriteChar.isra.3+0x60>
 8004592:	2839      	cmp	r0, #57	; 0x39
 8004594:	d94d      	bls.n	8004632 <WriteChar.isra.3+0xf2>
 8004596:	2864      	cmp	r0, #100	; 0x64
 8004598:	d1e6      	bne.n	8004568 <WriteChar.isra.3+0x28>
      ch = C_DMAP;
 800459a:	f44f 4473 	mov.w	r4, #62208	; 0xf300
 800459e:	e010      	b.n	80045c2 <WriteChar.isra.3+0x82>
  switch (*Char)
 80045a0:	28b0      	cmp	r0, #176	; 0xb0
 80045a2:	d040      	beq.n	8004626 <WriteChar.isra.3+0xe6>
 80045a4:	d804      	bhi.n	80045b0 <WriteChar.isra.3+0x70>
 80045a6:	286e      	cmp	r0, #110	; 0x6e
 80045a8:	d1de      	bne.n	8004568 <WriteChar.isra.3+0x28>
      ch = C_NMAP;
 80045aa:	f242 2410 	movw	r4, #8720	; 0x2210
 80045ae:	e008      	b.n	80045c2 <WriteChar.isra.3+0x82>
  switch (*Char)
 80045b0:	28b5      	cmp	r0, #181	; 0xb5
 80045b2:	d02d      	beq.n	8004610 <WriteChar.isra.3+0xd0>
 80045b4:	28ff      	cmp	r0, #255	; 0xff
 80045b6:	d1d7      	bne.n	8004568 <WriteChar.isra.3+0x28>
      ch = C_FULL;
 80045b8:	f64f 74dd 	movw	r4, #65501	; 0xffdd
 80045bc:	e001      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_STAR;
 80045be:	f24a 04dd 	movw	r4, #41181	; 0xa0dd
  if (Point == POINT_ON)
 80045c2:	2901      	cmp	r1, #1
    ch |= 0x0002;
 80045c4:	bf08      	it	eq
 80045c6:	f044 0402 	orreq.w	r4, r4, #2
  if (Colon == DOUBLEPOINT_ON)
 80045ca:	2a01      	cmp	r2, #1
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 80045cc:	4991      	ldr	r1, [pc, #580]	; (8004814 <WriteChar.isra.3+0x2d4>)
    ch |= 0x0020;
 80045ce:	bf08      	it	eq
 80045d0:	f044 0420 	orreq.w	r4, r4, #32
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 80045d4:	f3c4 2003 	ubfx	r0, r4, #8, #4
 80045d8:	1322      	asrs	r2, r4, #12
 80045da:	6048      	str	r0, [r1, #4]
 80045dc:	f3c4 1003 	ubfx	r0, r4, #4, #4
 80045e0:	f004 040f 	and.w	r4, r4, #15
 80045e4:	60cc      	str	r4, [r1, #12]
 80045e6:	600a      	str	r2, [r1, #0]
 80045e8:	6088      	str	r0, [r1, #8]
 80045ea:	460c      	mov	r4, r1
{
  uint32_t data = 0x00;
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);

  switch (Position)
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	f200 823a 	bhi.w	8004a66 <WriteChar.isra.3+0x526>
 80045f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80045f6:	0023      	.short	0x0023
 80045f8:	00c00070 	.word	0x00c00070
 80045fc:	017c011b 	.word	0x017c011b
 8004600:	01e8      	.short	0x01e8
      ch = C_OPENPARMAP;
 8004602:	4604      	mov	r4, r0
 8004604:	e7dd      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_CLOSEPARMAP;
 8004606:	2411      	movs	r4, #17
 8004608:	e7db      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_MMAP;
 800460a:	f24b 2410 	movw	r4, #45584	; 0xb210
 800460e:	e7d8      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_UMAP;
 8004610:	f246 0484 	movw	r4, #24708	; 0x6084
 8004614:	e7d5      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_MINUS;
 8004616:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 800461a:	e7d2      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_PLUS;
 800461c:	f24a 0414 	movw	r4, #40980	; 0xa014
 8004620:	e7cf      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_SLATCH;
 8004622:	24c0      	movs	r4, #192	; 0xc0
 8004624:	e7cd      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_PERCENT_1;
 8004626:	f44f 446c 	mov.w	r4, #60416	; 0xec00
 800462a:	e7ca      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = C_PERCENT_2;
 800462c:	f44f 4433 	mov.w	r4, #45824	; 0xb300
 8004630:	e7c7      	b.n	80045c2 <WriteChar.isra.3+0x82>
      ch = NumberMap[*Char - ASCII_CHAR_0];
 8004632:	4c79      	ldr	r4, [pc, #484]	; (8004818 <WriteChar.isra.3+0x2d8>)
 8004634:	3830      	subs	r0, #48	; 0x30
        ch = CapLetterMap[*Char - 'a'];
 8004636:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
 800463a:	e7c2      	b.n	80045c2 <WriteChar.isra.3+0x82>
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800463c:	0111      	lsls	r1, r2, #4
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800463e:	f002 0308 	and.w	r3, r2, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8004642:	f001 0110 	and.w	r1, r1, #16
 8004646:	4319      	orrs	r1, r3
 8004648:	0593      	lsls	r3, r2, #22
 800464a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800464e:	4319      	orrs	r1, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8004650:	0513      	lsls	r3, r2, #20
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8004656:	430b      	orrs	r3, r1
 8004658:	4a70      	ldr	r2, [pc, #448]	; (800481c <WriteChar.isra.3+0x2dc>)
 800465a:	4871      	ldr	r0, [pc, #452]	; (8004820 <WriteChar.isra.3+0x2e0>)
 800465c:	2100      	movs	r1, #0
 800465e:	f7fd fa31 	bl	8001ac4 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8004662:	6862      	ldr	r2, [r4, #4]
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004664:	486e      	ldr	r0, [pc, #440]	; (8004820 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8004666:	0113      	lsls	r3, r2, #4
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8004668:	f002 0108 	and.w	r1, r2, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	430b      	orrs	r3, r1
 8004672:	0591      	lsls	r1, r2, #22
 8004674:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8004678:	0512      	lsls	r2, r2, #20
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800467a:	430b      	orrs	r3, r1
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800467c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004680:	4313      	orrs	r3, r2
 8004682:	2102      	movs	r1, #2
 8004684:	4a65      	ldr	r2, [pc, #404]	; (800481c <WriteChar.isra.3+0x2dc>)
 8004686:	f7fd fa1d 	bl	8001ac4 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800468a:	68a2      	ldr	r2, [r4, #8]
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800468c:	4864      	ldr	r0, [pc, #400]	; (8004820 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800468e:	0113      	lsls	r3, r2, #4
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8004690:	f002 0108 	and.w	r1, r2, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	430b      	orrs	r3, r1
 800469a:	0591      	lsls	r1, r2, #22
 800469c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80046a0:	0512      	lsls	r2, r2, #20
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80046a2:	430b      	orrs	r3, r1
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80046a4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80046a8:	4313      	orrs	r3, r2
 80046aa:	2104      	movs	r1, #4
 80046ac:	4a5b      	ldr	r2, [pc, #364]	; (800481c <WriteChar.isra.3+0x2dc>)
 80046ae:	f7fd fa09 	bl	8001ac4 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80046b2:	68e2      	ldr	r2, [r4, #12]
 80046b4:	0113      	lsls	r3, r2, #4
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80046b6:	f002 0108 	and.w	r1, r2, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	430b      	orrs	r3, r1
 80046c0:	0591      	lsls	r1, r2, #22
 80046c2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 80046c6:	0512      	lsls	r2, r2, #20
 80046c8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 80046cc:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a52      	ldr	r2, [pc, #328]	; (800481c <WriteChar.isra.3+0x2dc>)
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80046d2:	2106      	movs	r1, #6
 80046d4:	e106      	b.n	80048e4 <WriteChar.isra.3+0x3a4>
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80046d6:	0311      	lsls	r1, r2, #12
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80046d8:	0293      	lsls	r3, r2, #10
 80046da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80046de:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80046e2:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80046e4:	0193      	lsls	r3, r2, #6
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80046ea:	4319      	orrs	r1, r3
 80046ec:	0093      	lsls	r3, r2, #2
 80046ee:	f003 0320 	and.w	r3, r3, #32
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80046f2:	430b      	orrs	r3, r1
 80046f4:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <WriteChar.isra.3+0x2e4>)
 80046f6:	484a      	ldr	r0, [pc, #296]	; (8004820 <WriteChar.isra.3+0x2e0>)
 80046f8:	2100      	movs	r1, #0
 80046fa:	f7fd f9e3 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80046fe:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004700:	4847      	ldr	r0, [pc, #284]	; (8004820 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8004702:	0313      	lsls	r3, r2, #12
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004704:	0291      	lsls	r1, r2, #10
 8004706:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800470a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800470e:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8004710:	0191      	lsls	r1, r2, #6
 8004712:	f001 0140 	and.w	r1, r1, #64	; 0x40
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	430b      	orrs	r3, r1
 800471a:	f002 0220 	and.w	r2, r2, #32
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800471e:	4313      	orrs	r3, r2
 8004720:	2102      	movs	r1, #2
 8004722:	4a40      	ldr	r2, [pc, #256]	; (8004824 <WriteChar.isra.3+0x2e4>)
 8004724:	f7fd f9ce 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8004728:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800472a:	483d      	ldr	r0, [pc, #244]	; (8004820 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800472c:	0313      	lsls	r3, r2, #12
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800472e:	0291      	lsls	r1, r2, #10
 8004730:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8004734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004738:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800473a:	0191      	lsls	r1, r2, #6
 800473c:	f001 0140 	and.w	r1, r1, #64	; 0x40
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	430b      	orrs	r3, r1
 8004744:	f002 0220 	and.w	r2, r2, #32
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8004748:	4313      	orrs	r3, r2
 800474a:	2104      	movs	r1, #4
 800474c:	4a35      	ldr	r2, [pc, #212]	; (8004824 <WriteChar.isra.3+0x2e4>)
 800474e:	f7fd f9b9 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8004752:	68e2      	ldr	r2, [r4, #12]
 8004754:	0313      	lsls	r3, r2, #12
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004756:	0291      	lsls	r1, r2, #10
 8004758:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800475c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004760:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8004762:	0191      	lsls	r1, r2, #6
 8004764:	f001 0140 	and.w	r1, r1, #64	; 0x40
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8004768:	0092      	lsls	r2, r2, #2
 800476a:	f002 0220 	and.w	r2, r2, #32
 800476e:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8004770:	4313      	orrs	r3, r2
 8004772:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <WriteChar.isra.3+0x2e4>)
 8004774:	e7ad      	b.n	80046d2 <WriteChar.isra.3+0x192>
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8004776:	0711      	lsls	r1, r2, #28
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8004778:	0693      	lsls	r3, r2, #26
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800477e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8004782:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8004784:	03d3      	lsls	r3, r2, #15
 8004786:	b29b      	uxth	r3, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8004788:	4319      	orrs	r1, r3
 800478a:	02d3      	lsls	r3, r2, #11
 800478c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8004790:	430b      	orrs	r3, r1
 8004792:	4a25      	ldr	r2, [pc, #148]	; (8004828 <WriteChar.isra.3+0x2e8>)
 8004794:	4822      	ldr	r0, [pc, #136]	; (8004820 <WriteChar.isra.3+0x2e0>)
 8004796:	2100      	movs	r1, #0
 8004798:	f7fd f994 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800479c:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800479e:	4820      	ldr	r0, [pc, #128]	; (8004820 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047a0:	0713      	lsls	r3, r2, #28
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047a2:	0691      	lsls	r1, r2, #26
 80047a4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047ac:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047ae:	03d1      	lsls	r1, r2, #15
 80047b0:	b289      	uxth	r1, r1
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047b2:	02d2      	lsls	r2, r2, #11
 80047b4:	430b      	orrs	r3, r1
 80047b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80047ba:	4313      	orrs	r3, r2
 80047bc:	2102      	movs	r1, #2
 80047be:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <WriteChar.isra.3+0x2e8>)
 80047c0:	f7fd f980 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047c4:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80047c6:	4816      	ldr	r0, [pc, #88]	; (8004820 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047c8:	0713      	lsls	r3, r2, #28
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047ca:	0691      	lsls	r1, r2, #26
 80047cc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047d4:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047d6:	03d1      	lsls	r1, r2, #15
 80047d8:	b289      	uxth	r1, r1
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047da:	02d2      	lsls	r2, r2, #11
 80047dc:	430b      	orrs	r3, r1
 80047de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80047e2:	4313      	orrs	r3, r2
 80047e4:	2104      	movs	r1, #4
 80047e6:	4a10      	ldr	r2, [pc, #64]	; (8004828 <WriteChar.isra.3+0x2e8>)
 80047e8:	f7fd f96c 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047ec:	68e2      	ldr	r2, [r4, #12]
 80047ee:	0713      	lsls	r3, r2, #28
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047f0:	0691      	lsls	r1, r2, #26
 80047f2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80047fa:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80047fc:	03d1      	lsls	r1, r2, #15
 80047fe:	b289      	uxth	r1, r1
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8004800:	02d2      	lsls	r2, r2, #11
 8004802:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004806:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8004808:	4313      	orrs	r3, r2
 800480a:	4a07      	ldr	r2, [pc, #28]	; (8004828 <WriteChar.isra.3+0x2e8>)
 800480c:	e761      	b.n	80046d2 <WriteChar.isra.3+0x192>
 800480e:	bf00      	nop
 8004810:	08006906 	.word	0x08006906
 8004814:	200022d8 	.word	0x200022d8
 8004818:	0800693a 	.word	0x0800693a
 800481c:	ff3fffe7 	.word	0xff3fffe7
 8004820:	200022e8 	.word	0x200022e8
 8004824:	ffffcf9f 	.word	0xffffcf9f
 8004828:	cfff3fff 	.word	0xcfff3fff
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800482c:	06d3      	lsls	r3, r2, #27
 800482e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8004832:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8004836:	2100      	movs	r1, #0
 8004838:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800483c:	488a      	ldr	r0, [pc, #552]	; (8004a68 <WriteChar.isra.3+0x528>)
 800483e:	f7fd f941 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8004842:	6822      	ldr	r2, [r4, #0]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8004844:	4888      	ldr	r0, [pc, #544]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8004846:	f3c2 0380 	ubfx	r3, r2, #2, #1
 800484a:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 800484e:	4313      	orrs	r3, r2
 8004850:	2101      	movs	r1, #1
 8004852:	f06f 0203 	mvn.w	r2, #3
 8004856:	f7fd f935 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800485a:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800485c:	4882      	ldr	r0, [pc, #520]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800485e:	06d3      	lsls	r3, r2, #27
 8004860:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004864:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8004868:	2102      	movs	r1, #2
 800486a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800486e:	f7fd f929 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8004872:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004874:	487c      	ldr	r0, [pc, #496]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8004876:	f3c2 0380 	ubfx	r3, r2, #2, #1
 800487a:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800487e:	4313      	orrs	r3, r2
 8004880:	2103      	movs	r1, #3
 8004882:	f06f 0203 	mvn.w	r2, #3
 8004886:	f7fd f91d 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800488a:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800488c:	4876      	ldr	r0, [pc, #472]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800488e:	06d3      	lsls	r3, r2, #27
 8004890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8004894:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8004898:	2104      	movs	r1, #4
 800489a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800489e:	f7fd f911 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80048a2:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80048a4:	4870      	ldr	r0, [pc, #448]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80048a6:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80048aa:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80048ae:	4313      	orrs	r3, r2
 80048b0:	2105      	movs	r1, #5
 80048b2:	f06f 0203 	mvn.w	r2, #3
 80048b6:	f7fd f905 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 80048ba:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80048bc:	486a      	ldr	r0, [pc, #424]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 80048be:	06d3      	lsls	r3, r2, #27
 80048c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80048c4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80048c8:	2106      	movs	r1, #6
 80048ca:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80048ce:	f7fd f8f9 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80048d2:	68e2      	ldr	r2, [r4, #12]
 80048d4:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80048d8:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80048dc:	4313      	orrs	r3, r2
 80048de:	f06f 0203 	mvn.w	r2, #3
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80048e2:	2107      	movs	r1, #7
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80048e4:	4860      	ldr	r0, [pc, #384]	; (8004a68 <WriteChar.isra.3+0x528>)
      break;

    default:
      break;
  }
}
 80048e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80048ea:	f7fd b8eb 	b.w	8001ac4 <HAL_LCD_Write>
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80048ee:	0613      	lsls	r3, r2, #24
 80048f0:	0592      	lsls	r2, r2, #22
 80048f2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80048fa:	4313      	orrs	r3, r2
 80048fc:	2100      	movs	r1, #0
 80048fe:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8004902:	4859      	ldr	r0, [pc, #356]	; (8004a68 <WriteChar.isra.3+0x528>)
 8004904:	f7fd f8de 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8004908:	6822      	ldr	r2, [r4, #0]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 800490a:	4857      	ldr	r0, [pc, #348]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 800490c:	0853      	lsrs	r3, r2, #1
 800490e:	00d2      	lsls	r2, r2, #3
 8004910:	f002 0208 	and.w	r2, r2, #8
 8004914:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8004918:	4313      	orrs	r3, r2
 800491a:	2101      	movs	r1, #1
 800491c:	f06f 020c 	mvn.w	r2, #12
 8004920:	f7fd f8d0 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8004924:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004926:	4850      	ldr	r0, [pc, #320]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8004928:	0613      	lsls	r3, r2, #24
 800492a:	0592      	lsls	r2, r2, #22
 800492c:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004934:	4313      	orrs	r3, r2
 8004936:	2102      	movs	r1, #2
 8004938:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800493c:	f7fd f8c2 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8004940:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004942:	4849      	ldr	r0, [pc, #292]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8004944:	0853      	lsrs	r3, r2, #1
 8004946:	00d2      	lsls	r2, r2, #3
 8004948:	f002 0208 	and.w	r2, r2, #8
 800494c:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004950:	4313      	orrs	r3, r2
 8004952:	2103      	movs	r1, #3
 8004954:	f06f 020c 	mvn.w	r2, #12
 8004958:	f7fd f8b4 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800495c:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800495e:	4842      	ldr	r0, [pc, #264]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8004960:	0613      	lsls	r3, r2, #24
 8004962:	0592      	lsls	r2, r2, #22
 8004964:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800496c:	4313      	orrs	r3, r2
 800496e:	2104      	movs	r1, #4
 8004970:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8004974:	f7fd f8a6 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8004978:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800497a:	483b      	ldr	r0, [pc, #236]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 800497c:	0853      	lsrs	r3, r2, #1
 800497e:	00d2      	lsls	r2, r2, #3
 8004980:	f002 0208 	and.w	r2, r2, #8
 8004984:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8004988:	4313      	orrs	r3, r2
 800498a:	2105      	movs	r1, #5
 800498c:	f06f 020c 	mvn.w	r2, #12
 8004990:	f7fd f898 	bl	8001ac4 <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8004994:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8004996:	4834      	ldr	r0, [pc, #208]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8004998:	0613      	lsls	r3, r2, #24
 800499a:	0592      	lsls	r2, r2, #22
 800499c:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80049a4:	4313      	orrs	r3, r2
 80049a6:	2106      	movs	r1, #6
 80049a8:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80049ac:	f7fd f88a 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80049b0:	68e2      	ldr	r2, [r4, #12]
 80049b2:	0853      	lsrs	r3, r2, #1
 80049b4:	00d2      	lsls	r2, r2, #3
 80049b6:	f002 0208 	and.w	r2, r2, #8
 80049ba:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80049be:	4313      	orrs	r3, r2
 80049c0:	f06f 020c 	mvn.w	r2, #12
 80049c4:	e78d      	b.n	80048e2 <WriteChar.isra.3+0x3a2>
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80049c6:	01d3      	lsls	r3, r2, #7
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80049c8:	01d1      	lsls	r1, r2, #7
 80049ca:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80049d2:	430b      	orrs	r3, r1
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80049d4:	0451      	lsls	r1, r2, #17
 80049d6:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80049da:	05d2      	lsls	r2, r2, #23
 80049dc:	430b      	orrs	r3, r1
 80049de:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80049e2:	4313      	orrs	r3, r2
 80049e4:	2100      	movs	r1, #0
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <WriteChar.isra.3+0x52c>)
 80049e8:	481f      	ldr	r0, [pc, #124]	; (8004a68 <WriteChar.isra.3+0x528>)
 80049ea:	f7fd f86b 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80049ee:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80049f0:	481d      	ldr	r0, [pc, #116]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80049f2:	01d3      	lsls	r3, r2, #7
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80049f4:	01d1      	lsls	r1, r2, #7
 80049f6:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80049fe:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a00:	0451      	lsls	r1, r2, #17
 8004a02:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a06:	05d2      	lsls	r2, r2, #23
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	2102      	movs	r1, #2
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <WriteChar.isra.3+0x52c>)
 8004a14:	f7fd f856 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a18:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8004a1a:	4813      	ldr	r0, [pc, #76]	; (8004a68 <WriteChar.isra.3+0x528>)
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a1c:	01d3      	lsls	r3, r2, #7
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a1e:	01d1      	lsls	r1, r2, #7
 8004a20:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a28:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a2a:	0451      	lsls	r1, r2, #17
 8004a2c:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a30:	05d2      	lsls	r2, r2, #23
 8004a32:	430b      	orrs	r3, r1
 8004a34:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <WriteChar.isra.3+0x52c>)
 8004a3e:	f7fd f841 	bl	8001ac4 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a42:	68e2      	ldr	r2, [r4, #12]
 8004a44:	01d3      	lsls	r3, r2, #7
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a46:	01d1      	lsls	r1, r2, #7
 8004a48:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a50:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8004a52:	0451      	lsls	r1, r2, #17
 8004a54:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8004a58:	05d2      	lsls	r2, r2, #23
 8004a5a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004a5e:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8004a60:	4313      	orrs	r3, r2
 8004a62:	4a02      	ldr	r2, [pc, #8]	; (8004a6c <WriteChar.isra.3+0x52c>)
 8004a64:	e635      	b.n	80046d2 <WriteChar.isra.3+0x192>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	200022e8 	.word	0x200022e8
 8004a6c:	fbfdfcff 	.word	0xfbfdfcff

08004a70 <BSP_LCD_GLASS_Clear>:
  HAL_LCD_Clear(&LCDHandle);
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <BSP_LCD_GLASS_Clear+0x8>)
 8004a72:	f7fd b888 	b.w	8001b86 <HAL_LCD_Clear>
 8004a76:	bf00      	nop
 8004a78:	200022e8 	.word	0x200022e8

08004a7c <BSP_LCD_GLASS_Init>:
{
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8004a7e:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <BSP_LCD_GLASS_Init+0x148>)
  LCDHandle.Instance              = LCD;
 8004a80:	4d51      	ldr	r5, [pc, #324]	; (8004bc8 <BSP_LCD_GLASS_Init+0x14c>)
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8004a82:	2400      	movs	r4, #0
 8004a84:	e885 0018 	stmia.w	r5, {r3, r4}
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8004a88:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004a8c:	60ab      	str	r3, [r5, #8]
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8004a8e:	230c      	movs	r3, #12
{
 8004a90:	b0bf      	sub	sp, #252	; 0xfc
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8004a92:	60eb      	str	r3, [r5, #12]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8004a94:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8004a98:	2340      	movs	r3, #64	; 0x40
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004a9a:	4621      	mov	r1, r4
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8004a9c:	612b      	str	r3, [r5, #16]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8004a9e:	61aa      	str	r2, [r5, #24]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8004aa0:	622b      	str	r3, [r5, #32]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004aa2:	2214      	movs	r2, #20
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8004aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004aa8:	a806      	add	r0, sp, #24
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8004aaa:	62eb      	str	r3, [r5, #44]	; 0x2c
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8004aac:	616c      	str	r4, [r5, #20]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8004aae:	61ec      	str	r4, [r5, #28]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8004ab0:	626c      	str	r4, [r5, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8004ab2:	62ac      	str	r4, [r5, #40]	; 0x28
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8004ab4:	632c      	str	r4, [r5, #48]	; 0x30
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004ab6:	f000 fc6a 	bl	800538e <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 8004aba:	4621      	mov	r1, r4
 8004abc:	2244      	movs	r2, #68	; 0x44
 8004abe:	a80b      	add	r0, sp, #44	; 0x2c
 8004ac0:	f000 fc65 	bl	800538e <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8004ac4:	4621      	mov	r1, r4
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004aca:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8004ace:	2288      	movs	r2, #136	; 0x88
 8004ad0:	a81c      	add	r0, sp, #112	; 0x70
 8004ad2:	f000 fc5c 	bl	800538e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	9b00      	ldr	r3, [sp, #0]
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8004ae8:	2304      	movs	r3, #4
 8004aea:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8004aec:	a80b      	add	r0, sp, #44	; 0x2c
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8004aee:	2301      	movs	r3, #1
 8004af0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8004af2:	f7fd fcb3 	bl	800245c <HAL_RCC_OscConfig>
 8004af6:	4606      	mov	r6, r0
 8004af8:	b100      	cbz	r0, 8004afc <BSP_LCD_GLASS_Init+0x80>
 8004afa:	e7fe      	b.n	8004afa <BSP_LCD_GLASS_Init+0x7e>
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b00:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8004b02:	a81c      	add	r0, sp, #112	; 0x70
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b08:	933d      	str	r3, [sp, #244]	; 0xf4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8004b0a:	f7fe f8cf 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004b16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004b28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004b3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	9303      	str	r3, [sp, #12]
 8004b42:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b46:	f043 0308 	orr.w	r3, r3, #8
 8004b4a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004b4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8004b4e:	9608      	str	r6, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8004b58:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8004b5c:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b5e:	2303      	movs	r3, #3
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8004b60:	2702      	movs	r7, #2
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8004b64:	a906      	add	r1, sp, #24
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8004b66:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8004b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8004b6c:	930a      	str	r3, [sp, #40]	; 0x28
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8004b6e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8004b70:	f7fc fe2a 	bl	80017c8 <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8004b74:	f24f 2333 	movw	r3, #62003	; 0xf233
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8004b78:	a906      	add	r1, sp, #24
 8004b7a:	4814      	ldr	r0, [pc, #80]	; (8004bcc <BSP_LCD_GLASS_Init+0x150>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8004b7c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8004b7e:	f7fc fe23 	bl	80017c8 <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8004b82:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8004b86:	a906      	add	r1, sp, #24
 8004b88:	4811      	ldr	r0, [pc, #68]	; (8004bd0 <BSP_LCD_GLASS_Init+0x154>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8004b8a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8004b8c:	f7fc fe1c 	bl	80017c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8004b90:	a906      	add	r1, sp, #24
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8004b92:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8004b96:	480f      	ldr	r0, [pc, #60]	; (8004bd4 <BSP_LCD_GLASS_Init+0x158>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8004b98:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8004b9a:	f7fc fe15 	bl	80017c8 <HAL_GPIO_Init>
  HAL_Delay(2);
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7fc f9f2 	bl	8000f88 <HAL_Delay>
  __HAL_RCC_LCD_CLK_ENABLE();
 8004ba4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004baa:	65a3      	str	r3, [r4, #88]	; 0x58
 8004bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb2:	9305      	str	r3, [sp, #20]
  HAL_LCD_Init(&LCDHandle);
 8004bb4:	4628      	mov	r0, r5
  __HAL_RCC_LCD_CLK_ENABLE();
 8004bb6:	9b05      	ldr	r3, [sp, #20]
  HAL_LCD_Init(&LCDHandle);
 8004bb8:	f7fd f830 	bl	8001c1c <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8004bbc:	f7ff ff58 	bl	8004a70 <BSP_LCD_GLASS_Clear>
}
 8004bc0:	b03f      	add	sp, #252	; 0xfc
 8004bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc4:	40002400 	.word	0x40002400
 8004bc8:	200022e8 	.word	0x200022e8
 8004bcc:	48000400 	.word	0x48000400
 8004bd0:	48000800 	.word	0x48000800
 8004bd4:	48000c00 	.word	0x48000c00

08004bd8 <BSP_LCD_GLASS_DisplayString>:
{
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4605      	mov	r5, r0
	BSP_LCD_GLASS_Clear();		// Dodane
 8004bdc:	f7ff ff48 	bl	8004a70 <BSP_LCD_GLASS_Clear>
  while ((*ptr != 0) & (position <= LCD_DIGIT_POSITION_6))
 8004be0:	2400      	movs	r4, #0
 8004be2:	5d28      	ldrb	r0, [r5, r4]
 8004be4:	b2e3      	uxtb	r3, r4
 8004be6:	3401      	adds	r4, #1
 8004be8:	b108      	cbz	r0, 8004bee <BSP_LCD_GLASS_DisplayString+0x16>
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d904      	bls.n	8004bf8 <BSP_LCD_GLASS_DisplayString+0x20>
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <BSP_LCD_GLASS_DisplayString+0x2c>)
}
 8004bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8004bf4:	f7fc bfa3 	b.w	8001b3e <HAL_LCD_UpdateDisplayRequest>
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	f7ff fca0 	bl	8004540 <WriteChar.isra.3>
 8004c00:	e7ef      	b.n	8004be2 <BSP_LCD_GLASS_DisplayString+0xa>
 8004c02:	bf00      	nop
 8004c04:	200022e8 	.word	0x200022e8

08004c08 <BSP_LCD_GLASS_ScrollSentence>:
{
 8004c08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  bLCDGlass_KeyPressed = 0;
 8004c0c:	4f32      	ldr	r7, [pc, #200]	; (8004cd8 <BSP_LCD_GLASS_ScrollSentence+0xd0>)
{
 8004c0e:	4605      	mov	r5, r0
 8004c10:	4689      	mov	r9, r1
 8004c12:	4690      	mov	r8, r2
  BSP_LCD_GLASS_Clear();		// Dodane
 8004c14:	f7ff ff2c 	bl	8004a70 <BSP_LCD_GLASS_Clear>
  uint8_t str[6] = "";
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	f8ad 3004 	strh.w	r3, [sp, #4]
  bLCDGlass_KeyPressed = 0;
 8004c20:	703b      	strb	r3, [r7, #0]
  if (ptr == 0)
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	d04a      	beq.n	8004cbc <BSP_LCD_GLASS_ScrollSentence+0xb4>
 8004c26:	462b      	mov	r3, r5
 8004c28:	1b5c      	subs	r4, r3, r5
  for (ptr1 = ptr, sizestr = 0; *ptr1 != 0; sizestr++, ptr1++);
 8004c2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c2e:	b2e4      	uxtb	r4, r4
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	d1f9      	bne.n	8004c28 <BSP_LCD_GLASS_ScrollSentence+0x20>
  BSP_LCD_GLASS_DisplayString(str);
 8004c34:	4668      	mov	r0, sp
 8004c36:	f7ff ffcf 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
  HAL_Delay(ScrollSpeed);
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	f7fc f9a4 	bl	8000f88 <HAL_Delay>
  for (repetition = 0; repetition < nScroll; repetition++)
 8004c40:	b2f3      	uxtb	r3, r6
 8004c42:	454b      	cmp	r3, r9
 8004c44:	d23a      	bcs.n	8004cbc <BSP_LCD_GLASS_ScrollSentence+0xb4>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e03f      	b.n	8004cca <BSP_LCD_GLASS_ScrollSentence+0xc2>
      *(str) = * (ptr1 + ((nbrchar + 1) % sizestr));
 8004c4a:	fb93 f2f4 	sdiv	r2, r3, r4
 8004c4e:	fb04 3212 	mls	r2, r4, r2, r3
 8004c52:	f103 0a01 	add.w	sl, r3, #1
 8004c56:	5caa      	ldrb	r2, [r5, r2]
 8004c58:	f88d 2000 	strb.w	r2, [sp]
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 8004c5c:	fb9a f2f4 	sdiv	r2, sl, r4
 8004c60:	fb04 a212 	mls	r2, r4, r2, sl
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 8004c64:	1c99      	adds	r1, r3, #2
      *(str + 1) = * (ptr1 + ((nbrchar + 2) % sizestr));
 8004c66:	5caa      	ldrb	r2, [r5, r2]
 8004c68:	f88d 2001 	strb.w	r2, [sp, #1]
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 8004c6c:	fb91 f2f4 	sdiv	r2, r1, r4
 8004c70:	fb04 1212 	mls	r2, r4, r2, r1
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 8004c74:	1cd9      	adds	r1, r3, #3
      *(str + 2) = * (ptr1 + ((nbrchar + 3) % sizestr));
 8004c76:	5caa      	ldrb	r2, [r5, r2]
 8004c78:	f88d 2002 	strb.w	r2, [sp, #2]
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 8004c7c:	fb91 f2f4 	sdiv	r2, r1, r4
 8004c80:	fb04 1212 	mls	r2, r4, r2, r1
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 8004c84:	1d19      	adds	r1, r3, #4
      *(str + 3) = * (ptr1 + ((nbrchar + 4) % sizestr));
 8004c86:	5caa      	ldrb	r2, [r5, r2]
 8004c88:	f88d 2003 	strb.w	r2, [sp, #3]
      *(str + 4) = * (ptr1 + ((nbrchar + 5) % sizestr));
 8004c8c:	fb91 f2f4 	sdiv	r2, r1, r4
 8004c90:	fb04 1212 	mls	r2, r4, r2, r1
 8004c94:	5caa      	ldrb	r2, [r5, r2]
 8004c96:	f88d 2004 	strb.w	r2, [sp, #4]
      *(str + 5) = * (ptr1 + ((nbrchar + 6) % sizestr));
 8004c9a:	1d5a      	adds	r2, r3, #5
 8004c9c:	fb92 f3f4 	sdiv	r3, r2, r4
 8004ca0:	fb04 2313 	mls	r3, r4, r3, r2
 8004ca4:	5ceb      	ldrb	r3, [r5, r3]
 8004ca6:	f88d 3005 	strb.w	r3, [sp, #5]
      BSP_LCD_GLASS_Clear();
 8004caa:	f7ff fee1 	bl	8004a70 <BSP_LCD_GLASS_Clear>
      BSP_LCD_GLASS_DisplayString(str);
 8004cae:	4668      	mov	r0, sp
 8004cb0:	f7ff ff92 	bl	8004bd8 <BSP_LCD_GLASS_DisplayString>
      if (bLCDGlass_KeyPressed)
 8004cb4:	783b      	ldrb	r3, [r7, #0]
 8004cb6:	b123      	cbz	r3, 8004cc2 <BSP_LCD_GLASS_ScrollSentence+0xba>
        bLCDGlass_KeyPressed = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	703b      	strb	r3, [r7, #0]
}
 8004cbc:	b002      	add	sp, #8
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      HAL_Delay(ScrollSpeed);
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f7fc f960 	bl	8000f88 <HAL_Delay>
 8004cc8:	4653      	mov	r3, sl
    for (nbrchar = 0; nbrchar < sizestr; nbrchar++)
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	42a2      	cmp	r2, r4
 8004cd0:	d3bb      	bcc.n	8004c4a <BSP_LCD_GLASS_ScrollSentence+0x42>
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7b4      	b.n	8004c40 <BSP_LCD_GLASS_ScrollSentence+0x38>
 8004cd6:	bf00      	nop
 8004cd8:	20000134 	.word	0x20000134

08004cdc <QSPI_AutoPollingMemReady.isra.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004cdc:	b500      	push	{lr}
 8004cde:	b095      	sub	sp, #84	; 0x54
{
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ce4:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8004ce6:	2305      	movs	r3, #5
 8004ce8:	9306      	str	r3, [sp, #24]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	930d      	str	r3, [sp, #52]	; 0x34
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004cee:	930e      	str	r3, [sp, #56]	; 0x38
  sCommand.DataMode          = QSPI_DATA_1_LINE;
  sCommand.DummyCycles       = 0;
 8004cf0:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004cf2:	9311      	str	r3, [sp, #68]	; 0x44
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004cf4:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cf6:	9313      	str	r3, [sp, #76]	; 0x4c

  sConfig.Match           = 0;
 8004cf8:	9300      	str	r3, [sp, #0]
  sConfig.Mask            = N25Q128A_SR_WIP;
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8004cfa:	9304      	str	r3, [sp, #16]
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8004cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  sConfig.StatusBytesSize = 1;
  sConfig.Interval        = 0x10;
 8004d00:	2310      	movs	r3, #16
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8004d02:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.Interval        = 0x10;
 8004d04:	9302      	str	r3, [sp, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8004d06:	2201      	movs	r2, #1
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004d08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  sConfig.Mask            = N25Q128A_SR_WIP;
 8004d0c:	9201      	str	r2, [sp, #4]
  sConfig.StatusBytesSize = 1;
 8004d0e:	9203      	str	r2, [sp, #12]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004d10:	9305      	str	r3, [sp, #20]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8004d12:	466a      	mov	r2, sp
 8004d14:	4603      	mov	r3, r0
 8004d16:	a906      	add	r1, sp, #24
 8004d18:	4804      	ldr	r0, [pc, #16]	; (8004d2c <QSPI_AutoPollingMemReady.isra.0+0x50>)
 8004d1a:	f7fd f9b9 	bl	8002090 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8004d1e:	3000      	adds	r0, #0
 8004d20:	bf18      	it	ne
 8004d22:	2001      	movne	r0, #1
 8004d24:	b015      	add	sp, #84	; 0x54
 8004d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d2a:	bf00      	nop
 8004d2c:	20002324 	.word	0x20002324

08004d30 <QSPI_WriteEnable.isra.2>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004d30:	b500      	push	{lr}
 8004d32:	b095      	sub	sp, #84	; 0x54
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d38:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d3e:	f241 3288 	movw	r2, #5000	; 0x1388
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8004d42:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d44:	a906      	add	r1, sp, #24
 8004d46:	4815      	ldr	r0, [pc, #84]	; (8004d9c <QSPI_WriteEnable.isra.2+0x6c>)
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8004d48:	930d      	str	r3, [sp, #52]	; 0x34
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d4a:	930e      	str	r3, [sp, #56]	; 0x38
  sCommand.DataMode          = QSPI_DATA_NONE;
 8004d4c:	930f      	str	r3, [sp, #60]	; 0x3c
  sCommand.DummyCycles       = 0;
 8004d4e:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004d50:	9311      	str	r3, [sp, #68]	; 0x44
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004d52:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d54:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d56:	f7fd f957 	bl	8002008 <HAL_QSPI_Command>
 8004d5a:	b9e0      	cbnz	r0, 8004d96 <QSPI_WriteEnable.isra.2+0x66>
  sConfig.Match           = N25Q128A_SR_WREN;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	9300      	str	r3, [sp, #0]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8004d60:	9301      	str	r3, [sp, #4]
  sConfig.StatusBytesSize = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	9303      	str	r3, [sp, #12]
  sConfig.Interval        = 0x10;
 8004d66:	2310      	movs	r3, #16
 8004d68:	9302      	str	r3, [sp, #8]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d6e:	9305      	str	r3, [sp, #20]
  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8004d70:	2305      	movs	r3, #5
 8004d72:	9306      	str	r3, [sp, #24]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8004d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8004d78:	9004      	str	r0, [sp, #16]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8004d7a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d7c:	466a      	mov	r2, sp
 8004d7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d82:	a906      	add	r1, sp, #24
 8004d84:	4805      	ldr	r0, [pc, #20]	; (8004d9c <QSPI_WriteEnable.isra.2+0x6c>)
 8004d86:	f7fd f983 	bl	8002090 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8004d8a:	3000      	adds	r0, #0
 8004d8c:	bf18      	it	ne
 8004d8e:	2001      	movne	r0, #1
}
 8004d90:	b015      	add	sp, #84	; 0x54
 8004d92:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8004d96:	2001      	movs	r0, #1
 8004d98:	e7fa      	b.n	8004d90 <QSPI_WriteEnable.isra.2+0x60>
 8004d9a:	bf00      	nop
 8004d9c:	20002324 	.word	0x20002324

08004da0 <BSP_QSPI_Init>:
{
 8004da0:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8004da2:	4c5c      	ldr	r4, [pc, #368]	; (8004f14 <BSP_QSPI_Init+0x174>)
 8004da4:	4b5c      	ldr	r3, [pc, #368]	; (8004f18 <BSP_QSPI_Init+0x178>)
 8004da6:	6023      	str	r3, [r4, #0]
{
 8004da8:	b093      	sub	sp, #76	; 0x4c
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7fd f910 	bl	8001fd0 <HAL_QSPI_DeInit>
 8004db0:	4605      	mov	r5, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d166      	bne.n	8004e84 <BSP_QSPI_Init+0xe4>
  __HAL_RCC_QSPI_CLK_ENABLE();
 8004db6:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <BSP_QSPI_Init+0x17c>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004db8:	4859      	ldr	r0, [pc, #356]	; (8004f20 <BSP_QSPI_Init+0x180>)
  __HAL_RCC_QSPI_CLK_ENABLE();
 8004dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004dc8:	9202      	str	r2, [sp, #8]
 8004dca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_QSPI_FORCE_RESET();
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8004dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dde:	f042 0210 	orr.w	r2, r2, #16
 8004de2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	9303      	str	r3, [sp, #12]
 8004dec:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 8004dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004df2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004df4:	2302      	movs	r3, #2
 8004df6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df8:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004dfa:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dfc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004dfe:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004e00:	230a      	movs	r3, #10
 8004e02:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004e04:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e06:	f7fc fcdf 	bl	80017c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8004e0a:	f44f 4374 	mov.w	r3, #62464	; 0xf400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e0e:	a904      	add	r1, sp, #16
 8004e10:	4843      	ldr	r0, [pc, #268]	; (8004f20 <BSP_QSPI_Init+0x180>)
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8004e12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004e14:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e16:	f7fc fcd7 	bl	80017c8 <HAL_GPIO_Init>
  QSPIHandle.Init.FifoThreshold      = 4;
 8004e1a:	2304      	movs	r3, #4
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8004e1c:	6066      	str	r6, [r4, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8004e1e:	60a3      	str	r3, [r4, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_NONE;
 8004e20:	60e5      	str	r5, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8004e26:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	3b01      	subs	r3, #1
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004e30:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004e32:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004e34:	6165      	str	r5, [r4, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004e36:	61a5      	str	r5, [r4, #24]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004e38:	f7fd f872 	bl	8001f20 <HAL_QSPI_Init>
 8004e3c:	bb10      	cbnz	r0, 8004e84 <BSP_QSPI_Init+0xe4>
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e3e:	f44f 7580 	mov.w	r5, #256	; 0x100
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8004e42:	2366      	movs	r3, #102	; 0x66
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8004e44:	900b      	str	r0, [sp, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e46:	900c      	str	r0, [sp, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_NONE;
 8004e48:	900d      	str	r0, [sp, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8004e4a:	9009      	str	r0, [sp, #36]	; 0x24
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004e4c:	900f      	str	r0, [sp, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e4e:	9010      	str	r0, [sp, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e50:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e56:	a904      	add	r1, sp, #16
 8004e58:	4620      	mov	r0, r4
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e5a:	950a      	str	r5, [sp, #40]	; 0x28
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8004e5c:	9304      	str	r3, [sp, #16]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e5e:	f7fd f8d3 	bl	8002008 <HAL_QSPI_Command>
 8004e62:	b968      	cbnz	r0, 8004e80 <BSP_QSPI_Init+0xe0>
  sCommand.Instruction = RESET_MEMORY_CMD;
 8004e64:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	a904      	add	r1, sp, #16
 8004e6c:	4620      	mov	r0, r4
  sCommand.Instruction = RESET_MEMORY_CMD;
 8004e6e:	9304      	str	r3, [sp, #16]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e70:	f7fd f8ca 	bl	8002008 <HAL_QSPI_Command>
 8004e74:	b920      	cbnz	r0, 8004e80 <BSP_QSPI_Init+0xe0>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8004e76:	f241 3088 	movw	r0, #5000	; 0x1388
 8004e7a:	f7ff ff2f 	bl	8004cdc <QSPI_AutoPollingMemReady.isra.0>
 8004e7e:	b118      	cbz	r0, 8004e88 <BSP_QSPI_Init+0xe8>
    return QSPI_NOT_SUPPORTED;
 8004e80:	2504      	movs	r5, #4
 8004e82:	e044      	b.n	8004f0e <BSP_QSPI_Init+0x16e>
    return QSPI_ERROR;
 8004e84:	2501      	movs	r5, #1
 8004e86:	e042      	b.n	8004f0e <BSP_QSPI_Init+0x16e>
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8004e88:	2385      	movs	r3, #133	; 0x85
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8004e8a:	900b      	str	r0, [sp, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e8c:	900c      	str	r0, [sp, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8004e8e:	9009      	str	r0, [sp, #36]	; 0x24
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004e90:	900f      	str	r0, [sp, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e92:	9010      	str	r0, [sp, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e94:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	a904      	add	r1, sp, #16
 8004e9c:	4620      	mov	r0, r4
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e9e:	950a      	str	r5, [sp, #40]	; 0x28
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8004ea0:	9304      	str	r3, [sp, #16]
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8004ea2:	970d      	str	r7, [sp, #52]	; 0x34
  sCommand.NbData            = 1;
 8004ea4:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ea6:	f7fd f8af 	bl	8002008 <HAL_QSPI_Command>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d1e8      	bne.n	8004e80 <BSP_QSPI_Init+0xe0>
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb2:	f10d 0107 	add.w	r1, sp, #7
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f7fd f9dc 	bl	8002274 <HAL_QSPI_Receive>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d1df      	bne.n	8004e80 <BSP_QSPI_Init+0xe0>
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8004ec0:	f7ff ff36 	bl	8004d30 <QSPI_WriteEnable.isra.2>
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d1da      	bne.n	8004e80 <BSP_QSPI_Init+0xe0>
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004eca:	2381      	movs	r3, #129	; 0x81
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	22f0      	movs	r2, #240	; 0xf0
 8004ed0:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004ed4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ed8:	210c      	movs	r1, #12
 8004eda:	fab2 f282 	clz	r2, r2
 8004ede:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ee8:	a904      	add	r1, sp, #16
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004ef0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ef4:	f7fd f888 	bl	8002008 <HAL_QSPI_Command>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d1c1      	bne.n	8004e80 <BSP_QSPI_Init+0xe0>
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	f10d 0107 	add.w	r1, sp, #7
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7fd f956 	bl	80021b6 <HAL_QSPI_Transmit>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d1b8      	bne.n	8004e80 <BSP_QSPI_Init+0xe0>
}
 8004f0e:	4628      	mov	r0, r5
 8004f10:	b013      	add	sp, #76	; 0x4c
 8004f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f14:	20002324 	.word	0x20002324
 8004f18:	a0001000 	.word	0xa0001000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	48001000 	.word	0x48001000

08004f24 <BSP_QSPI_Read>:
{
 8004f24:	b510      	push	{r4, lr}
 8004f26:	b08e      	sub	sp, #56	; 0x38
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f2c:	9306      	str	r3, [sp, #24]
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004f2e:	23eb      	movs	r3, #235	; 0xeb
 8004f30:	9300      	str	r3, [sp, #0]
  sCommand.Address           = ReadAddr;
 8004f32:	9101      	str	r1, [sp, #4]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004f34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8004f38:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004f3c:	9307      	str	r3, [sp, #28]
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8004f3e:	9109      	str	r1, [sp, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004f44:	210c      	movs	r1, #12
{
 8004f46:	4604      	mov	r4, r0
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004f48:	9303      	str	r3, [sp, #12]
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004f4a:	9105      	str	r1, [sp, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f4c:	2300      	movs	r3, #0
  sCommand.NbData            = Size;
 8004f4e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f50:	4669      	mov	r1, sp
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	480a      	ldr	r0, [pc, #40]	; (8004f80 <BSP_QSPI_Read+0x5c>)
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f58:	9308      	str	r3, [sp, #32]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004f5a:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004f5c:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004f5e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f60:	f7fd f852 	bl	8002008 <HAL_QSPI_Command>
 8004f64:	b950      	cbnz	r0, 8004f7c <BSP_QSPI_Read+0x58>
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4804      	ldr	r0, [pc, #16]	; (8004f80 <BSP_QSPI_Read+0x5c>)
 8004f6e:	f7fd f981 	bl	8002274 <HAL_QSPI_Receive>
    return QSPI_ERROR;
 8004f72:	3000      	adds	r0, #0
 8004f74:	bf18      	it	ne
 8004f76:	2001      	movne	r0, #1
}
 8004f78:	b00e      	add	sp, #56	; 0x38
 8004f7a:	bd10      	pop	{r4, pc}
    return QSPI_ERROR;
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e7fb      	b.n	8004f78 <BSP_QSPI_Read+0x54>
 8004f80:	20002324 	.word	0x20002324

08004f84 <BSP_QSPI_Write>:
{
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	b08e      	sub	sp, #56	; 0x38
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8004f8e:	b2cc      	uxtb	r4, r1
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f90:	9306      	str	r3, [sp, #24]
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8004f92:	2312      	movs	r3, #18
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8004f94:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8004f98:	9300      	str	r3, [sp, #0]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f9e:	4294      	cmp	r4, r2
 8004fa0:	9307      	str	r3, [sp, #28]
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fa6:	bf28      	it	cs
 8004fa8:	4614      	movcs	r4, r2
  end_addr = WriteAddr + Size;
 8004faa:	188d      	adds	r5, r1, r2
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004fac:	9303      	str	r3, [sp, #12]
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8004fae:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fb2:	2300      	movs	r3, #0
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fb4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005020 <BSP_QSPI_Write+0x9c>
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fb8:	9308      	str	r3, [sp, #32]
{
 8004fba:	4607      	mov	r7, r0
 8004fbc:	460e      	mov	r6, r1
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8004fbe:	9209      	str	r2, [sp, #36]	; 0x24
  sCommand.DummyCycles       = 0;
 8004fc0:	9305      	str	r3, [sp, #20]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004fc2:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004fc4:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004fc6:	930d      	str	r3, [sp, #52]	; 0x34
    sCommand.Address = current_addr;
 8004fc8:	9601      	str	r6, [sp, #4]
    sCommand.NbData  = current_size;
 8004fca:	940a      	str	r4, [sp, #40]	; 0x28
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8004fcc:	f7ff feb0 	bl	8004d30 <QSPI_WriteEnable.isra.2>
 8004fd0:	b118      	cbz	r0, 8004fda <BSP_QSPI_Write+0x56>
      return QSPI_ERROR;
 8004fd2:	2001      	movs	r0, #1
}
 8004fd4:	b00e      	add	sp, #56	; 0x38
 8004fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4669      	mov	r1, sp
 8004fe0:	480f      	ldr	r0, [pc, #60]	; (8005020 <BSP_QSPI_Write+0x9c>)
 8004fe2:	f7fd f811 	bl	8002008 <HAL_QSPI_Command>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d1f3      	bne.n	8004fd2 <BSP_QSPI_Write+0x4e>
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4639      	mov	r1, r7
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	f7fd f8e0 	bl	80021b6 <HAL_QSPI_Transmit>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d1eb      	bne.n	8004fd2 <BSP_QSPI_Write+0x4e>
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8004ffa:	f241 3088 	movw	r0, #5000	; 0x1388
 8004ffe:	f7ff fe6d 	bl	8004cdc <QSPI_AutoPollingMemReady.isra.0>
 8005002:	2800      	cmp	r0, #0
 8005004:	d1e5      	bne.n	8004fd2 <BSP_QSPI_Write+0x4e>
    current_addr += current_size;
 8005006:	4426      	add	r6, r4
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8005008:	f506 7380 	add.w	r3, r6, #256	; 0x100
 800500c:	429d      	cmp	r5, r3
    pData += current_size;
 800500e:	4427      	add	r7, r4
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8005010:	bf34      	ite	cc
 8005012:	1bac      	subcc	r4, r5, r6
 8005014:	f44f 7480 	movcs.w	r4, #256	; 0x100
  while (current_addr < end_addr);
 8005018:	42b5      	cmp	r5, r6
 800501a:	d8d5      	bhi.n	8004fc8 <BSP_QSPI_Write+0x44>
 800501c:	e7da      	b.n	8004fd4 <BSP_QSPI_Write+0x50>
 800501e:	bf00      	nop
 8005020:	20002324 	.word	0x20002324

08005024 <BSP_QSPI_Erase_Block>:
{
 8005024:	b500      	push	{lr}
 8005026:	b08f      	sub	sp, #60	; 0x3c
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800502c:	9306      	str	r3, [sp, #24]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 800502e:	2320      	movs	r3, #32
 8005030:	9300      	str	r3, [sp, #0]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005036:	9307      	str	r3, [sp, #28]
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8005038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800503c:	9303      	str	r3, [sp, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800503e:	2300      	movs	r3, #0
  sCommand.Address           = BlockAddress;
 8005040:	9001      	str	r0, [sp, #4]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005042:	9308      	str	r3, [sp, #32]
  sCommand.DataMode          = QSPI_DATA_NONE;
 8005044:	9309      	str	r3, [sp, #36]	; 0x24
  sCommand.DummyCycles       = 0;
 8005046:	9305      	str	r3, [sp, #20]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005048:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800504a:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800504c:	930d      	str	r3, [sp, #52]	; 0x34
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800504e:	f7ff fe6f 	bl	8004d30 <QSPI_WriteEnable.isra.2>
 8005052:	b118      	cbz	r0, 800505c <BSP_QSPI_Erase_Block+0x38>
    return QSPI_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	b00f      	add	sp, #60	; 0x3c
 8005058:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800505c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005060:	4669      	mov	r1, sp
 8005062:	4806      	ldr	r0, [pc, #24]	; (800507c <BSP_QSPI_Erase_Block+0x58>)
 8005064:	f7fc ffd0 	bl	8002008 <HAL_QSPI_Command>
 8005068:	2800      	cmp	r0, #0
 800506a:	d1f3      	bne.n	8005054 <BSP_QSPI_Erase_Block+0x30>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 800506c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8005070:	f7ff fe34 	bl	8004cdc <QSPI_AutoPollingMemReady.isra.0>
    return QSPI_ERROR;
 8005074:	3000      	adds	r0, #0
 8005076:	bf18      	it	ne
 8005078:	2001      	movne	r0, #1
 800507a:	e7ec      	b.n	8005056 <BSP_QSPI_Erase_Block+0x32>
 800507c:	20002324 	.word	0x20002324

08005080 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_MspInit+0x2c>)
 8005082:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	661a      	str	r2, [r3, #96]	; 0x60
 800508a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800508c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	f002 0201 	and.w	r2, r2, #1
 8005092:	9200      	str	r2, [sp, #0]
 8005094:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005098:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800509c:	659a      	str	r2, [r3, #88]	; 0x58
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050a8:	b002      	add	sp, #8
 80050aa:	4770      	bx	lr
 80050ac:	40021000 	.word	0x40021000

080050b0 <NMI_Handler>:
 80050b0:	4770      	bx	lr

080050b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050b2:	e7fe      	b.n	80050b2 <HardFault_Handler>

080050b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050b4:	e7fe      	b.n	80050b4 <MemManage_Handler>

080050b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050b6:	e7fe      	b.n	80050b6 <BusFault_Handler>

080050b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050b8:	e7fe      	b.n	80050b8 <UsageFault_Handler>

080050ba <SVC_Handler>:
 80050ba:	4770      	bx	lr

080050bc <DebugMon_Handler>:
 80050bc:	4770      	bx	lr

080050be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050be:	4770      	bx	lr

080050c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050c0:	f7fb bf50 	b.w	8000f64 <HAL_IncTick>

080050c4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80050c4:	2001      	movs	r0, #1
 80050c6:	f7fc bcf1 	b.w	8001aac <HAL_GPIO_EXTI_IRQHandler>

080050ca <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80050ca:	2002      	movs	r0, #2
 80050cc:	f7fc bcee 	b.w	8001aac <HAL_GPIO_EXTI_IRQHandler>

080050d0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80050d0:	2004      	movs	r0, #4
 80050d2:	f7fc bceb 	b.w	8001aac <HAL_GPIO_EXTI_IRQHandler>

080050d6 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80050d6:	2008      	movs	r0, #8
 80050d8:	f7fc bce8 	b.w	8001aac <HAL_GPIO_EXTI_IRQHandler>

080050dc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <DMA1_Channel4_IRQHandler+0x8>)
 80050de:	f7fc bb28 	b.w	8001732 <HAL_DMA_IRQHandler>
 80050e2:	bf00      	nop
 80050e4:	2000019c 	.word	0x2000019c

080050e8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <DMA1_Channel6_IRQHandler+0x8>)
 80050ea:	f7fc bb22 	b.w	8001732 <HAL_DMA_IRQHandler>
 80050ee:	bf00      	nop
 80050f0:	20002368 	.word	0x20002368

080050f4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <DMA1_Channel7_IRQHandler+0x8>)
 80050f6:	f7fc bb1c 	b.w	8001732 <HAL_DMA_IRQHandler>
 80050fa:	bf00      	nop
 80050fc:	200023b0 	.word	0x200023b0

08005100 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005100:	2020      	movs	r0, #32
 8005102:	f7fc bcd3 	b.w	8001aac <HAL_GPIO_EXTI_IRQHandler>
	...

08005108 <DFSDM1_FLT0_IRQHandler>:
void DFSDM1_FLT0_IRQHandler(void)
{
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <DFSDM1_FLT0_IRQHandler+0x8>)
 800510a:	f7fc b987 	b.w	800141c <HAL_DFSDM_IRQHandler>
 800510e:	bf00      	nop
 8005110:	20000148 	.word	0x20000148

08005114 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	460e      	mov	r6, r1
 8005118:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511a:	460c      	mov	r4, r1
 800511c:	1ba3      	subs	r3, r4, r6
 800511e:	429d      	cmp	r5, r3
 8005120:	dc01      	bgt.n	8005126 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005122:	4628      	mov	r0, r5
 8005124:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005126:	f3af 8000 	nop.w
 800512a:	f804 0b01 	strb.w	r0, [r4], #1
 800512e:	e7f5      	b.n	800511c <_read+0x8>

08005130 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005130:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <_sbrk+0x2c>)
 8005134:	6819      	ldr	r1, [r3, #0]
{
 8005136:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005138:	b909      	cbnz	r1, 800513e <_sbrk+0xe>
		heap_end = &end;
 800513a:	4909      	ldr	r1, [pc, #36]	; (8005160 <_sbrk+0x30>)
 800513c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800513e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005140:	4669      	mov	r1, sp
 8005142:	4402      	add	r2, r0
 8005144:	428a      	cmp	r2, r1
 8005146:	d906      	bls.n	8005156 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005148:	f000 f8ec 	bl	8005324 <__errno>
 800514c:	230c      	movs	r3, #12
 800514e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005156:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005158:	bd08      	pop	{r3, pc}
 800515a:	bf00      	nop
 800515c:	20000138 	.word	0x20000138
 8005160:	2000247c 	.word	0x2000247c

08005164 <_close>:

int _close(int file)
{
	return -1;
}
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	4770      	bx	lr

0800516a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800516a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800516e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005170:	2000      	movs	r0, #0
 8005172:	4770      	bx	lr

08005174 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005174:	2001      	movs	r0, #1
 8005176:	4770      	bx	lr

08005178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005178:	2000      	movs	r0, #0
 800517a:	4770      	bx	lr

0800517c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800517c:	490f      	ldr	r1, [pc, #60]	; (80051bc <SystemInit+0x40>)
 800517e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005182:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800518a:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <SystemInit+0x44>)
 800518c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800518e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8005196:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800519e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80051a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80051a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051b0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80051b2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051b8:	608b      	str	r3, [r1, #8]
 80051ba:	4770      	bx	lr
 80051bc:	e000ed00 	.word	0xe000ed00
 80051c0:	40021000 	.word	0x40021000

080051c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80051c4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80051c6:	480c      	ldr	r0, [pc, #48]	; (80051f8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <MX_USART2_UART_Init+0x38>)
 80051ca:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80051ce:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80051d2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80051d4:	2300      	movs	r3, #0
 80051d6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051d8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80051da:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80051dc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051de:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051e0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051e2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051e4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051e6:	f7fe fb93 	bl	8003910 <HAL_UART_Init>
 80051ea:	b118      	cbz	r0, 80051f4 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80051ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80051f0:	f7fe be86 	b.w	8003f00 <Error_Handler>
 80051f4:	bd08      	pop	{r3, pc}
 80051f6:	bf00      	nop
 80051f8:	200023f8 	.word	0x200023f8
 80051fc:	40004400 	.word	0x40004400

08005200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4605      	mov	r5, r0
 8005204:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005206:	2214      	movs	r2, #20
 8005208:	2100      	movs	r1, #0
 800520a:	a803      	add	r0, sp, #12
 800520c:	f000 f8bf 	bl	800538e <memset>
  if(uartHandle->Instance==USART2)
 8005210:	682a      	ldr	r2, [r5, #0]
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <HAL_UART_MspInit+0xb8>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d14d      	bne.n	80052b4 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005218:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 800521e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005220:	4826      	ldr	r0, [pc, #152]	; (80052bc <HAL_UART_MspInit+0xbc>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005222:	4c27      	ldr	r4, [pc, #156]	; (80052c0 <HAL_UART_MspInit+0xc0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005224:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005228:	659a      	str	r2, [r3, #88]	; 0x58
 800522a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800522c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005230:	9201      	str	r2, [sp, #4]
 8005232:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005236:	f042 0208 	orr.w	r2, r2, #8
 800523a:	64da      	str	r2, [r3, #76]	; 0x4c
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005248:	2360      	movs	r3, #96	; 0x60
 800524a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800524c:	2301      	movs	r3, #1
 800524e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	2303      	movs	r3, #3
 8005252:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005254:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005256:	2307      	movs	r3, #7
 8005258:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800525a:	f7fc fab5 	bl	80017c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_UART_MspInit+0xc4>)
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005260:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8005262:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005266:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005268:	2300      	movs	r3, #0
 800526a:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800526c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800526e:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005270:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005272:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005274:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005276:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005278:	f7fc f996 	bl	80015a8 <HAL_DMA_Init>
 800527c:	b108      	cbz	r0, 8005282 <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 800527e:	f7fe fe3f 	bl	8003f00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005282:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <HAL_UART_MspInit+0xc8>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005284:	66ec      	str	r4, [r5, #108]	; 0x6c
 8005286:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005288:	4c10      	ldr	r4, [pc, #64]	; (80052cc <HAL_UART_MspInit+0xcc>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800528a:	2602      	movs	r6, #2
 800528c:	f04f 0e10 	mov.w	lr, #16
 8005290:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005294:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005296:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005298:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800529a:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800529c:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800529e:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052a0:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80052a2:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052a4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80052a6:	f7fc f97f 	bl	80015a8 <HAL_DMA_Init>
 80052aa:	b108      	cbz	r0, 80052b0 <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 80052ac:	f7fe fe28 	bl	8003f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80052b0:	66ac      	str	r4, [r5, #104]	; 0x68
 80052b2:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80052b4:	b008      	add	sp, #32
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	40004400 	.word	0x40004400
 80052bc:	48000c00 	.word	0x48000c00
 80052c0:	20002368 	.word	0x20002368
 80052c4:	4002006c 	.word	0x4002006c
 80052c8:	40020080 	.word	0x40020080
 80052cc:	200023b0 	.word	0x200023b0

080052d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005308 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80052d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80052d6:	e003      	b.n	80052e0 <LoopCopyDataInit>

080052d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80052da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80052dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80052de:	3104      	adds	r1, #4

080052e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80052e0:	480b      	ldr	r0, [pc, #44]	; (8005310 <LoopForever+0xa>)
	ldr	r3, =_edata
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <LoopForever+0xe>)
	adds	r2, r0, r1
 80052e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80052e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80052e8:	d3f6      	bcc.n	80052d8 <CopyDataInit>
	ldr	r2, =_sbss
 80052ea:	4a0b      	ldr	r2, [pc, #44]	; (8005318 <LoopForever+0x12>)
	b	LoopFillZerobss
 80052ec:	e002      	b.n	80052f4 <LoopFillZerobss>

080052ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80052ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80052f0:	f842 3b04 	str.w	r3, [r2], #4

080052f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <LoopForever+0x16>)
	cmp	r2, r3
 80052f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80052f8:	d3f9      	bcc.n	80052ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052fa:	f7ff ff3f 	bl	800517c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052fe:	f000 f817 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005302:	f7fe ff97 	bl	8004234 <main>

08005306 <LoopForever>:

LoopForever:
    b LoopForever
 8005306:	e7fe      	b.n	8005306 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005308:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800530c:	08006a40 	.word	0x08006a40
	ldr	r0, =_sdata
 8005310:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005314:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8005318:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 800531c:	2000247c 	.word	0x2000247c

08005320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005320:	e7fe      	b.n	8005320 <ADC1_2_IRQHandler>
	...

08005324 <__errno>:
 8005324:	4b01      	ldr	r3, [pc, #4]	; (800532c <__errno+0x8>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000074 	.word	0x20000074

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4e0d      	ldr	r6, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1ba4      	subs	r4, r4, r6
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2500      	movs	r5, #0
 800533c:	42a5      	cmp	r5, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4e0b      	ldr	r6, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f001 f946 	bl	80065d4 <_init>
 8005348:	1ba4      	subs	r4, r4, r6
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2500      	movs	r5, #0
 800534e:	42a5      	cmp	r5, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005358:	4798      	blx	r3
 800535a:	3501      	adds	r5, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005362:	4798      	blx	r3
 8005364:	3501      	adds	r5, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	08006a38 	.word	0x08006a38
 800536c:	08006a38 	.word	0x08006a38
 8005370:	08006a38 	.word	0x08006a38
 8005374:	08006a3c 	.word	0x08006a3c

08005378 <memcpy>:
 8005378:	b510      	push	{r4, lr}
 800537a:	1e43      	subs	r3, r0, #1
 800537c:	440a      	add	r2, r1
 800537e:	4291      	cmp	r1, r2
 8005380:	d100      	bne.n	8005384 <memcpy+0xc>
 8005382:	bd10      	pop	{r4, pc}
 8005384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538c:	e7f7      	b.n	800537e <memcpy+0x6>

0800538e <memset>:
 800538e:	4402      	add	r2, r0
 8005390:	4603      	mov	r3, r0
 8005392:	4293      	cmp	r3, r2
 8005394:	d100      	bne.n	8005398 <memset+0xa>
 8005396:	4770      	bx	lr
 8005398:	f803 1b01 	strb.w	r1, [r3], #1
 800539c:	e7f9      	b.n	8005392 <memset+0x4>
	...

080053a0 <iprintf>:
 80053a0:	b40f      	push	{r0, r1, r2, r3}
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <iprintf+0x2c>)
 80053a4:	b513      	push	{r0, r1, r4, lr}
 80053a6:	681c      	ldr	r4, [r3, #0]
 80053a8:	b124      	cbz	r4, 80053b4 <iprintf+0x14>
 80053aa:	69a3      	ldr	r3, [r4, #24]
 80053ac:	b913      	cbnz	r3, 80053b4 <iprintf+0x14>
 80053ae:	4620      	mov	r0, r4
 80053b0:	f000 fa48 	bl	8005844 <__sinit>
 80053b4:	ab05      	add	r3, sp, #20
 80053b6:	9a04      	ldr	r2, [sp, #16]
 80053b8:	68a1      	ldr	r1, [r4, #8]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	4620      	mov	r0, r4
 80053be:	f000 fd55 	bl	8005e6c <_vfiprintf_r>
 80053c2:	b002      	add	sp, #8
 80053c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c8:	b004      	add	sp, #16
 80053ca:	4770      	bx	lr
 80053cc:	20000074 	.word	0x20000074

080053d0 <_puts_r>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	460e      	mov	r6, r1
 80053d4:	4605      	mov	r5, r0
 80053d6:	b118      	cbz	r0, 80053e0 <_puts_r+0x10>
 80053d8:	6983      	ldr	r3, [r0, #24]
 80053da:	b90b      	cbnz	r3, 80053e0 <_puts_r+0x10>
 80053dc:	f000 fa32 	bl	8005844 <__sinit>
 80053e0:	69ab      	ldr	r3, [r5, #24]
 80053e2:	68ac      	ldr	r4, [r5, #8]
 80053e4:	b913      	cbnz	r3, 80053ec <_puts_r+0x1c>
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fa2c 	bl	8005844 <__sinit>
 80053ec:	4b23      	ldr	r3, [pc, #140]	; (800547c <_puts_r+0xac>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d117      	bne.n	8005422 <_puts_r+0x52>
 80053f2:	686c      	ldr	r4, [r5, #4]
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	071b      	lsls	r3, r3, #28
 80053f8:	d51d      	bpl.n	8005436 <_puts_r+0x66>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	b1db      	cbz	r3, 8005436 <_puts_r+0x66>
 80053fe:	3e01      	subs	r6, #1
 8005400:	68a3      	ldr	r3, [r4, #8]
 8005402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005406:	3b01      	subs	r3, #1
 8005408:	60a3      	str	r3, [r4, #8]
 800540a:	b9e9      	cbnz	r1, 8005448 <_puts_r+0x78>
 800540c:	2b00      	cmp	r3, #0
 800540e:	da2e      	bge.n	800546e <_puts_r+0x9e>
 8005410:	4622      	mov	r2, r4
 8005412:	210a      	movs	r1, #10
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f863 	bl	80054e0 <__swbuf_r>
 800541a:	3001      	adds	r0, #1
 800541c:	d011      	beq.n	8005442 <_puts_r+0x72>
 800541e:	200a      	movs	r0, #10
 8005420:	bd70      	pop	{r4, r5, r6, pc}
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <_puts_r+0xb0>)
 8005424:	429c      	cmp	r4, r3
 8005426:	d101      	bne.n	800542c <_puts_r+0x5c>
 8005428:	68ac      	ldr	r4, [r5, #8]
 800542a:	e7e3      	b.n	80053f4 <_puts_r+0x24>
 800542c:	4b15      	ldr	r3, [pc, #84]	; (8005484 <_puts_r+0xb4>)
 800542e:	429c      	cmp	r4, r3
 8005430:	bf08      	it	eq
 8005432:	68ec      	ldreq	r4, [r5, #12]
 8005434:	e7de      	b.n	80053f4 <_puts_r+0x24>
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f8a3 	bl	8005584 <__swsetup_r>
 800543e:	2800      	cmp	r0, #0
 8005440:	d0dd      	beq.n	80053fe <_puts_r+0x2e>
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	2b00      	cmp	r3, #0
 800544a:	da04      	bge.n	8005456 <_puts_r+0x86>
 800544c:	69a2      	ldr	r2, [r4, #24]
 800544e:	4293      	cmp	r3, r2
 8005450:	db06      	blt.n	8005460 <_puts_r+0x90>
 8005452:	290a      	cmp	r1, #10
 8005454:	d004      	beq.n	8005460 <_puts_r+0x90>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	6022      	str	r2, [r4, #0]
 800545c:	7019      	strb	r1, [r3, #0]
 800545e:	e7cf      	b.n	8005400 <_puts_r+0x30>
 8005460:	4622      	mov	r2, r4
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f83c 	bl	80054e0 <__swbuf_r>
 8005468:	3001      	adds	r0, #1
 800546a:	d1c9      	bne.n	8005400 <_puts_r+0x30>
 800546c:	e7e9      	b.n	8005442 <_puts_r+0x72>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	200a      	movs	r0, #10
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	6022      	str	r2, [r4, #0]
 8005476:	7018      	strb	r0, [r3, #0]
 8005478:	bd70      	pop	{r4, r5, r6, pc}
 800547a:	bf00      	nop
 800547c:	080069bc 	.word	0x080069bc
 8005480:	080069dc 	.word	0x080069dc
 8005484:	0800699c 	.word	0x0800699c

08005488 <puts>:
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <puts+0xc>)
 800548a:	4601      	mov	r1, r0
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f7ff bf9f 	b.w	80053d0 <_puts_r>
 8005492:	bf00      	nop
 8005494:	20000074 	.word	0x20000074

08005498 <siprintf>:
 8005498:	b40e      	push	{r1, r2, r3}
 800549a:	b500      	push	{lr}
 800549c:	b09c      	sub	sp, #112	; 0x70
 800549e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80054a2:	ab1d      	add	r3, sp, #116	; 0x74
 80054a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80054a8:	9002      	str	r0, [sp, #8]
 80054aa:	9006      	str	r0, [sp, #24]
 80054ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054b0:	480a      	ldr	r0, [pc, #40]	; (80054dc <siprintf+0x44>)
 80054b2:	9104      	str	r1, [sp, #16]
 80054b4:	9107      	str	r1, [sp, #28]
 80054b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80054be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80054c2:	6800      	ldr	r0, [r0, #0]
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	a902      	add	r1, sp, #8
 80054c8:	f000 fbb2 	bl	8005c30 <_svfiprintf_r>
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	b01c      	add	sp, #112	; 0x70
 80054d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d8:	b003      	add	sp, #12
 80054da:	4770      	bx	lr
 80054dc:	20000074 	.word	0x20000074

080054e0 <__swbuf_r>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	460e      	mov	r6, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	4605      	mov	r5, r0
 80054e8:	b118      	cbz	r0, 80054f2 <__swbuf_r+0x12>
 80054ea:	6983      	ldr	r3, [r0, #24]
 80054ec:	b90b      	cbnz	r3, 80054f2 <__swbuf_r+0x12>
 80054ee:	f000 f9a9 	bl	8005844 <__sinit>
 80054f2:	4b21      	ldr	r3, [pc, #132]	; (8005578 <__swbuf_r+0x98>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d12a      	bne.n	800554e <__swbuf_r+0x6e>
 80054f8:	686c      	ldr	r4, [r5, #4]
 80054fa:	69a3      	ldr	r3, [r4, #24]
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	071a      	lsls	r2, r3, #28
 8005502:	d52e      	bpl.n	8005562 <__swbuf_r+0x82>
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	b363      	cbz	r3, 8005562 <__swbuf_r+0x82>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	1ac0      	subs	r0, r0, r3
 800550e:	6963      	ldr	r3, [r4, #20]
 8005510:	b2f6      	uxtb	r6, r6
 8005512:	4298      	cmp	r0, r3
 8005514:	4637      	mov	r7, r6
 8005516:	db04      	blt.n	8005522 <__swbuf_r+0x42>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f928 	bl	8005770 <_fflush_r>
 8005520:	bb28      	cbnz	r0, 800556e <__swbuf_r+0x8e>
 8005522:	68a3      	ldr	r3, [r4, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	701e      	strb	r6, [r3, #0]
 8005530:	6963      	ldr	r3, [r4, #20]
 8005532:	3001      	adds	r0, #1
 8005534:	4298      	cmp	r0, r3
 8005536:	d004      	beq.n	8005542 <__swbuf_r+0x62>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	07db      	lsls	r3, r3, #31
 800553c:	d519      	bpl.n	8005572 <__swbuf_r+0x92>
 800553e:	2e0a      	cmp	r6, #10
 8005540:	d117      	bne.n	8005572 <__swbuf_r+0x92>
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f913 	bl	8005770 <_fflush_r>
 800554a:	b190      	cbz	r0, 8005572 <__swbuf_r+0x92>
 800554c:	e00f      	b.n	800556e <__swbuf_r+0x8e>
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <__swbuf_r+0x9c>)
 8005550:	429c      	cmp	r4, r3
 8005552:	d101      	bne.n	8005558 <__swbuf_r+0x78>
 8005554:	68ac      	ldr	r4, [r5, #8]
 8005556:	e7d0      	b.n	80054fa <__swbuf_r+0x1a>
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <__swbuf_r+0xa0>)
 800555a:	429c      	cmp	r4, r3
 800555c:	bf08      	it	eq
 800555e:	68ec      	ldreq	r4, [r5, #12]
 8005560:	e7cb      	b.n	80054fa <__swbuf_r+0x1a>
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 f80d 	bl	8005584 <__swsetup_r>
 800556a:	2800      	cmp	r0, #0
 800556c:	d0cc      	beq.n	8005508 <__swbuf_r+0x28>
 800556e:	f04f 37ff 	mov.w	r7, #4294967295
 8005572:	4638      	mov	r0, r7
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005576:	bf00      	nop
 8005578:	080069bc 	.word	0x080069bc
 800557c:	080069dc 	.word	0x080069dc
 8005580:	0800699c 	.word	0x0800699c

08005584 <__swsetup_r>:
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <__swsetup_r+0xcc>)
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	4606      	mov	r6, r0
 800558c:	460c      	mov	r4, r1
 800558e:	b125      	cbz	r5, 800559a <__swsetup_r+0x16>
 8005590:	69ab      	ldr	r3, [r5, #24]
 8005592:	b913      	cbnz	r3, 800559a <__swsetup_r+0x16>
 8005594:	4628      	mov	r0, r5
 8005596:	f000 f955 	bl	8005844 <__sinit>
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <__swsetup_r+0xd0>)
 800559c:	429c      	cmp	r4, r3
 800559e:	d10f      	bne.n	80055c0 <__swsetup_r+0x3c>
 80055a0:	686c      	ldr	r4, [r5, #4]
 80055a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	0715      	lsls	r5, r2, #28
 80055aa:	d42c      	bmi.n	8005606 <__swsetup_r+0x82>
 80055ac:	06d0      	lsls	r0, r2, #27
 80055ae:	d411      	bmi.n	80055d4 <__swsetup_r+0x50>
 80055b0:	2209      	movs	r2, #9
 80055b2:	6032      	str	r2, [r6, #0]
 80055b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	4b25      	ldr	r3, [pc, #148]	; (8005658 <__swsetup_r+0xd4>)
 80055c2:	429c      	cmp	r4, r3
 80055c4:	d101      	bne.n	80055ca <__swsetup_r+0x46>
 80055c6:	68ac      	ldr	r4, [r5, #8]
 80055c8:	e7eb      	b.n	80055a2 <__swsetup_r+0x1e>
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <__swsetup_r+0xd8>)
 80055cc:	429c      	cmp	r4, r3
 80055ce:	bf08      	it	eq
 80055d0:	68ec      	ldreq	r4, [r5, #12]
 80055d2:	e7e6      	b.n	80055a2 <__swsetup_r+0x1e>
 80055d4:	0751      	lsls	r1, r2, #29
 80055d6:	d512      	bpl.n	80055fe <__swsetup_r+0x7a>
 80055d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055da:	b141      	cbz	r1, 80055ee <__swsetup_r+0x6a>
 80055dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055e0:	4299      	cmp	r1, r3
 80055e2:	d002      	beq.n	80055ea <__swsetup_r+0x66>
 80055e4:	4630      	mov	r0, r6
 80055e6:	f000 fa1b 	bl	8005a20 <_free_r>
 80055ea:	2300      	movs	r3, #0
 80055ec:	6363      	str	r3, [r4, #52]	; 0x34
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	f043 0308 	orr.w	r3, r3, #8
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	b94b      	cbnz	r3, 800561e <__swsetup_r+0x9a>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d003      	beq.n	800561e <__swsetup_r+0x9a>
 8005616:	4621      	mov	r1, r4
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f9c1 	bl	80059a0 <__smakebuf_r>
 800561e:	89a2      	ldrh	r2, [r4, #12]
 8005620:	f012 0301 	ands.w	r3, r2, #1
 8005624:	d00c      	beq.n	8005640 <__swsetup_r+0xbc>
 8005626:	2300      	movs	r3, #0
 8005628:	60a3      	str	r3, [r4, #8]
 800562a:	6963      	ldr	r3, [r4, #20]
 800562c:	425b      	negs	r3, r3
 800562e:	61a3      	str	r3, [r4, #24]
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	b953      	cbnz	r3, 800564a <__swsetup_r+0xc6>
 8005634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800563c:	d1ba      	bne.n	80055b4 <__swsetup_r+0x30>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	0792      	lsls	r2, r2, #30
 8005642:	bf58      	it	pl
 8005644:	6963      	ldrpl	r3, [r4, #20]
 8005646:	60a3      	str	r3, [r4, #8]
 8005648:	e7f2      	b.n	8005630 <__swsetup_r+0xac>
 800564a:	2000      	movs	r0, #0
 800564c:	e7f7      	b.n	800563e <__swsetup_r+0xba>
 800564e:	bf00      	nop
 8005650:	20000074 	.word	0x20000074
 8005654:	080069bc 	.word	0x080069bc
 8005658:	080069dc 	.word	0x080069dc
 800565c:	0800699c 	.word	0x0800699c

08005660 <__sflush_r>:
 8005660:	898a      	ldrh	r2, [r1, #12]
 8005662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	4605      	mov	r5, r0
 8005668:	0710      	lsls	r0, r2, #28
 800566a:	460c      	mov	r4, r1
 800566c:	d45a      	bmi.n	8005724 <__sflush_r+0xc4>
 800566e:	684b      	ldr	r3, [r1, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dc05      	bgt.n	8005680 <__sflush_r+0x20>
 8005674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	dc02      	bgt.n	8005680 <__sflush_r+0x20>
 800567a:	2000      	movs	r0, #0
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005682:	2e00      	cmp	r6, #0
 8005684:	d0f9      	beq.n	800567a <__sflush_r+0x1a>
 8005686:	2300      	movs	r3, #0
 8005688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800568c:	682f      	ldr	r7, [r5, #0]
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	d033      	beq.n	80056fa <__sflush_r+0x9a>
 8005692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	075a      	lsls	r2, r3, #29
 8005698:	d505      	bpl.n	80056a6 <__sflush_r+0x46>
 800569a:	6863      	ldr	r3, [r4, #4]
 800569c:	1ac0      	subs	r0, r0, r3
 800569e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056a0:	b10b      	cbz	r3, 80056a6 <__sflush_r+0x46>
 80056a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056a4:	1ac0      	subs	r0, r0, r3
 80056a6:	2300      	movs	r3, #0
 80056a8:	4602      	mov	r2, r0
 80056aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ac:	6a21      	ldr	r1, [r4, #32]
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b0      	blx	r6
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	d106      	bne.n	80056c6 <__sflush_r+0x66>
 80056b8:	6829      	ldr	r1, [r5, #0]
 80056ba:	291d      	cmp	r1, #29
 80056bc:	d84b      	bhi.n	8005756 <__sflush_r+0xf6>
 80056be:	4a2b      	ldr	r2, [pc, #172]	; (800576c <__sflush_r+0x10c>)
 80056c0:	40ca      	lsrs	r2, r1
 80056c2:	07d6      	lsls	r6, r2, #31
 80056c4:	d547      	bpl.n	8005756 <__sflush_r+0xf6>
 80056c6:	2200      	movs	r2, #0
 80056c8:	6062      	str	r2, [r4, #4]
 80056ca:	04d9      	lsls	r1, r3, #19
 80056cc:	6922      	ldr	r2, [r4, #16]
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	d504      	bpl.n	80056dc <__sflush_r+0x7c>
 80056d2:	1c42      	adds	r2, r0, #1
 80056d4:	d101      	bne.n	80056da <__sflush_r+0x7a>
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	b903      	cbnz	r3, 80056dc <__sflush_r+0x7c>
 80056da:	6560      	str	r0, [r4, #84]	; 0x54
 80056dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056de:	602f      	str	r7, [r5, #0]
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d0ca      	beq.n	800567a <__sflush_r+0x1a>
 80056e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d002      	beq.n	80056f2 <__sflush_r+0x92>
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 f997 	bl	8005a20 <_free_r>
 80056f2:	2000      	movs	r0, #0
 80056f4:	6360      	str	r0, [r4, #52]	; 0x34
 80056f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fa:	6a21      	ldr	r1, [r4, #32]
 80056fc:	2301      	movs	r3, #1
 80056fe:	4628      	mov	r0, r5
 8005700:	47b0      	blx	r6
 8005702:	1c41      	adds	r1, r0, #1
 8005704:	d1c6      	bne.n	8005694 <__sflush_r+0x34>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0c3      	beq.n	8005694 <__sflush_r+0x34>
 800570c:	2b1d      	cmp	r3, #29
 800570e:	d001      	beq.n	8005714 <__sflush_r+0xb4>
 8005710:	2b16      	cmp	r3, #22
 8005712:	d101      	bne.n	8005718 <__sflush_r+0xb8>
 8005714:	602f      	str	r7, [r5, #0]
 8005716:	e7b0      	b.n	800567a <__sflush_r+0x1a>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005724:	690f      	ldr	r7, [r1, #16]
 8005726:	2f00      	cmp	r7, #0
 8005728:	d0a7      	beq.n	800567a <__sflush_r+0x1a>
 800572a:	0793      	lsls	r3, r2, #30
 800572c:	680e      	ldr	r6, [r1, #0]
 800572e:	bf08      	it	eq
 8005730:	694b      	ldreq	r3, [r1, #20]
 8005732:	600f      	str	r7, [r1, #0]
 8005734:	bf18      	it	ne
 8005736:	2300      	movne	r3, #0
 8005738:	eba6 0807 	sub.w	r8, r6, r7
 800573c:	608b      	str	r3, [r1, #8]
 800573e:	f1b8 0f00 	cmp.w	r8, #0
 8005742:	dd9a      	ble.n	800567a <__sflush_r+0x1a>
 8005744:	4643      	mov	r3, r8
 8005746:	463a      	mov	r2, r7
 8005748:	6a21      	ldr	r1, [r4, #32]
 800574a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800574c:	4628      	mov	r0, r5
 800574e:	47b0      	blx	r6
 8005750:	2800      	cmp	r0, #0
 8005752:	dc07      	bgt.n	8005764 <__sflush_r+0x104>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005764:	4407      	add	r7, r0
 8005766:	eba8 0800 	sub.w	r8, r8, r0
 800576a:	e7e8      	b.n	800573e <__sflush_r+0xde>
 800576c:	20400001 	.word	0x20400001

08005770 <_fflush_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	690b      	ldr	r3, [r1, #16]
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b1db      	cbz	r3, 80057b2 <_fflush_r+0x42>
 800577a:	b118      	cbz	r0, 8005784 <_fflush_r+0x14>
 800577c:	6983      	ldr	r3, [r0, #24]
 800577e:	b90b      	cbnz	r3, 8005784 <_fflush_r+0x14>
 8005780:	f000 f860 	bl	8005844 <__sinit>
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <_fflush_r+0x48>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d109      	bne.n	800579e <_fflush_r+0x2e>
 800578a:	686c      	ldr	r4, [r5, #4]
 800578c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005790:	b17b      	cbz	r3, 80057b2 <_fflush_r+0x42>
 8005792:	4621      	mov	r1, r4
 8005794:	4628      	mov	r0, r5
 8005796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800579a:	f7ff bf61 	b.w	8005660 <__sflush_r>
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <_fflush_r+0x4c>)
 80057a0:	429c      	cmp	r4, r3
 80057a2:	d101      	bne.n	80057a8 <_fflush_r+0x38>
 80057a4:	68ac      	ldr	r4, [r5, #8]
 80057a6:	e7f1      	b.n	800578c <_fflush_r+0x1c>
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <_fflush_r+0x50>)
 80057aa:	429c      	cmp	r4, r3
 80057ac:	bf08      	it	eq
 80057ae:	68ec      	ldreq	r4, [r5, #12]
 80057b0:	e7ec      	b.n	800578c <_fflush_r+0x1c>
 80057b2:	2000      	movs	r0, #0
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
 80057b6:	bf00      	nop
 80057b8:	080069bc 	.word	0x080069bc
 80057bc:	080069dc 	.word	0x080069dc
 80057c0:	0800699c 	.word	0x0800699c

080057c4 <_cleanup_r>:
 80057c4:	4901      	ldr	r1, [pc, #4]	; (80057cc <_cleanup_r+0x8>)
 80057c6:	f000 b8a9 	b.w	800591c <_fwalk_reent>
 80057ca:	bf00      	nop
 80057cc:	08005771 	.word	0x08005771

080057d0 <std.isra.0>:
 80057d0:	2300      	movs	r3, #0
 80057d2:	b510      	push	{r4, lr}
 80057d4:	4604      	mov	r4, r0
 80057d6:	6003      	str	r3, [r0, #0]
 80057d8:	6043      	str	r3, [r0, #4]
 80057da:	6083      	str	r3, [r0, #8]
 80057dc:	8181      	strh	r1, [r0, #12]
 80057de:	6643      	str	r3, [r0, #100]	; 0x64
 80057e0:	81c2      	strh	r2, [r0, #14]
 80057e2:	6103      	str	r3, [r0, #16]
 80057e4:	6143      	str	r3, [r0, #20]
 80057e6:	6183      	str	r3, [r0, #24]
 80057e8:	4619      	mov	r1, r3
 80057ea:	2208      	movs	r2, #8
 80057ec:	305c      	adds	r0, #92	; 0x5c
 80057ee:	f7ff fdce 	bl	800538e <memset>
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <std.isra.0+0x38>)
 80057f4:	6263      	str	r3, [r4, #36]	; 0x24
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std.isra.0+0x3c>)
 80057f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <std.isra.0+0x40>)
 80057fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <std.isra.0+0x44>)
 8005800:	6224      	str	r4, [r4, #32]
 8005802:	6323      	str	r3, [r4, #48]	; 0x30
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	080063e5 	.word	0x080063e5
 800580c:	08006407 	.word	0x08006407
 8005810:	0800643f 	.word	0x0800643f
 8005814:	08006463 	.word	0x08006463

08005818 <__sfmoreglue>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	1e4a      	subs	r2, r1, #1
 800581c:	2568      	movs	r5, #104	; 0x68
 800581e:	4355      	muls	r5, r2
 8005820:	460e      	mov	r6, r1
 8005822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005826:	f000 f949 	bl	8005abc <_malloc_r>
 800582a:	4604      	mov	r4, r0
 800582c:	b140      	cbz	r0, 8005840 <__sfmoreglue+0x28>
 800582e:	2100      	movs	r1, #0
 8005830:	e880 0042 	stmia.w	r0, {r1, r6}
 8005834:	300c      	adds	r0, #12
 8005836:	60a0      	str	r0, [r4, #8]
 8005838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800583c:	f7ff fda7 	bl	800538e <memset>
 8005840:	4620      	mov	r0, r4
 8005842:	bd70      	pop	{r4, r5, r6, pc}

08005844 <__sinit>:
 8005844:	6983      	ldr	r3, [r0, #24]
 8005846:	b510      	push	{r4, lr}
 8005848:	4604      	mov	r4, r0
 800584a:	bb33      	cbnz	r3, 800589a <__sinit+0x56>
 800584c:	6483      	str	r3, [r0, #72]	; 0x48
 800584e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005850:	6503      	str	r3, [r0, #80]	; 0x50
 8005852:	4b12      	ldr	r3, [pc, #72]	; (800589c <__sinit+0x58>)
 8005854:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <__sinit+0x5c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6282      	str	r2, [r0, #40]	; 0x28
 800585a:	4298      	cmp	r0, r3
 800585c:	bf04      	itt	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	6183      	streq	r3, [r0, #24]
 8005862:	f000 f81f 	bl	80058a4 <__sfp>
 8005866:	6060      	str	r0, [r4, #4]
 8005868:	4620      	mov	r0, r4
 800586a:	f000 f81b 	bl	80058a4 <__sfp>
 800586e:	60a0      	str	r0, [r4, #8]
 8005870:	4620      	mov	r0, r4
 8005872:	f000 f817 	bl	80058a4 <__sfp>
 8005876:	2200      	movs	r2, #0
 8005878:	60e0      	str	r0, [r4, #12]
 800587a:	2104      	movs	r1, #4
 800587c:	6860      	ldr	r0, [r4, #4]
 800587e:	f7ff ffa7 	bl	80057d0 <std.isra.0>
 8005882:	2201      	movs	r2, #1
 8005884:	2109      	movs	r1, #9
 8005886:	68a0      	ldr	r0, [r4, #8]
 8005888:	f7ff ffa2 	bl	80057d0 <std.isra.0>
 800588c:	2202      	movs	r2, #2
 800588e:	2112      	movs	r1, #18
 8005890:	68e0      	ldr	r0, [r4, #12]
 8005892:	f7ff ff9d 	bl	80057d0 <std.isra.0>
 8005896:	2301      	movs	r3, #1
 8005898:	61a3      	str	r3, [r4, #24]
 800589a:	bd10      	pop	{r4, pc}
 800589c:	08006998 	.word	0x08006998
 80058a0:	080057c5 	.word	0x080057c5

080058a4 <__sfp>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <__sfp+0x74>)
 80058a8:	681e      	ldr	r6, [r3, #0]
 80058aa:	69b3      	ldr	r3, [r6, #24]
 80058ac:	4607      	mov	r7, r0
 80058ae:	b913      	cbnz	r3, 80058b6 <__sfp+0x12>
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7ff ffc7 	bl	8005844 <__sinit>
 80058b6:	3648      	adds	r6, #72	; 0x48
 80058b8:	68b4      	ldr	r4, [r6, #8]
 80058ba:	6873      	ldr	r3, [r6, #4]
 80058bc:	3b01      	subs	r3, #1
 80058be:	d503      	bpl.n	80058c8 <__sfp+0x24>
 80058c0:	6833      	ldr	r3, [r6, #0]
 80058c2:	b133      	cbz	r3, 80058d2 <__sfp+0x2e>
 80058c4:	6836      	ldr	r6, [r6, #0]
 80058c6:	e7f7      	b.n	80058b8 <__sfp+0x14>
 80058c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058cc:	b16d      	cbz	r5, 80058ea <__sfp+0x46>
 80058ce:	3468      	adds	r4, #104	; 0x68
 80058d0:	e7f4      	b.n	80058bc <__sfp+0x18>
 80058d2:	2104      	movs	r1, #4
 80058d4:	4638      	mov	r0, r7
 80058d6:	f7ff ff9f 	bl	8005818 <__sfmoreglue>
 80058da:	6030      	str	r0, [r6, #0]
 80058dc:	2800      	cmp	r0, #0
 80058de:	d1f1      	bne.n	80058c4 <__sfp+0x20>
 80058e0:	230c      	movs	r3, #12
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4604      	mov	r4, r0
 80058e6:	4620      	mov	r0, r4
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058ee:	81e3      	strh	r3, [r4, #14]
 80058f0:	2301      	movs	r3, #1
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	6665      	str	r5, [r4, #100]	; 0x64
 80058f6:	6025      	str	r5, [r4, #0]
 80058f8:	60a5      	str	r5, [r4, #8]
 80058fa:	6065      	str	r5, [r4, #4]
 80058fc:	6125      	str	r5, [r4, #16]
 80058fe:	6165      	str	r5, [r4, #20]
 8005900:	61a5      	str	r5, [r4, #24]
 8005902:	2208      	movs	r2, #8
 8005904:	4629      	mov	r1, r5
 8005906:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800590a:	f7ff fd40 	bl	800538e <memset>
 800590e:	6365      	str	r5, [r4, #52]	; 0x34
 8005910:	63a5      	str	r5, [r4, #56]	; 0x38
 8005912:	64a5      	str	r5, [r4, #72]	; 0x48
 8005914:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005916:	e7e6      	b.n	80058e6 <__sfp+0x42>
 8005918:	08006998 	.word	0x08006998

0800591c <_fwalk_reent>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	4680      	mov	r8, r0
 8005922:	4689      	mov	r9, r1
 8005924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005928:	2600      	movs	r6, #0
 800592a:	b914      	cbnz	r4, 8005932 <_fwalk_reent+0x16>
 800592c:	4630      	mov	r0, r6
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	68a5      	ldr	r5, [r4, #8]
 8005934:	6867      	ldr	r7, [r4, #4]
 8005936:	3f01      	subs	r7, #1
 8005938:	d501      	bpl.n	800593e <_fwalk_reent+0x22>
 800593a:	6824      	ldr	r4, [r4, #0]
 800593c:	e7f5      	b.n	800592a <_fwalk_reent+0xe>
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d907      	bls.n	8005954 <_fwalk_reent+0x38>
 8005944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005948:	3301      	adds	r3, #1
 800594a:	d003      	beq.n	8005954 <_fwalk_reent+0x38>
 800594c:	4629      	mov	r1, r5
 800594e:	4640      	mov	r0, r8
 8005950:	47c8      	blx	r9
 8005952:	4306      	orrs	r6, r0
 8005954:	3568      	adds	r5, #104	; 0x68
 8005956:	e7ee      	b.n	8005936 <_fwalk_reent+0x1a>

08005958 <__swhatbuf_r>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	460e      	mov	r6, r1
 800595c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005960:	2900      	cmp	r1, #0
 8005962:	b090      	sub	sp, #64	; 0x40
 8005964:	4614      	mov	r4, r2
 8005966:	461d      	mov	r5, r3
 8005968:	da07      	bge.n	800597a <__swhatbuf_r+0x22>
 800596a:	2300      	movs	r3, #0
 800596c:	602b      	str	r3, [r5, #0]
 800596e:	89b3      	ldrh	r3, [r6, #12]
 8005970:	061a      	lsls	r2, r3, #24
 8005972:	d410      	bmi.n	8005996 <__swhatbuf_r+0x3e>
 8005974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005978:	e00e      	b.n	8005998 <__swhatbuf_r+0x40>
 800597a:	aa01      	add	r2, sp, #4
 800597c:	f000 fd98 	bl	80064b0 <_fstat_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	dbf2      	blt.n	800596a <__swhatbuf_r+0x12>
 8005984:	9a02      	ldr	r2, [sp, #8]
 8005986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800598a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800598e:	425a      	negs	r2, r3
 8005990:	415a      	adcs	r2, r3
 8005992:	602a      	str	r2, [r5, #0]
 8005994:	e7ee      	b.n	8005974 <__swhatbuf_r+0x1c>
 8005996:	2340      	movs	r3, #64	; 0x40
 8005998:	2000      	movs	r0, #0
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	b010      	add	sp, #64	; 0x40
 800599e:	bd70      	pop	{r4, r5, r6, pc}

080059a0 <__smakebuf_r>:
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059a4:	079d      	lsls	r5, r3, #30
 80059a6:	4606      	mov	r6, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	d507      	bpl.n	80059bc <__smakebuf_r+0x1c>
 80059ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	2301      	movs	r3, #1
 80059b6:	6163      	str	r3, [r4, #20]
 80059b8:	b002      	add	sp, #8
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	ab01      	add	r3, sp, #4
 80059be:	466a      	mov	r2, sp
 80059c0:	f7ff ffca 	bl	8005958 <__swhatbuf_r>
 80059c4:	9900      	ldr	r1, [sp, #0]
 80059c6:	4605      	mov	r5, r0
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f877 	bl	8005abc <_malloc_r>
 80059ce:	b948      	cbnz	r0, 80059e4 <__smakebuf_r+0x44>
 80059d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d4:	059a      	lsls	r2, r3, #22
 80059d6:	d4ef      	bmi.n	80059b8 <__smakebuf_r+0x18>
 80059d8:	f023 0303 	bic.w	r3, r3, #3
 80059dc:	f043 0302 	orr.w	r3, r3, #2
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	e7e3      	b.n	80059ac <__smakebuf_r+0xc>
 80059e4:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <__smakebuf_r+0x7c>)
 80059e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	6020      	str	r0, [r4, #0]
 80059ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	9b00      	ldr	r3, [sp, #0]
 80059f4:	6163      	str	r3, [r4, #20]
 80059f6:	9b01      	ldr	r3, [sp, #4]
 80059f8:	6120      	str	r0, [r4, #16]
 80059fa:	b15b      	cbz	r3, 8005a14 <__smakebuf_r+0x74>
 80059fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 fd67 	bl	80064d4 <_isatty_r>
 8005a06:	b128      	cbz	r0, 8005a14 <__smakebuf_r+0x74>
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	431d      	orrs	r5, r3
 8005a18:	81a5      	strh	r5, [r4, #12]
 8005a1a:	e7cd      	b.n	80059b8 <__smakebuf_r+0x18>
 8005a1c:	080057c5 	.word	0x080057c5

08005a20 <_free_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4605      	mov	r5, r0
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d045      	beq.n	8005ab4 <_free_r+0x94>
 8005a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2c:	1f0c      	subs	r4, r1, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bfb8      	it	lt
 8005a32:	18e4      	addlt	r4, r4, r3
 8005a34:	f000 fd8a 	bl	800654c <__malloc_lock>
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <_free_r+0x98>)
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	b933      	cbnz	r3, 8005a4e <_free_r+0x2e>
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	6014      	str	r4, [r2, #0]
 8005a44:	4628      	mov	r0, r5
 8005a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a4a:	f000 bd80 	b.w	800654e <__malloc_unlock>
 8005a4e:	42a3      	cmp	r3, r4
 8005a50:	d90c      	bls.n	8005a6c <_free_r+0x4c>
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	1862      	adds	r2, r4, r1
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bf04      	itt	eq
 8005a5a:	681a      	ldreq	r2, [r3, #0]
 8005a5c:	685b      	ldreq	r3, [r3, #4]
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	bf04      	itt	eq
 8005a62:	1852      	addeq	r2, r2, r1
 8005a64:	6022      	streq	r2, [r4, #0]
 8005a66:	6004      	str	r4, [r0, #0]
 8005a68:	e7ec      	b.n	8005a44 <_free_r+0x24>
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	b10a      	cbz	r2, 8005a74 <_free_r+0x54>
 8005a70:	42a2      	cmp	r2, r4
 8005a72:	d9fa      	bls.n	8005a6a <_free_r+0x4a>
 8005a74:	6819      	ldr	r1, [r3, #0]
 8005a76:	1858      	adds	r0, r3, r1
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d10b      	bne.n	8005a94 <_free_r+0x74>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	4401      	add	r1, r0
 8005a80:	1858      	adds	r0, r3, r1
 8005a82:	4282      	cmp	r2, r0
 8005a84:	6019      	str	r1, [r3, #0]
 8005a86:	d1dd      	bne.n	8005a44 <_free_r+0x24>
 8005a88:	6810      	ldr	r0, [r2, #0]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	4401      	add	r1, r0
 8005a90:	6019      	str	r1, [r3, #0]
 8005a92:	e7d7      	b.n	8005a44 <_free_r+0x24>
 8005a94:	d902      	bls.n	8005a9c <_free_r+0x7c>
 8005a96:	230c      	movs	r3, #12
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	e7d3      	b.n	8005a44 <_free_r+0x24>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	428a      	cmp	r2, r1
 8005aa2:	bf04      	itt	eq
 8005aa4:	6811      	ldreq	r1, [r2, #0]
 8005aa6:	6852      	ldreq	r2, [r2, #4]
 8005aa8:	6062      	str	r2, [r4, #4]
 8005aaa:	bf04      	itt	eq
 8005aac:	1809      	addeq	r1, r1, r0
 8005aae:	6021      	streq	r1, [r4, #0]
 8005ab0:	605c      	str	r4, [r3, #4]
 8005ab2:	e7c7      	b.n	8005a44 <_free_r+0x24>
 8005ab4:	bd38      	pop	{r3, r4, r5, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2000013c 	.word	0x2000013c

08005abc <_malloc_r>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	1ccd      	adds	r5, r1, #3
 8005ac0:	f025 0503 	bic.w	r5, r5, #3
 8005ac4:	3508      	adds	r5, #8
 8005ac6:	2d0c      	cmp	r5, #12
 8005ac8:	bf38      	it	cc
 8005aca:	250c      	movcc	r5, #12
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	4606      	mov	r6, r0
 8005ad0:	db01      	blt.n	8005ad6 <_malloc_r+0x1a>
 8005ad2:	42a9      	cmp	r1, r5
 8005ad4:	d903      	bls.n	8005ade <_malloc_r+0x22>
 8005ad6:	230c      	movs	r3, #12
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	2000      	movs	r0, #0
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	f000 fd35 	bl	800654c <__malloc_lock>
 8005ae2:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <_malloc_r+0xb4>)
 8005ae4:	6814      	ldr	r4, [r2, #0]
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	b991      	cbnz	r1, 8005b10 <_malloc_r+0x54>
 8005aea:	4c22      	ldr	r4, [pc, #136]	; (8005b74 <_malloc_r+0xb8>)
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	b91b      	cbnz	r3, 8005af8 <_malloc_r+0x3c>
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 fc67 	bl	80063c4 <_sbrk_r>
 8005af6:	6020      	str	r0, [r4, #0]
 8005af8:	4629      	mov	r1, r5
 8005afa:	4630      	mov	r0, r6
 8005afc:	f000 fc62 	bl	80063c4 <_sbrk_r>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d126      	bne.n	8005b52 <_malloc_r+0x96>
 8005b04:	230c      	movs	r3, #12
 8005b06:	6033      	str	r3, [r6, #0]
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 fd20 	bl	800654e <__malloc_unlock>
 8005b0e:	e7e4      	b.n	8005ada <_malloc_r+0x1e>
 8005b10:	680b      	ldr	r3, [r1, #0]
 8005b12:	1b5b      	subs	r3, r3, r5
 8005b14:	d41a      	bmi.n	8005b4c <_malloc_r+0x90>
 8005b16:	2b0b      	cmp	r3, #11
 8005b18:	d90f      	bls.n	8005b3a <_malloc_r+0x7e>
 8005b1a:	600b      	str	r3, [r1, #0]
 8005b1c:	50cd      	str	r5, [r1, r3]
 8005b1e:	18cc      	adds	r4, r1, r3
 8005b20:	4630      	mov	r0, r6
 8005b22:	f000 fd14 	bl	800654e <__malloc_unlock>
 8005b26:	f104 000b 	add.w	r0, r4, #11
 8005b2a:	1d23      	adds	r3, r4, #4
 8005b2c:	f020 0007 	bic.w	r0, r0, #7
 8005b30:	1ac3      	subs	r3, r0, r3
 8005b32:	d01b      	beq.n	8005b6c <_malloc_r+0xb0>
 8005b34:	425a      	negs	r2, r3
 8005b36:	50e2      	str	r2, [r4, r3]
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	428c      	cmp	r4, r1
 8005b3c:	bf0d      	iteet	eq
 8005b3e:	6863      	ldreq	r3, [r4, #4]
 8005b40:	684b      	ldrne	r3, [r1, #4]
 8005b42:	6063      	strne	r3, [r4, #4]
 8005b44:	6013      	streq	r3, [r2, #0]
 8005b46:	bf18      	it	ne
 8005b48:	460c      	movne	r4, r1
 8005b4a:	e7e9      	b.n	8005b20 <_malloc_r+0x64>
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	6849      	ldr	r1, [r1, #4]
 8005b50:	e7ca      	b.n	8005ae8 <_malloc_r+0x2c>
 8005b52:	1cc4      	adds	r4, r0, #3
 8005b54:	f024 0403 	bic.w	r4, r4, #3
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d005      	beq.n	8005b68 <_malloc_r+0xac>
 8005b5c:	1a21      	subs	r1, r4, r0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 fc30 	bl	80063c4 <_sbrk_r>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d0cd      	beq.n	8005b04 <_malloc_r+0x48>
 8005b68:	6025      	str	r5, [r4, #0]
 8005b6a:	e7d9      	b.n	8005b20 <_malloc_r+0x64>
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	bf00      	nop
 8005b70:	2000013c 	.word	0x2000013c
 8005b74:	20000140 	.word	0x20000140

08005b78 <__ssputs_r>:
 8005b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	688e      	ldr	r6, [r1, #8]
 8005b7e:	429e      	cmp	r6, r3
 8005b80:	4682      	mov	sl, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	4691      	mov	r9, r2
 8005b86:	4698      	mov	r8, r3
 8005b88:	d835      	bhi.n	8005bf6 <__ssputs_r+0x7e>
 8005b8a:	898a      	ldrh	r2, [r1, #12]
 8005b8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b90:	d031      	beq.n	8005bf6 <__ssputs_r+0x7e>
 8005b92:	6825      	ldr	r5, [r4, #0]
 8005b94:	6909      	ldr	r1, [r1, #16]
 8005b96:	1a6f      	subs	r7, r5, r1
 8005b98:	6965      	ldr	r5, [r4, #20]
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ba0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ba4:	f108 0301 	add.w	r3, r8, #1
 8005ba8:	443b      	add	r3, r7
 8005baa:	429d      	cmp	r5, r3
 8005bac:	bf38      	it	cc
 8005bae:	461d      	movcc	r5, r3
 8005bb0:	0553      	lsls	r3, r2, #21
 8005bb2:	d531      	bpl.n	8005c18 <__ssputs_r+0xa0>
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7ff ff81 	bl	8005abc <_malloc_r>
 8005bba:	4606      	mov	r6, r0
 8005bbc:	b950      	cbnz	r0, 8005bd4 <__ssputs_r+0x5c>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	f8ca 3000 	str.w	r3, [sl]
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	6921      	ldr	r1, [r4, #16]
 8005bd8:	f7ff fbce 	bl	8005378 <memcpy>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	6126      	str	r6, [r4, #16]
 8005bea:	6165      	str	r5, [r4, #20]
 8005bec:	443e      	add	r6, r7
 8005bee:	1bed      	subs	r5, r5, r7
 8005bf0:	6026      	str	r6, [r4, #0]
 8005bf2:	60a5      	str	r5, [r4, #8]
 8005bf4:	4646      	mov	r6, r8
 8005bf6:	4546      	cmp	r6, r8
 8005bf8:	bf28      	it	cs
 8005bfa:	4646      	movcs	r6, r8
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	4649      	mov	r1, r9
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	f000 fc89 	bl	8006518 <memmove>
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	1b9b      	subs	r3, r3, r6
 8005c0a:	60a3      	str	r3, [r4, #8]
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	441e      	add	r6, r3
 8005c10:	6026      	str	r6, [r4, #0]
 8005c12:	2000      	movs	r0, #0
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	462a      	mov	r2, r5
 8005c1a:	f000 fc99 	bl	8006550 <_realloc_r>
 8005c1e:	4606      	mov	r6, r0
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d1e1      	bne.n	8005be8 <__ssputs_r+0x70>
 8005c24:	6921      	ldr	r1, [r4, #16]
 8005c26:	4650      	mov	r0, sl
 8005c28:	f7ff fefa 	bl	8005a20 <_free_r>
 8005c2c:	e7c7      	b.n	8005bbe <__ssputs_r+0x46>
	...

08005c30 <_svfiprintf_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	b09d      	sub	sp, #116	; 0x74
 8005c36:	4680      	mov	r8, r0
 8005c38:	9303      	str	r3, [sp, #12]
 8005c3a:	898b      	ldrh	r3, [r1, #12]
 8005c3c:	061c      	lsls	r4, r3, #24
 8005c3e:	460d      	mov	r5, r1
 8005c40:	4616      	mov	r6, r2
 8005c42:	d50f      	bpl.n	8005c64 <_svfiprintf_r+0x34>
 8005c44:	690b      	ldr	r3, [r1, #16]
 8005c46:	b96b      	cbnz	r3, 8005c64 <_svfiprintf_r+0x34>
 8005c48:	2140      	movs	r1, #64	; 0x40
 8005c4a:	f7ff ff37 	bl	8005abc <_malloc_r>
 8005c4e:	6028      	str	r0, [r5, #0]
 8005c50:	6128      	str	r0, [r5, #16]
 8005c52:	b928      	cbnz	r0, 8005c60 <_svfiprintf_r+0x30>
 8005c54:	230c      	movs	r3, #12
 8005c56:	f8c8 3000 	str.w	r3, [r8]
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5e:	e0c5      	b.n	8005dec <_svfiprintf_r+0x1bc>
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	616b      	str	r3, [r5, #20]
 8005c64:	2300      	movs	r3, #0
 8005c66:	9309      	str	r3, [sp, #36]	; 0x24
 8005c68:	2320      	movs	r3, #32
 8005c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c6e:	2330      	movs	r3, #48	; 0x30
 8005c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c74:	f04f 0b01 	mov.w	fp, #1
 8005c78:	4637      	mov	r7, r6
 8005c7a:	463c      	mov	r4, r7
 8005c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d13c      	bne.n	8005cfe <_svfiprintf_r+0xce>
 8005c84:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c88:	d00b      	beq.n	8005ca2 <_svfiprintf_r+0x72>
 8005c8a:	4653      	mov	r3, sl
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4640      	mov	r0, r8
 8005c92:	f7ff ff71 	bl	8005b78 <__ssputs_r>
 8005c96:	3001      	adds	r0, #1
 8005c98:	f000 80a3 	beq.w	8005de2 <_svfiprintf_r+0x1b2>
 8005c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9e:	4453      	add	r3, sl
 8005ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca2:	783b      	ldrb	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 809c 	beq.w	8005de2 <_svfiprintf_r+0x1b2>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	9307      	str	r3, [sp, #28]
 8005cb4:	9205      	str	r2, [sp, #20]
 8005cb6:	9306      	str	r3, [sp, #24]
 8005cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005cbe:	2205      	movs	r2, #5
 8005cc0:	7821      	ldrb	r1, [r4, #0]
 8005cc2:	4850      	ldr	r0, [pc, #320]	; (8005e04 <_svfiprintf_r+0x1d4>)
 8005cc4:	f7fa fa8c 	bl	80001e0 <memchr>
 8005cc8:	1c67      	adds	r7, r4, #1
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	b9d8      	cbnz	r0, 8005d06 <_svfiprintf_r+0xd6>
 8005cce:	06d9      	lsls	r1, r3, #27
 8005cd0:	bf44      	itt	mi
 8005cd2:	2220      	movmi	r2, #32
 8005cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cd8:	071a      	lsls	r2, r3, #28
 8005cda:	bf44      	itt	mi
 8005cdc:	222b      	movmi	r2, #43	; 0x2b
 8005cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ce2:	7822      	ldrb	r2, [r4, #0]
 8005ce4:	2a2a      	cmp	r2, #42	; 0x2a
 8005ce6:	d016      	beq.n	8005d16 <_svfiprintf_r+0xe6>
 8005ce8:	9a07      	ldr	r2, [sp, #28]
 8005cea:	2100      	movs	r1, #0
 8005cec:	200a      	movs	r0, #10
 8005cee:	4627      	mov	r7, r4
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	783b      	ldrb	r3, [r7, #0]
 8005cf4:	3b30      	subs	r3, #48	; 0x30
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	d951      	bls.n	8005d9e <_svfiprintf_r+0x16e>
 8005cfa:	b1c9      	cbz	r1, 8005d30 <_svfiprintf_r+0x100>
 8005cfc:	e011      	b.n	8005d22 <_svfiprintf_r+0xf2>
 8005cfe:	2b25      	cmp	r3, #37	; 0x25
 8005d00:	d0c0      	beq.n	8005c84 <_svfiprintf_r+0x54>
 8005d02:	4627      	mov	r7, r4
 8005d04:	e7b9      	b.n	8005c7a <_svfiprintf_r+0x4a>
 8005d06:	4a3f      	ldr	r2, [pc, #252]	; (8005e04 <_svfiprintf_r+0x1d4>)
 8005d08:	1a80      	subs	r0, r0, r2
 8005d0a:	fa0b f000 	lsl.w	r0, fp, r0
 8005d0e:	4318      	orrs	r0, r3
 8005d10:	9004      	str	r0, [sp, #16]
 8005d12:	463c      	mov	r4, r7
 8005d14:	e7d3      	b.n	8005cbe <_svfiprintf_r+0x8e>
 8005d16:	9a03      	ldr	r2, [sp, #12]
 8005d18:	1d11      	adds	r1, r2, #4
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	9103      	str	r1, [sp, #12]
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	db01      	blt.n	8005d26 <_svfiprintf_r+0xf6>
 8005d22:	9207      	str	r2, [sp, #28]
 8005d24:	e004      	b.n	8005d30 <_svfiprintf_r+0x100>
 8005d26:	4252      	negs	r2, r2
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	9207      	str	r2, [sp, #28]
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	783b      	ldrb	r3, [r7, #0]
 8005d32:	2b2e      	cmp	r3, #46	; 0x2e
 8005d34:	d10e      	bne.n	8005d54 <_svfiprintf_r+0x124>
 8005d36:	787b      	ldrb	r3, [r7, #1]
 8005d38:	2b2a      	cmp	r3, #42	; 0x2a
 8005d3a:	f107 0101 	add.w	r1, r7, #1
 8005d3e:	d132      	bne.n	8005da6 <_svfiprintf_r+0x176>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	9203      	str	r2, [sp, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfb8      	it	lt
 8005d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d50:	3702      	adds	r7, #2
 8005d52:	9305      	str	r3, [sp, #20]
 8005d54:	4c2c      	ldr	r4, [pc, #176]	; (8005e08 <_svfiprintf_r+0x1d8>)
 8005d56:	7839      	ldrb	r1, [r7, #0]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7fa fa40 	bl	80001e0 <memchr>
 8005d60:	b138      	cbz	r0, 8005d72 <_svfiprintf_r+0x142>
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	1b00      	subs	r0, r0, r4
 8005d66:	fa03 f000 	lsl.w	r0, r3, r0
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	4303      	orrs	r3, r0
 8005d6e:	9304      	str	r3, [sp, #16]
 8005d70:	3701      	adds	r7, #1
 8005d72:	7839      	ldrb	r1, [r7, #0]
 8005d74:	4825      	ldr	r0, [pc, #148]	; (8005e0c <_svfiprintf_r+0x1dc>)
 8005d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d7a:	2206      	movs	r2, #6
 8005d7c:	1c7e      	adds	r6, r7, #1
 8005d7e:	f7fa fa2f 	bl	80001e0 <memchr>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d035      	beq.n	8005df2 <_svfiprintf_r+0x1c2>
 8005d86:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <_svfiprintf_r+0x1e0>)
 8005d88:	b9fb      	cbnz	r3, 8005dca <_svfiprintf_r+0x19a>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3307      	adds	r3, #7
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	3308      	adds	r3, #8
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d98:	444b      	add	r3, r9
 8005d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9c:	e76c      	b.n	8005c78 <_svfiprintf_r+0x48>
 8005d9e:	fb00 3202 	mla	r2, r0, r2, r3
 8005da2:	2101      	movs	r1, #1
 8005da4:	e7a3      	b.n	8005cee <_svfiprintf_r+0xbe>
 8005da6:	2300      	movs	r3, #0
 8005da8:	9305      	str	r3, [sp, #20]
 8005daa:	4618      	mov	r0, r3
 8005dac:	240a      	movs	r4, #10
 8005dae:	460f      	mov	r7, r1
 8005db0:	3101      	adds	r1, #1
 8005db2:	783a      	ldrb	r2, [r7, #0]
 8005db4:	3a30      	subs	r2, #48	; 0x30
 8005db6:	2a09      	cmp	r2, #9
 8005db8:	d903      	bls.n	8005dc2 <_svfiprintf_r+0x192>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ca      	beq.n	8005d54 <_svfiprintf_r+0x124>
 8005dbe:	9005      	str	r0, [sp, #20]
 8005dc0:	e7c8      	b.n	8005d54 <_svfiprintf_r+0x124>
 8005dc2:	fb04 2000 	mla	r0, r4, r0, r2
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e7f1      	b.n	8005dae <_svfiprintf_r+0x17e>
 8005dca:	ab03      	add	r3, sp, #12
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	462a      	mov	r2, r5
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <_svfiprintf_r+0x1e4>)
 8005dd2:	a904      	add	r1, sp, #16
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	f3af 8000 	nop.w
 8005dda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005dde:	4681      	mov	r9, r0
 8005de0:	d1d9      	bne.n	8005d96 <_svfiprintf_r+0x166>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	065b      	lsls	r3, r3, #25
 8005de6:	f53f af38 	bmi.w	8005c5a <_svfiprintf_r+0x2a>
 8005dea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dec:	b01d      	add	sp, #116	; 0x74
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	ab03      	add	r3, sp, #12
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	462a      	mov	r2, r5
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <_svfiprintf_r+0x1e4>)
 8005dfa:	a904      	add	r1, sp, #16
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	f000 f9c1 	bl	8006184 <_printf_i>
 8005e02:	e7ea      	b.n	8005dda <_svfiprintf_r+0x1aa>
 8005e04:	080069fc 	.word	0x080069fc
 8005e08:	08006a02 	.word	0x08006a02
 8005e0c:	08006a06 	.word	0x08006a06
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005b79 	.word	0x08005b79

08005e18 <__sfputc_r>:
 8005e18:	6893      	ldr	r3, [r2, #8]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	b410      	push	{r4}
 8005e20:	6093      	str	r3, [r2, #8]
 8005e22:	da09      	bge.n	8005e38 <__sfputc_r+0x20>
 8005e24:	6994      	ldr	r4, [r2, #24]
 8005e26:	42a3      	cmp	r3, r4
 8005e28:	db02      	blt.n	8005e30 <__sfputc_r+0x18>
 8005e2a:	b2cb      	uxtb	r3, r1
 8005e2c:	2b0a      	cmp	r3, #10
 8005e2e:	d103      	bne.n	8005e38 <__sfputc_r+0x20>
 8005e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e34:	f7ff bb54 	b.w	80054e0 <__swbuf_r>
 8005e38:	6813      	ldr	r3, [r2, #0]
 8005e3a:	1c58      	adds	r0, r3, #1
 8005e3c:	6010      	str	r0, [r2, #0]
 8005e3e:	7019      	strb	r1, [r3, #0]
 8005e40:	b2c8      	uxtb	r0, r1
 8005e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <__sfputs_r>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	460f      	mov	r7, r1
 8005e4e:	4614      	mov	r4, r2
 8005e50:	18d5      	adds	r5, r2, r3
 8005e52:	42ac      	cmp	r4, r5
 8005e54:	d101      	bne.n	8005e5a <__sfputs_r+0x12>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e007      	b.n	8005e6a <__sfputs_r+0x22>
 8005e5a:	463a      	mov	r2, r7
 8005e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e60:	4630      	mov	r0, r6
 8005e62:	f7ff ffd9 	bl	8005e18 <__sfputc_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d1f3      	bne.n	8005e52 <__sfputs_r+0xa>
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e6c <_vfiprintf_r>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	b09d      	sub	sp, #116	; 0x74
 8005e72:	460c      	mov	r4, r1
 8005e74:	4617      	mov	r7, r2
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	4606      	mov	r6, r0
 8005e7a:	b118      	cbz	r0, 8005e84 <_vfiprintf_r+0x18>
 8005e7c:	6983      	ldr	r3, [r0, #24]
 8005e7e:	b90b      	cbnz	r3, 8005e84 <_vfiprintf_r+0x18>
 8005e80:	f7ff fce0 	bl	8005844 <__sinit>
 8005e84:	4b7c      	ldr	r3, [pc, #496]	; (8006078 <_vfiprintf_r+0x20c>)
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d157      	bne.n	8005f3a <_vfiprintf_r+0xce>
 8005e8a:	6874      	ldr	r4, [r6, #4]
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	0718      	lsls	r0, r3, #28
 8005e90:	d55d      	bpl.n	8005f4e <_vfiprintf_r+0xe2>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05a      	beq.n	8005f4e <_vfiprintf_r+0xe2>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea2:	2330      	movs	r3, #48	; 0x30
 8005ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ea8:	f04f 0b01 	mov.w	fp, #1
 8005eac:	46b8      	mov	r8, r7
 8005eae:	4645      	mov	r5, r8
 8005eb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d155      	bne.n	8005f64 <_vfiprintf_r+0xf8>
 8005eb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ebc:	d00b      	beq.n	8005ed6 <_vfiprintf_r+0x6a>
 8005ebe:	4653      	mov	r3, sl
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff ffbf 	bl	8005e48 <__sfputs_r>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f000 80c4 	beq.w	8006058 <_vfiprintf_r+0x1ec>
 8005ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed2:	4453      	add	r3, sl
 8005ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed6:	f898 3000 	ldrb.w	r3, [r8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80bc 	beq.w	8006058 <_vfiprintf_r+0x1ec>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	9307      	str	r3, [sp, #28]
 8005eea:	9205      	str	r2, [sp, #20]
 8005eec:	9306      	str	r3, [sp, #24]
 8005eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ef4:	2205      	movs	r2, #5
 8005ef6:	7829      	ldrb	r1, [r5, #0]
 8005ef8:	4860      	ldr	r0, [pc, #384]	; (800607c <_vfiprintf_r+0x210>)
 8005efa:	f7fa f971 	bl	80001e0 <memchr>
 8005efe:	f105 0801 	add.w	r8, r5, #1
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d131      	bne.n	8005f6c <_vfiprintf_r+0x100>
 8005f08:	06d9      	lsls	r1, r3, #27
 8005f0a:	bf44      	itt	mi
 8005f0c:	2220      	movmi	r2, #32
 8005f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f12:	071a      	lsls	r2, r3, #28
 8005f14:	bf44      	itt	mi
 8005f16:	222b      	movmi	r2, #43	; 0x2b
 8005f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f1c:	782a      	ldrb	r2, [r5, #0]
 8005f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8005f20:	d02c      	beq.n	8005f7c <_vfiprintf_r+0x110>
 8005f22:	9a07      	ldr	r2, [sp, #28]
 8005f24:	2100      	movs	r1, #0
 8005f26:	200a      	movs	r0, #10
 8005f28:	46a8      	mov	r8, r5
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	f898 3000 	ldrb.w	r3, [r8]
 8005f30:	3b30      	subs	r3, #48	; 0x30
 8005f32:	2b09      	cmp	r3, #9
 8005f34:	d96d      	bls.n	8006012 <_vfiprintf_r+0x1a6>
 8005f36:	b371      	cbz	r1, 8005f96 <_vfiprintf_r+0x12a>
 8005f38:	e026      	b.n	8005f88 <_vfiprintf_r+0x11c>
 8005f3a:	4b51      	ldr	r3, [pc, #324]	; (8006080 <_vfiprintf_r+0x214>)
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	d101      	bne.n	8005f44 <_vfiprintf_r+0xd8>
 8005f40:	68b4      	ldr	r4, [r6, #8]
 8005f42:	e7a3      	b.n	8005e8c <_vfiprintf_r+0x20>
 8005f44:	4b4f      	ldr	r3, [pc, #316]	; (8006084 <_vfiprintf_r+0x218>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	bf08      	it	eq
 8005f4a:	68f4      	ldreq	r4, [r6, #12]
 8005f4c:	e79e      	b.n	8005e8c <_vfiprintf_r+0x20>
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fb17 	bl	8005584 <__swsetup_r>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d09e      	beq.n	8005e98 <_vfiprintf_r+0x2c>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	b01d      	add	sp, #116	; 0x74
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	2b25      	cmp	r3, #37	; 0x25
 8005f66:	d0a7      	beq.n	8005eb8 <_vfiprintf_r+0x4c>
 8005f68:	46a8      	mov	r8, r5
 8005f6a:	e7a0      	b.n	8005eae <_vfiprintf_r+0x42>
 8005f6c:	4a43      	ldr	r2, [pc, #268]	; (800607c <_vfiprintf_r+0x210>)
 8005f6e:	1a80      	subs	r0, r0, r2
 8005f70:	fa0b f000 	lsl.w	r0, fp, r0
 8005f74:	4318      	orrs	r0, r3
 8005f76:	9004      	str	r0, [sp, #16]
 8005f78:	4645      	mov	r5, r8
 8005f7a:	e7bb      	b.n	8005ef4 <_vfiprintf_r+0x88>
 8005f7c:	9a03      	ldr	r2, [sp, #12]
 8005f7e:	1d11      	adds	r1, r2, #4
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	9103      	str	r1, [sp, #12]
 8005f84:	2a00      	cmp	r2, #0
 8005f86:	db01      	blt.n	8005f8c <_vfiprintf_r+0x120>
 8005f88:	9207      	str	r2, [sp, #28]
 8005f8a:	e004      	b.n	8005f96 <_vfiprintf_r+0x12a>
 8005f8c:	4252      	negs	r2, r2
 8005f8e:	f043 0302 	orr.w	r3, r3, #2
 8005f92:	9207      	str	r2, [sp, #28]
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	f898 3000 	ldrb.w	r3, [r8]
 8005f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9c:	d110      	bne.n	8005fc0 <_vfiprintf_r+0x154>
 8005f9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa4:	f108 0101 	add.w	r1, r8, #1
 8005fa8:	d137      	bne.n	800601a <_vfiprintf_r+0x1ae>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fba:	f108 0802 	add.w	r8, r8, #2
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	4d31      	ldr	r5, [pc, #196]	; (8006088 <_vfiprintf_r+0x21c>)
 8005fc2:	f898 1000 	ldrb.w	r1, [r8]
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f7fa f909 	bl	80001e0 <memchr>
 8005fce:	b140      	cbz	r0, 8005fe2 <_vfiprintf_r+0x176>
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	1b40      	subs	r0, r0, r5
 8005fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	4303      	orrs	r3, r0
 8005fdc:	9304      	str	r3, [sp, #16]
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	f898 1000 	ldrb.w	r1, [r8]
 8005fe6:	4829      	ldr	r0, [pc, #164]	; (800608c <_vfiprintf_r+0x220>)
 8005fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fec:	2206      	movs	r2, #6
 8005fee:	f108 0701 	add.w	r7, r8, #1
 8005ff2:	f7fa f8f5 	bl	80001e0 <memchr>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d034      	beq.n	8006064 <_vfiprintf_r+0x1f8>
 8005ffa:	4b25      	ldr	r3, [pc, #148]	; (8006090 <_vfiprintf_r+0x224>)
 8005ffc:	bb03      	cbnz	r3, 8006040 <_vfiprintf_r+0x1d4>
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	3307      	adds	r3, #7
 8006002:	f023 0307 	bic.w	r3, r3, #7
 8006006:	3308      	adds	r3, #8
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600c:	444b      	add	r3, r9
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	e74c      	b.n	8005eac <_vfiprintf_r+0x40>
 8006012:	fb00 3202 	mla	r2, r0, r2, r3
 8006016:	2101      	movs	r1, #1
 8006018:	e786      	b.n	8005f28 <_vfiprintf_r+0xbc>
 800601a:	2300      	movs	r3, #0
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	4618      	mov	r0, r3
 8006020:	250a      	movs	r5, #10
 8006022:	4688      	mov	r8, r1
 8006024:	3101      	adds	r1, #1
 8006026:	f898 2000 	ldrb.w	r2, [r8]
 800602a:	3a30      	subs	r2, #48	; 0x30
 800602c:	2a09      	cmp	r2, #9
 800602e:	d903      	bls.n	8006038 <_vfiprintf_r+0x1cc>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0c5      	beq.n	8005fc0 <_vfiprintf_r+0x154>
 8006034:	9005      	str	r0, [sp, #20]
 8006036:	e7c3      	b.n	8005fc0 <_vfiprintf_r+0x154>
 8006038:	fb05 2000 	mla	r0, r5, r0, r2
 800603c:	2301      	movs	r3, #1
 800603e:	e7f0      	b.n	8006022 <_vfiprintf_r+0x1b6>
 8006040:	ab03      	add	r3, sp, #12
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4622      	mov	r2, r4
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <_vfiprintf_r+0x228>)
 8006048:	a904      	add	r1, sp, #16
 800604a:	4630      	mov	r0, r6
 800604c:	f3af 8000 	nop.w
 8006050:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006054:	4681      	mov	r9, r0
 8006056:	d1d8      	bne.n	800600a <_vfiprintf_r+0x19e>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	065b      	lsls	r3, r3, #25
 800605c:	f53f af7d 	bmi.w	8005f5a <_vfiprintf_r+0xee>
 8006060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006062:	e77c      	b.n	8005f5e <_vfiprintf_r+0xf2>
 8006064:	ab03      	add	r3, sp, #12
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4622      	mov	r2, r4
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <_vfiprintf_r+0x228>)
 800606c:	a904      	add	r1, sp, #16
 800606e:	4630      	mov	r0, r6
 8006070:	f000 f888 	bl	8006184 <_printf_i>
 8006074:	e7ec      	b.n	8006050 <_vfiprintf_r+0x1e4>
 8006076:	bf00      	nop
 8006078:	080069bc 	.word	0x080069bc
 800607c:	080069fc 	.word	0x080069fc
 8006080:	080069dc 	.word	0x080069dc
 8006084:	0800699c 	.word	0x0800699c
 8006088:	08006a02 	.word	0x08006a02
 800608c:	08006a06 	.word	0x08006a06
 8006090:	00000000 	.word	0x00000000
 8006094:	08005e49 	.word	0x08005e49

08006098 <_printf_common>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	4691      	mov	r9, r2
 800609e:	461f      	mov	r7, r3
 80060a0:	688a      	ldr	r2, [r1, #8]
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bfb8      	it	lt
 80060ac:	4613      	movlt	r3, r2
 80060ae:	f8c9 3000 	str.w	r3, [r9]
 80060b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b6:	4606      	mov	r6, r0
 80060b8:	460c      	mov	r4, r1
 80060ba:	b112      	cbz	r2, 80060c2 <_printf_common+0x2a>
 80060bc:	3301      	adds	r3, #1
 80060be:	f8c9 3000 	str.w	r3, [r9]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	0699      	lsls	r1, r3, #26
 80060c6:	bf42      	ittt	mi
 80060c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060cc:	3302      	addmi	r3, #2
 80060ce:	f8c9 3000 	strmi.w	r3, [r9]
 80060d2:	6825      	ldr	r5, [r4, #0]
 80060d4:	f015 0506 	ands.w	r5, r5, #6
 80060d8:	d107      	bne.n	80060ea <_printf_common+0x52>
 80060da:	f104 0a19 	add.w	sl, r4, #25
 80060de:	68e3      	ldr	r3, [r4, #12]
 80060e0:	f8d9 2000 	ldr.w	r2, [r9]
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	429d      	cmp	r5, r3
 80060e8:	db29      	blt.n	800613e <_printf_common+0xa6>
 80060ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	3300      	adds	r3, #0
 80060f2:	bf18      	it	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	0692      	lsls	r2, r2, #26
 80060f8:	d42e      	bmi.n	8006158 <_printf_common+0xc0>
 80060fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060fe:	4639      	mov	r1, r7
 8006100:	4630      	mov	r0, r6
 8006102:	47c0      	blx	r8
 8006104:	3001      	adds	r0, #1
 8006106:	d021      	beq.n	800614c <_printf_common+0xb4>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	68e5      	ldr	r5, [r4, #12]
 800610c:	f8d9 2000 	ldr.w	r2, [r9]
 8006110:	f003 0306 	and.w	r3, r3, #6
 8006114:	2b04      	cmp	r3, #4
 8006116:	bf08      	it	eq
 8006118:	1aad      	subeq	r5, r5, r2
 800611a:	68a3      	ldr	r3, [r4, #8]
 800611c:	6922      	ldr	r2, [r4, #16]
 800611e:	bf0c      	ite	eq
 8006120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006124:	2500      	movne	r5, #0
 8006126:	4293      	cmp	r3, r2
 8006128:	bfc4      	itt	gt
 800612a:	1a9b      	subgt	r3, r3, r2
 800612c:	18ed      	addgt	r5, r5, r3
 800612e:	f04f 0900 	mov.w	r9, #0
 8006132:	341a      	adds	r4, #26
 8006134:	454d      	cmp	r5, r9
 8006136:	d11b      	bne.n	8006170 <_printf_common+0xd8>
 8006138:	2000      	movs	r0, #0
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4639      	mov	r1, r7
 8006144:	4630      	mov	r0, r6
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xbc>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c2      	b.n	80060de <_printf_common+0x46>
 8006158:	18e1      	adds	r1, r4, r3
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	2030      	movs	r0, #48	; 0x30
 800615e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006162:	4422      	add	r2, r4
 8006164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800616c:	3302      	adds	r3, #2
 800616e:	e7c4      	b.n	80060fa <_printf_common+0x62>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4639      	mov	r1, r7
 8006176:	4630      	mov	r0, r6
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xb4>
 800617e:	f109 0901 	add.w	r9, r9, #1
 8006182:	e7d7      	b.n	8006134 <_printf_common+0x9c>

08006184 <_printf_i>:
 8006184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006188:	4617      	mov	r7, r2
 800618a:	7e0a      	ldrb	r2, [r1, #24]
 800618c:	b085      	sub	sp, #20
 800618e:	2a6e      	cmp	r2, #110	; 0x6e
 8006190:	4698      	mov	r8, r3
 8006192:	4606      	mov	r6, r0
 8006194:	460c      	mov	r4, r1
 8006196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006198:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800619c:	f000 80bc 	beq.w	8006318 <_printf_i+0x194>
 80061a0:	d81a      	bhi.n	80061d8 <_printf_i+0x54>
 80061a2:	2a63      	cmp	r2, #99	; 0x63
 80061a4:	d02e      	beq.n	8006204 <_printf_i+0x80>
 80061a6:	d80a      	bhi.n	80061be <_printf_i+0x3a>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	f000 80c8 	beq.w	800633e <_printf_i+0x1ba>
 80061ae:	2a58      	cmp	r2, #88	; 0x58
 80061b0:	f000 808a 	beq.w	80062c8 <_printf_i+0x144>
 80061b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80061bc:	e02a      	b.n	8006214 <_printf_i+0x90>
 80061be:	2a64      	cmp	r2, #100	; 0x64
 80061c0:	d001      	beq.n	80061c6 <_printf_i+0x42>
 80061c2:	2a69      	cmp	r2, #105	; 0x69
 80061c4:	d1f6      	bne.n	80061b4 <_printf_i+0x30>
 80061c6:	6821      	ldr	r1, [r4, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80061ce:	d023      	beq.n	8006218 <_printf_i+0x94>
 80061d0:	1d11      	adds	r1, r2, #4
 80061d2:	6019      	str	r1, [r3, #0]
 80061d4:	6813      	ldr	r3, [r2, #0]
 80061d6:	e027      	b.n	8006228 <_printf_i+0xa4>
 80061d8:	2a73      	cmp	r2, #115	; 0x73
 80061da:	f000 80b4 	beq.w	8006346 <_printf_i+0x1c2>
 80061de:	d808      	bhi.n	80061f2 <_printf_i+0x6e>
 80061e0:	2a6f      	cmp	r2, #111	; 0x6f
 80061e2:	d02a      	beq.n	800623a <_printf_i+0xb6>
 80061e4:	2a70      	cmp	r2, #112	; 0x70
 80061e6:	d1e5      	bne.n	80061b4 <_printf_i+0x30>
 80061e8:	680a      	ldr	r2, [r1, #0]
 80061ea:	f042 0220 	orr.w	r2, r2, #32
 80061ee:	600a      	str	r2, [r1, #0]
 80061f0:	e003      	b.n	80061fa <_printf_i+0x76>
 80061f2:	2a75      	cmp	r2, #117	; 0x75
 80061f4:	d021      	beq.n	800623a <_printf_i+0xb6>
 80061f6:	2a78      	cmp	r2, #120	; 0x78
 80061f8:	d1dc      	bne.n	80061b4 <_printf_i+0x30>
 80061fa:	2278      	movs	r2, #120	; 0x78
 80061fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006200:	496e      	ldr	r1, [pc, #440]	; (80063bc <_printf_i+0x238>)
 8006202:	e064      	b.n	80062ce <_printf_i+0x14a>
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800620a:	1d11      	adds	r1, r2, #4
 800620c:	6019      	str	r1, [r3, #0]
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e0a3      	b.n	8006360 <_printf_i+0x1dc>
 8006218:	f011 0f40 	tst.w	r1, #64	; 0x40
 800621c:	f102 0104 	add.w	r1, r2, #4
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	d0d7      	beq.n	80061d4 <_printf_i+0x50>
 8006224:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xb0>
 800622c:	222d      	movs	r2, #45	; 0x2d
 800622e:	425b      	negs	r3, r3
 8006230:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006234:	4962      	ldr	r1, [pc, #392]	; (80063c0 <_printf_i+0x23c>)
 8006236:	220a      	movs	r2, #10
 8006238:	e017      	b.n	800626a <_printf_i+0xe6>
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006242:	d003      	beq.n	800624c <_printf_i+0xc8>
 8006244:	1d08      	adds	r0, r1, #4
 8006246:	6018      	str	r0, [r3, #0]
 8006248:	680b      	ldr	r3, [r1, #0]
 800624a:	e006      	b.n	800625a <_printf_i+0xd6>
 800624c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006250:	f101 0004 	add.w	r0, r1, #4
 8006254:	6018      	str	r0, [r3, #0]
 8006256:	d0f7      	beq.n	8006248 <_printf_i+0xc4>
 8006258:	880b      	ldrh	r3, [r1, #0]
 800625a:	4959      	ldr	r1, [pc, #356]	; (80063c0 <_printf_i+0x23c>)
 800625c:	2a6f      	cmp	r2, #111	; 0x6f
 800625e:	bf14      	ite	ne
 8006260:	220a      	movne	r2, #10
 8006262:	2208      	moveq	r2, #8
 8006264:	2000      	movs	r0, #0
 8006266:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800626a:	6865      	ldr	r5, [r4, #4]
 800626c:	60a5      	str	r5, [r4, #8]
 800626e:	2d00      	cmp	r5, #0
 8006270:	f2c0 809c 	blt.w	80063ac <_printf_i+0x228>
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	f020 0004 	bic.w	r0, r0, #4
 800627a:	6020      	str	r0, [r4, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d13f      	bne.n	8006300 <_printf_i+0x17c>
 8006280:	2d00      	cmp	r5, #0
 8006282:	f040 8095 	bne.w	80063b0 <_printf_i+0x22c>
 8006286:	4675      	mov	r5, lr
 8006288:	2a08      	cmp	r2, #8
 800628a:	d10b      	bne.n	80062a4 <_printf_i+0x120>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	07da      	lsls	r2, r3, #31
 8006290:	d508      	bpl.n	80062a4 <_printf_i+0x120>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	6862      	ldr	r2, [r4, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	bfde      	ittt	le
 800629a:	2330      	movle	r3, #48	; 0x30
 800629c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a4:	ebae 0305 	sub.w	r3, lr, r5
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	f8cd 8000 	str.w	r8, [sp]
 80062ae:	463b      	mov	r3, r7
 80062b0:	aa03      	add	r2, sp, #12
 80062b2:	4621      	mov	r1, r4
 80062b4:	4630      	mov	r0, r6
 80062b6:	f7ff feef 	bl	8006098 <_printf_common>
 80062ba:	3001      	adds	r0, #1
 80062bc:	d155      	bne.n	800636a <_printf_i+0x1e6>
 80062be:	f04f 30ff 	mov.w	r0, #4294967295
 80062c2:	b005      	add	sp, #20
 80062c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80062cc:	493c      	ldr	r1, [pc, #240]	; (80063c0 <_printf_i+0x23c>)
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062d6:	f100 0504 	add.w	r5, r0, #4
 80062da:	601d      	str	r5, [r3, #0]
 80062dc:	d001      	beq.n	80062e2 <_printf_i+0x15e>
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	e002      	b.n	80062e8 <_printf_i+0x164>
 80062e2:	0655      	lsls	r5, r2, #25
 80062e4:	d5fb      	bpl.n	80062de <_printf_i+0x15a>
 80062e6:	8803      	ldrh	r3, [r0, #0]
 80062e8:	07d0      	lsls	r0, r2, #31
 80062ea:	bf44      	itt	mi
 80062ec:	f042 0220 	orrmi.w	r2, r2, #32
 80062f0:	6022      	strmi	r2, [r4, #0]
 80062f2:	b91b      	cbnz	r3, 80062fc <_printf_i+0x178>
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	f022 0220 	bic.w	r2, r2, #32
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	2210      	movs	r2, #16
 80062fe:	e7b1      	b.n	8006264 <_printf_i+0xe0>
 8006300:	4675      	mov	r5, lr
 8006302:	fbb3 f0f2 	udiv	r0, r3, r2
 8006306:	fb02 3310 	mls	r3, r2, r0, r3
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006310:	4603      	mov	r3, r0
 8006312:	2800      	cmp	r0, #0
 8006314:	d1f5      	bne.n	8006302 <_printf_i+0x17e>
 8006316:	e7b7      	b.n	8006288 <_printf_i+0x104>
 8006318:	6808      	ldr	r0, [r1, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	6949      	ldr	r1, [r1, #20]
 800631e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006322:	d004      	beq.n	800632e <_printf_i+0x1aa>
 8006324:	1d10      	adds	r0, r2, #4
 8006326:	6018      	str	r0, [r3, #0]
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	6019      	str	r1, [r3, #0]
 800632c:	e007      	b.n	800633e <_printf_i+0x1ba>
 800632e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006332:	f102 0004 	add.w	r0, r2, #4
 8006336:	6018      	str	r0, [r3, #0]
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	d0f6      	beq.n	800632a <_printf_i+0x1a6>
 800633c:	8019      	strh	r1, [r3, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	4675      	mov	r5, lr
 8006344:	e7b1      	b.n	80062aa <_printf_i+0x126>
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	1d11      	adds	r1, r2, #4
 800634a:	6019      	str	r1, [r3, #0]
 800634c:	6815      	ldr	r5, [r2, #0]
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	4628      	mov	r0, r5
 8006354:	f7f9 ff44 	bl	80001e0 <memchr>
 8006358:	b108      	cbz	r0, 800635e <_printf_i+0x1da>
 800635a:	1b40      	subs	r0, r0, r5
 800635c:	6060      	str	r0, [r4, #4]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	2300      	movs	r3, #0
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	e79f      	b.n	80062aa <_printf_i+0x126>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	462a      	mov	r2, r5
 800636e:	4639      	mov	r1, r7
 8006370:	4630      	mov	r0, r6
 8006372:	47c0      	blx	r8
 8006374:	3001      	adds	r0, #1
 8006376:	d0a2      	beq.n	80062be <_printf_i+0x13a>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d507      	bpl.n	800638e <_printf_i+0x20a>
 800637e:	2500      	movs	r5, #0
 8006380:	f104 0919 	add.w	r9, r4, #25
 8006384:	68e3      	ldr	r3, [r4, #12]
 8006386:	9a03      	ldr	r2, [sp, #12]
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	429d      	cmp	r5, r3
 800638c:	db05      	blt.n	800639a <_printf_i+0x216>
 800638e:	68e0      	ldr	r0, [r4, #12]
 8006390:	9b03      	ldr	r3, [sp, #12]
 8006392:	4298      	cmp	r0, r3
 8006394:	bfb8      	it	lt
 8006396:	4618      	movlt	r0, r3
 8006398:	e793      	b.n	80062c2 <_printf_i+0x13e>
 800639a:	2301      	movs	r3, #1
 800639c:	464a      	mov	r2, r9
 800639e:	4639      	mov	r1, r7
 80063a0:	4630      	mov	r0, r6
 80063a2:	47c0      	blx	r8
 80063a4:	3001      	adds	r0, #1
 80063a6:	d08a      	beq.n	80062be <_printf_i+0x13a>
 80063a8:	3501      	adds	r5, #1
 80063aa:	e7eb      	b.n	8006384 <_printf_i+0x200>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1a7      	bne.n	8006300 <_printf_i+0x17c>
 80063b0:	780b      	ldrb	r3, [r1, #0]
 80063b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ba:	e765      	b.n	8006288 <_printf_i+0x104>
 80063bc:	08006a1e 	.word	0x08006a1e
 80063c0:	08006a0d 	.word	0x08006a0d

080063c4 <_sbrk_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4c06      	ldr	r4, [pc, #24]	; (80063e0 <_sbrk_r+0x1c>)
 80063c8:	2300      	movs	r3, #0
 80063ca:	4605      	mov	r5, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	f7fe feae 	bl	8005130 <_sbrk>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_sbrk_r+0x1a>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	b103      	cbz	r3, 80063de <_sbrk_r+0x1a>
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20002478 	.word	0x20002478

080063e4 <__sread>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ec:	f000 f8d6 	bl	800659c <_read_r>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	bfab      	itete	ge
 80063f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063f6:	89a3      	ldrhlt	r3, [r4, #12]
 80063f8:	181b      	addge	r3, r3, r0
 80063fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063fe:	bfac      	ite	ge
 8006400:	6563      	strge	r3, [r4, #84]	; 0x54
 8006402:	81a3      	strhlt	r3, [r4, #12]
 8006404:	bd10      	pop	{r4, pc}

08006406 <__swrite>:
 8006406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640a:	461f      	mov	r7, r3
 800640c:	898b      	ldrh	r3, [r1, #12]
 800640e:	05db      	lsls	r3, r3, #23
 8006410:	4605      	mov	r5, r0
 8006412:	460c      	mov	r4, r1
 8006414:	4616      	mov	r6, r2
 8006416:	d505      	bpl.n	8006424 <__swrite+0x1e>
 8006418:	2302      	movs	r3, #2
 800641a:	2200      	movs	r2, #0
 800641c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006420:	f000 f868 	bl	80064f4 <_lseek_r>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800642a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642e:	81a3      	strh	r3, [r4, #12]
 8006430:	4632      	mov	r2, r6
 8006432:	463b      	mov	r3, r7
 8006434:	4628      	mov	r0, r5
 8006436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800643a:	f000 b817 	b.w	800646c <_write_r>

0800643e <__sseek>:
 800643e:	b510      	push	{r4, lr}
 8006440:	460c      	mov	r4, r1
 8006442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006446:	f000 f855 	bl	80064f4 <_lseek_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	bf15      	itete	ne
 8006450:	6560      	strne	r0, [r4, #84]	; 0x54
 8006452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800645a:	81a3      	strheq	r3, [r4, #12]
 800645c:	bf18      	it	ne
 800645e:	81a3      	strhne	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__sclose>:
 8006462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006466:	f000 b813 	b.w	8006490 <_close_r>
	...

0800646c <_write_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4c07      	ldr	r4, [pc, #28]	; (800648c <_write_r+0x20>)
 8006470:	4605      	mov	r5, r0
 8006472:	4608      	mov	r0, r1
 8006474:	4611      	mov	r1, r2
 8006476:	2200      	movs	r2, #0
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f7fd fcf6 	bl	8003e6c <_write>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_write_r+0x1e>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	b103      	cbz	r3, 800648a <_write_r+0x1e>
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20002478 	.word	0x20002478

08006490 <_close_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4c06      	ldr	r4, [pc, #24]	; (80064ac <_close_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4605      	mov	r5, r0
 8006498:	4608      	mov	r0, r1
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	f7fe fe62 	bl	8005164 <_close>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_close_r+0x1a>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_close_r+0x1a>
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20002478 	.word	0x20002478

080064b0 <_fstat_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4c07      	ldr	r4, [pc, #28]	; (80064d0 <_fstat_r+0x20>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4605      	mov	r5, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	f7fe fe54 	bl	800516a <_fstat>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <_fstat_r+0x1c>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	b103      	cbz	r3, 80064cc <_fstat_r+0x1c>
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	20002478 	.word	0x20002478

080064d4 <_isatty_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4c06      	ldr	r4, [pc, #24]	; (80064f0 <_isatty_r+0x1c>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4605      	mov	r5, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	6023      	str	r3, [r4, #0]
 80064e0:	f7fe fe48 	bl	8005174 <_isatty>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_isatty_r+0x1a>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_isatty_r+0x1a>
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20002478 	.word	0x20002478

080064f4 <_lseek_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4c07      	ldr	r4, [pc, #28]	; (8006514 <_lseek_r+0x20>)
 80064f8:	4605      	mov	r5, r0
 80064fa:	4608      	mov	r0, r1
 80064fc:	4611      	mov	r1, r2
 80064fe:	2200      	movs	r2, #0
 8006500:	6022      	str	r2, [r4, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	f7fe fe38 	bl	8005178 <_lseek>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_lseek_r+0x1e>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	b103      	cbz	r3, 8006512 <_lseek_r+0x1e>
 8006510:	602b      	str	r3, [r5, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20002478 	.word	0x20002478

08006518 <memmove>:
 8006518:	4288      	cmp	r0, r1
 800651a:	b510      	push	{r4, lr}
 800651c:	eb01 0302 	add.w	r3, r1, r2
 8006520:	d803      	bhi.n	800652a <memmove+0x12>
 8006522:	1e42      	subs	r2, r0, #1
 8006524:	4299      	cmp	r1, r3
 8006526:	d10c      	bne.n	8006542 <memmove+0x2a>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	4298      	cmp	r0, r3
 800652c:	d2f9      	bcs.n	8006522 <memmove+0xa>
 800652e:	1881      	adds	r1, r0, r2
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	42d3      	cmn	r3, r2
 8006534:	d100      	bne.n	8006538 <memmove+0x20>
 8006536:	bd10      	pop	{r4, pc}
 8006538:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800653c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006540:	e7f7      	b.n	8006532 <memmove+0x1a>
 8006542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006546:	f802 4f01 	strb.w	r4, [r2, #1]!
 800654a:	e7eb      	b.n	8006524 <memmove+0xc>

0800654c <__malloc_lock>:
 800654c:	4770      	bx	lr

0800654e <__malloc_unlock>:
 800654e:	4770      	bx	lr

08006550 <_realloc_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4607      	mov	r7, r0
 8006554:	4614      	mov	r4, r2
 8006556:	460e      	mov	r6, r1
 8006558:	b921      	cbnz	r1, 8006564 <_realloc_r+0x14>
 800655a:	4611      	mov	r1, r2
 800655c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006560:	f7ff baac 	b.w	8005abc <_malloc_r>
 8006564:	b922      	cbnz	r2, 8006570 <_realloc_r+0x20>
 8006566:	f7ff fa5b 	bl	8005a20 <_free_r>
 800656a:	4625      	mov	r5, r4
 800656c:	4628      	mov	r0, r5
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	f000 f826 	bl	80065c0 <_malloc_usable_size_r>
 8006574:	4284      	cmp	r4, r0
 8006576:	d90f      	bls.n	8006598 <_realloc_r+0x48>
 8006578:	4621      	mov	r1, r4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff fa9e 	bl	8005abc <_malloc_r>
 8006580:	4605      	mov	r5, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d0f2      	beq.n	800656c <_realloc_r+0x1c>
 8006586:	4631      	mov	r1, r6
 8006588:	4622      	mov	r2, r4
 800658a:	f7fe fef5 	bl	8005378 <memcpy>
 800658e:	4631      	mov	r1, r6
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff fa45 	bl	8005a20 <_free_r>
 8006596:	e7e9      	b.n	800656c <_realloc_r+0x1c>
 8006598:	4635      	mov	r5, r6
 800659a:	e7e7      	b.n	800656c <_realloc_r+0x1c>

0800659c <_read_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4c07      	ldr	r4, [pc, #28]	; (80065bc <_read_r+0x20>)
 80065a0:	4605      	mov	r5, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fe fdb2 	bl	8005114 <_read>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_read_r+0x1e>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_read_r+0x1e>
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20002478 	.word	0x20002478

080065c0 <_malloc_usable_size_r>:
 80065c0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80065c4:	2800      	cmp	r0, #0
 80065c6:	f1a0 0004 	sub.w	r0, r0, #4
 80065ca:	bfbc      	itt	lt
 80065cc:	580b      	ldrlt	r3, [r1, r0]
 80065ce:	18c0      	addlt	r0, r0, r3
 80065d0:	4770      	bx	lr
	...

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
