
Czysty Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  080098d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009c8  20000088  08009958  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a50  08009958  00020a50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020785  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000045b1  00000000  00000000  0004083d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001858  00000000  00000000  00044df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001638  00000000  00000000  00046648  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c014  00000000  00000000  00047c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007777  00000000  00000000  00053c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b40b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006528  00000000  00000000  0005b488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800985c 	.word	0x0800985c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800985c 	.word	0x0800985c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f938 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f008 fc05 	bl	8008d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_InitTick+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <HAL_InitTick+0x44>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	099b      	lsrs	r3, r3, #6
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f94c 	bl	80007ce <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e005      	b.n	800054e <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f000 f916 	bl	800077a <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000020 	.word	0x20000020
 800055c:	10624dd3 	.word	0x10624dd3

08000560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick++;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	4a03      	ldr	r2, [pc, #12]	; (8000578 <HAL_IncTick+0x18>)
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	200000bc 	.word	0x200000bc

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200000bc 	.word	0x200000bc

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff ffee 	bl	800057c <HAL_GetTick>
 80005a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ac:	d002      	beq.n	80005b4 <HAL_Delay+0x20>
  {
    wait++;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b4:	bf00      	nop
 80005b6:	f7ff ffe1 	bl	800057c <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d3f7      	bcc.n	80005b6 <HAL_Delay+0x22>
  {
  }
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <NVIC_EnableIRQ+0x30>)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	79fa      	ldrb	r2, [r7, #7]
 8000648:	f002 021f 	and.w	r2, r2, #31
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100

08000668 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da0b      	bge.n	8000694 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	490d      	ldr	r1, [pc, #52]	; (80006b4 <NVIC_SetPriority+0x4c>)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 030f 	and.w	r3, r3, #15
 8000684:	3b04      	subs	r3, #4
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000692:	e009      	b.n	80006a8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	4908      	ldr	r1, [pc, #32]	; (80006b8 <NVIC_SetPriority+0x50>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	2201      	movs	r2, #1
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	401a      	ands	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000702:	2101      	movs	r1, #1
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	1e59      	subs	r1, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff90 	bl	8000668 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff2f 	bl	80005d0 <NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff44 	bl	8000618 <NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff37 	bl	8000634 <NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffa2 	bl	8000720 <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e17f      	b.n	8000af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8171 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x38>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b12      	cmp	r3, #18
 800081e:	d123      	bne.n	8000868 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	08da      	lsrs	r2, r3, #3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3208      	adds	r2, #8
 8000828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	220f      	movs	r2, #15
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	691a      	ldr	r2, [r3, #16]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3208      	adds	r2, #8
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 0203 	and.w	r2, r3, #3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d00b      	beq.n	80008bc <HAL_GPIO_Init+0xd4>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d007      	beq.n	80008bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b0:	2b11      	cmp	r3, #17
 80008b2:	d003      	beq.n	80008bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b12      	cmp	r3, #18
 80008ba:	d130      	bne.n	800091e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	f003 0201 	and.w	r2, r3, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	2b03      	cmp	r3, #3
 8000928:	d118      	bne.n	800095c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80ac 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4a5e      	ldr	r2, [pc, #376]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 800099c:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <HAL_GPIO_Init+0x330>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x242>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x334>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x23e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4d      	ldr	r2, [pc, #308]	; (8000b20 <HAL_GPIO_Init+0x338>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x23a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4c      	ldr	r2, [pc, #304]	; (8000b24 <HAL_GPIO_Init+0x33c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x236>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4b      	ldr	r2, [pc, #300]	; (8000b28 <HAL_GPIO_Init+0x340>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x232>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4a      	ldr	r2, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x344>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x22e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <HAL_GPIO_Init+0x348>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x22a>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3c:	4936      	ldr	r1, [pc, #216]	; (8000b18 <HAL_GPIO_Init+0x330>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae78 	bne.w	80007f8 <HAL_GPIO_Init+0x10>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000c00 	.word	0x48000c00
 8000b28:	48001000 	.word	0x48001000
 8000b2c:	48001400 	.word	0x48001400
 8000b30:	48001800 	.word	0x48001800
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	405a      	eors	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	615a      	str	r2, [r3, #20]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f007 fda0 	bl	80086f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bbe:	b08d      	sub	sp, #52	; 0x34
 8000bc0:	af0a      	add	r7, sp, #40	; 0x28
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e048      	b.n	8000c60 <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d106      	bne.n	8000be8 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f008 fa0e 	bl	8009004 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 fe55 	bl	80058a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	687e      	ldr	r6, [r7, #4]
 8000c02:	466d      	mov	r5, sp
 8000c04:	f106 0410 	add.w	r4, r6, #16
 8000c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c14:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c18:	1d33      	adds	r3, r6, #4
 8000c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	f004 fdee 	bl	80057fe <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2101      	movs	r1, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fe4c 	bl	80058c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	687e      	ldr	r6, [r7, #4]
 8000c36:	466d      	mov	r5, sp
 8000c38:	f106 0410 	add.w	r4, r6, #16
 8000c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c4c:	1d33      	adds	r3, r6, #4
 8000c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	f004 ff5b 	bl	8005b0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c68 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4603      	mov	r3, r0
 8000c78:	70fb      	strb	r3, [r7, #3]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70bb      	strb	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_HCD_HC_Init+0x28>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e07f      	b.n	8000d90 <HAL_HCD_HC_Init+0x128>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	333d      	adds	r3, #61	; 0x3d
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cac:	78fa      	ldrb	r2, [r7, #3]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	3338      	adds	r3, #56	; 0x38
 8000cbc:	787a      	ldrb	r2, [r7, #1]
 8000cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3340      	adds	r3, #64	; 0x40
 8000cd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cd2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3339      	adds	r3, #57	; 0x39
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	333f      	adds	r3, #63	; 0x3f
 8000cf8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	78bb      	ldrb	r3, [r7, #2]
 8000d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d06:	b2d8      	uxtb	r0, r3
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	333a      	adds	r3, #58	; 0x3a
 8000d16:	4602      	mov	r2, r0
 8000d18:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	da0a      	bge.n	8000d38 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	333b      	adds	r3, #59	; 0x3b
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	e009      	b.n	8000d4c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	333b      	adds	r3, #59	; 0x3b
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	333c      	adds	r3, #60	; 0x3c
 8000d5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d60:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	787c      	ldrb	r4, [r7, #1]
 8000d68:	78ba      	ldrb	r2, [r7, #2]
 8000d6a:	78f9      	ldrb	r1, [r7, #3]
 8000d6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	f005 f837 	bl	8005df0 <USB_HC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d101      	bne.n	8000db6 <HAL_HCD_HC_Halt+0x1e>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e00f      	b.n	8000dd6 <HAL_HCD_HC_Halt+0x3e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	78fa      	ldrb	r2, [r7, #3]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 fa1d 	bl	8006206 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	70fb      	strb	r3, [r7, #3]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70bb      	strb	r3, [r7, #2]
 8000df6:	4613      	mov	r3, r2
 8000df8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000dfa:	78fa      	ldrb	r2, [r7, #3]
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	440b      	add	r3, r1
 8000e08:	333b      	adds	r3, #59	; 0x3b
 8000e0a:	78ba      	ldrb	r2, [r7, #2]
 8000e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	333f      	adds	r3, #63	; 0x3f
 8000e1e:	787a      	ldrb	r2, [r7, #1]
 8000e20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e22:	7c3b      	ldrb	r3, [r7, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10a      	bne.n	8000e3e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e28:	78fa      	ldrb	r2, [r7, #3]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	440b      	add	r3, r1
 8000e36:	3342      	adds	r3, #66	; 0x42
 8000e38:	2203      	movs	r2, #3
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e009      	b.n	8000e52 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3342      	adds	r3, #66	; 0x42
 8000e4e:	2202      	movs	r2, #2
 8000e50:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e52:	787b      	ldrb	r3, [r7, #1]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	f200 80d6 	bhi.w	8001006 <HAL_HCD_HC_SubmitRequest+0x226>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000ff1 	.word	0x08000ff1
 8000e68:	08000edd 	.word	0x08000edd
 8000e6c:	08000f67 	.word	0x08000f67
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e70:	7c3b      	ldrb	r3, [r7, #16]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	f040 80c9 	bne.w	800100a <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 80c5 	bne.w	800100a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e80:	8b3b      	ldrh	r3, [r7, #24]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d109      	bne.n	8000e9a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	440b      	add	r3, r1
 8000e94:	3351      	adds	r3, #81	; 0x51
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3351      	adds	r3, #81	; 0x51
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10a      	bne.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eb0:	78fa      	ldrb	r2, [r7, #3]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3342      	adds	r3, #66	; 0x42
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000ec4:	e0a1      	b.n	800100a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3342      	adds	r3, #66	; 0x42
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	701a      	strb	r2, [r3, #0]
      break;
 8000eda:	e096      	b.n	800100a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000edc:	78bb      	ldrb	r3, [r7, #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d120      	bne.n	8000f24 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3351      	adds	r3, #81	; 0x51
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10a      	bne.n	8000f0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3342      	adds	r3, #66	; 0x42
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f0c:	e07e      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3342      	adds	r3, #66	; 0x42
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
      break;
 8000f22:	e073      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3350      	adds	r3, #80	; 0x50
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	440b      	add	r3, r1
 8000f48:	3342      	adds	r3, #66	; 0x42
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
      break;
 8000f4e:	e05d      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3342      	adds	r3, #66	; 0x42
 8000f60:	2202      	movs	r2, #2
 8000f62:	701a      	strb	r2, [r3, #0]
      break;
 8000f64:	e052      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d120      	bne.n	8000fae <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f6c:	78fa      	ldrb	r2, [r7, #3]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	3351      	adds	r3, #81	; 0x51
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10a      	bne.n	8000f98 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f82:	78fa      	ldrb	r2, [r7, #3]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3342      	adds	r3, #66	; 0x42
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f96:	e039      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3342      	adds	r3, #66	; 0x42
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
      break;
 8000fac:	e02e      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3350      	adds	r3, #80	; 0x50
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10a      	bne.n	8000fda <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3342      	adds	r3, #66	; 0x42
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
      break;
 8000fd8:	e018      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fda:	78fa      	ldrb	r2, [r7, #3]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3342      	adds	r3, #66	; 0x42
 8000fea:	2202      	movs	r2, #2
 8000fec:	701a      	strb	r2, [r3, #0]
      break;
 8000fee:	e00d      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3342      	adds	r3, #66	; 0x42
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
      break;
 8001004:	e002      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800100a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	3344      	adds	r3, #68	; 0x44
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	8b39      	ldrh	r1, [r7, #24]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4403      	add	r3, r0
 8001030:	3348      	adds	r3, #72	; 0x48
 8001032:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	335c      	adds	r3, #92	; 0x5c
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	334c      	adds	r3, #76	; 0x4c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	3339      	adds	r3, #57	; 0x39
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	335d      	adds	r3, #93	; 0x5d
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	3338      	adds	r3, #56	; 0x38
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f004 ffa1 	bl	8005fe0 <USB_HC_StartXfer>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 fce1 	bl	8005a86 <USB_GetMode>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	f040 80f2 	bne.w	80012b0 <HAL_HCD_IRQHandler+0x208>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 fcc5 	bl	8005a60 <USB_ReadInterrupts>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80e8 	beq.w	80012ae <HAL_HCD_IRQHandler+0x206>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fcbc 	bl	8005a60 <USB_ReadInterrupts>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010f2:	d104      	bne.n	80010fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fcac 	bl	8005a60 <USB_ReadInterrupts>
 8001108:	4603      	mov	r3, r0
 800110a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001112:	d104      	bne.n	800111e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800111c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fc9c 	bl	8005a60 <USB_ReadInterrupts>
 8001128:	4603      	mov	r3, r0
 800112a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800112e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001132:	d104      	bne.n	800113e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800113c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fc8c 	bl	8005a60 <USB_ReadInterrupts>
 8001148:	4603      	mov	r3, r0
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d103      	bne.n	800115a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2202      	movs	r2, #2
 8001158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fc7e 	bl	8005a60 <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800116a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800116e:	d118      	bne.n	80011a2 <HAL_HCD_IRQHandler+0xfa>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001184:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f007 ffaa 	bl	80090e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f004 fd60 	bl	8005c58 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fc5a 	bl	8005a60 <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b6:	d102      	bne.n	80011be <HAL_HCD_IRQHandler+0x116>
    {
      HCD_Port_IRQHandler(hhcd);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f001 f8d1 	bl	8002360 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fc4c 	bl	8005a60 <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d106      	bne.n	80011e0 <HAL_HCD_IRQHandler+0x138>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f007 ff68 	bl	80090a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2208      	movs	r2, #8
 80011de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fc3b 	bl	8005a60 <USB_ReadInterrupts>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011f4:	d138      	bne.n	8001268 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f004 fff2 	bl	80061e4 <USB_HC_ReadInterrupt>
 8001200:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e025      	b.n	8001254 <HAL_HCD_IRQHandler+0x1ac>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d018      	beq.n	800124e <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	015a      	lsls	r2, r3, #5
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001232:	d106      	bne.n	8001242 <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f8cf 	bl	80013de <HCD_HC_IN_IRQHandler>
 8001240:	e005      	b.n	800124e <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fc69 	bl	8001b20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	429a      	cmp	r2, r3
 800125c:	d8d4      	bhi.n	8001208 <HAL_HCD_IRQHandler+0x160>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f004 fbf7 	bl	8005a60 <USB_ReadInterrupts>
 8001272:	4603      	mov	r3, r0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b10      	cmp	r3, #16
 800127a:	d101      	bne.n	8001280 <HAL_HCD_IRQHandler+0x1d8>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_HCD_IRQHandler+0x1da>
 8001280:	2300      	movs	r3, #0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d014      	beq.n	80012b0 <HAL_HCD_IRQHandler+0x208>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	6992      	ldr	r2, [r2, #24]
 8001290:	f022 0210 	bic.w	r2, r2, #16
 8001294:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 ffb6 	bl	8002208 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	6992      	ldr	r2, [r2, #24]
 80012a6:	f042 0210 	orr.w	r2, r2, #16
 80012aa:	619a      	str	r2, [r3, #24]
 80012ac:	e000      	b.n	80012b0 <HAL_HCD_IRQHandler+0x208>
      return;
 80012ae:	bf00      	nop
    }
  }
}
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_HCD_Start+0x16>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e013      	b.n	80012f4 <HAL_HCD_Start+0x3e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fad2 	bl	8005882 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fd1f 	bl	8005d28 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_HCD_Stop+0x16>
 800130e:	2302      	movs	r3, #2
 8001310:	e00d      	b.n	800132e <HAL_HCD_Stop+0x32>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f005 f87a 	bl	8006418 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f004 fcc4 	bl	8005cd0 <USB_ResetPort>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	335c      	adds	r3, #92	; 0x5c
 800136e:	781b      	ldrb	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001388:	78fa      	ldrb	r2, [r7, #3]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	334c      	adds	r3, #76	; 0x4c
 8001398:	681b      	ldr	r3, [r3, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fd0a 	bl	8005dcc <USB_GetCurrentFrame>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 fce5 	bl	8005d9e <USB_GetHostSpeed>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	015a      	lsls	r2, r3, #5
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b04      	cmp	r3, #4
 800140c:	d11a      	bne.n	8001444 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4413      	add	r3, r2
 8001416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141a:	461a      	mov	r2, r3
 800141c:	2304      	movs	r3, #4
 800141e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	015a      	lsls	r2, r3, #5
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4413      	add	r3, r2
 8001428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800142c:	4619      	mov	r1, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4413      	add	r3, r2
 8001436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	60cb      	str	r3, [r1, #12]
 8001442:	e097      	b.n	8001574 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4413      	add	r3, r2
 800144c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b20      	cmp	r3, #32
 8001458:	d109      	bne.n	800146e <HCD_HC_IN_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001466:	461a      	mov	r2, r3
 8001468:	2320      	movs	r3, #32
 800146a:	6093      	str	r3, [r2, #8]
 800146c:	e082      	b.n	8001574 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4413      	add	r3, r2
 8001476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b08      	cmp	r3, #8
 8001482:	d135      	bne.n	80014f0 <HCD_HC_IN_IRQHandler+0x112>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4413      	add	r3, r2
 800148c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001490:	4619      	mov	r1, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	015a      	lsls	r2, r3, #5
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4413      	add	r3, r2
 800149a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	335d      	adds	r3, #93	; 0x5d
 80014b6:	2205      	movs	r2, #5
 80014b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	015a      	lsls	r2, r3, #5
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c6:	461a      	mov	r2, r3
 80014c8:	2310      	movs	r3, #16
 80014ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d8:	461a      	mov	r2, r3
 80014da:	2308      	movs	r3, #8
 80014dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 fe8c 	bl	8006206 <USB_HC_Halt>
 80014ee:	e041      	b.n	8001574 <HCD_HC_IN_IRQHandler+0x196>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001506:	d135      	bne.n	8001574 <HCD_HC_IN_IRQHandler+0x196>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001514:	4619      	mov	r1, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f004 fe66 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4413      	add	r3, r2
 8001542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001546:	461a      	mov	r2, r3
 8001548:	2310      	movs	r3, #16
 800154a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	335d      	adds	r3, #93	; 0x5d
 800155c:	2208      	movs	r2, #8
 800155e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156c:	461a      	mov	r2, r3
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800158a:	d123      	bne.n	80015d4 <HCD_HC_IN_IRQHandler+0x1f6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4413      	add	r3, r2
 8001594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001598:	4619      	mov	r1, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fe24 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ca:	461a      	mov	r2, r3
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015d2:	e2a1      	b.n	8001b18 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	f040 80c3 	bne.w	8001772 <HCD_HC_IN_IRQHandler+0x394>
    if (hhcd->Init.dma_enable != 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01b      	beq.n	800162c <HCD_HC_IN_IRQHandler+0x24e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3348      	adds	r3, #72	; 0x48
 8001604:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	0159      	lsls	r1, r3, #5
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	440b      	add	r3, r1
 800160e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001618:	1ad1      	subs	r1, r2, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4403      	add	r3, r0
 8001628:	334c      	adds	r3, #76	; 0x4c
 800162a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	335d      	adds	r3, #93	; 0x5d
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3358      	adds	r3, #88	; 0x58
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4413      	add	r3, r2
 800165c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001660:	461a      	mov	r2, r3
 8001662:	2301      	movs	r3, #1
 8001664:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	333f      	adds	r3, #63	; 0x3f
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00a      	beq.n	8001692 <HCD_HC_IN_IRQHandler+0x2b4>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	333f      	adds	r3, #63	; 0x3f
 800168c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800168e:	2b02      	cmp	r3, #2
 8001690:	d122      	bne.n	80016d8 <HCD_HC_IN_IRQHandler+0x2fa>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4413      	add	r3, r2
 800169a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169e:	4619      	mov	r1, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 fda1 	bl	8006206 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d0:	461a      	mov	r2, r3
 80016d2:	2310      	movs	r3, #16
 80016d4:	6093      	str	r3, [r2, #8]
 80016d6:	e035      	b.n	8001744 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	333f      	adds	r3, #63	; 0x3f
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d12a      	bne.n	8001744 <HCD_HC_IN_IRQHandler+0x366>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fa:	4619      	mov	r1, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4413      	add	r3, r2
 8001704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800170e:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	335c      	adds	r3, #92	; 0x5c
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	b2d8      	uxtb	r0, r3
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	335c      	adds	r3, #92	; 0x5c
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4601      	mov	r1, r0
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f007 fcdc 	bl	80090fc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3350      	adds	r3, #80	; 0x50
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2d8      	uxtb	r0, r3
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3350      	adds	r3, #80	; 0x50
 800176c:	4602      	mov	r2, r0
 800176e:	701a      	strb	r2, [r3, #0]
}
 8001770:	e1d2      	b.n	8001b18 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4413      	add	r3, r2
 800177a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 80f2 	bne.w	800196e <HCD_HC_IN_IRQHandler+0x590>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4413      	add	r3, r2
 8001792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001796:	4619      	mov	r1, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 0302 	bic.w	r3, r3, #2
 80017aa:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	335d      	adds	r3, #93	; 0x5d
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10a      	bne.n	80017d8 <HCD_HC_IN_IRQHandler+0x3fa>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	335c      	adds	r3, #92	; 0x5c
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e0b0      	b.n	800193a <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	335d      	adds	r3, #93	; 0x5d
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d10a      	bne.n	8001804 <HCD_HC_IN_IRQHandler+0x426>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	335c      	adds	r3, #92	; 0x5c
 80017fe:	2205      	movs	r2, #5
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e09a      	b.n	800193a <HCD_HC_IN_IRQHandler+0x55c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	335d      	adds	r3, #93	; 0x5d
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d00a      	beq.n	8001830 <HCD_HC_IN_IRQHandler+0x452>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	335d      	adds	r3, #93	; 0x5d
 800182a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800182c:	2b08      	cmp	r3, #8
 800182e:	d156      	bne.n	80018de <HCD_HC_IN_IRQHandler+0x500>
      hhcd->hc[ch_num].ErrCnt++;
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	3358      	adds	r3, #88	; 0x58
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	1c59      	adds	r1, r3, #1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4403      	add	r3, r0
 8001852:	3358      	adds	r3, #88	; 0x58
 8001854:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3358      	adds	r3, #88	; 0x58
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d914      	bls.n	8001896 <HCD_HC_IN_IRQHandler+0x4b8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3358      	adds	r3, #88	; 0x58
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	335c      	adds	r3, #92	; 0x5c
 8001890:	2204      	movs	r2, #4
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e009      	b.n	80018aa <HCD_HC_IN_IRQHandler+0x4cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	335c      	adds	r3, #92	; 0x5c
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018c0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e02d      	b.n	800193a <HCD_HC_IN_IRQHandler+0x55c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	335d      	adds	r3, #93	; 0x5d
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d122      	bne.n	800193a <HCD_HC_IN_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	335c      	adds	r3, #92	; 0x5c
 8001904:	2202      	movs	r2, #2
 8001906:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800191e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001926:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	2302      	movs	r3, #2
 800194a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	b2d8      	uxtb	r0, r3
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	335c      	adds	r3, #92	; 0x5c
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	4601      	mov	r1, r0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f007 fbc8 	bl	80090fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800196c:	e0d4      	b.n	8001b18 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	2b80      	cmp	r3, #128	; 0x80
 8001982:	d13f      	bne.n	8001a04 <HCD_HC_IN_IRQHandler+0x626>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001990:	4619      	mov	r1, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3358      	adds	r3, #88	; 0x58
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	1c59      	adds	r1, r3, #1
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4403      	add	r3, r0
 80019c8:	3358      	adds	r3, #88	; 0x58
 80019ca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	335d      	adds	r3, #93	; 0x5d
 80019dc:	2206      	movs	r2, #6
 80019de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fc0b 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fc:	461a      	mov	r2, r3
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	6093      	str	r3, [r2, #8]
}
 8001a02:	e089      	b.n	8001b18 <HCD_HC_IN_IRQHandler+0x73a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d17e      	bne.n	8001b18 <HCD_HC_IN_IRQHandler+0x73a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	333f      	adds	r3, #63	; 0x3f
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d123      	bne.n	8001a78 <HCD_HC_IN_IRQHandler+0x69a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3358      	adds	r3, #88	; 0x58
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	4619      	mov	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 fbc8 	bl	8006206 <USB_HC_Halt>
 8001a76:	e046      	b.n	8001b06 <HCD_HC_IN_IRQHandler+0x728>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	333f      	adds	r3, #63	; 0x3f
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <HCD_HC_IN_IRQHandler+0x6c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	333f      	adds	r3, #63	; 0x3f
 8001a9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d130      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0x728>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3358      	adds	r3, #88	; 0x58
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d122      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0x728>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	335d      	adds	r3, #93	; 0x5d
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fb80 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	461a      	mov	r2, r3
 8001b14:	2310      	movs	r3, #16
 8001b16:	6093      	str	r3, [r2, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11a      	bne.n	8001b86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2304      	movs	r3, #4
 8001b60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b84:	e33c      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d142      	bne.n	8001c22 <HCD_HC_OUT_IRQHandler+0x102>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2320      	movs	r3, #32
 8001bac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	333d      	adds	r3, #61	; 0x3d
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f040 831d 	bne.w	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	333d      	adds	r3, #61	; 0x3d
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	335c      	adds	r3, #92	; 0x5c
 8001bea:	2202      	movs	r2, #2
 8001bec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 faf3 	bl	8006206 <USB_HC_Halt>
}
 8001c20:	e2ee      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c34:	2b40      	cmp	r3, #64	; 0x40
 8001c36:	d140      	bne.n	8001cba <HCD_HC_OUT_IRQHandler+0x19a>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	335d      	adds	r3, #93	; 0x5d
 8001c48:	2204      	movs	r2, #4
 8001c4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	333d      	adds	r3, #61	; 0x3d
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3358      	adds	r3, #88	; 0x58
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	4619      	mov	r1, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fab0 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	6093      	str	r3, [r2, #8]
}
 8001cb8:	e2a2      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd0:	d123      	bne.n	8001d1a <HCD_HC_OUT_IRQHandler+0x1fa>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	4619      	mov	r1, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fa81 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	461a      	mov	r2, r3
 8001d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	e272      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d136      	bne.n	8001d9e <HCD_HC_OUT_IRQHandler+0x27e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3358      	adds	r3, #88	; 0x58
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	4619      	mov	r1, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fa48 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2301      	movs	r3, #1
 8001d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	335d      	adds	r3, #93	; 0x5d
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
}
 8001d9c:	e230      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d12c      	bne.n	8001e0e <HCD_HC_OUT_IRQHandler+0x2ee>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fa07 	bl	8006206 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	335d      	adds	r3, #93	; 0x5d
 8001e08:	2205      	movs	r2, #5
 8001e0a:	701a      	strb	r2, [r3, #0]
}
 8001e0c:	e1f8      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d156      	bne.n	8001ed2 <HCD_HC_OUT_IRQHandler+0x3b2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3358      	adds	r3, #88	; 0x58
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	335d      	adds	r3, #93	; 0x5d
 8001e48:	2203      	movs	r2, #3
 8001e4a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	333d      	adds	r3, #61	; 0x3d
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d114      	bne.n	8001e8c <HCD_HC_OUT_IRQHandler+0x36c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	333c      	adds	r3, #60	; 0x3c
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HCD_HC_OUT_IRQHandler+0x36c>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	333d      	adds	r3, #61	; 0x3d
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	4619      	mov	r1, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 f9a4 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2310      	movs	r3, #16
 8001ece:	6093      	str	r3, [r2, #8]
}
 8001ed0:	e196      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d12c      	bne.n	8001f42 <HCD_HC_OUT_IRQHandler+0x422>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 f976 	bl	8006206 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	335d      	adds	r3, #93	; 0x5d
 8001f2a:	2206      	movs	r2, #6
 8001f2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	6093      	str	r3, [r2, #8]
}
 8001f40:	e15e      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f58:	d136      	bne.n	8001fc8 <HCD_HC_OUT_IRQHandler+0x4a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	4619      	mov	r1, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 f93d 	bl	8006206 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	335d      	adds	r3, #93	; 0x5d
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	701a      	strb	r2, [r3, #0]
}
 8001fc6:	e11b      	b.n	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	f040 8110 	bne.w	8002200 <HCD_HC_OUT_IRQHandler+0x6e0>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	4619      	mov	r1, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f023 0302 	bic.w	r3, r3, #2
 8002000:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	335d      	adds	r3, #93	; 0x5d
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d12c      	bne.n	8002072 <HCD_HC_OUT_IRQHandler+0x552>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	335c      	adds	r3, #92	; 0x5c
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK)
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	333f      	adds	r3, #63	; 0x3f
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 80c5 	bne.w	80021ce <HCD_HC_OUT_IRQHandler+0x6ae>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3351      	adds	r3, #81	; 0x51
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2d8      	uxtb	r0, r3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3351      	adds	r3, #81	; 0x51
 800206c:	4602      	mov	r2, r0
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e0ad      	b.n	80021ce <HCD_HC_OUT_IRQHandler+0x6ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	335d      	adds	r3, #93	; 0x5d
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d10a      	bne.n	800209e <HCD_HC_OUT_IRQHandler+0x57e>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	335c      	adds	r3, #92	; 0x5c
 8002098:	2202      	movs	r2, #2
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e097      	b.n	80021ce <HCD_HC_OUT_IRQHandler+0x6ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	335d      	adds	r3, #93	; 0x5d
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d10a      	bne.n	80020ca <HCD_HC_OUT_IRQHandler+0x5aa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2202      	movs	r2, #2
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e081      	b.n	80021ce <HCD_HC_OUT_IRQHandler+0x6ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	335d      	adds	r3, #93	; 0x5d
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10a      	bne.n	80020f6 <HCD_HC_OUT_IRQHandler+0x5d6>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	335c      	adds	r3, #92	; 0x5c
 80020f0:	2205      	movs	r2, #5
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e06b      	b.n	80021ce <HCD_HC_OUT_IRQHandler+0x6ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	335d      	adds	r3, #93	; 0x5d
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d00a      	beq.n	8002122 <HCD_HC_OUT_IRQHandler+0x602>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	335d      	adds	r3, #93	; 0x5d
 800211c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211e:	2b08      	cmp	r3, #8
 8002120:	d155      	bne.n	80021ce <HCD_HC_OUT_IRQHandler+0x6ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3358      	adds	r3, #88	; 0x58
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c59      	adds	r1, r3, #1
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4403      	add	r3, r0
 8002144:	3358      	adds	r3, #88	; 0x58
 8002146:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	3358      	adds	r3, #88	; 0x58
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d914      	bls.n	8002188 <HCD_HC_OUT_IRQHandler+0x668>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3358      	adds	r3, #88	; 0x58
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	335c      	adds	r3, #92	; 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e009      	b.n	800219c <HCD_HC_OUT_IRQHandler+0x67c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	335c      	adds	r3, #92	; 0x5c
 8002198:	2202      	movs	r2, #2
 800219a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	2302      	movs	r3, #2
 80021de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	b2d8      	uxtb	r0, r3
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4601      	mov	r1, r0
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f006 ff7e 	bl	80090fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	0c5b      	lsrs	r3, r3, #17
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d003      	beq.n	800224c <HCD_RXQLVL_IRQHandler+0x44>
 8002244:	2b05      	cmp	r3, #5
 8002246:	f000 8082 	beq.w	800234e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800224a:	e083      	b.n	8002354 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d07f      	beq.n	8002352 <HCD_RXQLVL_IRQHandler+0x14a>
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3344      	adds	r3, #68	; 0x44
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d074      	beq.n	8002352 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	3344      	adds	r3, #68	; 0x44
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	b292      	uxth	r2, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f003 fbc3 	bl	8005a0e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3344      	adds	r3, #68	; 0x44
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	18d1      	adds	r1, r2, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4403      	add	r3, r0
 80022ac:	3344      	adds	r3, #68	; 0x44
 80022ae:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	334c      	adds	r3, #76	; 0x4c
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	18d1      	adds	r1, r2, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4403      	add	r3, r0
 80022d4:	334c      	adds	r3, #76	; 0x4c
 80022d6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HCD_RXQLVL_IRQHandler+0x154>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d031      	beq.n	8002352 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002304:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800230c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	3350      	adds	r3, #80	; 0x50
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2d8      	uxtb	r0, r3
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3350      	adds	r3, #80	; 0x50
 8002348:	4602      	mov	r2, r0
 800234a:	701a      	strb	r2, [r3, #0]
      break;
 800234c:	e001      	b.n	8002352 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002352:	bf00      	nop
  }
}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	1ff80000 	.word	0x1ff80000

08002360 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800238c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b02      	cmp	r3, #2
 8002396:	d113      	bne.n	80023c0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d10a      	bne.n	80023b8 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	6992      	ldr	r2, [r2, #24]
 80023ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023b0:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f006 fe86 	bl	80090c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d148      	bne.n	800245c <HCD_Port_IRQHandler+0xfc>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d129      	bne.n	8002430 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d113      	bne.n	800240c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80023ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ee:	d106      	bne.n	80023fe <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fc2e 	bl	8005c58 <USB_InitFSLSPClkSel>
 80023fc:	e011      	b.n	8002422 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fc27 	bl	8005c58 <USB_InitFSLSPClkSel>
 800240a:	e00a      	b.n	8002422 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d106      	bne.n	8002422 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800241a:	461a      	mov	r2, r3
 800241c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002420:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f006 fe78 	bl	8009118 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f006 fe4b 	bl	80090c4 <HAL_HCD_Connect_Callback>
 800242e:	e015      	b.n	800245c <HCD_Port_IRQHandler+0xfc>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f006 fe7f 	bl	8009134 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800243c:	461a      	mov	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800244a:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	6992      	ldr	r2, [r2, #24]
 8002456:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800245a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b20      	cmp	r3, #32
 8002464:	d103      	bne.n	800246e <HCD_Port_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f043 0320 	orr.w	r3, r3, #32
 800246c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6013      	str	r3, [r2, #0]
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e080      	b.n	8002596 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f005 ffd3 	bl	8008454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2224      	movs	r2, #36	; 0x24
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6852      	ldr	r2, [r2, #4]
 80024ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	e006      	b.n	800250a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6892      	ldr	r2, [r2, #8]
 8002504:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002508:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d104      	bne.n	800251c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800251a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800252a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	68d2      	ldr	r2, [r2, #12]
 800253a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800253e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6911      	ldr	r1, [r2, #16]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6952      	ldr	r2, [r2, #20]
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6992      	ldr	r2, [r2, #24]
 8002552:	0212      	lsls	r2, r2, #8
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	69d1      	ldr	r1, [r2, #28]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6a12      	ldr	r2, [r2, #32]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d138      	bne.n	8002626 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025be:	2302      	movs	r3, #2
 80025c0:	e032      	b.n	8002628 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2224      	movs	r2, #36	; 0x24
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b20      	cmp	r3, #32
 8002648:	d139      	bne.n	80026be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002654:	2302      	movs	r3, #2
 8002656:	e033      	b.n	80026c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	; 0x24
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002686:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param  hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  uint32_t counter = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_LCD_Init+0x1a>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0a8      	b.n	8002838 <HAL_LCD_Init+0x16c>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if(hlcd->State == HAL_LCD_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_LCD_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f005 ff56 	bl	80085ac <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e00a      	b.n	8002734 <HAL_LCD_Init+0x68>
  {
    hlcd->Instance->RAM[counter] = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3304      	adds	r3, #4
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	d9f1      	bls.n	800271e <HAL_LCD_Init+0x52>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	6892      	ldr	r2, [r2, #8]
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
   MODIFY_REG(hlcd->Instance->FCR, \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_LCD_Init+0x174>)
 8002756:	400b      	ands	r3, r1
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	6848      	ldr	r0, [r1, #4]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6889      	ldr	r1, [r1, #8]
 8002760:	4308      	orrs	r0, r1
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8002766:	4308      	orrs	r0, r1
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800276c:	4308      	orrs	r0, r1
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	69c9      	ldr	r1, [r1, #28]
 8002772:	4308      	orrs	r0, r1
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6a09      	ldr	r1, [r1, #32]
 8002778:	4308      	orrs	r0, r1
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	6989      	ldr	r1, [r1, #24]
 800277e:	4308      	orrs	r0, r1
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002784:	4301      	orrs	r1, r0
 8002786:	430b      	orrs	r3, r1
 8002788:	6053      	str	r3, [r2, #4]
       hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f85a 	bl	8002844 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	f022 01fe 	bic.w	r1, r2, #254	; 0xfe
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68d0      	ldr	r0, [r2, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6912      	ldr	r2, [r2, #16]
 80027a6:	4310      	orrs	r0, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6952      	ldr	r2, [r2, #20]
 80027ac:	4310      	orrs	r0, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027b2:	4302      	orrs	r2, r0
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
    (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
    (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80027c8:	f7fd fed8 	bl	800057c <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]

  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80027ce:	e00c      	b.n	80027ea <HAL_LCD_Init+0x11e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80027d0:	f7fd fed4 	bl	800057c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027de:	d904      	bls.n	80027ea <HAL_LCD_Init+0x11e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2208      	movs	r2, #8
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e026      	b.n	8002838 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d1eb      	bne.n	80027d0 <HAL_LCD_Init+0x104>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80027f8:	f7fd fec0 	bl	800057c <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80027fe:	e00c      	b.n	800281a <HAL_LCD_Init+0x14e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8002800:	f7fd febc 	bl	800057c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280e:	d904      	bls.n	800281a <HAL_LCD_Init+0x14e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2210      	movs	r2, #16
 8002814:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00e      	b.n	8002838 <HAL_LCD_Init+0x16c>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d1eb      	bne.n	8002800 <HAL_LCD_Init+0x134>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	fc00000e 	.word	0xfc00000e

08002844 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002850:	f7fd fe94 	bl	800057c <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002856:	e00c      	b.n	8002872 <LCD_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8002858:	f7fd fe90 	bl	800057c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002866:	d904      	bls.n	8002872 <LCD_WaitForSynchro+0x2e>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e007      	b.n	8002882 <LCD_WaitForSynchro+0x3e>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b20      	cmp	r3, #32
 800287e:	d1eb      	bne.n	8002858 <LCD_WaitForSynchro+0x14>
    }
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002890:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40007000 	.word	0x40007000

080028ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d130      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e4:	d038      	beq.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2232      	movs	r2, #50	; 0x32
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290c:	e002      	b.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b01      	subs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002920:	d102      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f2      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d110      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e00f      	b.n	800295a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d007      	beq.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002956:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000
 800296c:	20000020 	.word	0x20000020
 8002970:	431bde83 	.word	0x431bde83

08002974 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6053      	str	r3, [r2, #4]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40007000 	.word	0x40007000

08002994 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7fd fdee 	bl	800057c <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e06f      	b.n	8002a8c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_QSPI_Init+0x28>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e067      	b.n	8002a8c <HAL_QSPI_Init+0xf8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f005 ffb5 	bl	8008948 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80029de:	f241 3188 	movw	r1, #5000	; 0x1388
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f858 	bl	8002a98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0212      	lsls	r2, r2, #8
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2120      	movs	r1, #32
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f850 	bl	8002ab4 <QSPI_WaitFlagStateUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d131      	bne.n	8002a82 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a2c:	f023 0310 	bic.w	r3, r3, #16
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	6849      	ldr	r1, [r1, #4]
 8002a34:	0608      	lsls	r0, r1, #24
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	68c9      	ldr	r1, [r1, #12]
 8002a3a:	4301      	orrs	r1, r0
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_QSPI_Init+0x100>)
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	6909      	ldr	r1, [r1, #16]
 8002a52:	0408      	lsls	r0, r1, #16
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6949      	ldr	r1, [r1, #20]
 8002a58:	4308      	orrs	r0, r1
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	6989      	ldr	r1, [r1, #24]
 8002a5e:	4301      	orrs	r1, r0
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	ffe0f8fe 	.word	0xffe0f8fe

08002a98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ac4:	e01a      	b.n	8002afc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d016      	beq.n	8002afc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ace:	f7fd fd55 	bl	800057c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d802      	bhi.n	8002ae4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e00e      	b.n	8002b1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1d6      	bne.n	8002ac6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e353      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b36:	4ba3      	ldr	r3, [pc, #652]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b40:	4ba0      	ldr	r3, [pc, #640]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80df 	beq.w	8002d16 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_RCC_OscConfig+0x4a>
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	f040 8086 	bne.w	8002c72 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	f040 8082 	bne.w	8002c72 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b6e:	4b95      	ldr	r3, [pc, #596]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e32b      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	4b8e      	ldr	r3, [pc, #568]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x7c>
 8002b96:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_OscConfig+0x88>
 8002ba0:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d923      	bls.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fccb 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e30c      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc4:	4a7f      	ldr	r2, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f043 0308 	orr.w	r3, r3, #8
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	497c      	ldr	r1, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002bd2:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be2:	4978      	ldr	r1, [pc, #480]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002be4:	4b77      	ldr	r3, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
 8002bf6:	e022      	b.n	8002c3e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf8:	4a72      	ldr	r2, [pc, #456]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002bfa:	4b72      	ldr	r3, [pc, #456]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	496f      	ldr	r1, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c06:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c16:	496b      	ldr	r1, [pc, #428]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c18:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fc8e 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e2cf      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3e:	f000 fbb3 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8002c42:	4601      	mov	r1, r0
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4a5e      	ldr	r2, [pc, #376]	; (8002dc8 <HAL_RCC_OscConfig+0x2a4>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x2a8>)
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fd fc5a 	bl	8000518 <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d052      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	e2b5      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d032      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c7a:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c7c:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c86:	f7fd fc79 	bl	800057c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c8e:	f7fd fc75 	bl	800057c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e29e      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cac:	4a45      	ldr	r2, [pc, #276]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4942      	ldr	r1, [pc, #264]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cca:	493e      	ldr	r1, [pc, #248]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
 8002cde:	e01a      	b.n	8002d16 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ce0:	4a38      	ldr	r2, [pc, #224]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cec:	f7fd fc46 	bl	800057c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf4:	f7fd fc42 	bl	800057c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e26b      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1d0>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d072      	beq.n	8002e08 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x210>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d10e      	bne.n	8002d4c <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d062      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2e2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d15e      	bne.n	8002e06 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e248      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x240>
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0x27c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x264>
 8002d6e:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x27c>
 8002d88:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x2a0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01a      	beq.n	8002dde <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fd fbe8 	bl	800057c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	e00f      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fd fbe4 	bl	800057c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d908      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e20d      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08009878 	.word	0x08009878
 8002dcc:	20000020 	.word	0x20000020
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	4bae      	ldr	r3, [pc, #696]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0e9      	beq.n	8002db0 <HAL_RCC_OscConfig+0x28c>
 8002ddc:	e014      	b.n	8002e08 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fd fbcd 	bl	800057c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fd fbc9 	bl	800057c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1f2      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df8:	4ba4      	ldr	r3, [pc, #656]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2c2>
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d060      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x302>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d119      	bne.n	8002e54 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e26:	4b99      	ldr	r3, [pc, #612]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x31a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1cf      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4993      	ldr	r1, [pc, #588]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e40:	4b92      	ldr	r3, [pc, #584]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e52:	e040      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4a8b      	ldr	r2, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e5e:	4b8b      	ldr	r3, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fd fb88 	bl	800057c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fd fb84 	bl	800057c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1ad      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e82:	4b82      	ldr	r3, [pc, #520]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	497f      	ldr	r1, [pc, #508]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e90:	4b7e      	ldr	r3, [pc, #504]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
 8002ea2:	e018      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea4:	4a79      	ldr	r2, [pc, #484]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002ea6:	4b79      	ldr	r3, [pc, #484]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fd fb64 	bl	800057c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7fd fb60 	bl	800057c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e189      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eca:	4b70      	ldr	r3, [pc, #448]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4a68      	ldr	r2, [pc, #416]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002eec:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd fb3f 	bl	800057c <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fd fb3b 	bl	800057c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e164      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f14:	4b5d      	ldr	r3, [pc, #372]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ef      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3de>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4a59      	ldr	r2, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f26:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fd fb22 	bl	800057c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fd fb1e 	bl	800057c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e147      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4e:	4b4f      	ldr	r3, [pc, #316]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ef      	bne.n	8002f3c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a5 	beq.w	80030b4 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4a44      	ldr	r2, [pc, #272]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <HAL_RCC_OscConfig+0x56c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_RCC_OscConfig+0x56c>)
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCC_OscConfig+0x56c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7fd fae5 	bl	800057c <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fd fae1 	bl	800057c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e10a      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCC_OscConfig+0x56c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <HAL_RCC_OscConfig+0x4ca>
 8002fdc:	4a2b      	ldr	r2, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fec:	e024      	b.n	8003038 <HAL_RCC_OscConfig+0x514>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d110      	bne.n	8003018 <HAL_RCC_OscConfig+0x4f4>
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_OscConfig+0x568>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003016:	e00f      	b.n	8003038 <HAL_RCC_OscConfig+0x514>
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_RCC_OscConfig+0x568>)
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_RCC_OscConfig+0x568>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_RCC_OscConfig+0x568>)
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_RCC_OscConfig+0x568>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fd fa9c 	bl	800057c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fd fa98 	bl	800057c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0bf      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x568>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ed      	beq.n	8003048 <HAL_RCC_OscConfig+0x524>
 800306c:	e019      	b.n	80030a2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fa85 	bl	800057c <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003074:	e00e      	b.n	8003094 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fd fa81 	bl	800057c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d905      	bls.n	8003094 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0a8      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003094:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e9      	bne.n	8003076 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4a4f      	ldr	r2, [pc, #316]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80030aa:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 808f 	beq.w	80031dc <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	f000 8089 	beq.w	80031d8 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d156      	bne.n	800317c <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80030d0:	4b45      	ldr	r3, [pc, #276]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fd fa4f 	bl	800057c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fd fa4b 	bl	800057c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e074      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4939      	ldr	r1, [pc, #228]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	3b01      	subs	r3, #1
 8003108:	011a      	lsls	r2, r3, #4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	045b      	lsls	r3, r3, #17
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	3b01      	subs	r3, #1
 800312a:	055b      	lsls	r3, r3, #21
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	065b      	lsls	r3, r3, #25
 8003138:	4313      	orrs	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fd fa12 	bl	800057c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fd fa0e 	bl	800057c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e037      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x638>
 800317a:	e02f      	b.n	80031dc <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003188:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd f9e4 	bl	800057c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd f9e0 	bl	800057c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e009      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_RCC_OscConfig+0x6c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x694>
 80031d6:	e001      	b.n	80031dc <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0c6      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0207 	and.w	r2, r3, #7
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4962      	ldr	r1, [pc, #392]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f023 0207 	bic.w	r2, r3, #7
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0207 	and.w	r2, r3, #7
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0ae      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d04c      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d121      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e09c      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d107      	bne.n	800326c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325c:	4b4f      	ldr	r3, [pc, #316]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d115      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e090      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e084      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003284:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e07c      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003294:	4941      	ldr	r1, [pc, #260]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f023 0203 	bic.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a6:	f7fd f969 	bl	800057c <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ae:	f7fd f965 	bl	800057c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e064      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 020c 	and.w	r2, r3, #12
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d1eb      	bne.n	80032ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e2:	492e      	ldr	r1, [pc, #184]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 80032e4:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b28      	ldr	r3, [pc, #160]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0207 	and.w	r2, r3, #7
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d910      	bls.n	8003324 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4925      	ldr	r1, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 0207 	bic.w	r2, r3, #7
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_RCC_ClockConfig+0x1ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0207 	and.w	r2, r3, #7
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e034      	b.n	800338e <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	491a      	ldr	r1, [pc, #104]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4913      	ldr	r1, [pc, #76]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4601      	mov	r1, r0
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	fa21 f303 	lsr.w	r3, r1, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd f8c8 	bl	8000518 <HAL_InitTick>
 8003388:	4603      	mov	r3, r0
 800338a:	72fb      	strb	r3, [r7, #11]

  return status;
 800338c:	7afb      	ldrb	r3, [r7, #11]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
 80033a0:	08009878 	.word	0x08009878
 80033a4:	20000020 	.word	0x20000020

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b6:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d121      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d11e      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e8:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003404:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d102      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x130>)
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e004      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d101      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_GetSysClockFreq+0x134>)
 800342e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d145      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	3301      	adds	r3, #1
 800344c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d002      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0xb2>
 8003454:	2b03      	cmp	r3, #3
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0xcc>
 8003458:	e019      	b.n	800348e <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345a:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x130>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003464:	68d2      	ldr	r2, [r2, #12]
 8003466:	0a12      	lsrs	r2, r2, #8
 8003468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
      break;
 8003472:	e019      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_RCC_GetSysClockFreq+0x134>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 800347e:	68d2      	ldr	r2, [r2, #12]
 8003480:	0a12      	lsrs	r2, r2, #8
 8003482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	617b      	str	r3, [r7, #20]
      break;
 800348c:	e00c      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8003498:	68d2      	ldr	r2, [r2, #12]
 800349a:	0a12      	lsrs	r2, r2, #8
 800349c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
      break;
 80034a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0e5b      	lsrs	r3, r3, #25
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034c2:	69bb      	ldr	r3, [r7, #24]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3724      	adds	r7, #36	; 0x24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08009890 	.word	0x08009890
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000020 	.word	0x20000020

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4601      	mov	r1, r0
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	08009888 	.word	0x08009888

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003528:	f7ff ffda 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 800352c:	4601      	mov	r1, r0
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0adb      	lsrs	r3, r3, #11
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_RCC_GetPCLK2Freq+0x28>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	08009888 	.word	0x08009888

08003550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003568:	f7ff f9a0 	bl	80028ac <HAL_PWREx_GetVoltageRange>
 800356c:	6178      	str	r0, [r7, #20]
 800356e:	e014      	b.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003588:	f7ff f990 	bl	80028ac <HAL_PWREx_GetVoltageRange>
 800358c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003598:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d10b      	bne.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d919      	bls.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2ba0      	cmp	r3, #160	; 0xa0
 80035ac:	d902      	bls.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ae:	2302      	movs	r3, #2
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	e013      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e010      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d902      	bls.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c0:	2303      	movs	r3, #3
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e00a      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d102      	bne.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035cc:	2302      	movs	r3, #2
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e004      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b70      	cmp	r3, #112	; 0x70
 80035d6:	d101      	bne.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035dc:	490b      	ldr	r1, [pc, #44]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0207 	and.w	r2, r3, #7
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	40022000 	.word	0x40022000

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003618:	2300      	movs	r3, #0
 800361a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361c:	2300      	movs	r3, #0
 800361e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003628:	2b00      	cmp	r3, #0
 800362a:	d03f      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003634:	d01c      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d802      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00e      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003640:	e01f      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003648:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800364c:	d01c      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800364e:	e018      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003650:	4a85      	ldr	r2, [pc, #532]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003652:	4b85      	ldr	r3, [pc, #532]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800365c:	e015      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 ff41 	bl	80044ec <RCCEx_PLLSAI1_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366e:	e00c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3320      	adds	r3, #32
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f828 	bl	80046cc <RCCEx_PLLSAI2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	74fb      	strb	r3, [r7, #19]
      break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003690:	4975      	ldr	r1, [pc, #468]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003692:	4b75      	ldr	r3, [pc, #468]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03f      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c0:	d01c      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c6:	d802      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036cc:	e01f      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d2:	d003      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d8:	d01c      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80036da:	e018      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036dc:	4a62      	ldr	r2, [pc, #392]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036de:	4b62      	ldr	r3, [pc, #392]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e8:	e015      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fefb 	bl	80044ec <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3320      	adds	r3, #32
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f000 ffe2 	bl	80046cc <RCCEx_PLLSAI2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	74fb      	strb	r3, [r7, #19]
      break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800371c:	4952      	ldr	r1, [pc, #328]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800371e:	4b52      	ldr	r3, [pc, #328]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a0 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4a41      	ldr	r2, [pc, #260]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
 800376c:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800377c:	4a3b      	ldr	r2, [pc, #236]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003788:	f7fc fef8 	bl	800057c <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800378e:	e009      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fc fef4 	bl	800057c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	74fb      	strb	r3, [r7, #19]
        break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ef      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d15c      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037b6:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01f      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d019      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fc feb3 	bl	800057c <HAL_GetTick>
 8003816:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003818:	e00b      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fc feaf 	bl	800057c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d902      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	74fb      	strb	r3, [r7, #19]
            break;
 8003830:	e006      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ec      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003846:	4908      	ldr	r1, [pc, #32]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800385e:	e009      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
 8003864:	e006      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003874:	7c7b      	ldrb	r3, [r7, #17]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4a9e      	ldr	r2, [pc, #632]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387c:	4b9d      	ldr	r3, [pc, #628]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003892:	4998      	ldr	r1, [pc, #608]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003894:	4b97      	ldr	r3, [pc, #604]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b4:	498f      	ldr	r1, [pc, #572]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b6:	4b8f      	ldr	r3, [pc, #572]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f023 020c 	bic.w	r2, r3, #12
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d6:	4987      	ldr	r1, [pc, #540]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d8:	4b86      	ldr	r3, [pc, #536]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f8:	497e      	ldr	r1, [pc, #504]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fa:	4b7e      	ldr	r3, [pc, #504]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800391a:	4976      	ldr	r1, [pc, #472]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391c:	4b75      	ldr	r3, [pc, #468]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393c:	496d      	ldr	r1, [pc, #436]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800393e:	4b6d      	ldr	r3, [pc, #436]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800395e:	4965      	ldr	r1, [pc, #404]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003960:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003980:	495c      	ldr	r1, [pc, #368]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a2:	4954      	ldr	r1, [pc, #336]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c4:	494b      	ldr	r1, [pc, #300]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c6:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039e6:	4943      	ldr	r1, [pc, #268]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d028      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a08:	493a      	ldr	r1, [pc, #232]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2a:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
 8003a34:	e011      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fd50 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a66:	4923      	ldr	r1, [pc, #140]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a68:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a90:	60d3      	str	r3, [r2, #12]
 8003a92:	e011      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fd21 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d02b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ac4:	490b      	ldr	r1, [pc, #44]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae2:	d109      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae6:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
 8003af0:	e014      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fcef 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02f      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b28:	492b      	ldr	r1, [pc, #172]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fccc 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d014      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	74bb      	strb	r3, [r7, #18]
 8003b62:	e011      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3320      	adds	r3, #32
 8003b72:	2102      	movs	r1, #2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fda9 	bl	80046cc <RCCEx_PLLSAI2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b94:	4910      	ldr	r1, [pc, #64]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bb6:	4908      	ldr	r1, [pc, #32]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bce:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000

08003bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bee:	d137      	bne.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003bf0:	4bb8      	ldr	r3, [pc, #736]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c02:	d014      	beq.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c08:	d01e      	beq.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003c10:	f000 bc53 	b.w	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c14:	4baf      	ldr	r3, [pc, #700]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	f040 8446 	bne.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8003c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c28:	61fb      	str	r3, [r7, #28]
      break;
 8003c2a:	f000 bc41 	b.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c2e:	4ba9      	ldr	r3, [pc, #676]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	f040 843b 	bne.w	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
        frequency = LSI_VALUE;
 8003c3e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003c42:	61fb      	str	r3, [r7, #28]
      break;
 8003c44:	f000 bc36 	b.w	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c48:	4ba2      	ldr	r3, [pc, #648]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c54:	f040 8430 	bne.w	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8003c58:	4b9f      	ldr	r3, [pc, #636]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c5a:	61fb      	str	r3, [r7, #28]
      break;
 8003c5c:	f000 bc2c 	b.w	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c60:	4b9c      	ldr	r3, [pc, #624]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d023      	beq.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d02e      	beq.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d139      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c78:	4b96      	ldr	r3, [pc, #600]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d116      	bne.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c84:	4b93      	ldr	r3, [pc, #588]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8003c90:	4b90      	ldr	r3, [pc, #576]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8003c9c:	4b8d      	ldr	r3, [pc, #564]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	4a8c      	ldr	r2, [pc, #560]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cb0:	e01f      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
      break;
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cb8:	4b86      	ldr	r3, [pc, #536]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8003cc6:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003cc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cca:	e012      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
      break;
 8003cd0:	e00f      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cd2:	4b80      	ldr	r3, [pc, #512]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8003ce0:	4b80      	ldr	r3, [pc, #512]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003ce2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
      break;
 8003cf0:	bf00      	nop
    }

    switch(PeriphClk)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	f000 8337 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d00:	d825      	bhi.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	f000 81df 	beq.w	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d80f      	bhi.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	f000 8128 	beq.w	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d803      	bhi.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	f000 80ec 	beq.w	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003d1c:	e3cd      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	f000 8169 	beq.w	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	f000 819a 	beq.w	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8003d2a:	e3c6      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	f000 82b3 	beq.w	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d803      	bhi.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	f000 81fd 	beq.w	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8003d3c:	e3bd      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	f000 82cd 	beq.w	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	f000 82ec 	beq.w	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8003d4c:	e3b5      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d52:	f000 822d 	beq.w	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8003d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d5a:	d811      	bhi.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d60:	d021      	beq.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8003d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d66:	d804      	bhi.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	f000 833e 	beq.w	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8003d70:	e3a3      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d01d      	beq.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d021      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003d7e:	e39c      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	f000 8277 	beq.w	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d804      	bhi.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	f000 8371 	beq.w	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 8003d96:	e390      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8003d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9c:	d011      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da2:	d00e      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8003da4:	e389      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003da6:	69b9      	ldr	r1, [r7, #24]
 8003da8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003dac:	f000 fd68 	bl	8004880 <RCCEx_GetSAIxPeriphCLKFreq>
 8003db0:	61f8      	str	r0, [r7, #28]
      break;
 8003db2:	e382      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003db4:	69b9      	ldr	r1, [r7, #24]
 8003db6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003dba:	f000 fd61 	bl	8004880 <RCCEx_GetSAIxPeriphCLKFreq>
 8003dbe:	61f8      	str	r0, [r7, #28]
      break;
 8003dc0:	e37b      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003dc2:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003dcc:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd4:	d023      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8003dd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dda:	d003      	beq.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de0:	d04a      	beq.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8003de2:	e086      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003de4:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d17b      	bne.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003df0:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003dfc:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	e005      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	4a31      	ldr	r2, [pc, #196]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	61fb      	str	r3, [r7, #28]
          break;
 8003e1c:	e064      	b.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e2a:	d15f      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e2c:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e38:	d158      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	3301      	adds	r3, #1
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e4e:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e58:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	fb02 f203 	mul.w	r2, r2, r3
 8003e62:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	0d5b      	lsrs	r3, r3, #21
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	61fb      	str	r3, [r7, #28]
          break;
 8003e76:	e039      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e84:	d134      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e92:	d12d      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb2:	60fb      	str	r3, [r7, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	fb02 f203 	mul.w	r2, r2, r3
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	0d5b      	lsrs	r3, r3, #21
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	61fb      	str	r3, [r7, #28]
          break;
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	0003d090 	.word	0x0003d090
 8003edc:	08009890 	.word	0x08009890
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	007a1200 	.word	0x007a1200
          break;
 8003ee8:	bf00      	nop
 8003eea:	e2e6      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003eec:	bf00      	nop
 8003eee:	e2e4      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003ef0:	bf00      	nop
        break;
 8003ef2:	e2e2      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003ef4:	4bac      	ldr	r3, [pc, #688]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d827      	bhi.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f25 	.word	0x08003f25
 8003f14:	08003f2d 	.word	0x08003f2d
 8003f18:	08003f41 	.word	0x08003f41
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7ff fb02 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8003f20:	61f8      	str	r0, [r7, #28]
          break;
 8003f22:	e01d      	b.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f24:	f7ff fa40 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003f28:	61f8      	str	r0, [r7, #28]
          break;
 8003f2a:	e019      	b.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f2c:	4b9e      	ldr	r3, [pc, #632]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d10f      	bne.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8003f3a:	4b9c      	ldr	r3, [pc, #624]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003f3c:	61fb      	str	r3, [r7, #28]
          break;
 8003f3e:	e00c      	b.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f40:	4b99      	ldr	r3, [pc, #612]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f52:	61fb      	str	r3, [r7, #28]
          break;
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8003f56:	bf00      	nop
 8003f58:	e2af      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f5a:	bf00      	nop
 8003f5c:	e2ad      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003f5e:	bf00      	nop
        break;
 8003f60:	e2ab      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f62:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	d83a      	bhi.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fb1 	.word	0x08003fb1
 8003f80:	08003feb 	.word	0x08003feb
 8003f84:	08003feb 	.word	0x08003feb
 8003f88:	08003feb 	.word	0x08003feb
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003feb 	.word	0x08003feb
 8003f94:	08003feb 	.word	0x08003feb
 8003f98:	08003feb 	.word	0x08003feb
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003feb 	.word	0x08003feb
 8003fa4:	08003feb 	.word	0x08003feb
 8003fa8:	08003feb 	.word	0x08003feb
 8003fac:	08003fd5 	.word	0x08003fd5
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7ff faa2 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61f8      	str	r0, [r7, #28]
          break;
 8003fb6:	e01d      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fb8:	f7ff f9f6 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003fbc:	61f8      	str	r0, [r7, #28]
          break;
 8003fbe:	e019      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc0:	4b79      	ldr	r3, [pc, #484]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fcc:	d10f      	bne.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8003fce:	4b77      	ldr	r3, [pc, #476]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003fd0:	61fb      	str	r3, [r7, #28]
          break;
 8003fd2:	e00c      	b.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fd4:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	61fb      	str	r3, [r7, #28]
          break;
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8003fea:	bf00      	nop
 8003fec:	e265      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003fee:	bf00      	nop
 8003ff0:	e263      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8003ff2:	bf00      	nop
        break;
 8003ff4:	e261      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004000:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b10      	cmp	r3, #16
 8004006:	d00d      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d802      	bhi.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8004010:	e024      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8004012:	2b20      	cmp	r3, #32
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004016:	2b30      	cmp	r3, #48	; 0x30
 8004018:	d012      	beq.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800401a:	e01f      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 800401c:	f7ff fa6c 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004020:	61f8      	str	r0, [r7, #28]
          break;
 8004022:	e01b      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004024:	f7ff f9c0 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004028:	61f8      	str	r0, [r7, #28]
          break;
 800402a:	e017      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800402c:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d10d      	bne.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800403a:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800403c:	61fb      	str	r3, [r7, #28]
          break;
 800403e:	e00a      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d105      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	61fb      	str	r3, [r7, #28]
          break;
 8004054:	e001      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004056:	bf00      	nop
 8004058:	e22f      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800405a:	bf00      	nop
        break;
 800405c:	e22d      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004068:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d00d      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d802      	bhi.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8004078:	e024      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800407e:	2bc0      	cmp	r3, #192	; 0xc0
 8004080:	d012      	beq.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8004082:	e01f      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004084:	f7ff fa38 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004088:	61f8      	str	r0, [r7, #28]
          break;
 800408a:	e01b      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800408c:	f7ff f98c 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004090:	61f8      	str	r0, [r7, #28]
          break;
 8004092:	e017      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004094:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d10d      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80040a4:	61fb      	str	r3, [r7, #28]
          break;
 80040a6:	e00a      	b.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040a8:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d105      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	61fb      	str	r3, [r7, #28]
          break;
 80040bc:	e001      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80040be:	bf00      	nop
 80040c0:	e1fb      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80040c2:	bf00      	nop
        break;
 80040c4:	e1f9      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80040c6:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d8:	d010      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80040da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040de:	d802      	bhi.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80040e4:	e026      	b.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d00b      	beq.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80040ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f0:	d012      	beq.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80040f2:	e01f      	b.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7ff fa00 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80040f8:	61f8      	str	r0, [r7, #28]
          break;
 80040fa:	e01b      	b.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80040fc:	f7ff f954 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004100:	61f8      	str	r0, [r7, #28]
          break;
 8004102:	e017      	b.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d10d      	bne.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004114:	61fb      	str	r3, [r7, #28]
          break;
 8004116:	e00a      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d105      	bne.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	61fb      	str	r3, [r7, #28]
          break;
 800412c:	e001      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800412e:	bf00      	nop
 8004130:	e1c3      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004132:	bf00      	nop
        break;
 8004134:	e1c1      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004140:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d010      	beq.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d802      	bhi.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004154:	e026      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	d00b      	beq.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800415c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004160:	d012      	beq.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8004162:	e01f      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004164:	f7ff f9c8 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004168:	61f8      	str	r0, [r7, #28]
          break;
 800416a:	e01b      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 800416c:	f7ff f91c 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004170:	61f8      	str	r0, [r7, #28]
          break;
 8004172:	e017      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d10d      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004184:	61fb      	str	r3, [r7, #28]
          break;
 8004186:	e00a      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d105      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61fb      	str	r3, [r7, #28]
          break;
 800419c:	e001      	b.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800419e:	bf00      	nop
 80041a0:	e18b      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80041a2:	bf00      	nop
        break;
 80041a4:	e189      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80041b0:	4bae      	ldr	r3, [pc, #696]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041ba:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c2:	d02f      	beq.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80041c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c8:	d003      	beq.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80041d0:	e050      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 80041d2:	f7ff f8e9 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80041d6:	61f8      	str	r0, [r7, #28]
          break;
 80041d8:	e04c      	b.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80041da:	4ba4      	ldr	r3, [pc, #656]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d043      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80041e6:	4ba1      	ldr	r3, [pc, #644]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	3301      	adds	r3, #1
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80041fa:	4b9c      	ldr	r3, [pc, #624]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	fb02 f203 	mul.w	r2, r2, r3
 800420e:	4b97      	ldr	r3, [pc, #604]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	0e5b      	lsrs	r3, r3, #25
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	3301      	adds	r3, #1
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	61fb      	str	r3, [r7, #28]
          break;
 8004222:	e024      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004224:	4b91      	ldr	r3, [pc, #580]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004230:	4b8e      	ldr	r3, [pc, #568]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	3301      	adds	r3, #1
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	61bb      	str	r3, [r7, #24]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004244:	4b89      	ldr	r3, [pc, #548]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424e:	60fb      	str	r3, [r7, #12]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	fb02 f203 	mul.w	r2, r2, r3
 8004258:	4b84      	ldr	r3, [pc, #528]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	0e5b      	lsrs	r3, r3, #25
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
          break;
 800426c:	e001      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 800426e:	bf00      	nop
 8004270:	e123      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004272:	bf00      	nop
        break;
 8004274:	e121      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004276:	4b7d      	ldr	r3, [pc, #500]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004280:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d103      	bne.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004288:	f7ff f94c 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 800428c:	61f8      	str	r0, [r7, #28]
        break;
 800428e:	e114      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8004290:	f7ff f88a 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004294:	61f8      	str	r0, [r7, #28]
        break;
 8004296:	e110      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004298:	4b74      	ldr	r3, [pc, #464]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042a2:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d009      	beq.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d000      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 80042b6:	e011      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7ff f91e 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80042bc:	61f8      	str	r0, [r7, #28]
          break;
 80042be:	e00d      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 80042c0:	f7ff f872 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80042c4:	61f8      	str	r0, [r7, #28]
          break;
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 80042d6:	4b66      	ldr	r3, [pc, #408]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80042d8:	61fb      	str	r3, [r7, #28]
          break;
 80042da:	bf00      	nop
        break;
 80042dc:	e0ed      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042e8:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f0:	d009      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d000      	beq.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80042fc:	e011      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042fe:	f7ff f8fb 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004302:	61f8      	str	r0, [r7, #28]
          break;
 8004304:	e00d      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004306:	f7ff f84f 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 800430a:	61f8      	str	r0, [r7, #28]
          break;
 800430c:	e009      	b.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800430e:	4b57      	ldr	r3, [pc, #348]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d101      	bne.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 800431c:	4b54      	ldr	r3, [pc, #336]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800431e:	61fb      	str	r3, [r7, #28]
          break;
 8004320:	bf00      	nop
        break;
 8004322:	e0ca      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004324:	4b51      	ldr	r3, [pc, #324]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800432e:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004336:	d009      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d000      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004344:	f7ff f8d8 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004348:	61f8      	str	r0, [r7, #28]
          break;
 800434a:	e00d      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 800434c:	f7ff f82c 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004350:	61f8      	str	r0, [r7, #28]
          break;
 8004352:	e009      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004354:	4b45      	ldr	r3, [pc, #276]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004364:	61fb      	str	r3, [r7, #28]
          break;
 8004366:	bf00      	nop
        break;
 8004368:	e0a7      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800436a:	4b40      	ldr	r3, [pc, #256]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004374:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800437c:	d010      	beq.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800437e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004382:	d802      	bhi.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004388:	e02f      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 800438a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800438e:	d012      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004390:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004394:	d019      	beq.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004396:	e028      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004398:	f7ff f8ae 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 800439c:	61f8      	str	r0, [r7, #28]
          break;
 800439e:	e024      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d118      	bne.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
            frequency = LSI_VALUE;
 80043ae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80043b2:	61fb      	str	r3, [r7, #28]
          break;
 80043b4:	e014      	b.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043b6:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d10f      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80043c6:	61fb      	str	r3, [r7, #28]
          break;
 80043c8:	e00c      	b.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d107      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 80043d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043dc:	61fb      	str	r3, [r7, #28]
          break;
 80043de:	e003      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 80043e0:	bf00      	nop
 80043e2:	e06a      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80043e4:	bf00      	nop
 80043e6:	e068      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80043e8:	bf00      	nop
        break;
 80043ea:	e066      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043f6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fe:	d010      	beq.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004404:	d802      	bhi.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 800440a:	e034      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 800440c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004410:	d012      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004416:	d019      	beq.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004418:	e02d      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800441a:	f7ff f86d 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 800441e:	61f8      	str	r0, [r7, #28]
          break;
 8004420:	e029      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d118      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
            frequency = LSI_VALUE;
 8004430:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004434:	61fb      	str	r3, [r7, #28]
          break;
 8004436:	e014      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004444:	d10f      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004448:	61fb      	str	r3, [r7, #28]
          break;
 800444a:	e00c      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800444c:	4b07      	ldr	r3, [pc, #28]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 800445a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445e:	61fb      	str	r3, [r7, #28]
          break;
 8004460:	e008      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8004462:	bf00      	nop
 8004464:	e029      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004466:	bf00      	nop
 8004468:	e027      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	00f42400 	.word	0x00f42400
          break;
 8004474:	bf00      	nop
        break;
 8004476:	e020      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004482:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d004      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8004490:	e00d      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004492:	f7ff f831 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004496:	61f8      	str	r0, [r7, #28]
          break;
 8004498:	e009      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d101      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80044aa:	61fb      	str	r3, [r7, #28]
          break;
 80044ac:	bf00      	nop
        break;
 80044ae:	e004      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 80044b8:	bf00      	nop
    }
  }

  return(frequency);
 80044ba:	69fb      	ldr	r3, [r7, #28]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	00f42400 	.word	0x00f42400

080044cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000

080044ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044fa:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004506:	4b70      	ldr	r3, [pc, #448]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0203 	and.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d10d      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
       ||
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800451e:	4b6a      	ldr	r3, [pc, #424]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
       ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d044      	beq.n	80045bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e041      	b.n	80045bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d00c      	beq.n	800455a <RCCEx_PLLSAI1_Config+0x6e>
 8004540:	2b03      	cmp	r3, #3
 8004542:	d013      	beq.n	800456c <RCCEx_PLLSAI1_Config+0x80>
 8004544:	2b01      	cmp	r3, #1
 8004546:	d120      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004548:	4b5f      	ldr	r3, [pc, #380]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11d      	bne.n	8004590 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004558:	e01a      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800455a:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456a:	e013      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800456c:	4b56      	ldr	r3, [pc, #344]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10f      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004588:	e006      	b.n	8004598 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
      break;
 800458e:	e004      	b.n	800459a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004590:	bf00      	nop
 8004592:	e002      	b.n	800459a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004598:	bf00      	nop
    }

    if(status == HAL_OK)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045a0:	4849      	ldr	r0, [pc, #292]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a2:	4b49      	ldr	r3, [pc, #292]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	430b      	orrs	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d17d      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045c2:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045c4:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ce:	f7fb ffd5 	bl	800057c <HAL_GetTick>
 80045d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d4:	e009      	b.n	80045ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d6:	f7fb ffd1 	bl	800057c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d902      	bls.n	80045ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	73fb      	strb	r3, [r7, #15]
        break;
 80045e8:	e005      	b.n	80045f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ef      	bne.n	80045d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d160      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d111      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004602:	4831      	ldr	r0, [pc, #196]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004604:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6892      	ldr	r2, [r2, #8]
 8004614:	0211      	lsls	r1, r2, #8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	0912      	lsrs	r2, r2, #4
 800461c:	0452      	lsls	r2, r2, #17
 800461e:	430a      	orrs	r2, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	6103      	str	r3, [r0, #16]
 8004624:	e027      	b.n	8004676 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d112      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462c:	4826      	ldr	r0, [pc, #152]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004636:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6892      	ldr	r2, [r2, #8]
 800463e:	0211      	lsls	r1, r2, #8
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6912      	ldr	r2, [r2, #16]
 8004644:	0852      	lsrs	r2, r2, #1
 8004646:	3a01      	subs	r2, #1
 8004648:	0552      	lsls	r2, r2, #21
 800464a:	430a      	orrs	r2, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	6103      	str	r3, [r0, #16]
 8004650:	e011      	b.n	8004676 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004652:	481d      	ldr	r0, [pc, #116]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004654:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800465c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6952      	ldr	r2, [r2, #20]
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0652      	lsls	r2, r2, #25
 8004670:	430a      	orrs	r2, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004680:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fb ff7b 	bl	800057c <HAL_GetTick>
 8004686:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004688:	e009      	b.n	800469e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800468a:	f7fb ff77 	bl	800057c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d902      	bls.n	800469e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	73fb      	strb	r3, [r7, #15]
          break;
 800469c:	e005      	b.n	80046aa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ef      	beq.n	800468a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046b0:	4905      	ldr	r1, [pc, #20]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000

080046cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046da:	4b68      	ldr	r3, [pc, #416]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d018      	beq.n	8004718 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046e6:	4b65      	ldr	r3, [pc, #404]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0203 	and.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d10d      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
       ||
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046fe:	4b5f      	ldr	r3, [pc, #380]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
       ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d044      	beq.n	800479c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	e041      	b.n	800479c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d00c      	beq.n	800473a <RCCEx_PLLSAI2_Config+0x6e>
 8004720:	2b03      	cmp	r3, #3
 8004722:	d013      	beq.n	800474c <RCCEx_PLLSAI2_Config+0x80>
 8004724:	2b01      	cmp	r3, #1
 8004726:	d120      	bne.n	800476a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004728:	4b54      	ldr	r3, [pc, #336]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11d      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004738:	e01a      	b.n	8004770 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800473a:	4b50      	ldr	r3, [pc, #320]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474a:	e013      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474c:	4b4b      	ldr	r3, [pc, #300]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10f      	bne.n	8004778 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004758:	4b48      	ldr	r3, [pc, #288]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004768:	e006      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      break;
 800476e:	e004      	b.n	800477a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004770:	bf00      	nop
 8004772:	e002      	b.n	800477a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004778:	bf00      	nop
    }

    if(status == HAL_OK)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004780:	483e      	ldr	r0, [pc, #248]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	430b      	orrs	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d167      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047a2:	4a36      	ldr	r2, [pc, #216]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047a4:	4b35      	ldr	r3, [pc, #212]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fb fee5 	bl	800057c <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047b4:	e009      	b.n	80047ca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b6:	f7fb fee1 	bl	800057c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	73fb      	strb	r3, [r7, #15]
        break;
 80047c8:	e005      	b.n	80047d6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ef      	bne.n	80047b6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d14a      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d111      	bne.n	8004806 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e2:	4826      	ldr	r0, [pc, #152]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e4:	4b25      	ldr	r3, [pc, #148]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	0211      	lsls	r1, r2, #8
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	0912      	lsrs	r2, r2, #4
 80047fc:	0452      	lsls	r2, r2, #17
 80047fe:	430a      	orrs	r2, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	6143      	str	r3, [r0, #20]
 8004804:	e011      	b.n	800482a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004806:	481d      	ldr	r0, [pc, #116]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6912      	ldr	r2, [r2, #16]
 800481e:	0852      	lsrs	r2, r2, #1
 8004820:	3a01      	subs	r2, #1
 8004822:	0652      	lsls	r2, r2, #25
 8004824:	430a      	orrs	r2, r1
 8004826:	4313      	orrs	r3, r2
 8004828:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800482a:	4a14      	ldr	r2, [pc, #80]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fb fea1 	bl	800057c <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800483c:	e009      	b.n	8004852 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800483e:	f7fb fe9d 	bl	800057c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	73fb      	strb	r3, [r7, #15]
          break;
 8004850:	e005      	b.n	800485e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0ef      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004864:	4905      	ldr	r1, [pc, #20]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000

08004880 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489c:	d10c      	bne.n	80048b8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800489e:	4b62      	ldr	r3, [pc, #392]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048a8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048b0:	d112      	bne.n	80048d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048b2:	4b5e      	ldr	r3, [pc, #376]	; (8004a2c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e00f      	b.n	80048d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048be:	d10b      	bne.n	80048d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80048ca:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048d2:	d101      	bne.n	80048d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80048d4:	4b55      	ldr	r3, [pc, #340]	; (8004a2c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80048d6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 809c 	bne.w	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ea:	d003      	beq.n	80048f4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f2:	d12d      	bne.n	8004950 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80048f4:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 808b 	beq.w	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004902:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	3301      	adds	r3, #1
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004916:	4b44      	ldr	r3, [pc, #272]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004920:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004928:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8004934:	2311      	movs	r3, #17
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e001      	b.n	800493e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 800493a:	2307      	movs	r3, #7
 800493c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	fb02 f203 	mul.w	r2, r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800494e:	e063      	b.n	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d12c      	bne.n	80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8004956:	4b34      	ldr	r3, [pc, #208]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05a      	beq.n	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004962:	4b31      	ldr	r3, [pc, #196]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	3301      	adds	r3, #1
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004980:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 8004994:	2311      	movs	r3, #17
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e001      	b.n	800499e <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 800499a:	2307      	movs	r3, #7
 800499c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	fb02 f203 	mul.w	r2, r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	e033      	b.n	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b6:	d003      	beq.n	80049c0 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049be:	d12b      	bne.n	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d025      	beq.n	8004a18 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	3301      	adds	r3, #1
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	0a1b      	lsrs	r3, r3, #8
 80049e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ea:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 80049fe:	2311      	movs	r3, #17
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e001      	b.n	8004a08 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8004a04:	2307      	movs	r3, #7
 8004a06:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	fb02 f203 	mul.w	r2, r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004a18:	69fb      	ldr	r3, [r7, #28]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	001fff68 	.word	0x001fff68

08004a30 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e14a      	b.n	8004cd8 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f004 f862 	bl	8008b20 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f94d 	bl	8004cfc <SAI_Disable>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e135      	b.n	8004cd8 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d007      	beq.n	8004a8c <HAL_SAI_Init+0x5c>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d302      	bcc.n	8004a86 <HAL_SAI_Init+0x56>
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d006      	beq.n	8004a92 <HAL_SAI_Init+0x62>
 8004a84:	e008      	b.n	8004a98 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
      break;
 8004a8a:	e008      	b.n	8004a9e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	61fb      	str	r3, [r7, #28]
      break;
 8004a90:	e005      	b.n	8004a9e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a92:	2320      	movs	r3, #32
 8004a94:	61fb      	str	r3, [r7, #28]
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
      break;
 8004a9c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d81d      	bhi.n	8004ae2 <HAL_SAI_Init+0xb2>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <HAL_SAI_Init+0x7c>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004ac3 	.word	0x08004ac3
 8004ab4:	08004acb 	.word	0x08004acb
 8004ab8:	08004ad3 	.word	0x08004ad3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
      break;
 8004ac0:	e012      	b.n	8004ae8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac6:	617b      	str	r3, [r7, #20]
      break;
 8004ac8:	e00e      	b.n	8004ae8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ace:	617b      	str	r3, [r7, #20]
      break;
 8004ad0:	e00a      	b.n	8004ae8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ad6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
      break;
 8004ae0:	e002      	b.n	8004ae8 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
      break;
 8004ae6:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a7c      	ldr	r2, [pc, #496]	; (8004ce0 <HAL_SAI_Init+0x2b0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_SAI_Init+0xcc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7b      	ldr	r2, [pc, #492]	; (8004ce4 <HAL_SAI_Init+0x2b4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004afc:	4a7a      	ldr	r2, [pc, #488]	; (8004ce8 <HAL_SAI_Init+0x2b8>)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e002      	b.n	8004b0a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004b04:	4a79      	ldr	r2, [pc, #484]	; (8004cec <HAL_SAI_Init+0x2bc>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d038      	beq.n	8004b84 <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a72      	ldr	r2, [pc, #456]	; (8004ce0 <HAL_SAI_Init+0x2b0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_SAI_Init+0xf6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a70      	ldr	r2, [pc, #448]	; (8004ce4 <HAL_SAI_Init+0x2b4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d105      	bne.n	8004b32 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b2a:	f7ff f857 	bl	8003bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8004b2e:	6138      	str	r0, [r7, #16]
 8004b30:	e004      	b.n	8004b3c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b36:	f7ff f851 	bl	8003bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8004b3a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	025b      	lsls	r3, r3, #9
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a66      	ldr	r2, [pc, #408]	; (8004cf0 <HAL_SAI_Init+0x2c0>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	08da      	lsrs	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	4b62      	ldr	r3, [pc, #392]	; (8004cf0 <HAL_SAI_Init+0x2c0>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	08da      	lsrs	r2, r3, #3
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	1aca      	subs	r2, r1, r3
 8004b76:	2a08      	cmp	r2, #8
 8004b78:	d904      	bls.n	8004b84 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_SAI_Init+0x164>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d109      	bne.n	8004ba8 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SAI_Init+0x170>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e001      	b.n	8004ba4 <HAL_SAI_Init+0x174>
 8004ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e008      	b.n	8004bba <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d102      	bne.n	8004bb6 <HAL_SAI_Init+0x186>
 8004bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb4:	e000      	b.n	8004bb8 <HAL_SAI_Init+0x188>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_SAI_Init+0x2c4>)
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	6811      	ldr	r1, [r2, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6850      	ldr	r0, [r2, #4]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bdc:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6b52      	ldr	r2, [r2, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004be2:	4310      	orrs	r0, r2
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be8:	4310      	orrs	r0, r2
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4310      	orrs	r0, r2
                          ckstr_bits | syncen_bits |                             \
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8004bf6:	4310      	orrs	r0, r2
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6912      	ldr	r2, [r2, #16]
 8004bfc:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6952      	ldr	r2, [r2, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004c02:	4310      	orrs	r0, r2
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6a12      	ldr	r2, [r2, #32]
 8004c08:	0512      	lsls	r2, r2, #20
 8004c0a:	4302      	orrs	r2, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004c1e:	f023 030f 	bic.w	r3, r3, #15
 8004c22:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	6851      	ldr	r1, [r2, #4]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6990      	ldr	r0, [r2, #24]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c36:	4310      	orrs	r0, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c3c:	4302      	orrs	r2, r0
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_SAI_Init+0x2c8>)
 8004c4e:	400b      	ands	r3, r1
 8004c50:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	6891      	ldr	r1, [r2, #8]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c60:	1e50      	subs	r0, r2, #1
                           hsai->FrameInit.FSOffset |
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c66:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSDefinition |
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004c6c:	4310      	orrs	r0, r2
                           hsai->FrameInit.FSPolarity   |
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004c72:	4310      	orrs	r0, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0212      	lsls	r2, r2, #8
                           hsai->FrameInit.FSPolarity   |
 8004c7c:	4302      	orrs	r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68d9      	ldr	r1, [r3, #12]
 8004c8c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004c90:	400b      	ands	r3, r1
 8004c92:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	68d1      	ldr	r1, [r2, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ca6:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004cac:	0412      	lsls	r2, r2, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cae:	4310      	orrs	r0, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	0212      	lsls	r2, r2, #8
 8004cb8:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40015404 	.word	0x40015404
 8004ce4:	40015424 	.word	0x40015424
 8004ce8:	40015400 	.word	0x40015400
 8004cec:	40015800 	.word	0x40015800
 8004cf0:	cccccccd 	.word	0xcccccccd
 8004cf4:	ff05c010 	.word	0xff05c010
 8004cf8:	fff88000 	.word	0xfff88000

08004cfc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004cfc:	b490      	push	{r4, r7}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <SAI_Disable+0x60>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <SAI_Disable+0x64>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0b1b      	lsrs	r3, r3, #12
 8004d10:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d24:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	d10a      	bne.n	8004d40 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3e:	e007      	b.n	8004d50 <SAI_Disable+0x54>
    }
    count--;
 8004d40:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ea      	bne.n	8004d26 <SAI_Disable+0x2a>

  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc90      	pop	{r4, r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	20000020 	.word	0x20000020
 8004d60:	95cbec1b 	.word	0x95cbec1b

08004d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e07a      	b.n	8004e6c <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f003 ff7b 	bl	8008c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db6:	d902      	bls.n	8004dbe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dcc:	d007      	beq.n	8004dde <HAL_SPI_Init+0x7a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd6:	d002      	beq.n	8004dde <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dee:	d903      	bls.n	8004df8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
 8004df6:	e002      	b.n	8004dfe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6851      	ldr	r1, [r2, #4]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6912      	ldr	r2, [r2, #16]
 8004e10:	4311      	orrs	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6952      	ldr	r2, [r2, #20]
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6992      	ldr	r2, [r2, #24]
 8004e1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004e20:	4311      	orrs	r1, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	69d2      	ldr	r2, [r2, #28]
 8004e26:	4311      	orrs	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6a12      	ldr	r2, [r2, #32]
 8004e2c:	4311      	orrs	r1, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e32:	430a      	orrs	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6992      	ldr	r2, [r2, #24]
 8004e3e:	0c12      	lsrs	r2, r2, #16
 8004e40:	f002 0104 	and.w	r1, r2, #4
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e4e:	4311      	orrs	r1, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	68d2      	ldr	r2, [r2, #12]
 8004e54:	4311      	orrs	r1, r2
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e043      	b.n	8004f0e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f004 f820 	bl	8008ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f82d 	bl	8004f18 <UART_SetConfig>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e022      	b.n	8004f0e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fb5f 	bl	8005594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	6852      	ldr	r2, [r2, #4]
 8004ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fbe6 	bl	80056d8 <UART_CheckIdleState>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004f26:	2310      	movs	r3, #16
 8004f28:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	4baa      	ldr	r3, [pc, #680]	; (8005208 <UART_SetConfig+0x2f0>)
 8004f5e:	400b      	ands	r3, r1
 8004f60:	69f9      	ldr	r1, [r7, #28]
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	6852      	ldr	r2, [r2, #4]
 8004f70:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68d2      	ldr	r2, [r2, #12]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4aa1      	ldr	r2, [pc, #644]	; (800520c <UART_SetConfig+0x2f4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	6892      	ldr	r2, [r2, #8]
 8004fa0:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a98      	ldr	r2, [pc, #608]	; (8005210 <UART_SetConfig+0x2f8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d121      	bne.n	8004ff8 <UART_SetConfig+0xe0>
 8004fb4:	4b97      	ldr	r3, [pc, #604]	; (8005214 <UART_SetConfig+0x2fc>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d816      	bhi.n	8004ff0 <UART_SetConfig+0xd8>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0xb0>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fe5 	.word	0x08004fe5
 8004fd0:	08004fdf 	.word	0x08004fdf
 8004fd4:	08004feb 	.word	0x08004feb
 8004fd8:	2301      	movs	r3, #1
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e0e4      	b.n	80051a8 <UART_SetConfig+0x290>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	76fb      	strb	r3, [r7, #27]
 8004fe2:	e0e1      	b.n	80051a8 <UART_SetConfig+0x290>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	e0de      	b.n	80051a8 <UART_SetConfig+0x290>
 8004fea:	2308      	movs	r3, #8
 8004fec:	76fb      	strb	r3, [r7, #27]
 8004fee:	e0db      	b.n	80051a8 <UART_SetConfig+0x290>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	76fb      	strb	r3, [r7, #27]
 8004ff4:	bf00      	nop
 8004ff6:	e0d7      	b.n	80051a8 <UART_SetConfig+0x290>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a86      	ldr	r2, [pc, #536]	; (8005218 <UART_SetConfig+0x300>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d134      	bne.n	800506c <UART_SetConfig+0x154>
 8005002:	4b84      	ldr	r3, [pc, #528]	; (8005214 <UART_SetConfig+0x2fc>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d829      	bhi.n	8005064 <UART_SetConfig+0x14c>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x100>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800504d 	.word	0x0800504d
 800501c:	08005065 	.word	0x08005065
 8005020:	08005065 	.word	0x08005065
 8005024:	08005065 	.word	0x08005065
 8005028:	08005059 	.word	0x08005059
 800502c:	08005065 	.word	0x08005065
 8005030:	08005065 	.word	0x08005065
 8005034:	08005065 	.word	0x08005065
 8005038:	08005053 	.word	0x08005053
 800503c:	08005065 	.word	0x08005065
 8005040:	08005065 	.word	0x08005065
 8005044:	08005065 	.word	0x08005065
 8005048:	0800505f 	.word	0x0800505f
 800504c:	2300      	movs	r3, #0
 800504e:	76fb      	strb	r3, [r7, #27]
 8005050:	e0aa      	b.n	80051a8 <UART_SetConfig+0x290>
 8005052:	2302      	movs	r3, #2
 8005054:	76fb      	strb	r3, [r7, #27]
 8005056:	e0a7      	b.n	80051a8 <UART_SetConfig+0x290>
 8005058:	2304      	movs	r3, #4
 800505a:	76fb      	strb	r3, [r7, #27]
 800505c:	e0a4      	b.n	80051a8 <UART_SetConfig+0x290>
 800505e:	2308      	movs	r3, #8
 8005060:	76fb      	strb	r3, [r7, #27]
 8005062:	e0a1      	b.n	80051a8 <UART_SetConfig+0x290>
 8005064:	2310      	movs	r3, #16
 8005066:	76fb      	strb	r3, [r7, #27]
 8005068:	bf00      	nop
 800506a:	e09d      	b.n	80051a8 <UART_SetConfig+0x290>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a6a      	ldr	r2, [pc, #424]	; (800521c <UART_SetConfig+0x304>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d120      	bne.n	80050b8 <UART_SetConfig+0x1a0>
 8005076:	4b67      	ldr	r3, [pc, #412]	; (8005214 <UART_SetConfig+0x2fc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005080:	2b10      	cmp	r3, #16
 8005082:	d00f      	beq.n	80050a4 <UART_SetConfig+0x18c>
 8005084:	2b10      	cmp	r3, #16
 8005086:	d802      	bhi.n	800508e <UART_SetConfig+0x176>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <UART_SetConfig+0x180>
 800508c:	e010      	b.n	80050b0 <UART_SetConfig+0x198>
 800508e:	2b20      	cmp	r3, #32
 8005090:	d005      	beq.n	800509e <UART_SetConfig+0x186>
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	d009      	beq.n	80050aa <UART_SetConfig+0x192>
 8005096:	e00b      	b.n	80050b0 <UART_SetConfig+0x198>
 8005098:	2300      	movs	r3, #0
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e084      	b.n	80051a8 <UART_SetConfig+0x290>
 800509e:	2302      	movs	r3, #2
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e081      	b.n	80051a8 <UART_SetConfig+0x290>
 80050a4:	2304      	movs	r3, #4
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e07e      	b.n	80051a8 <UART_SetConfig+0x290>
 80050aa:	2308      	movs	r3, #8
 80050ac:	76fb      	strb	r3, [r7, #27]
 80050ae:	e07b      	b.n	80051a8 <UART_SetConfig+0x290>
 80050b0:	2310      	movs	r3, #16
 80050b2:	76fb      	strb	r3, [r7, #27]
 80050b4:	bf00      	nop
 80050b6:	e077      	b.n	80051a8 <UART_SetConfig+0x290>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a58      	ldr	r2, [pc, #352]	; (8005220 <UART_SetConfig+0x308>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d120      	bne.n	8005104 <UART_SetConfig+0x1ec>
 80050c2:	4b54      	ldr	r3, [pc, #336]	; (8005214 <UART_SetConfig+0x2fc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d00f      	beq.n	80050f0 <UART_SetConfig+0x1d8>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d802      	bhi.n	80050da <UART_SetConfig+0x1c2>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <UART_SetConfig+0x1cc>
 80050d8:	e010      	b.n	80050fc <UART_SetConfig+0x1e4>
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d005      	beq.n	80050ea <UART_SetConfig+0x1d2>
 80050de:	2bc0      	cmp	r3, #192	; 0xc0
 80050e0:	d009      	beq.n	80050f6 <UART_SetConfig+0x1de>
 80050e2:	e00b      	b.n	80050fc <UART_SetConfig+0x1e4>
 80050e4:	2300      	movs	r3, #0
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	e05e      	b.n	80051a8 <UART_SetConfig+0x290>
 80050ea:	2302      	movs	r3, #2
 80050ec:	76fb      	strb	r3, [r7, #27]
 80050ee:	e05b      	b.n	80051a8 <UART_SetConfig+0x290>
 80050f0:	2304      	movs	r3, #4
 80050f2:	76fb      	strb	r3, [r7, #27]
 80050f4:	e058      	b.n	80051a8 <UART_SetConfig+0x290>
 80050f6:	2308      	movs	r3, #8
 80050f8:	76fb      	strb	r3, [r7, #27]
 80050fa:	e055      	b.n	80051a8 <UART_SetConfig+0x290>
 80050fc:	2310      	movs	r3, #16
 80050fe:	76fb      	strb	r3, [r7, #27]
 8005100:	bf00      	nop
 8005102:	e051      	b.n	80051a8 <UART_SetConfig+0x290>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a46      	ldr	r2, [pc, #280]	; (8005224 <UART_SetConfig+0x30c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d124      	bne.n	8005158 <UART_SetConfig+0x240>
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <UART_SetConfig+0x2fc>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d012      	beq.n	8005144 <UART_SetConfig+0x22c>
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d802      	bhi.n	800512a <UART_SetConfig+0x212>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <UART_SetConfig+0x220>
 8005128:	e012      	b.n	8005150 <UART_SetConfig+0x238>
 800512a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512e:	d006      	beq.n	800513e <UART_SetConfig+0x226>
 8005130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005134:	d009      	beq.n	800514a <UART_SetConfig+0x232>
 8005136:	e00b      	b.n	8005150 <UART_SetConfig+0x238>
 8005138:	2300      	movs	r3, #0
 800513a:	76fb      	strb	r3, [r7, #27]
 800513c:	e034      	b.n	80051a8 <UART_SetConfig+0x290>
 800513e:	2302      	movs	r3, #2
 8005140:	76fb      	strb	r3, [r7, #27]
 8005142:	e031      	b.n	80051a8 <UART_SetConfig+0x290>
 8005144:	2304      	movs	r3, #4
 8005146:	76fb      	strb	r3, [r7, #27]
 8005148:	e02e      	b.n	80051a8 <UART_SetConfig+0x290>
 800514a:	2308      	movs	r3, #8
 800514c:	76fb      	strb	r3, [r7, #27]
 800514e:	e02b      	b.n	80051a8 <UART_SetConfig+0x290>
 8005150:	2310      	movs	r3, #16
 8005152:	76fb      	strb	r3, [r7, #27]
 8005154:	bf00      	nop
 8005156:	e027      	b.n	80051a8 <UART_SetConfig+0x290>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2b      	ldr	r2, [pc, #172]	; (800520c <UART_SetConfig+0x2f4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d123      	bne.n	80051aa <UART_SetConfig+0x292>
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <UART_SetConfig+0x2fc>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d012      	beq.n	8005198 <UART_SetConfig+0x280>
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005176:	d802      	bhi.n	800517e <UART_SetConfig+0x266>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <UART_SetConfig+0x274>
 800517c:	e012      	b.n	80051a4 <UART_SetConfig+0x28c>
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d006      	beq.n	8005192 <UART_SetConfig+0x27a>
 8005184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005188:	d009      	beq.n	800519e <UART_SetConfig+0x286>
 800518a:	e00b      	b.n	80051a4 <UART_SetConfig+0x28c>
 800518c:	2300      	movs	r3, #0
 800518e:	76fb      	strb	r3, [r7, #27]
 8005190:	e00a      	b.n	80051a8 <UART_SetConfig+0x290>
 8005192:	2302      	movs	r3, #2
 8005194:	76fb      	strb	r3, [r7, #27]
 8005196:	e007      	b.n	80051a8 <UART_SetConfig+0x290>
 8005198:	2304      	movs	r3, #4
 800519a:	76fb      	strb	r3, [r7, #27]
 800519c:	e004      	b.n	80051a8 <UART_SetConfig+0x290>
 800519e:	2308      	movs	r3, #8
 80051a0:	76fb      	strb	r3, [r7, #27]
 80051a2:	e001      	b.n	80051a8 <UART_SetConfig+0x290>
 80051a4:	2310      	movs	r3, #16
 80051a6:	76fb      	strb	r3, [r7, #27]
 80051a8:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <UART_SetConfig+0x2f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	f040 80ee 	bne.w	8005392 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051b6:	7efb      	ldrb	r3, [r7, #27]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d837      	bhi.n	800522c <UART_SetConfig+0x314>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x2ac>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	0800522d 	.word	0x0800522d
 80051d4:	080051f7 	.word	0x080051f7
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	0800522d 	.word	0x0800522d
 80051e0:	0800522d 	.word	0x0800522d
 80051e4:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe f986 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80051ec:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80051ee:	e020      	b.n	8005232 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <UART_SetConfig+0x310>)
 80051f2:	60fb      	str	r3, [r7, #12]
#endif
        break;
 80051f4:	e01d      	b.n	8005232 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fe f8d7 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80051fa:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80051fc:	e019      	b.n	8005232 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8005204:	e015      	b.n	8005232 <UART_SetConfig+0x31a>
 8005206:	bf00      	nop
 8005208:	efff69f3 	.word	0xefff69f3
 800520c:	40008000 	.word	0x40008000
 8005210:	40013800 	.word	0x40013800
 8005214:	40021000 	.word	0x40021000
 8005218:	40004400 	.word	0x40004400
 800521c:	40004800 	.word	0x40004800
 8005220:	40004c00 	.word	0x40004c00
 8005224:	40005000 	.word	0x40005000
 8005228:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	74fb      	strb	r3, [r7, #19]
        break;
 8005230:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 819e 	beq.w	8005576 <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	429a      	cmp	r2, r3
 8005248:	d805      	bhi.n	8005256 <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d202      	bcs.n	800525c <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	74fb      	strb	r3, [r7, #19]
 800525a:	e18c      	b.n	8005576 <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 800525c:	7efb      	ldrb	r3, [r7, #27]
 800525e:	2b08      	cmp	r3, #8
 8005260:	f200 8084 	bhi.w	800536c <UART_SetConfig+0x454>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x354>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	08005291 	.word	0x08005291
 8005270:	0800536d 	.word	0x0800536d
 8005274:	080052d1 	.word	0x080052d1
 8005278:	0800536d 	.word	0x0800536d
 800527c:	08005305 	.word	0x08005305
 8005280:	0800536d 	.word	0x0800536d
 8005284:	0800536d 	.word	0x0800536d
 8005288:	0800536d 	.word	0x0800536d
 800528c:	08005343 	.word	0x08005343
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005290:	f7fe f932 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8005294:	4603      	mov	r3, r0
 8005296:	f04f 0400 	mov.w	r4, #0
 800529a:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800529e:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80052a2:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	eb18 0003 	adds.w	r0, r8, r3
 80052b4:	eb49 0104 	adc.w	r1, r9, r4
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	461a      	mov	r2, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	f7fa ff80 	bl	80001c8 <__aeabi_uldivmod>
 80052c8:	4603      	mov	r3, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	617b      	str	r3, [r7, #20]
#endif
            break;
 80052ce:	e050      	b.n	8005372 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	f04f 0400 	mov.w	r4, #0
 80052da:	49ad      	ldr	r1, [pc, #692]	; (8005590 <UART_SetConfig+0x678>)
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	eb13 0801 	adds.w	r8, r3, r1
 80052e4:	eb44 0902 	adc.w	r9, r4, r2
 80052e8:	4640      	mov	r0, r8
 80052ea:	4649      	mov	r1, r9
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	461a      	mov	r2, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	f7fa ff66 	bl	80001c8 <__aeabi_uldivmod>
 80052fc:	4603      	mov	r3, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005302:	e036      	b.n	8005372 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005304:	f7fe f850 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8005308:	4603      	mov	r3, r0
 800530a:	461a      	mov	r2, r3
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	021d      	lsls	r5, r3, #8
 8005312:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005316:	0214      	lsls	r4, r2, #8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	18a0      	adds	r0, r4, r2
 8005326:	eb45 0103 	adc.w	r1, r5, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f04f 0400 	mov.w	r4, #0
 8005332:	461a      	mov	r2, r3
 8005334:	4623      	mov	r3, r4
 8005336:	f7fa ff47 	bl	80001c8 <__aeabi_uldivmod>
 800533a:	4603      	mov	r3, r0
 800533c:	460c      	mov	r4, r1
 800533e:	617b      	str	r3, [r7, #20]
#endif
            break;
 8005340:	e017      	b.n	8005372 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	f04f 0400 	mov.w	r4, #0
 800534c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005350:	f144 0100 	adc.w	r1, r4, #0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f04f 0400 	mov.w	r4, #0
 800535c:	461a      	mov	r2, r3
 800535e:	4623      	mov	r3, r4
 8005360:	f7fa ff32 	bl	80001c8 <__aeabi_uldivmod>
 8005364:	4603      	mov	r3, r0
 8005366:	460c      	mov	r4, r1
 8005368:	617b      	str	r3, [r7, #20]
#endif
            break;
 800536a:	e002      	b.n	8005372 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	74fb      	strb	r3, [r7, #19]
            break;
 8005370:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005378:	d308      	bcc.n	800538c <UART_SetConfig+0x474>
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005380:	d204      	bcs.n	800538c <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e0f4      	b.n	8005576 <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	74fb      	strb	r3, [r7, #19]
 8005390:	e0f1      	b.n	8005576 <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539a:	d17e      	bne.n	800549a <UART_SetConfig+0x582>
  {
    switch (clocksource)
 800539c:	7efb      	ldrb	r3, [r7, #27]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d85b      	bhi.n	800545a <UART_SetConfig+0x542>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0x490>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053eb 	.word	0x080053eb
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800545b 	.word	0x0800545b
 80053b8:	08005425 	.word	0x08005425
 80053bc:	0800545b 	.word	0x0800545b
 80053c0:	0800545b 	.word	0x0800545b
 80053c4:	0800545b 	.word	0x0800545b
 80053c8:	08005443 	.word	0x08005443
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80053cc:	f7fe f894 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80053d0:	4603      	mov	r3, r0
 80053d2:	005a      	lsls	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	617b      	str	r3, [r7, #20]
#endif
        break;
 80053e8:	e03a      	b.n	8005460 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80053ea:	f7fe f89b 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 80053ee:	4603      	mov	r3, r0
 80053f0:	005a      	lsls	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005406:	e02b      	b.n	8005460 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005412:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6852      	ldr	r2, [r2, #4]
 800541a:	fbb3 f3f2 	udiv	r3, r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005422:	e01d      	b.n	8005460 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005424:	f7fd ffc0 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8005428:	4603      	mov	r3, r0
 800542a:	005a      	lsls	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	441a      	add	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	b29b      	uxth	r3, r3
 800543e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005440:	e00e      	b.n	8005460 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	b29b      	uxth	r3, r3
 8005456:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005458:	e002      	b.n	8005460 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	74fb      	strb	r3, [r7, #19]
        break;
 800545e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d916      	bls.n	8005494 <UART_SetConfig+0x57c>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d212      	bcs.n	8005494 <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f023 030f 	bic.w	r3, r3, #15
 8005476:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	b29a      	uxth	r2, r3
 8005484:	897b      	ldrh	r3, [r7, #10]
 8005486:	4313      	orrs	r3, r2
 8005488:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	897a      	ldrh	r2, [r7, #10]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	e070      	b.n	8005576 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	74fb      	strb	r3, [r7, #19]
 8005498:	e06d      	b.n	8005576 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 800549a:	7efb      	ldrb	r3, [r7, #27]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d859      	bhi.n	8005554 <UART_SetConfig+0x63c>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x590>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	08005505 	.word	0x08005505
 80054b4:	08005555 	.word	0x08005555
 80054b8:	08005521 	.word	0x08005521
 80054bc:	08005555 	.word	0x08005555
 80054c0:	08005555 	.word	0x08005555
 80054c4:	08005555 	.word	0x08005555
 80054c8:	0800553d 	.word	0x0800553d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80054cc:	f7fe f814 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80054e6:	e038      	b.n	800555a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80054e8:	f7fe f81c 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	b29b      	uxth	r3, r3
 8005500:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005502:	e02a      	b.n	800555a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800550e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6852      	ldr	r2, [r2, #4]
 8005516:	fbb3 f3f2 	udiv	r3, r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800551e:	e01c      	b.n	800555a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005520:	f7fd ff42 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	441a      	add	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	617b      	str	r3, [r7, #20]
#endif
        break;
 800553a:	e00e      	b.n	800555a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	617b      	str	r3, [r7, #20]
#endif
        break;
 8005552:	e002      	b.n	800555a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	74fb      	strb	r3, [r7, #19]
        break;
 8005558:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b0f      	cmp	r3, #15
 800555e:	d908      	bls.n	8005572 <UART_SetConfig+0x65a>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005566:	d204      	bcs.n	8005572 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	e001      	b.n	8005576 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005582:	7cfb      	ldrb	r3, [r7, #19]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800558e:	bf00      	nop
 8005590:	f4240000 	.word	0xf4240000

08005594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	6852      	ldr	r2, [r2, #4]
 80055b2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	6852      	ldr	r2, [r2, #4]
 80055d4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	6852      	ldr	r2, [r2, #4]
 80055f6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	6852      	ldr	r2, [r2, #4]
 8005618:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	6892      	ldr	r2, [r2, #8]
 800563a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6892      	ldr	r2, [r2, #8]
 800565c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01a      	beq.n	80056aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	6852      	ldr	r2, [r2, #4]
 800567e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005692:	d10a      	bne.n	80056aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	6852      	ldr	r2, [r2, #4]
 800569e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	6852      	ldr	r2, [r2, #4]
 80056c0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80056ea:	f7fa ff47 	bl	800057c <HAL_GetTick>
 80056ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d10e      	bne.n	800571c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f82c 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e022      	b.n	8005762 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d10e      	bne.n	8005748 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f816 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e00c      	b.n	8005762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	e02c      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d028      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0x30>
 800578a:	f7fa fef7 	bl	800057c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	429a      	cmp	r2, r3
 8005798:	d91d      	bls.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057a8:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	6892      	ldr	r2, [r2, #8]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e00f      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	401a      	ands	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d0c3      	beq.n	800577c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057fe:	b084      	sub	sp, #16
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	f107 0014 	add.w	r0, r7, #20
 800580c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b01      	cmp	r3, #1
 8005814:	d120      	bne.n	8005858 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800582a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800583e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    (void)USB_CoreReset(USBx);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f927 	bl	8005aa4 <USB_CoreReset>
 8005856:	e00c      	b.n	8005872 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    (void)USB_CoreReset(USBx);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f91d 	bl	8005aa4 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587e:	b004      	add	sp, #16
 8005880:	4770      	bx	lr

08005882 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f043 0201 	orr.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f023 0201 	bic.w	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d106      	bne.n	80058f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e00b      	b.n	800590a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	e001      	b.n	800590a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e003      	b.n	8005912 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800590a:	2032      	movs	r0, #50	; 0x32
 800590c:	f7fa fe42 	bl	8000594 <HAL_Delay>

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	019b      	lsls	r3, r3, #6
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <USB_FlushTxFifo+0x48>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d0f0      	beq.n	8005936 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	00030d40 	.word	0x00030d40

08005968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2210      	movs	r2, #16
 8005978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <USB_FlushRxFifo+0x40>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e006      	b.n	800599a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d0f0      	beq.n	800597a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	00030d40 	.word	0x00030d40

080059ac <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4611      	mov	r1, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	460b      	mov	r3, r1
 80059bc:	71fb      	strb	r3, [r7, #7]
 80059be:	4613      	mov	r3, r2
 80059c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80059ca:	88bb      	ldrh	r3, [r7, #4]
 80059cc:	3303      	adds	r3, #3
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e00f      	b.n	80059f8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	031a      	lsls	r2, r3, #12
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e4:	461a      	mov	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6013      	str	r3, [r2, #0]
    pSrc++;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3304      	adds	r3, #4
 80059f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	3301      	adds	r3, #1
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d3eb      	bcc.n	80059d8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3724      	adds	r7, #36	; 0x24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b089      	sub	sp, #36	; 0x24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	3303      	adds	r3, #3
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e00b      	b.n	8005a4a <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3304      	adds	r3, #4
 8005a42:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3301      	adds	r3, #1
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3ef      	bcc.n	8005a32 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a52:	69fb      	ldr	r3, [r7, #28]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3724      	adds	r7, #36	; 0x24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0301 	and.w	r3, r3, #1
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <USB_CoreReset+0x64>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e01b      	b.n	8005afa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	daf2      	bge.n	8005ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <USB_CoreReset+0x64>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e006      	b.n	8005afa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d0f0      	beq.n	8005ada <USB_CoreReset+0x36>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	00030d40 	.word	0x00030d40

08005b0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	f107 001c 	add.w	r0, r7, #28
 8005b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the FS/LS support mode only */
  if ((cfg.speed == USB_OTG_SPEED_FULL) && (USBx != USB_OTG_FS))
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d10f      	bne.n	8005b6c <USB_HostInit+0x60>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b52:	d00b      	beq.n	8005b6c <USB_HostInit+0x60>
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e00a      	b.n	8005b82 <USB_HostInit+0x76>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b72:	461a      	mov	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005b82:	2110      	movs	r1, #16
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fec9 	bl	800591c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff feec 	bl	8005968 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e015      	b.n	8005bc2 <USB_HostInit+0xb6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d8e5      	bhi.n	8005b96 <USB_HostInit+0x8a>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005bca:	2101      	movs	r1, #1
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8ab 	bl	8005d28 <USB_DriveVbus>

  HAL_Delay(200U);
 8005bd2:	20c8      	movs	r0, #200	; 0xc8
 8005bd4:	f7fa fcde 	bl	8000594 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	615a      	str	r2, [r3, #20]

  if (USBx == USB_OTG_FS)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bec:	d10a      	bne.n	8005c04 <USB_HostInit+0xf8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a13      	ldr	r2, [pc, #76]	; (8005c44 <USB_HostInit+0x138>)
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <USB_HostInit+0x13c>)
 8005bfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c02:	e00a      	b.n	8005c1a <USB_HostInit+0x10e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a0f      	ldr	r2, [pc, #60]	; (8005c4c <USB_HostInit+0x140>)
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a0e      	ldr	r2, [pc, #56]	; (8005c50 <USB_HostInit+0x144>)
 8005c16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f043 0210 	orr.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <USB_HostInit+0x148>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c3e:	b004      	add	sp, #16
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	00600080 	.word	0x00600080
 8005c48:	004000e0 	.word	0x004000e0
 8005c4c:	01000200 	.word	0x01000200
 8005c50:	00e00300 	.word	0x00e00300
 8005c54:	a3200008 	.word	0xa3200008

08005c58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 0303 	bic.w	r3, r3, #3
 8005c7c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c84:	4619      	mov	r1, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	4313      	orrs	r3, r2
 8005c96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005caa:	6053      	str	r3, [r2, #4]
 8005cac:	e009      	b.n	8005cc2 <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d106      	bne.n	8005cc2 <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005cc0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d02:	2064      	movs	r0, #100	; 0x64
 8005d04:	f7fa fc46 	bl	8000594 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d16:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d18:	200a      	movs	r0, #10
 8005d1a:	f7fa fc3b 	bl	8000594 <HAL_Delay>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <USB_DriveVbus+0x46>
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d6c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d78:	d10a      	bne.n	8005d90 <USB_DriveVbus+0x68>
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d86:	461a      	mov	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	0c5b      	lsrs	r3, r3, #17
 8005dbc:	f003 0303 	and.w	r3, r3, #3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	b29b      	uxth	r3, r3
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	70fb      	strb	r3, [r7, #3]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70bb      	strb	r3, [r7, #2]
 8005e06:	4613      	mov	r3, r2
 8005e08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d86a      	bhi.n	8005f04 <USB_HC_Init+0x114>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USB_HC_Init+0x44>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005ec5 	.word	0x08005ec5
 8005e3c:	08005e45 	.word	0x08005e45
 8005e40:	08005e85 	.word	0x08005e85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	461a      	mov	r2, r3
 8005e52:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	da54      	bge.n	8005f0a <USB_HC_Init+0x11a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e80:	60cb      	str	r3, [r1, #12]
      }
      break;
 8005e82:	e042      	b.n	8005f0a <USB_HC_Init+0x11a>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da36      	bge.n	8005f0e <USB_HC_Init+0x11e>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eac:	4619      	mov	r1, r3
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	60cb      	str	r3, [r1, #12]
      }

      break;
 8005ec2:	e024      	b.n	8005f0e <USB_HC_Init+0x11e>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f240 2325 	movw	r3, #549	; 0x225
 8005ed6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ed8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da18      	bge.n	8005f12 <USB_HC_Init+0x122>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	4619      	mov	r1, r3
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f00:	60cb      	str	r3, [r1, #12]
      }
      break;
 8005f02:	e006      	b.n	8005f12 <USB_HC_Init+0x122>

    default:
      ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
      break;
 8005f08:	e004      	b.n	8005f14 <USB_HC_Init+0x124>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e002      	b.n	8005f14 <USB_HC_Init+0x124>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e000      	b.n	8005f14 <USB_HC_Init+0x124>
      break;
 8005f12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	da03      	bge.n	8005f50 <USB_HC_Init+0x160>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	e001      	b.n	8005f54 <USB_HC_Init+0x164>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d103      	bne.n	8005f64 <USB_HC_Init+0x174>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e001      	b.n	8005f68 <USB_HC_Init+0x178>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	4619      	mov	r1, r3
 8005f76:	787b      	ldrb	r3, [r7, #1]
 8005f78:	059b      	lsls	r3, r3, #22
 8005f7a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f7e:	78bb      	ldrb	r3, [r7, #2]
 8005f80:	02db      	lsls	r3, r3, #11
 8005f82:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f86:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f8c:	049b      	lsls	r3, r3, #18
 8005f8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fa4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005fa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d110      	bne.n	8005fd0 <USB_HC_Init+0x1e0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fba:	4619      	mov	r1, r3
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fce:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop

08005fe0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ff8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	8912      	ldrh	r2, [r2, #8]
 800600a:	4413      	add	r3, r2
 800600c:	3b01      	subs	r3, #1
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	8912      	ldrh	r2, [r2, #8]
 8006012:	fbb3 f3f2 	udiv	r3, r3, r2
 8006016:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006018:	8bfa      	ldrh	r2, [r7, #30]
 800601a:	8a7b      	ldrh	r3, [r7, #18]
 800601c:	429a      	cmp	r2, r3
 800601e:	d90b      	bls.n	8006038 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006020:	8a7b      	ldrh	r3, [r7, #18]
 8006022:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006024:	8bfb      	ldrh	r3, [r7, #30]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	8912      	ldrh	r2, [r2, #8]
 800602a:	fb02 f203 	mul.w	r2, r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	611a      	str	r2, [r3, #16]
 8006032:	e001      	b.n	8006038 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006034:	2301      	movs	r3, #1
 8006036:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006040:	8bfb      	ldrh	r3, [r7, #30]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	8912      	ldrh	r2, [r2, #8]
 8006046:	fb02 f203 	mul.w	r2, r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	4618      	mov	r0, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006064:	8bfb      	ldrh	r3, [r7, #30]
 8006066:	04d9      	lsls	r1, r3, #19
 8006068:	4b5c      	ldr	r3, [pc, #368]	; (80061dc <USB_HC_StartXfer+0x1fc>)
 800606a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800606c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	7a9b      	ldrb	r3, [r3, #10]
 8006072:	075b      	lsls	r3, r3, #29
 8006074:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006078:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800607a:	6103      	str	r3, [r0, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	4619      	mov	r1, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060b4:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c2:	4619      	mov	r1, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	7c7b      	ldrb	r3, [r7, #17]
 80060d4:	075b      	lsls	r3, r3, #29
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <USB_HC_StartXfer+0x200>)
 80060ea:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060ec:	4b3c      	ldr	r3, [pc, #240]	; (80061e0 <USB_HC_StartXfer+0x200>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060f4:	4a3a      	ldr	r2, [pc, #232]	; (80061e0 <USB_HC_StartXfer+0x200>)
 80060f6:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d006      	beq.n	800610e <USB_HC_StartXfer+0x12e>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006100:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <USB_HC_StartXfer+0x200>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006108:	4a35      	ldr	r2, [pc, #212]	; (80061e0 <USB_HC_StartXfer+0x200>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e005      	b.n	800611a <USB_HC_StartXfer+0x13a>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800610e:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <USB_HC_StartXfer+0x200>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006116:	4a32      	ldr	r2, [pc, #200]	; (80061e0 <USB_HC_StartXfer+0x200>)
 8006118:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <USB_HC_StartXfer+0x200>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006122:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <USB_HC_StartXfer+0x200>)
 8006124:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	461a      	mov	r2, r3
 8006134:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <USB_HC_StartXfer+0x200>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	78db      	ldrb	r3, [r3, #3]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d147      	bne.n	80061d2 <USB_HC_StartXfer+0x1f2>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d043      	beq.n	80061d2 <USB_HC_StartXfer+0x1f2>
    {
      switch (hc->ep_type)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	79db      	ldrb	r3, [r3, #7]
 800614e:	2b03      	cmp	r3, #3
 8006150:	d830      	bhi.n	80061b4 <USB_HC_StartXfer+0x1d4>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <USB_HC_StartXfer+0x178>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006169 	.word	0x08006169
 800615c:	0800618d 	.word	0x0800618d
 8006160:	08006169 	.word	0x08006169
 8006164:	0800618d 	.word	0x0800618d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	3303      	adds	r3, #3
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006172:	89fa      	ldrh	r2, [r7, #14]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	b29b      	uxth	r3, r3
 800617a:	429a      	cmp	r2, r3
 800617c:	d91c      	bls.n	80061b8 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	619a      	str	r2, [r3, #24]
          }
          break;
 800618a:	e015      	b.n	80061b8 <USB_HC_StartXfer+0x1d8>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	3303      	adds	r3, #3
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006196:	89fa      	ldrh	r2, [r7, #14]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d90a      	bls.n	80061bc <USB_HC_StartXfer+0x1dc>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
          }
          break;
 80061b2:	e003      	b.n	80061bc <USB_HC_StartXfer+0x1dc>

        default:
          break;
 80061b4:	bf00      	nop
 80061b6:	e002      	b.n	80061be <USB_HC_StartXfer+0x1de>
          break;
 80061b8:	bf00      	nop
 80061ba:	e000      	b.n	80061be <USB_HC_StartXfer+0x1de>
          break;
 80061bc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785a      	ldrb	r2, [r3, #1]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fbed 	bl	80059ac <USB_WritePacket>
    }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3720      	adds	r7, #32
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	1ff80000 	.word	0x1ff80000
 80061e0:	200000a4 	.word	0x200000a4

080061e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	b29b      	uxth	r3, r3
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0c9b      	lsrs	r3, r3, #18
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <USB_HC_Halt+0x3a>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d171      	bne.n	8006324 <USB_HC_Halt+0x11e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	4619      	mov	r1, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006260:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d146      	bne.n	80062fc <USB_HC_Halt+0xf6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	4619      	mov	r1, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800628e:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629c:	4619      	mov	r1, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	4619      	mov	r1, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062d2:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	3301      	adds	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e0:	d81e      	bhi.n	8006320 <USB_HC_Halt+0x11a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f8:	d0ec      	beq.n	80062d4 <USB_HC_Halt+0xce>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062fa:	e086      	b.n	800640a <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4413      	add	r3, r2
 8006304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006308:	4619      	mov	r1, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800631c:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800631e:	e074      	b.n	800640a <USB_HC_Halt+0x204>
          break;
 8006320:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006322:	e072      	b.n	800640a <USB_HC_Halt+0x204>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	4619      	mov	r1, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006344:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d146      	bne.n	80063e4 <USB_HC_Halt+0x1de>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	4619      	mov	r1, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006376:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006384:	4619      	mov	r1, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006398:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	4619      	mov	r1, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ba:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	3301      	adds	r3, #1
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c8:	d81e      	bhi.n	8006408 <USB_HC_Halt+0x202>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e0:	d0ec      	beq.n	80063bc <USB_HC_Halt+0x1b6>
 80063e2:	e012      	b.n	800640a <USB_HC_Halt+0x204>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f0:	4619      	mov	r1, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006404:	600b      	str	r3, [r1, #0]
 8006406:	e000      	b.n	800640a <USB_HC_Halt+0x204>
          break;
 8006408:	bf00      	nop
    }
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fa3b 	bl	80058a4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800642e:	2110      	movs	r1, #16
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fa73 	bl	800591c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff fa96 	bl	8005968 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	e01f      	b.n	8006482 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006458:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006460:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006468:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	461a      	mov	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3301      	adds	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b0f      	cmp	r3, #15
 8006486:	d9dc      	bls.n	8006442 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006488:	2300      	movs	r3, #0
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e034      	b.n	80064f8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	461a      	mov	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3301      	adds	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d4:	d80c      	bhi.n	80064f0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d0ec      	beq.n	80064c8 <USB_StopHost+0xb0>
 80064ee:	e000      	b.n	80064f2 <USB_StopHost+0xda>
        break;
 80064f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3301      	adds	r3, #1
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b0f      	cmp	r3, #15
 80064fc:	d9c7      	bls.n	800648e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006504:	461a      	mov	r2, r3
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff f9b4 	bl	8005882 <USB_EnableGlobalInt>

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b089      	sub	sp, #36	; 0x24
 8006528:	af04      	add	r7, sp, #16
 800652a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800652c:	2302      	movs	r3, #2
 800652e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006530:	2301      	movs	r3, #1
 8006532:	2202      	movs	r2, #2
 8006534:	2102      	movs	r1, #2
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fc3a 	bl	8006db0 <USBH_FindInterface>
 800653c:	4603      	mov	r3, r0
 800653e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2bff      	cmp	r3, #255	; 0xff
 8006544:	f000 812a 	beq.w	800679c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc13 	bl	8006d78 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006558:	2050      	movs	r0, #80	; 0x50
 800655a:	f003 f89b 	bl	8009694 <malloc>
 800655e:	4603      	mov	r3, r0
 8006560:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	211a      	movs	r1, #26
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4413      	add	r3, r2
 8006578:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b25b      	sxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	da15      	bge.n	80065b0 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	211a      	movs	r1, #26
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	4413      	add	r3, r2
 8006590:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	211a      	movs	r1, #26
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065aa:	881a      	ldrh	r2, [r3, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fd21 	bl	8007ffe <USBH_AllocPipe>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	7819      	ldrb	r1, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7858      	ldrb	r0, [r3, #1]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	8952      	ldrh	r2, [r2, #10]
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	2203      	movs	r2, #3
 80065e0:	9201      	str	r2, [sp, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4623      	mov	r3, r4
 80065e6:	4602      	mov	r2, r0
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fcd9 	bl	8007fa0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2200      	movs	r2, #0
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 ffa4 	bl	8009544 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80065fc:	2300      	movs	r3, #0
 80065fe:	2200      	movs	r2, #0
 8006600:	210a      	movs	r1, #10
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fbd4 	bl	8006db0 <USBH_FindInterface>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2bff      	cmp	r3, #255	; 0xff
 8006610:	f000 80c4 	beq.w	800679c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	211a      	movs	r1, #26
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	4413      	add	r3, r2
 8006620:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b25b      	sxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	da16      	bge.n	800665a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	211a      	movs	r1, #26
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	4413      	add	r3, r2
 8006638:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	211a      	movs	r1, #26
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006652:	881a      	ldrh	r2, [r3, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	835a      	strh	r2, [r3, #26]
 8006658:	e015      	b.n	8006686 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	211a      	movs	r1, #26
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	4413      	add	r3, r2
 8006666:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	211a      	movs	r1, #26
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006680:	881a      	ldrh	r2, [r3, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	211a      	movs	r1, #26
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	4413      	add	r3, r2
 8006692:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b25b      	sxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	da16      	bge.n	80066cc <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	211a      	movs	r1, #26
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	211a      	movs	r1, #26
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	4413      	add	r3, r2
 80066c0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	835a      	strh	r2, [r3, #26]
 80066ca:	e015      	b.n	80066f8 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	211a      	movs	r1, #26
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	211a      	movs	r1, #26
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80066f2:	881a      	ldrh	r2, [r3, #0]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	7b9b      	ldrb	r3, [r3, #14]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fc7d 	bl	8007ffe <USBH_AllocPipe>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	7bdb      	ldrb	r3, [r3, #15]
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fc73 	bl	8007ffe <USBH_AllocPipe>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	7b59      	ldrb	r1, [r3, #13]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	7b98      	ldrb	r0, [r3, #14]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	8b12      	ldrh	r2, [r2, #24]
 8006738:	9202      	str	r2, [sp, #8]
 800673a:	2202      	movs	r2, #2
 800673c:	9201      	str	r2, [sp, #4]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4623      	mov	r3, r4
 8006742:	4602      	mov	r2, r0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fc2b 	bl	8007fa0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	7b19      	ldrb	r1, [r3, #12]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	7bd8      	ldrb	r0, [r3, #15]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	8b52      	ldrh	r2, [r2, #26]
 8006762:	9202      	str	r2, [sp, #8]
 8006764:	2202      	movs	r2, #2
 8006766:	9201      	str	r2, [sp, #4]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	4623      	mov	r3, r4
 800676c:	4602      	mov	r2, r0
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fc16 	bl	8007fa0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	7b5b      	ldrb	r3, [r3, #13]
 8006780:	2200      	movs	r2, #0
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f002 fedd 	bl	8009544 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	7b1b      	ldrb	r3, [r3, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f002 fed6 	bl	8009544 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd90      	pop	{r4, r7, pc}

080067a6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fc09 	bl	8007fde <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fc31 	bl	800803a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	7b1b      	ldrb	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	7b1b      	ldrb	r3, [r3, #12]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fbf6 	bl	8007fde <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	7b1b      	ldrb	r3, [r3, #12]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fc1e 	bl	800803a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	7b5b      	ldrb	r3, [r3, #13]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00e      	beq.n	800682a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	7b5b      	ldrb	r3, [r3, #13]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fbe3 	bl	8007fde <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	7b5b      	ldrb	r3, [r3, #13]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fc0b 	bl	800803a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4618      	mov	r0, r3
 8006840:	f002 ff30 	bl	80096a4 <free>
    phost->pActiveClass->pData = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800684a:	2200      	movs	r2, #0
 800684c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006860:	2302      	movs	r3, #2
 8006862:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3340      	adds	r3, #64	; 0x40
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8b2 	bl	80069de <GetLineCoding>
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800688a:	2102      	movs	r1, #2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
  }
  return status;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d877      	bhi.n	80069b0 <USBH_CDC_Process+0x114>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <USBH_CDC_Process+0x2c>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068dd 	.word	0x080068dd
 80068cc:	080068e3 	.word	0x080068e3
 80068d0:	08006913 	.word	0x08006913
 80068d4:	08006987 	.word	0x08006987
 80068d8:	08006995 	.word	0x08006995
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
    break;
 80068e0:	e06d      	b.n	80069be <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f897 	bl	8006a1c <SetLineCoding>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006900:	e058      	b.n	80069b4 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d055      	beq.n	80069b4 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2204      	movs	r2, #4
 800690c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006910:	e050      	b.n	80069b4 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3340      	adds	r3, #64	; 0x40
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f860 	bl	80069de <GetLineCoding>
 800691e:	4603      	mov	r3, r0
 8006920:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d126      	bne.n	8006976 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d13b      	bne.n	80069b8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800694c:	429a      	cmp	r2, r3
 800694e:	d133      	bne.n	80069b8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800695c:	429a      	cmp	r2, r3
 800695e:	d12b      	bne.n	80069b8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006968:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800696a:	429a      	cmp	r2, r3
 800696c:	d124      	bne.n	80069b8 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f95a 	bl	8006c28 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006974:	e020      	b.n	80069b8 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d01d      	beq.n	80069b8 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2204      	movs	r2, #4
 8006980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006984:	e018      	b.n	80069b8 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f867 	bl	8006a5a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f8dc 	bl	8006b4a <CDC_ProcessReception>
    break;
 8006992:	e014      	b.n	80069be <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006994:	2100      	movs	r1, #0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fece 	bl	8007738 <USBH_ClrFeature>
 800699c:	4603      	mov	r3, r0
 800699e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80069ae:	e005      	b.n	80069bc <USBH_CDC_Process+0x120>

  default:
    break;
 80069b0:	bf00      	nop
 80069b2:	e004      	b.n	80069be <USBH_CDC_Process+0x122>
    break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <USBH_CDC_Process+0x122>
    break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <USBH_CDC_Process+0x122>
    break;
 80069bc:	bf00      	nop

  }

  return status;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	22a1      	movs	r2, #161	; 0xa1
 80069ec:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2221      	movs	r2, #33	; 0x21
 80069f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2207      	movs	r2, #7
 8006a04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2207      	movs	r2, #7
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f873 	bl	8007af8 <USBH_CtlReq>
 8006a12:	4603      	mov	r3, r0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2221      	movs	r2, #33	; 0x21
 8006a2a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2207      	movs	r2, #7
 8006a42:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2207      	movs	r2, #7
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f854 	bl	8007af8 <USBH_CtlReq>
 8006a50:	4603      	mov	r3, r0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b086      	sub	sp, #24
 8006a5e:	af02      	add	r7, sp, #8
 8006a60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d002      	beq.n	8006a80 <CDC_ProcessTransmission+0x26>
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d025      	beq.n	8006aca <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006a7e:	e060      	b.n	8006b42 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	8b12      	ldrh	r2, [r2, #24]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d90c      	bls.n	8006aa6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8b1a      	ldrh	r2, [r3, #24]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	7b58      	ldrb	r0, [r3, #13]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fa3b 	bl	8007f1a <USBH_BulkSendData>
 8006aa4:	e00c      	b.n	8006ac0 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	7b58      	ldrb	r0, [r3, #13]
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4603      	mov	r3, r0
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fa2d 	bl	8007f1a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006ac8:	e03b      	b.n	8006b42 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	7b5b      	ldrb	r3, [r3, #13]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f002 fd0d 	bl	80094f0 <USBH_LL_GetURBState>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d128      	bne.n	8006b32 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	8b12      	ldrh	r2, [r2, #24]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d90e      	bls.n	8006b0a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	8b12      	ldrh	r2, [r2, #24]
 8006af4:	1a9a      	subs	r2, r3, r2
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	8b12      	ldrh	r2, [r2, #24]
 8006b02:	441a      	add	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	61da      	str	r2, [r3, #28]
 8006b08:	e002      	b.n	8006b10 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006b20:	e00e      	b.n	8006b40 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f868 	bl	8006c00 <USBH_CDC_TransmitCallback>
    break;
 8006b30:	e006      	b.n	8006b40 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d103      	bne.n	8006b40 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006b40:	bf00      	nop
  }
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d002      	beq.n	8006b70 <CDC_ProcessReception+0x26>
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d00e      	beq.n	8006b8c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006b6e:	e043      	b.n	8006bf8 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	6a19      	ldr	r1, [r3, #32]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	8b5a      	ldrh	r2, [r3, #26]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	7b1b      	ldrb	r3, [r3, #12]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f9f1 	bl	8007f64 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2204      	movs	r2, #4
 8006b86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006b8a:	e035      	b.n	8006bf8 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	7b1b      	ldrb	r3, [r3, #12]
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fcac 	bl	80094f0 <USBH_LL_GetURBState>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d129      	bne.n	8006bf6 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	7b1b      	ldrb	r3, [r3, #12]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f002 fbc9 	bl	8009340 <USBH_LL_GetLastXferSize>
 8006bae:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d016      	beq.n	8006be8 <CDC_ProcessReception+0x9e>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	8b5b      	ldrh	r3, [r3, #26]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d210      	bcs.n	8006be8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad2      	subs	r2, r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	441a      	add	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2203      	movs	r2, #3
 8006be2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006be6:	e006      	b.n	8006bf6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f80f 	bl	8006c14 <USBH_CDC_ReceiveCallback>
    break;
 8006bf6:	bf00      	nop
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]

}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c50:	2302      	movs	r3, #2
 8006c52:	e019      	b.n	8006c88 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	79fa      	ldrb	r2, [r7, #7]
 8006c58:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f80f 	bl	8006c90 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f002 fa65 	bl	8009150 <USBH_LL_Init>

  return USBH_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006c9c:	e008      	b.n	8006cb0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	32e0      	adds	r2, #224	; 0xe0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b0e      	cmp	r3, #14
 8006cb4:	d9f3      	bls.n	8006c9e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e009      	b.n	8006cd0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd6:	d3f1      	bcc.n	8006cbc <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2240      	movs	r2, #64	; 0x40
 8006cfc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10f      	bne.n	8006d60 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d46:	1c59      	adds	r1, r3, #1
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	33dc      	adds	r3, #220	; 0xdc
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
 8006d5e:	e004      	b.n	8006d6a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d60:	2302      	movs	r3, #2
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	e001      	b.n	8006d6a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d66:	2302      	movs	r3, #2
 8006d68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d204      	bcs.n	8006d9e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006d9c:	e001      	b.n	8006da2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	70fb      	strb	r3, [r7, #3]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70bb      	strb	r3, [r7, #2]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006dd8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dda:	e025      	b.n	8006e28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	221a      	movs	r2, #26
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	3308      	adds	r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	3302      	adds	r3, #2
 8006dec:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	795b      	ldrb	r3, [r3, #5]
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d002      	beq.n	8006dfe <USBH_FindInterface+0x4e>
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2bff      	cmp	r3, #255	; 0xff
 8006dfc:	d111      	bne.n	8006e22 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006e02:	78ba      	ldrb	r2, [r7, #2]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d002      	beq.n	8006e0e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006e08:	78bb      	ldrb	r3, [r7, #2]
 8006e0a:	2bff      	cmp	r3, #255	; 0xff
 8006e0c:	d109      	bne.n	8006e22 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006e12:	787a      	ldrb	r2, [r7, #1]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d002      	beq.n	8006e1e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e18:	787b      	ldrb	r3, [r7, #1]
 8006e1a:	2bff      	cmp	r3, #255	; 0xff
 8006e1c:	d101      	bne.n	8006e22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
 8006e20:	e006      	b.n	8006e30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	3301      	adds	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d9d6      	bls.n	8006ddc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e2e:	23ff      	movs	r3, #255	; 0xff
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f002 f9bf 	bl	80091c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f002 fb62 	bl	8009516 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af04      	add	r7, sp, #16
 8006e62:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e64:	2302      	movs	r3, #2
 8006e66:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 faec 	bl	800744a <USBH_IsPortEnabled>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10c      	bne.n	8006e92 <USBH_Process+0x36>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d002      	beq.n	8006e92 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b0b      	cmp	r3, #11
 8006e9a:	f200 814c 	bhi.w	8007136 <USBH_Process+0x2da>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <USBH_Process+0x48>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006ed5 	.word	0x08006ed5
 8006ea8:	08006ef7 	.word	0x08006ef7
 8006eac:	08006f0b 	.word	0x08006f0b
 8006eb0:	08007111 	.word	0x08007111
 8006eb4:	08007137 	.word	0x08007137
 8006eb8:	08006f99 	.word	0x08006f99
 8006ebc:	080070c7 	.word	0x080070c7
 8006ec0:	08006fc9 	.word	0x08006fc9
 8006ec4:	08006fe9 	.word	0x08006fe9
 8006ec8:	08007009 	.word	0x08007009
 8006ecc:	08007037 	.word	0x08007037
 8006ed0:	080070f9 	.word	0x080070f9
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 812c 	beq.w	800713a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006ee8:	20c8      	movs	r0, #200	; 0xc8
 8006eea:	f002 fb5e 	bl	80095aa <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 f9f4 	bl	80092dc <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006ef4:	e121      	b.n	800713a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 811e 	bne.w	800713e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006f08:	e119      	b.n	800713e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006f0a:	2064      	movs	r0, #100	; 0x64
 8006f0c:	f002 fb4d 	bl	80095aa <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f002 f9bd 	bl	8009290 <USBH_LL_GetSpeed>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2205      	movs	r2, #5
 8006f24:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f868 	bl	8007ffe <USBH_AllocPipe>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006f36:	2180      	movs	r1, #128	; 0x80
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 f860 	bl	8007ffe <USBH_AllocPipe>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7919      	ldrb	r1, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	9202      	str	r2, [sp, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	9201      	str	r2, [sp, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4603      	mov	r3, r0
 8006f66:	2280      	movs	r2, #128	; 0x80
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f819 	bl	8007fa0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	7959      	ldrb	r1, [r3, #5]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006f82:	b292      	uxth	r2, r2
 8006f84:	9202      	str	r2, [sp, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	9201      	str	r2, [sp, #4]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f805 	bl	8007fa0 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f96:	e0e3      	b.n	8007160 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f8e7 	bl	800716c <USBH_HandleEnum>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 80ce 	bne.w	8007142 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d103      	bne.n	8006fc0 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2208      	movs	r2, #8
 8006fbc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006fbe:	e0c0      	b.n	8007142 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	701a      	strb	r2, [r3, #0]
    break;
 8006fc6:	e0bc      	b.n	8007142 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80b9 	beq.w	8007146 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fda:	2101      	movs	r1, #1
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006fe6:	e0ae      	b.n	8007146 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb59 	bl	80076aa <USBH_SetCfg>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 80a5 	bne.w	800714a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2209      	movs	r2, #9
 8007004:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007006:	e0a0      	b.n	800714a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007016:	2101      	movs	r1, #1
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fb69 	bl	80076f0 <USBH_SetFeature>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 8094 	bne.w	800714e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	220a      	movs	r2, #10
 800702a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800702c:	e08f      	b.n	800714e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220a      	movs	r2, #10
 8007032:	701a      	strb	r2, [r3, #0]
    break;
 8007034:	e08b      	b.n	800714e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8088 	beq.w	8007152 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
 800704e:	e017      	b.n	8007080 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	33dc      	adds	r3, #220	; 0xdc
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	791a      	ldrb	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007064:	429a      	cmp	r2, r3
 8007066:	d108      	bne.n	800707a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	33dc      	adds	r3, #220	; 0xdc
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	3301      	adds	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0e4      	beq.n	8007050 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800708c:	2b00      	cmp	r3, #0
 800708e:	d016      	beq.n	80070be <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	4798      	blx	r3
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2206      	movs	r2, #6
 80070a6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070ae:	2103      	movs	r1, #3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80070b4:	e04d      	b.n	8007152 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	220d      	movs	r2, #13
 80070ba:	701a      	strb	r2, [r3, #0]
    break;
 80070bc:	e049      	b.n	8007152 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220d      	movs	r2, #13
 80070c2:	701a      	strb	r2, [r3, #0]
    break;
 80070c4:	e045      	b.n	8007152 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00f      	beq.n	80070f0 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
 80070dc:	4603      	mov	r3, r0
 80070de:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d136      	bne.n	8007156 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	220b      	movs	r2, #11
 80070ec:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80070ee:	e032      	b.n	8007156 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	220d      	movs	r2, #13
 80070f4:	701a      	strb	r2, [r3, #0]
    break;
 80070f6:	e02e      	b.n	8007156 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d02b      	beq.n	800715a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
    }
    break;
 800710e:	e024      	b.n	800715a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fdbd 	bl	8006c90 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01e      	beq.n	800715e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007134:	e013      	b.n	800715e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8007136:	bf00      	nop
 8007138:	e012      	b.n	8007160 <USBH_Process+0x304>
    break;
 800713a:	bf00      	nop
 800713c:	e010      	b.n	8007160 <USBH_Process+0x304>
    break;
 800713e:	bf00      	nop
 8007140:	e00e      	b.n	8007160 <USBH_Process+0x304>
    break;
 8007142:	bf00      	nop
 8007144:	e00c      	b.n	8007160 <USBH_Process+0x304>
    break;
 8007146:	bf00      	nop
 8007148:	e00a      	b.n	8007160 <USBH_Process+0x304>
    break;
 800714a:	bf00      	nop
 800714c:	e008      	b.n	8007160 <USBH_Process+0x304>
    break;
 800714e:	bf00      	nop
 8007150:	e006      	b.n	8007160 <USBH_Process+0x304>
    break;
 8007152:	bf00      	nop
 8007154:	e004      	b.n	8007160 <USBH_Process+0x304>
    break;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <USBH_Process+0x304>
    break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <USBH_Process+0x304>
    break;
 800715e:	bf00      	nop
  }
 return USBH_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af04      	add	r7, sp, #16
 8007172:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007174:	2301      	movs	r3, #1
 8007176:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b07      	cmp	r3, #7
 800717e:	f200 80f8 	bhi.w	8007372 <USBH_HandleEnum+0x206>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <USBH_HandleEnum+0x1c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071a9 	.word	0x080071a9
 800718c:	0800721b 	.word	0x0800721b
 8007190:	08007233 	.word	0x08007233
 8007194:	080072a9 	.word	0x080072a9
 8007198:	080072bf 	.word	0x080072bf
 800719c:	080072db 	.word	0x080072db
 80071a0:	0800730f 	.word	0x0800730f
 80071a4:	08007343 	.word	0x08007343
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80071a8:	2108      	movs	r1, #8
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9ad 	bl	800750a <USBH_Get_DevDesc>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 80df 	bne.w	8007376 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7919      	ldrb	r1, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80071dc:	b292      	uxth	r2, r2
 80071de:	9202      	str	r2, [sp, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	9201      	str	r2, [sp, #4]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4603      	mov	r3, r0
 80071e8:	2280      	movs	r2, #128	; 0x80
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fed8 	bl	8007fa0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7959      	ldrb	r1, [r3, #5]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007204:	b292      	uxth	r2, r2
 8007206:	9202      	str	r2, [sp, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	9201      	str	r2, [sp, #4]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4603      	mov	r3, r0
 8007210:	2200      	movs	r2, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fec4 	bl	8007fa0 <USBH_OpenPipe>

    }
    break;
 8007218:	e0ad      	b.n	8007376 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800721a:	2112      	movs	r1, #18
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f974 	bl	800750a <USBH_Get_DevDesc>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 80a8 	bne.w	800737a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007230:	e0a3      	b.n	800737a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007232:	2101      	movs	r1, #1
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa14 	bl	8007662 <USBH_SetAddress>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 809e 	bne.w	800737e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007242:	2002      	movs	r0, #2
 8007244:	f002 f9b1 	bl	80095aa <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7919      	ldrb	r1, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800726a:	b292      	uxth	r2, r2
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	9201      	str	r2, [sp, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fe91 	bl	8007fa0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7959      	ldrb	r1, [r3, #5]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007292:	b292      	uxth	r2, r2
 8007294:	9202      	str	r2, [sp, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	9201      	str	r2, [sp, #4]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4603      	mov	r3, r0
 800729e:	2200      	movs	r2, #0
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fe7d 	bl	8007fa0 <USBH_OpenPipe>
    }
    break;
 80072a6:	e06a      	b.n	800737e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80072a8:	2109      	movs	r1, #9
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f955 	bl	800755a <USBH_Get_CfgDesc>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d165      	bne.n	8007382 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2204      	movs	r2, #4
 80072ba:	705a      	strb	r2, [r3, #1]
    }
    break;
 80072bc:	e061      	b.n	8007382 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f947 	bl	800755a <USBH_Get_CfgDesc>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d159      	bne.n	8007386 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2205      	movs	r2, #5
 80072d6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80072d8:	e055      	b.n	8007386 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d010      	beq.n	8007306 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80072f0:	23ff      	movs	r3, #255	; 0xff
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f955 	bl	80075a2 <USBH_Get_StringDesc>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d145      	bne.n	800738a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2206      	movs	r2, #6
 8007302:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007304:	e041      	b.n	800738a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2206      	movs	r2, #6
 800730a:	705a      	strb	r2, [r3, #1]
    break;
 800730c:	e03d      	b.n	800738a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007314:	2b00      	cmp	r3, #0
 8007316:	d010      	beq.n	800733a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007324:	23ff      	movs	r3, #255	; 0xff
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f93b 	bl	80075a2 <USBH_Get_StringDesc>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d12d      	bne.n	800738e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2207      	movs	r2, #7
 8007336:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007338:	e029      	b.n	800738e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2207      	movs	r2, #7
 800733e:	705a      	strb	r2, [r3, #1]
    break;
 8007340:	e025      	b.n	800738e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00f      	beq.n	800736c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007358:	23ff      	movs	r3, #255	; 0xff
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f921 	bl	80075a2 <USBH_Get_StringDesc>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d115      	bne.n	8007392 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800736a:	e012      	b.n	8007392 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e00f      	b.n	8007392 <USBH_HandleEnum+0x226>

  default:
    break;
 8007372:	bf00      	nop
 8007374:	e00e      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 8007376:	bf00      	nop
 8007378:	e00c      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 800737a:	bf00      	nop
 800737c:	e00a      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 800737e:	bf00      	nop
 8007380:	e008      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 8007382:	bf00      	nop
 8007384:	e006      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 8007386:	bf00      	nop
 8007388:	e004      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 800738a:	bf00      	nop
 800738c:	e002      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <USBH_HandleEnum+0x228>
    break;
 8007392:	bf00      	nop
  }
  return Status;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f804 	bl	80073e2 <USBH_HandleSof>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b0b      	cmp	r3, #11
 80073f2:	d10a      	bne.n	800740a <USBH_HandleSof+0x28>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
  }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007422:	bf00      	nop
}
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800743e:	bf00      	nop
}
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10f      	bne.n	8007496 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00e      	beq.n	80074a6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800748e:	2104      	movs	r1, #4
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
 8007494:	e007      	b.n	80074a6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800749c:	2b01      	cmp	r3, #1
 800749e:	d102      	bne.n	80074a6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 feb7 	bl	800922c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	791b      	ldrb	r3, [r3, #4]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fdb8 	bl	800803a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	795b      	ldrb	r3, [r3, #5]
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fdb2 	bl	800803a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074ee:	2105      	movs	r1, #5
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 fe67 	bl	80091c8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2203      	movs	r2, #3
 80074fe:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af02      	add	r7, sp, #8
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	b29b      	uxth	r3, r3
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007528:	2100      	movs	r1, #0
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f864 	bl	80075f8 <USBH_GetDescriptor>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	b292      	uxth	r2, r2
 800754a:	4619      	mov	r1, r3
 800754c:	f000 f918 	bl	8007780 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af02      	add	r7, sp, #8
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	331c      	adds	r3, #28
 800756a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800756c:	887b      	ldrh	r3, [r7, #2]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f83d 	bl	80075f8 <USBH_GetDescriptor>
 800757e:	4603      	mov	r3, r0
 8007580:	72fb      	strb	r3, [r7, #11]
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d107      	bne.n	8007598 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800758e:	887a      	ldrh	r2, [r7, #2]
 8007590:	68f9      	ldr	r1, [r7, #12]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f964 	bl	8007860 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007598:	7afb      	ldrb	r3, [r7, #11]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af02      	add	r7, sp, #8
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	461a      	mov	r2, r3
 80075ae:	460b      	mov	r3, r1
 80075b0:	72fb      	strb	r3, [r7, #11]
 80075b2:	4613      	mov	r3, r2
 80075b4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075be:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80075c6:	893b      	ldrh	r3, [r7, #8]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	460b      	mov	r3, r1
 80075cc:	2100      	movs	r1, #0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f812 	bl	80075f8 <USBH_GetDescriptor>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075e4:	893a      	ldrh	r2, [r7, #8]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fa37 	bl	8007a5c <USBH_ParseStringDesc>
  }
  return status;
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	72fb      	strb	r3, [r7, #11]
 8007606:	4613      	mov	r3, r2
 8007608:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	789b      	ldrb	r3, [r3, #2]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d11c      	bne.n	800764c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2206      	movs	r2, #6
 8007622:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	893a      	ldrh	r2, [r7, #8]
 8007628:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800762a:	893b      	ldrh	r3, [r7, #8]
 800762c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007634:	d104      	bne.n	8007640 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f240 4209 	movw	r2, #1033	; 0x409
 800763c:	829a      	strh	r2, [r3, #20]
 800763e:	e002      	b.n	8007646 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8b3a      	ldrh	r2, [r7, #24]
 800764a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800764c:	8b3b      	ldrh	r3, [r7, #24]
 800764e:	461a      	mov	r2, r3
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fa50 	bl	8007af8 <USBH_CtlReq>
 8007658:	4603      	mov	r3, r0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	789b      	ldrb	r3, [r3, #2]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10f      	bne.n	8007696 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2205      	movs	r2, #5
 8007680:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa2c 	bl	8007af8 <USBH_CtlReq>
 80076a0:	4603      	mov	r3, r0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	789b      	ldrb	r3, [r3, #2]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d10e      	bne.n	80076dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2209      	movs	r2, #9
 80076c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	887a      	ldrh	r2, [r7, #2]
 80076ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80076dc:	2200      	movs	r2, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa09 	bl	8007af8 <USBH_CtlReq>
 80076e6:	4603      	mov	r3, r0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	789b      	ldrb	r3, [r3, #2]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d10f      	bne.n	8007724 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2203      	movs	r2, #3
 800770e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f9e5 	bl	8007af8 <USBH_CtlReq>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	789b      	ldrb	r3, [r3, #2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10f      	bne.n	800776c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800776c:	2200      	movs	r2, #0
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f9c1 	bl	8007af8 <USBH_CtlReq>
 8007776:	4603      	mov	r3, r0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	4613      	mov	r3, r2
 800778c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	785a      	ldrb	r2, [r3, #1]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	3302      	adds	r3, #2
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3303      	adds	r3, #3
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4313      	orrs	r3, r2
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	791a      	ldrb	r2, [r3, #4]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	795a      	ldrb	r2, [r3, #5]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	799a      	ldrb	r2, [r3, #6]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	79da      	ldrb	r2, [r3, #7]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d939      	bls.n	8007854 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	3308      	adds	r3, #8
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	3309      	adds	r3, #9
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	021b      	lsls	r3, r3, #8
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	330a      	adds	r3, #10
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b29a      	uxth	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	330b      	adds	r3, #11
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	b29b      	uxth	r3, r3
 8007810:	4313      	orrs	r3, r2
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	330c      	adds	r3, #12
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b29a      	uxth	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	330d      	adds	r3, #13
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	b29b      	uxth	r3, r3
 800782c:	4313      	orrs	r3, r2
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	7b9a      	ldrb	r2, [r3, #14]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	7bda      	ldrb	r2, [r3, #15]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	7c1a      	ldrb	r2, [r3, #16]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	7c5a      	ldrb	r2, [r3, #17]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	745a      	strb	r2, [r3, #17]
  }
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	; 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	785a      	ldrb	r2, [r3, #1]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	3302      	adds	r3, #2
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	b29a      	uxth	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	3303      	adds	r3, #3
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	791a      	ldrb	r2, [r3, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	795a      	ldrb	r2, [r3, #5]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	799a      	ldrb	r2, [r3, #6]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	79da      	ldrb	r2, [r3, #7]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	7a1a      	ldrb	r2, [r3, #8]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b09      	cmp	r3, #9
 80078da:	d95f      	bls.n	800799c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80078dc:	2309      	movs	r3, #9
 80078de:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078e4:	e051      	b.n	800798a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078e6:	f107 0316 	add.w	r3, r7, #22
 80078ea:	4619      	mov	r1, r3
 80078ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ee:	f000 f8e8 	bl	8007ac2 <USBH_GetNextDesc>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	785b      	ldrb	r3, [r3, #1]
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d146      	bne.n	800798a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80078fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007900:	221a      	movs	r2, #26
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	3308      	adds	r3, #8
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	3302      	adds	r3, #2
 800790e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007912:	69f8      	ldr	r0, [r7, #28]
 8007914:	f000 f846 	bl	80079a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800791e:	2300      	movs	r3, #0
 8007920:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007922:	e022      	b.n	800796a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007924:	f107 0316 	add.w	r3, r7, #22
 8007928:	4619      	mov	r1, r3
 800792a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792c:	f000 f8c9 	bl	8007ac2 <USBH_GetNextDesc>
 8007930:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b05      	cmp	r3, #5
 8007938:	d117      	bne.n	800796a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800793a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800793e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007942:	3201      	adds	r2, #1
 8007944:	00d2      	lsls	r2, r2, #3
 8007946:	211a      	movs	r1, #26
 8007948:	fb01 f303 	mul.w	r3, r1, r3
 800794c:	4413      	add	r3, r2
 800794e:	3308      	adds	r3, #8
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	3304      	adds	r3, #4
 8007956:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800795a:	69b8      	ldr	r0, [r7, #24]
 800795c:	f000 f851 	bl	8007a02 <USBH_ParseEPDesc>
            ep_ix++;
 8007960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007964:	3301      	adds	r3, #1
 8007966:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007972:	429a      	cmp	r2, r3
 8007974:	d204      	bcs.n	8007980 <USBH_ParseCfgDesc+0x120>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	885a      	ldrh	r2, [r3, #2]
 800797a:	8afb      	ldrh	r3, [r7, #22]
 800797c:	429a      	cmp	r2, r3
 800797e:	d8d1      	bhi.n	8007924 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007984:	3301      	adds	r3, #1
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800798a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800798e:	2b01      	cmp	r3, #1
 8007990:	d804      	bhi.n	800799c <USBH_ParseCfgDesc+0x13c>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	885a      	ldrh	r2, [r3, #2]
 8007996:	8afb      	ldrh	r3, [r7, #22]
 8007998:	429a      	cmp	r2, r3
 800799a:	d8a4      	bhi.n	80078e6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800799c:	bf00      	nop
 800799e:	3728      	adds	r7, #40	; 0x28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	785a      	ldrb	r2, [r3, #1]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	789a      	ldrb	r2, [r3, #2]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	78da      	ldrb	r2, [r3, #3]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	791a      	ldrb	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	795a      	ldrb	r2, [r3, #5]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	799a      	ldrb	r2, [r3, #6]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	79da      	ldrb	r2, [r3, #7]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	7a1a      	ldrb	r2, [r3, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	721a      	strb	r2, [r3, #8]
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785a      	ldrb	r2, [r3, #1]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	789a      	ldrb	r2, [r3, #2]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	78da      	ldrb	r2, [r3, #3]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	3305      	adds	r3, #5
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	021b      	lsls	r3, r3, #8
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	4313      	orrs	r3, r2
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	799a      	ldrb	r2, [r3, #6]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	719a      	strb	r2, [r3, #6]
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d120      	bne.n	8007ab6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	1e9a      	subs	r2, r3, #2
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	bf28      	it	cs
 8007a80:	4613      	movcs	r3, r2
 8007a82:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3302      	adds	r3, #2
 8007a88:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	82fb      	strh	r3, [r7, #22]
 8007a8e:	e00b      	b.n	8007aa8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a90:	8afb      	ldrh	r3, [r7, #22]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	781a      	ldrb	r2, [r3, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007aa2:	8afb      	ldrh	r3, [r7, #22]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	82fb      	strh	r3, [r7, #22]
 8007aa8:	8afa      	ldrh	r2, [r7, #22]
 8007aaa:	8abb      	ldrh	r3, [r7, #20]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3ef      	bcc.n	8007a90 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	881a      	ldrh	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007aea:	68fb      	ldr	r3, [r7, #12]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	789b      	ldrb	r3, [r3, #2]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d002      	beq.n	8007b18 <USBH_CtlReq+0x20>
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d00f      	beq.n	8007b36 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007b16:	e034      	b.n	8007b82 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	88fa      	ldrh	r2, [r7, #6]
 8007b22:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
    break;
 8007b34:	e025      	b.n	8007b82 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f828 	bl	8007b8c <USBH_HandleControl>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d108      	bne.n	8007b58 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
    break;
 8007b56:	e013      	b.n	8007b80 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d108      	bne.n	8007b70 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
    break;
 8007b6e:	e007      	b.n	8007b80 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d104      	bne.n	8007b80 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	75fb      	strb	r3, [r7, #23]
    break;
 8007b80:	bf00      	nop
  }
  return status;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b94:	2301      	movs	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7e1b      	ldrb	r3, [r3, #24]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	2b0a      	cmp	r3, #10
 8007ba4:	f200 814c 	bhi.w	8007e40 <USBH_HandleControl+0x2b4>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <USBH_HandleControl+0x24>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	08007bf7 	.word	0x08007bf7
 8007bb8:	08007c61 	.word	0x08007c61
 8007bbc:	08007c87 	.word	0x08007c87
 8007bc0:	08007cbf 	.word	0x08007cbf
 8007bc4:	08007ceb 	.word	0x08007ceb
 8007bc8:	08007d3d 	.word	0x08007d3d
 8007bcc:	08007d5f 	.word	0x08007d5f
 8007bd0:	08007d9b 	.word	0x08007d9b
 8007bd4:	08007dc3 	.word	0x08007dc3
 8007bd8:	08007e01 	.word	0x08007e01
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 0110 	add.w	r1, r3, #16
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f939 	bl	8007e60 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	761a      	strb	r2, [r3, #24]
    break;
 8007bf4:	e12f      	b.n	8007e56 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	795b      	ldrb	r3, [r3, #5]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 fc77 	bl	80094f0 <USBH_LL_GetURBState>
 8007c02:	4603      	mov	r3, r0
 8007c04:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d11e      	bne.n	8007c4a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7c1b      	ldrb	r3, [r3, #16]
 8007c10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c14:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	8adb      	ldrh	r3, [r3, #22]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007c1e:	7b7b      	ldrb	r3, [r7, #13]
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d103      	bne.n	8007c2c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2203      	movs	r2, #3
 8007c28:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c2a:	e10b      	b.n	8007e44 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2205      	movs	r2, #5
 8007c30:	761a      	strb	r2, [r3, #24]
    break;
 8007c32:	e107      	b.n	8007e44 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007c34:	7b7b      	ldrb	r3, [r7, #13]
 8007c36:	2b80      	cmp	r3, #128	; 0x80
 8007c38:	d103      	bne.n	8007c42 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2209      	movs	r2, #9
 8007c3e:	761a      	strb	r2, [r3, #24]
    break;
 8007c40:	e100      	b.n	8007e44 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2207      	movs	r2, #7
 8007c46:	761a      	strb	r2, [r3, #24]
    break;
 8007c48:	e0fc      	b.n	8007e44 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d003      	beq.n	8007c58 <USBH_HandleControl+0xcc>
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	f040 80f6 	bne.w	8007e44 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	220b      	movs	r2, #11
 8007c5c:	761a      	strb	r2, [r3, #24]
    break;
 8007c5e:	e0f1      	b.n	8007e44 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6899      	ldr	r1, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	899a      	ldrh	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	791b      	ldrb	r3, [r3, #4]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f930 	bl	8007ede <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	761a      	strb	r2, [r3, #24]
    break;
 8007c84:	e0e7      	b.n	8007e56 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	791b      	ldrb	r3, [r3, #4]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 fc2f 	bl	80094f0 <USBH_LL_GetURBState>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d102      	bne.n	8007ca2 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2209      	movs	r2, #9
 8007ca0:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	d102      	bne.n	8007cae <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007cac:	e0cc      	b.n	8007e48 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	f040 80c9 	bne.w	8007e48 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220b      	movs	r2, #11
 8007cba:	761a      	strb	r2, [r3, #24]
    break;
 8007cbc:	e0c4      	b.n	8007e48 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6899      	ldr	r1, [r3, #8]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	899a      	ldrh	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7958      	ldrb	r0, [r3, #5]
 8007cca:	2301      	movs	r3, #1
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f8df 	bl	8007e94 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	761a      	strb	r2, [r3, #24]
    break;
 8007ce8:	e0b5      	b.n	8007e56 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	795b      	ldrb	r3, [r3, #5]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fbfd 	bl	80094f0 <USBH_LL_GetURBState>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d103      	bne.n	8007d08 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2207      	movs	r2, #7
 8007d04:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d06:	e0a1      	b.n	8007e4c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	d105      	bne.n	8007d1a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	220c      	movs	r2, #12
 8007d12:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007d14:	2303      	movs	r3, #3
 8007d16:	73fb      	strb	r3, [r7, #15]
    break;
 8007d18:	e098      	b.n	8007e4c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d103      	bne.n	8007d28 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2205      	movs	r2, #5
 8007d24:	761a      	strb	r2, [r3, #24]
    break;
 8007d26:	e091      	b.n	8007e4c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	f040 808e 	bne.w	8007e4c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	220b      	movs	r2, #11
 8007d34:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007d36:	2302      	movs	r3, #2
 8007d38:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3a:	e087      	b.n	8007e4c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	791b      	ldrb	r3, [r3, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8ca 	bl	8007ede <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	761a      	strb	r2, [r3, #24]

    break;
 8007d5c:	e07b      	b.n	8007e56 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fbc3 	bl	80094f0 <USBH_LL_GetURBState>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d105      	bne.n	8007d80 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	220d      	movs	r2, #13
 8007d78:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d7e:	e067      	b.n	8007e50 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d103      	bne.n	8007d8e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	220b      	movs	r2, #11
 8007d8a:	761a      	strb	r2, [r3, #24]
    break;
 8007d8c:	e060      	b.n	8007e50 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d15d      	bne.n	8007e50 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007d94:	2303      	movs	r3, #3
 8007d96:	73fb      	strb	r3, [r7, #15]
    break;
 8007d98:	e05a      	b.n	8007e50 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	795a      	ldrb	r2, [r3, #5]
 8007d9e:	2301      	movs	r3, #1
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4613      	mov	r3, r2
 8007da4:	2200      	movs	r2, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f873 	bl	8007e94 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	220a      	movs	r2, #10
 8007dbe:	761a      	strb	r2, [r3, #24]
    break;
 8007dc0:	e049      	b.n	8007e56 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	795b      	ldrb	r3, [r3, #5]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 fb91 	bl	80094f0 <USBH_LL_GetURBState>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	220d      	movs	r2, #13
 8007de0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007de2:	e037      	b.n	8007e54 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d103      	bne.n	8007df2 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2209      	movs	r2, #9
 8007dee:	761a      	strb	r2, [r3, #24]
    break;
 8007df0:	e030      	b.n	8007e54 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d12d      	bne.n	8007e54 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	220b      	movs	r2, #11
 8007dfc:	761a      	strb	r2, [r3, #24]
    break;
 8007dfe:	e029      	b.n	8007e54 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7e5b      	ldrb	r3, [r3, #25]
 8007e04:	3301      	adds	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	765a      	strb	r2, [r3, #25]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7e5b      	ldrb	r3, [r3, #25]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d809      	bhi.n	8007e28 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 fa09 	bl	800922c <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007e26:	e016      	b.n	8007e56 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e2e:	2106      	movs	r1, #6
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3e:	e00a      	b.n	8007e56 <USBH_HandleControl+0x2ca>

  default:
    break;
 8007e40:	bf00      	nop
 8007e42:	e008      	b.n	8007e56 <USBH_HandleControl+0x2ca>
    break;
 8007e44:	bf00      	nop
 8007e46:	e006      	b.n	8007e56 <USBH_HandleControl+0x2ca>
    break;
 8007e48:	bf00      	nop
 8007e4a:	e004      	b.n	8007e56 <USBH_HandleControl+0x2ca>
    break;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <USBH_HandleControl+0x2ca>
    break;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <USBH_HandleControl+0x2ca>
    break;
 8007e54:	bf00      	nop
  }
  return status;
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e6e:	79f9      	ldrb	r1, [r7, #7]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	2308      	movs	r3, #8
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 faeb 	bl	8009460 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007eb8:	7979      	ldrb	r1, [r7, #5]
 8007eba:	7e3b      	ldrb	r3, [r7, #24]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f001 fac6 	bl	8009460 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b088      	sub	sp, #32
 8007ee2:	af04      	add	r7, sp, #16
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	461a      	mov	r2, r3
 8007eec:	460b      	mov	r3, r1
 8007eee:	80fb      	strh	r3, [r7, #6]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007ef4:	7979      	ldrb	r1, [r7, #5]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	2301      	movs	r3, #1
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	2201      	movs	r2, #1
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 faa8 	bl	8009460 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f10:	2300      	movs	r3, #0

}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af04      	add	r7, sp, #16
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	460b      	mov	r3, r1
 8007f2a:	80fb      	strh	r3, [r7, #6]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007f3e:	7979      	ldrb	r1, [r7, #5]
 8007f40:	7e3b      	ldrb	r3, [r7, #24]
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2200      	movs	r2, #0
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f001 fa83 	bl	8009460 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	460b      	mov	r3, r1
 8007f74:	80fb      	strh	r3, [r7, #6]
 8007f76:	4613      	mov	r3, r2
 8007f78:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007f7a:	7979      	ldrb	r1, [r7, #5]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	2201      	movs	r2, #1
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f001 fa65 	bl	8009460 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	70fb      	strb	r3, [r7, #3]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70bb      	strb	r3, [r7, #2]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007fba:	7878      	ldrb	r0, [r7, #1]
 8007fbc:	78ba      	ldrb	r2, [r7, #2]
 8007fbe:	78f9      	ldrb	r1, [r7, #3]
 8007fc0:	8b3b      	ldrh	r3, [r7, #24]
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	7d3b      	ldrb	r3, [r7, #20]
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	7c3b      	ldrb	r3, [r7, #16]
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f9ca 	bl	8009368 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007fd4:	2300      	movs	r3, #0

}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fa00 	bl	80093f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ff4:	2300      	movs	r3, #0

}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f831 	bl	8008072 <USBH_GetFreePipe>
 8008010:	4603      	mov	r3, r0
 8008012:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008014:	89fb      	ldrh	r3, [r7, #14]
 8008016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800801e:	89fa      	ldrh	r2, [r7, #14]
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32e0      	adds	r2, #224	; 0xe0
 800802a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800802e:	89fb      	ldrh	r3, [r7, #14]
 8008030:	b2db      	uxtb	r3, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	2b0a      	cmp	r3, #10
 800804a:	d80b      	bhi.n	8008064 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	78f9      	ldrb	r1, [r7, #3]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	31e0      	adds	r1, #224	; 0xe0
 8008054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008058:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	32e0      	adds	r2, #224	; 0xe0
 8008060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]
 8008082:	e00e      	b.n	80080a2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008084:	7bfa      	ldrb	r2, [r7, #15]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32e0      	adds	r2, #224	; 0xe0
 800808a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	b29b      	uxth	r3, r3
 800809a:	e007      	b.n	80080ac <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	3301      	adds	r3, #1
 80080a0:	73fb      	strb	r3, [r7, #15]
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	2b0a      	cmp	r3, #10
 80080a6:	d9ed      	bls.n	8008084 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80080a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08c      	sub	sp, #48	; 0x30
 80080bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080be:	f107 031c 	add.w	r3, r7, #28
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	605a      	str	r2, [r3, #4]
 80080c8:	609a      	str	r2, [r3, #8]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80080ce:	4a9a      	ldr	r2, [pc, #616]	; (8008338 <MX_GPIO_Init+0x280>)
 80080d0:	4b99      	ldr	r3, [pc, #612]	; (8008338 <MX_GPIO_Init+0x280>)
 80080d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d4:	f043 0310 	orr.w	r3, r3, #16
 80080d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080da:	4b97      	ldr	r3, [pc, #604]	; (8008338 <MX_GPIO_Init+0x280>)
 80080dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080e6:	4a94      	ldr	r2, [pc, #592]	; (8008338 <MX_GPIO_Init+0x280>)
 80080e8:	4b93      	ldr	r3, [pc, #588]	; (8008338 <MX_GPIO_Init+0x280>)
 80080ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ec:	f043 0304 	orr.w	r3, r3, #4
 80080f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080f2:	4b91      	ldr	r3, [pc, #580]	; (8008338 <MX_GPIO_Init+0x280>)
 80080f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80080fe:	4a8e      	ldr	r2, [pc, #568]	; (8008338 <MX_GPIO_Init+0x280>)
 8008100:	4b8d      	ldr	r3, [pc, #564]	; (8008338 <MX_GPIO_Init+0x280>)
 8008102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800810a:	4b8b      	ldr	r3, [pc, #556]	; (8008338 <MX_GPIO_Init+0x280>)
 800810c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008116:	4a88      	ldr	r2, [pc, #544]	; (8008338 <MX_GPIO_Init+0x280>)
 8008118:	4b87      	ldr	r3, [pc, #540]	; (8008338 <MX_GPIO_Init+0x280>)
 800811a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008122:	4b85      	ldr	r3, [pc, #532]	; (8008338 <MX_GPIO_Init+0x280>)
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800812e:	4a82      	ldr	r2, [pc, #520]	; (8008338 <MX_GPIO_Init+0x280>)
 8008130:	4b81      	ldr	r3, [pc, #516]	; (8008338 <MX_GPIO_Init+0x280>)
 8008132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800813a:	4b7f      	ldr	r3, [pc, #508]	; (8008338 <MX_GPIO_Init+0x280>)
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008146:	4a7c      	ldr	r2, [pc, #496]	; (8008338 <MX_GPIO_Init+0x280>)
 8008148:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <MX_GPIO_Init+0x280>)
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814c:	f043 0308 	orr.w	r3, r3, #8
 8008150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008152:	4b79      	ldr	r3, [pc, #484]	; (8008338 <MX_GPIO_Init+0x280>)
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800815e:	2200      	movs	r2, #0
 8008160:	f240 1109 	movw	r1, #265	; 0x109
 8008164:	4875      	ldr	r0, [pc, #468]	; (800833c <MX_GPIO_Init+0x284>)
 8008166:	f7f8 fce7 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800816a:	2200      	movs	r2, #0
 800816c:	210c      	movs	r1, #12
 800816e:	4874      	ldr	r0, [pc, #464]	; (8008340 <MX_GPIO_Init+0x288>)
 8008170:	f7f8 fce2 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008174:	2201      	movs	r2, #1
 8008176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800817a:	4872      	ldr	r0, [pc, #456]	; (8008344 <MX_GPIO_Init+0x28c>)
 800817c:	f7f8 fcdc 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8008180:	2200      	movs	r2, #0
 8008182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008186:	486f      	ldr	r0, [pc, #444]	; (8008344 <MX_GPIO_Init+0x28c>)
 8008188:	f7f8 fcd6 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800818c:	2200      	movs	r2, #0
 800818e:	2180      	movs	r1, #128	; 0x80
 8008190:	486d      	ldr	r0, [pc, #436]	; (8008348 <MX_GPIO_Init+0x290>)
 8008192:	f7f8 fcd1 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8008196:	2308      	movs	r3, #8
 8008198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800819a:	2301      	movs	r3, #1
 800819c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081a2:	2302      	movs	r3, #2
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80081a6:	f107 031c 	add.w	r3, r7, #28
 80081aa:	4619      	mov	r1, r3
 80081ac:	4863      	ldr	r0, [pc, #396]	; (800833c <MX_GPIO_Init+0x284>)
 80081ae:	f7f8 fb1b 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80081b2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80081b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80081b8:	4b64      	ldr	r3, [pc, #400]	; (800834c <MX_GPIO_Init+0x294>)
 80081ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081c0:	f107 031c 	add.w	r3, r7, #28
 80081c4:	4619      	mov	r1, r3
 80081c6:	485f      	ldr	r0, [pc, #380]	; (8008344 <MX_GPIO_Init+0x28c>)
 80081c8:	f7f8 fb0e 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80081cc:	2307      	movs	r3, #7
 80081ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081d0:	2300      	movs	r3, #0
 80081d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d8:	f107 031c 	add.w	r3, r7, #28
 80081dc:	4619      	mov	r1, r3
 80081de:	4859      	ldr	r0, [pc, #356]	; (8008344 <MX_GPIO_Init+0x28c>)
 80081e0:	f7f8 fb02 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = JCenter_EXTI0_Pin|JLeft_EXTI1_Pin|JRight_EXTI2_Pin|JUp_EXTI3_Pin 
 80081e4:	232f      	movs	r3, #47	; 0x2f
 80081e6:	61fb      	str	r3, [r7, #28]
                          |JDown_EXTI5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80081e8:	4b59      	ldr	r3, [pc, #356]	; (8008350 <MX_GPIO_Init+0x298>)
 80081ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80081ec:	2302      	movs	r3, #2
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f0:	f107 031c 	add.w	r3, r7, #28
 80081f4:	4619      	mov	r1, r3
 80081f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081fa:	f7f8 faf5 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80081fe:	2310      	movs	r3, #16
 8008200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008202:	4b52      	ldr	r3, [pc, #328]	; (800834c <MX_GPIO_Init+0x294>)
 8008204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	2300      	movs	r3, #0
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800820a:	f107 031c 	add.w	r3, r7, #28
 800820e:	4619      	mov	r1, r3
 8008210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008214:	f7f8 fae8 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8008218:	2304      	movs	r3, #4
 800821a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800821c:	2301      	movs	r3, #1
 800821e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008220:	2301      	movs	r3, #1
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008224:	2303      	movs	r3, #3
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8008228:	f107 031c 	add.w	r3, r7, #28
 800822c:	4619      	mov	r1, r3
 800822e:	4844      	ldr	r0, [pc, #272]	; (8008340 <MX_GPIO_Init+0x288>)
 8008230:	f7f8 fada 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8008234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800823a:	2301      	movs	r3, #1
 800823c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800823e:	2301      	movs	r3, #1
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008242:	2303      	movs	r3, #3
 8008244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8008246:	f107 031c 	add.w	r3, r7, #28
 800824a:	4619      	mov	r1, r3
 800824c:	483b      	ldr	r0, [pc, #236]	; (800833c <MX_GPIO_Init+0x284>)
 800824e:	f7f8 facb 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8008252:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008258:	2301      	movs	r3, #1
 800825a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825c:	2300      	movs	r3, #0
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008260:	2300      	movs	r3, #0
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008264:	f107 031c 	add.w	r3, r7, #28
 8008268:	4619      	mov	r1, r3
 800826a:	4836      	ldr	r0, [pc, #216]	; (8008344 <MX_GPIO_Init+0x28c>)
 800826c:	f7f8 fabc 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8008270:	2380      	movs	r3, #128	; 0x80
 8008272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008274:	2301      	movs	r3, #1
 8008276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008278:	2300      	movs	r3, #0
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800827c:	2303      	movs	r3, #3
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8008280:	f107 031c 	add.w	r3, r7, #28
 8008284:	4619      	mov	r1, r3
 8008286:	4830      	ldr	r0, [pc, #192]	; (8008348 <MX_GPIO_Init+0x290>)
 8008288:	f7f8 faae 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800828c:	2308      	movs	r3, #8
 800828e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008290:	2301      	movs	r3, #1
 8008292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008294:	2300      	movs	r3, #0
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008298:	2300      	movs	r3, #0
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 800829c:	f107 031c 	add.w	r3, r7, #28
 80082a0:	4619      	mov	r1, r3
 80082a2:	4827      	ldr	r0, [pc, #156]	; (8008340 <MX_GPIO_Init+0x288>)
 80082a4:	f7f8 faa0 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80082a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80082ae:	4b27      	ldr	r3, [pc, #156]	; (800834c <MX_GPIO_Init+0x294>)
 80082b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80082b6:	f107 031c 	add.w	r3, r7, #28
 80082ba:	4619      	mov	r1, r3
 80082bc:	4820      	ldr	r0, [pc, #128]	; (8008340 <MX_GPIO_Init+0x288>)
 80082be:	f7f8 fa93 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082c6:	2301      	movs	r3, #1
 80082c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ce:	2300      	movs	r3, #0
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80082d2:	f107 031c 	add.w	r3, r7, #28
 80082d6:	4619      	mov	r1, r3
 80082d8:	4818      	ldr	r0, [pc, #96]	; (800833c <MX_GPIO_Init+0x284>)
 80082da:	f7f8 fa85 	bl	80007e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80082de:	2200      	movs	r2, #0
 80082e0:	2100      	movs	r1, #0
 80082e2:	2006      	movs	r0, #6
 80082e4:	f7f8 fa49 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80082e8:	2006      	movs	r0, #6
 80082ea:	f7f8 fa62 	bl	80007b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80082ee:	2200      	movs	r2, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	2007      	movs	r0, #7
 80082f4:	f7f8 fa41 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80082f8:	2007      	movs	r0, #7
 80082fa:	f7f8 fa5a 	bl	80007b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80082fe:	2200      	movs	r2, #0
 8008300:	2100      	movs	r1, #0
 8008302:	2008      	movs	r0, #8
 8008304:	f7f8 fa39 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8008308:	2008      	movs	r0, #8
 800830a:	f7f8 fa52 	bl	80007b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800830e:	2200      	movs	r2, #0
 8008310:	2100      	movs	r1, #0
 8008312:	2009      	movs	r0, #9
 8008314:	f7f8 fa31 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8008318:	2009      	movs	r0, #9
 800831a:	f7f8 fa4a 	bl	80007b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	2017      	movs	r0, #23
 8008324:	f7f8 fa29 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008328:	2017      	movs	r0, #23
 800832a:	f7f8 fa42 	bl	80007b2 <HAL_NVIC_EnableIRQ>

}
 800832e:	bf00      	nop
 8008330:	3730      	adds	r7, #48	; 0x30
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40021000 	.word	0x40021000
 800833c:	48001000 	.word	0x48001000
 8008340:	48000400 	.word	0x48000400
 8008344:	48000800 	.word	0x48000800
 8008348:	48000c00 	.word	0x48000c00
 800834c:	10120000 	.word	0x10120000
 8008350:	10310000 	.word	0x10310000

08008354 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008358:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <MX_I2C1_Init+0x74>)
 800835a:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <MX_I2C1_Init+0x78>)
 800835c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800835e:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <MX_I2C1_Init+0x74>)
 8008360:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <MX_I2C1_Init+0x7c>)
 8008362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008364:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <MX_I2C1_Init+0x74>)
 8008366:	2200      	movs	r2, #0
 8008368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800836a:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <MX_I2C1_Init+0x74>)
 800836c:	2201      	movs	r2, #1
 800836e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008370:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <MX_I2C1_Init+0x74>)
 8008372:	2200      	movs	r2, #0
 8008374:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <MX_I2C1_Init+0x74>)
 8008378:	2200      	movs	r2, #0
 800837a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800837c:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <MX_I2C1_Init+0x74>)
 800837e:	2200      	movs	r2, #0
 8008380:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008382:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <MX_I2C1_Init+0x74>)
 8008384:	2200      	movs	r2, #0
 8008386:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008388:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <MX_I2C1_Init+0x74>)
 800838a:	2200      	movs	r2, #0
 800838c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800838e:	480e      	ldr	r0, [pc, #56]	; (80083c8 <MX_I2C1_Init+0x74>)
 8008390:	f7fa f877 	bl	8002482 <HAL_I2C_Init>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800839a:	f000 faa7 	bl	80088ec <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800839e:	2100      	movs	r1, #0
 80083a0:	4809      	ldr	r0, [pc, #36]	; (80083c8 <MX_I2C1_Init+0x74>)
 80083a2:	f7fa f8fc 	bl	800259e <HAL_I2CEx_ConfigAnalogFilter>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80083ac:	f000 fa9e 	bl	80088ec <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80083b0:	2100      	movs	r1, #0
 80083b2:	4805      	ldr	r0, [pc, #20]	; (80083c8 <MX_I2C1_Init+0x74>)
 80083b4:	f7fa f93e 	bl	8002634 <HAL_I2CEx_ConfigDigitalFilter>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80083be:	f000 fa95 	bl	80088ec <Error_Handler>
  }

}
 80083c2:	bf00      	nop
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200000c0 	.word	0x200000c0
 80083cc:	40005400 	.word	0x40005400
 80083d0:	00404c74 	.word	0x00404c74

080083d4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <MX_I2C2_Init+0x74>)
 80083da:	4a1c      	ldr	r2, [pc, #112]	; (800844c <MX_I2C2_Init+0x78>)
 80083dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80083de:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <MX_I2C2_Init+0x74>)
 80083e0:	4a1b      	ldr	r2, [pc, #108]	; (8008450 <MX_I2C2_Init+0x7c>)
 80083e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80083e4:	4b18      	ldr	r3, [pc, #96]	; (8008448 <MX_I2C2_Init+0x74>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80083ea:	4b17      	ldr	r3, [pc, #92]	; (8008448 <MX_I2C2_Init+0x74>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80083f0:	4b15      	ldr	r3, [pc, #84]	; (8008448 <MX_I2C2_Init+0x74>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <MX_I2C2_Init+0x74>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80083fc:	4b12      	ldr	r3, [pc, #72]	; (8008448 <MX_I2C2_Init+0x74>)
 80083fe:	2200      	movs	r2, #0
 8008400:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008402:	4b11      	ldr	r3, [pc, #68]	; (8008448 <MX_I2C2_Init+0x74>)
 8008404:	2200      	movs	r2, #0
 8008406:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008408:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <MX_I2C2_Init+0x74>)
 800840a:	2200      	movs	r2, #0
 800840c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800840e:	480e      	ldr	r0, [pc, #56]	; (8008448 <MX_I2C2_Init+0x74>)
 8008410:	f7fa f837 	bl	8002482 <HAL_I2C_Init>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800841a:	f000 fa67 	bl	80088ec <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800841e:	2100      	movs	r1, #0
 8008420:	4809      	ldr	r0, [pc, #36]	; (8008448 <MX_I2C2_Init+0x74>)
 8008422:	f7fa f8bc 	bl	800259e <HAL_I2CEx_ConfigAnalogFilter>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800842c:	f000 fa5e 	bl	80088ec <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008430:	2100      	movs	r1, #0
 8008432:	4805      	ldr	r0, [pc, #20]	; (8008448 <MX_I2C2_Init+0x74>)
 8008434:	f7fa f8fe 	bl	8002634 <HAL_I2CEx_ConfigDigitalFilter>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800843e:	f000 fa55 	bl	80088ec <Error_Handler>
  }

}
 8008442:	bf00      	nop
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	2000010c 	.word	0x2000010c
 800844c:	40005800 	.word	0x40005800
 8008450:	00404c74 	.word	0x00404c74

08008454 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08c      	sub	sp, #48	; 0x30
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800845c:	f107 031c 	add.w	r3, r7, #28
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	609a      	str	r2, [r3, #8]
 8008468:	60da      	str	r2, [r3, #12]
 800846a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a2e      	ldr	r2, [pc, #184]	; (800852c <HAL_I2C_MspInit+0xd8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d128      	bne.n	80084c8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008476:	4a2e      	ldr	r2, [pc, #184]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 8008478:	4b2d      	ldr	r3, [pc, #180]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 800847a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847c:	f043 0302 	orr.w	r3, r3, #2
 8008480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008482:	4b2b      	ldr	r3, [pc, #172]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 8008484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800848e:	23c0      	movs	r3, #192	; 0xc0
 8008490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008492:	2312      	movs	r3, #18
 8008494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008496:	2301      	movs	r3, #1
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800849a:	2303      	movs	r3, #3
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800849e:	2304      	movs	r3, #4
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084a2:	f107 031c 	add.w	r3, r7, #28
 80084a6:	4619      	mov	r1, r3
 80084a8:	4822      	ldr	r0, [pc, #136]	; (8008534 <HAL_I2C_MspInit+0xe0>)
 80084aa:	f7f8 f99d 	bl	80007e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084ae:	4a20      	ldr	r2, [pc, #128]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 80084b0:	4b1f      	ldr	r3, [pc, #124]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 80084b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084b8:	6593      	str	r3, [r2, #88]	; 0x58
 80084ba:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 80084bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80084c6:	e02d      	b.n	8008524 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1a      	ldr	r2, [pc, #104]	; (8008538 <HAL_I2C_MspInit+0xe4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d128      	bne.n	8008524 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084d2:	4a17      	ldr	r2, [pc, #92]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 80084d4:	4b16      	ldr	r3, [pc, #88]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 80084d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084de:	4b14      	ldr	r3, [pc, #80]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 80084ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80084ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084f0:	2312      	movs	r3, #18
 80084f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084f4:	2301      	movs	r3, #1
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084f8:	2303      	movs	r3, #3
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80084fc:	2304      	movs	r3, #4
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008500:	f107 031c 	add.w	r3, r7, #28
 8008504:	4619      	mov	r1, r3
 8008506:	480b      	ldr	r0, [pc, #44]	; (8008534 <HAL_I2C_MspInit+0xe0>)
 8008508:	f7f8 f96e 	bl	80007e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800850c:	4a08      	ldr	r2, [pc, #32]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008516:	6593      	str	r3, [r2, #88]	; 0x58
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <HAL_I2C_MspInit+0xdc>)
 800851a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	68fb      	ldr	r3, [r7, #12]
}
 8008524:	bf00      	nop
 8008526:	3730      	adds	r7, #48	; 0x30
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40005400 	.word	0x40005400
 8008530:	40021000 	.word	0x40021000
 8008534:	48000400 	.word	0x48000400
 8008538:	40005800 	.word	0x40005800

0800853c <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8008540:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <MX_LCD_Init+0x68>)
 8008542:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <MX_LCD_Init+0x6c>)
 8008544:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8008546:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <MX_LCD_Init+0x68>)
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800854c:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <MX_LCD_Init+0x68>)
 800854e:	2200      	movs	r2, #0
 8008550:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <MX_LCD_Init+0x68>)
 8008554:	220c      	movs	r2, #12
 8008556:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8008558:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <MX_LCD_Init+0x68>)
 800855a:	2200      	movs	r2, #0
 800855c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800855e:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <MX_LCD_Init+0x68>)
 8008560:	2200      	movs	r2, #0
 8008562:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <MX_LCD_Init+0x68>)
 8008566:	2200      	movs	r2, #0
 8008568:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <MX_LCD_Init+0x68>)
 800856c:	2200      	movs	r2, #0
 800856e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8008570:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <MX_LCD_Init+0x68>)
 8008572:	2200      	movs	r2, #0
 8008574:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <MX_LCD_Init+0x68>)
 8008578:	2200      	movs	r2, #0
 800857a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800857c:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <MX_LCD_Init+0x68>)
 800857e:	2200      	movs	r2, #0
 8008580:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8008582:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <MX_LCD_Init+0x68>)
 8008584:	2200      	movs	r2, #0
 8008586:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8008588:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <MX_LCD_Init+0x68>)
 800858a:	2200      	movs	r2, #0
 800858c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800858e:	4805      	ldr	r0, [pc, #20]	; (80085a4 <MX_LCD_Init+0x68>)
 8008590:	f7fa f89c 	bl	80026cc <HAL_LCD_Init>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800859a:	f000 f9a7 	bl	80088ec <Error_Handler>
  }

}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000158 	.word	0x20000158
 80085a8:	40002400 	.word	0x40002400

080085ac <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08c      	sub	sp, #48	; 0x30
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b4:	f107 031c 	add.w	r3, r7, #28
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a44      	ldr	r2, [pc, #272]	; (80086dc <HAL_LCD_MspInit+0x130>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f040 8081 	bne.w	80086d2 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80085d0:	4a43      	ldr	r2, [pc, #268]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 80085d2:	4b43      	ldr	r3, [pc, #268]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085da:	6593      	str	r3, [r2, #88]	; 0x58
 80085dc:	4b40      	ldr	r3, [pc, #256]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085e8:	4a3d      	ldr	r2, [pc, #244]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 80085ea:	4b3d      	ldr	r3, [pc, #244]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 80085ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ee:	f043 0304 	orr.w	r3, r3, #4
 80085f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085f4:	4b3a      	ldr	r3, [pc, #232]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 80085f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008600:	4a37      	ldr	r2, [pc, #220]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 8008602:	4b37      	ldr	r3, [pc, #220]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800860c:	4b34      	ldr	r3, [pc, #208]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 800860e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008618:	4a31      	ldr	r2, [pc, #196]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 800861a:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 800861c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861e:	f043 0302 	orr.w	r3, r3, #2
 8008622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008624:	4b2e      	ldr	r3, [pc, #184]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 8008626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008630:	4a2b      	ldr	r2, [pc, #172]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 8008632:	4b2b      	ldr	r3, [pc, #172]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 8008634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008636:	f043 0308 	orr.w	r3, r3, #8
 800863a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800863c:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <HAL_LCD_MspInit+0x134>)
 800863e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	60bb      	str	r3, [r7, #8]
 8008646:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8008648:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800864c:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800864e:	2302      	movs	r3, #2
 8008650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008652:	2300      	movs	r3, #0
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008656:	2300      	movs	r3, #0
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800865a:	230b      	movs	r3, #11
 800865c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800865e:	f107 031c 	add.w	r3, r7, #28
 8008662:	4619      	mov	r1, r3
 8008664:	481f      	ldr	r0, [pc, #124]	; (80086e4 <HAL_LCD_MspInit+0x138>)
 8008666:	f7f8 f8bf 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800866a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800866e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008670:	2302      	movs	r3, #2
 8008672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008674:	2300      	movs	r3, #0
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008678:	2300      	movs	r3, #0
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800867c:	230b      	movs	r3, #11
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008680:	f107 031c 	add.w	r3, r7, #28
 8008684:	4619      	mov	r1, r3
 8008686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800868a:	f7f8 f8ad 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 800868e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8008692:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008694:	2302      	movs	r3, #2
 8008696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008698:	2300      	movs	r3, #0
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800869c:	2300      	movs	r3, #0
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80086a0:	230b      	movs	r3, #11
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086a4:	f107 031c 	add.w	r3, r7, #28
 80086a8:	4619      	mov	r1, r3
 80086aa:	480f      	ldr	r0, [pc, #60]	; (80086e8 <HAL_LCD_MspInit+0x13c>)
 80086ac:	f7f8 f89c 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 80086b0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80086b4:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b6:	2302      	movs	r3, #2
 80086b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086be:	2300      	movs	r3, #0
 80086c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80086c2:	230b      	movs	r3, #11
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086c6:	f107 031c 	add.w	r3, r7, #28
 80086ca:	4619      	mov	r1, r3
 80086cc:	4807      	ldr	r0, [pc, #28]	; (80086ec <HAL_LCD_MspInit+0x140>)
 80086ce:	f7f8 f88b 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 80086d2:	bf00      	nop
 80086d4:	3730      	adds	r7, #48	; 0x30
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40002400 	.word	0x40002400
 80086e0:	40021000 	.word	0x40021000
 80086e4:	48000800 	.word	0x48000800
 80086e8:	48000400 	.word	0x48000400
 80086ec:	48000c00 	.word	0x48000c00

080086f0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){		// SRODEK
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d108      	bne.n	8008712 <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 8008700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008704:	4814      	ldr	r0, [pc, #80]	; (8008758 <HAL_GPIO_EXTI_Callback+0x68>)
 8008706:	f7f8 fa2f 	bl	8000b68 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 800870a:	2104      	movs	r1, #4
 800870c:	4813      	ldr	r0, [pc, #76]	; (800875c <HAL_GPIO_EXTI_Callback+0x6c>)
 800870e:	f7f8 fa2b 	bl	8000b68 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_1){		// LEWY
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d103      	bne.n	8008720 <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 8008718:	2104      	movs	r1, #4
 800871a:	4810      	ldr	r0, [pc, #64]	; (800875c <HAL_GPIO_EXTI_Callback+0x6c>)
 800871c:	f7f8 fa24 	bl	8000b68 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_2){		// PRAWY
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	2b04      	cmp	r3, #4
 8008724:	d104      	bne.n	8008730 <HAL_GPIO_EXTI_Callback+0x40>
		HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 8008726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800872a:	480b      	ldr	r0, [pc, #44]	; (8008758 <HAL_GPIO_EXTI_Callback+0x68>)
 800872c:	f7f8 fa1c 	bl	8000b68 <HAL_GPIO_TogglePin>
	}
	// Wciskajac do gory, czasem nie odskakuje!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	if(GPIO_Pin == GPIO_PIN_3){		// GORA
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	2b08      	cmp	r3, #8
 8008734:	d103      	bne.n	800873e <HAL_GPIO_EXTI_Callback+0x4e>
		HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 8008736:	2104      	movs	r1, #4
 8008738:	4808      	ldr	r0, [pc, #32]	; (800875c <HAL_GPIO_EXTI_Callback+0x6c>)
 800873a:	f7f8 fa15 	bl	8000b68 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_5){		// DOL
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	2b20      	cmp	r3, #32
 8008742:	d104      	bne.n	800874e <HAL_GPIO_EXTI_Callback+0x5e>
		HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 8008744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008748:	4803      	ldr	r0, [pc, #12]	; (8008758 <HAL_GPIO_EXTI_Callback+0x68>)
 800874a:	f7f8 fa0d 	bl	8000b68 <HAL_GPIO_TogglePin>
	}
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	48001000 	.word	0x48001000
 800875c:	48000400 	.word	0x48000400

08008760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008764:	f7f7 feb8 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008768:	f000 f816 	bl	8008798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800876c:	f7ff fca4 	bl	80080b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8008770:	f7ff fdf0 	bl	8008354 <MX_I2C1_Init>
  MX_I2C2_Init();
 8008774:	f7ff fe2e 	bl	80083d4 <MX_I2C2_Init>
  MX_LCD_Init();
 8008778:	f7ff fee0 	bl	800853c <MX_LCD_Init>
  MX_QUADSPI_Init();
 800877c:	f000 f8be 	bl	80088fc <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8008780:	f000 f926 	bl	80089d0 <MX_SAI1_Init>
  MX_SPI2_Init();
 8008784:	f000 fa44 	bl	8008c10 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8008788:	f000 fb7a 	bl	8008e80 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800878c:	f000 fbec 	bl	8008f68 <MX_USB_HOST_Init>
//		  HAL_Delay(1000);
//		  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, RESET);
//	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008790:	f000 fc00 	bl	8008f94 <MX_USB_HOST_Process>
 8008794:	e7fc      	b.n	8008790 <main+0x30>
	...

08008798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b0b8      	sub	sp, #224	; 0xe0
 800879c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800879e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80087a2:	2244      	movs	r2, #68	; 0x44
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 ff84 	bl	80096b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80087ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80087bc:	463b      	mov	r3, r7
 80087be:	2288      	movs	r2, #136	; 0x88
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 ff76 	bl	80096b4 <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80087c8:	f7fa f860 	bl	800288c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80087cc:	4a45      	ldr	r2, [pc, #276]	; (80088e4 <SystemClock_Config+0x14c>)
 80087ce:	4b45      	ldr	r3, [pc, #276]	; (80088e4 <SystemClock_Config+0x14c>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f023 0318 	bic.w	r3, r3, #24
 80087d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80087dc:	231c      	movs	r3, #28
 80087de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80087ee:	2301      	movs	r3, #1
 80087f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80087fa:	2360      	movs	r3, #96	; 0x60
 80087fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008800:	2302      	movs	r3, #2
 8008802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008806:	2301      	movs	r3, #1
 8008808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800880c:	2301      	movs	r3, #1
 800880e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8008812:	2314      	movs	r3, #20
 8008814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008818:	2307      	movs	r3, #7
 800881a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800881e:	2302      	movs	r3, #2
 8008820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008824:	2302      	movs	r3, #2
 8008826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800882a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800882e:	4618      	mov	r0, r3
 8008830:	f7fa f978 	bl	8002b24 <HAL_RCC_OscConfig>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800883a:	f000 f857 	bl	80088ec <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800883e:	230f      	movs	r3, #15
 8008840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008844:	2303      	movs	r3, #3
 8008846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800884a:	2380      	movs	r3, #128	; 0x80
 800884c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008850:	2300      	movs	r3, #0
 8008852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008856:	2300      	movs	r3, #0
 8008858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800885c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008860:	2101      	movs	r1, #1
 8008862:	4618      	mov	r0, r3
 8008864:	f7fa fcc2 	bl	80031ec <HAL_RCC_ClockConfig>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800886e:	f000 f83d 	bl	80088ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <SystemClock_Config+0x150>)
 8008874:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008876:	2300      	movs	r3, #0
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800887a:	2300      	movs	r3, #0
 800887c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800887e:	2300      	movs	r3, #0
 8008880:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8008882:	2300      	movs	r3, #0
 8008884:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800888a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800888e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008892:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008894:	2301      	movs	r3, #1
 8008896:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008898:	2301      	movs	r3, #1
 800889a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800889c:	2318      	movs	r3, #24
 800889e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80088a0:	2307      	movs	r3, #7
 80088a2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80088a4:	2302      	movs	r3, #2
 80088a6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80088a8:	2302      	movs	r3, #2
 80088aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 80088ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80088b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088b2:	463b      	mov	r3, r7
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fa feab 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80088c0:	f000 f814 	bl	80088ec <Error_Handler>
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80088c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80088c8:	f7f9 fffe 	bl	80028c8 <HAL_PWREx_ControlVoltageScaling>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 80088d2:	f000 f80b 	bl	80088ec <Error_Handler>
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80088d6:	f7fb fdf9 	bl	80044cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80088da:	bf00      	nop
 80088dc:	37e0      	adds	r7, #224	; 0xe0
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	40021000 	.word	0x40021000
 80088e8:	000228c2 	.word	0x000228c2

080088ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80088f0:	bf00      	nop
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
	...

080088fc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <MX_QUADSPI_Init+0x44>)
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <MX_QUADSPI_Init+0x48>)
 8008904:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8008906:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <MX_QUADSPI_Init+0x44>)
 8008908:	22ff      	movs	r2, #255	; 0xff
 800890a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800890c:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <MX_QUADSPI_Init+0x44>)
 800890e:	2201      	movs	r2, #1
 8008910:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <MX_QUADSPI_Init+0x44>)
 8008914:	2200      	movs	r2, #0
 8008916:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8008918:	4b09      	ldr	r3, [pc, #36]	; (8008940 <MX_QUADSPI_Init+0x44>)
 800891a:	2201      	movs	r2, #1
 800891c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800891e:	4b08      	ldr	r3, [pc, #32]	; (8008940 <MX_QUADSPI_Init+0x44>)
 8008920:	2200      	movs	r2, #0
 8008922:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8008924:	4b06      	ldr	r3, [pc, #24]	; (8008940 <MX_QUADSPI_Init+0x44>)
 8008926:	2200      	movs	r2, #0
 8008928:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800892a:	4805      	ldr	r0, [pc, #20]	; (8008940 <MX_QUADSPI_Init+0x44>)
 800892c:	f7fa f832 	bl	8002994 <HAL_QSPI_Init>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8008936:	f7ff ffd9 	bl	80088ec <Error_Handler>
  }

}
 800893a:	bf00      	nop
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000194 	.word	0x20000194
 8008944:	a0001000 	.word	0xa0001000

08008948 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	; 0x28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008950:	f107 0314 	add.w	r3, r7, #20
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	605a      	str	r2, [r3, #4]
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	60da      	str	r2, [r3, #12]
 800895e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a17      	ldr	r2, [pc, #92]	; (80089c4 <HAL_QSPI_MspInit+0x7c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d128      	bne.n	80089bc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800896a:	4a17      	ldr	r2, [pc, #92]	; (80089c8 <HAL_QSPI_MspInit+0x80>)
 800896c:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <HAL_QSPI_MspInit+0x80>)
 800896e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008974:	6513      	str	r3, [r2, #80]	; 0x50
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <HAL_QSPI_MspInit+0x80>)
 8008978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897e:	613b      	str	r3, [r7, #16]
 8008980:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008982:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <HAL_QSPI_MspInit+0x80>)
 8008984:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <HAL_QSPI_MspInit+0x80>)
 8008986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008988:	f043 0310 	orr.w	r3, r3, #16
 800898c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800898e:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <HAL_QSPI_MspInit+0x80>)
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 800899a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800899e:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a0:	2302      	movs	r3, #2
 80089a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a8:	2303      	movs	r3, #3
 80089aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80089ac:	230a      	movs	r3, #10
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4619      	mov	r1, r3
 80089b6:	4805      	ldr	r0, [pc, #20]	; (80089cc <HAL_QSPI_MspInit+0x84>)
 80089b8:	f7f7 ff16 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80089bc:	bf00      	nop
 80089be:	3728      	adds	r7, #40	; 0x28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	a0001000 	.word	0xa0001000
 80089c8:	40021000 	.word	0x40021000
 80089cc:	48001000 	.word	0x48001000

080089d0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 80089d4:	4b4d      	ldr	r3, [pc, #308]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089d6:	4a4e      	ldr	r2, [pc, #312]	; (8008b10 <MX_SAI1_Init+0x140>)
 80089d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80089da:	4b4c      	ldr	r3, [pc, #304]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089dc:	2200      	movs	r2, #0
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80089e0:	4b4a      	ldr	r3, [pc, #296]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80089e6:	4b49      	ldr	r3, [pc, #292]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089e8:	2240      	movs	r2, #64	; 0x40
 80089ea:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80089ec:	4b47      	ldr	r3, [pc, #284]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80089f2:	4b46      	ldr	r3, [pc, #280]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80089f8:	4b44      	ldr	r3, [pc, #272]	; (8008b0c <MX_SAI1_Init+0x13c>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80089fe:	4b43      	ldr	r3, [pc, #268]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008a04:	4b41      	ldr	r3, [pc, #260]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008a0a:	4b40      	ldr	r3, [pc, #256]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8008a10:	4b3e      	ldr	r3, [pc, #248]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a12:	4a40      	ldr	r2, [pc, #256]	; (8008b14 <MX_SAI1_Init+0x144>)
 8008a14:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008a16:	4b3d      	ldr	r3, [pc, #244]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008a1c:	4b3b      	ldr	r3, [pc, #236]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008a22:	4b3a      	ldr	r3, [pc, #232]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008a28:	4b38      	ldr	r3, [pc, #224]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8008a2e:	4b37      	ldr	r3, [pc, #220]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a30:	2208      	movs	r2, #8
 8008a32:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8008a34:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008a3a:	4b34      	ldr	r3, [pc, #208]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008a40:	4b32      	ldr	r3, [pc, #200]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8008a46:	4b31      	ldr	r3, [pc, #196]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8008a4c:	4b2f      	ldr	r3, [pc, #188]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8008a52:	4b2e      	ldr	r3, [pc, #184]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8008a58:	4b2c      	ldr	r3, [pc, #176]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8008a5e:	4b2b      	ldr	r3, [pc, #172]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8008a64:	4829      	ldr	r0, [pc, #164]	; (8008b0c <MX_SAI1_Init+0x13c>)
 8008a66:	f7fb ffe3 	bl	8004a30 <HAL_SAI_Init>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8008a70:	f7ff ff3c 	bl	80088ec <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8008a74:	4b28      	ldr	r3, [pc, #160]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a76:	4a29      	ldr	r2, [pc, #164]	; (8008b1c <MX_SAI1_Init+0x14c>)
 8008a78:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8008a7a:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008a80:	4b25      	ldr	r3, [pc, #148]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a82:	2203      	movs	r2, #3
 8008a84:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8008a86:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a88:	2240      	movs	r2, #64	; 0x40
 8008a8a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008a8c:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008a92:	4b21      	ldr	r3, [pc, #132]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008a98:	4b1f      	ldr	r3, [pc, #124]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008aa4:	4b1c      	ldr	r3, [pc, #112]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008ab0:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008ab6:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008abc:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 8008ac2:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ac4:	2218      	movs	r2, #24
 8008ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8008ac8:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008ad4:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8008ada:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8008af8:	4807      	ldr	r0, [pc, #28]	; (8008b18 <MX_SAI1_Init+0x148>)
 8008afa:	f7fb ff99 	bl	8004a30 <HAL_SAI_Init>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8008b04:	f7ff fef2 	bl	80088ec <Error_Handler>
  }

}
 8008b08:	bf00      	nop
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	2000025c 	.word	0x2000025c
 8008b10:	40015404 	.word	0x40015404
 8008b14:	0002ee00 	.word	0x0002ee00
 8008b18:	200001d8 	.word	0x200001d8
 8008b1c:	40015424 	.word	0x40015424

08008b20 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	; 0x28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a33      	ldr	r2, [pc, #204]	; (8008bfc <HAL_SAI_MspInit+0xdc>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d135      	bne.n	8008b9e <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8008b32:	4b33      	ldr	r3, [pc, #204]	; (8008c00 <HAL_SAI_MspInit+0xe0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10b      	bne.n	8008b52 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008b3a:	4a32      	ldr	r2, [pc, #200]	; (8008c04 <HAL_SAI_MspInit+0xe4>)
 8008b3c:	4b31      	ldr	r3, [pc, #196]	; (8008c04 <HAL_SAI_MspInit+0xe4>)
 8008b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b44:	6613      	str	r3, [r2, #96]	; 0x60
 8008b46:	4b2f      	ldr	r3, [pc, #188]	; (8008c04 <HAL_SAI_MspInit+0xe4>)
 8008b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b4e:	613b      	str	r3, [r7, #16]
 8008b50:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8008b52:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <HAL_SAI_MspInit+0xe0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3301      	adds	r3, #1
 8008b58:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <HAL_SAI_MspInit+0xe0>)
 8008b5a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8008b5c:	2374      	movs	r3, #116	; 0x74
 8008b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b60:	2302      	movs	r3, #2
 8008b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8008b6c:	230d      	movs	r3, #13
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008b70:	f107 0314 	add.w	r3, r7, #20
 8008b74:	4619      	mov	r1, r3
 8008b76:	4824      	ldr	r0, [pc, #144]	; (8008c08 <HAL_SAI_MspInit+0xe8>)
 8008b78:	f7f7 fe36 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8008b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b82:	2302      	movs	r3, #2
 8008b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8008b8e:	230d      	movs	r3, #13
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8008b92:	f107 0314 	add.w	r3, r7, #20
 8008b96:	4619      	mov	r1, r3
 8008b98:	481b      	ldr	r0, [pc, #108]	; (8008c08 <HAL_SAI_MspInit+0xe8>)
 8008b9a:	f7f7 fe25 	bl	80007e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a1a      	ldr	r2, [pc, #104]	; (8008c0c <HAL_SAI_MspInit+0xec>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d124      	bne.n	8008bf2 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <HAL_SAI_MspInit+0xe0>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008bb0:	4a14      	ldr	r2, [pc, #80]	; (8008c04 <HAL_SAI_MspInit+0xe4>)
 8008bb2:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <HAL_SAI_MspInit+0xe4>)
 8008bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bba:	6613      	str	r3, [r2, #96]	; 0x60
 8008bbc:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <HAL_SAI_MspInit+0xe4>)
 8008bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <HAL_SAI_MspInit+0xe0>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	4a0c      	ldr	r2, [pc, #48]	; (8008c00 <HAL_SAI_MspInit+0xe0>)
 8008bd0:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8008bd2:	2380      	movs	r3, #128	; 0x80
 8008bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bde:	2303      	movs	r3, #3
 8008be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8008be2:	230d      	movs	r3, #13
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	4619      	mov	r1, r3
 8008bec:	4806      	ldr	r0, [pc, #24]	; (8008c08 <HAL_SAI_MspInit+0xe8>)
 8008bee:	f7f7 fdfb 	bl	80007e8 <HAL_GPIO_Init>

    }
}
 8008bf2:	bf00      	nop
 8008bf4:	3728      	adds	r7, #40	; 0x28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	40015404 	.word	0x40015404
 8008c00:	200000a8 	.word	0x200000a8
 8008c04:	40021000 	.word	0x40021000
 8008c08:	48001000 	.word	0x48001000
 8008c0c:	40015424 	.word	0x40015424

08008c10 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8008c14:	4b1b      	ldr	r3, [pc, #108]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c16:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <MX_SPI2_Init+0x78>)
 8008c18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008c1a:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008c20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008c22:	4b18      	ldr	r3, [pc, #96]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8008c28:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008c2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c30:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c36:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008c3c:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c4a:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c50:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c56:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c5e:	2207      	movs	r2, #7
 8008c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008c62:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008c6e:	4805      	ldr	r0, [pc, #20]	; (8008c84 <MX_SPI2_Init+0x74>)
 8008c70:	f7fc f878 	bl	8004d64 <HAL_SPI_Init>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8008c7a:	f7ff fe37 	bl	80088ec <Error_Handler>
  }

}
 8008c7e:	bf00      	nop
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	200002e0 	.word	0x200002e0
 8008c88:	40003800 	.word	0x40003800

08008c8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c94:	f107 0314 	add.w	r3, r7, #20
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	609a      	str	r2, [r3, #8]
 8008ca0:	60da      	str	r2, [r3, #12]
 8008ca2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <HAL_SPI_MspInit+0x7c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d127      	bne.n	8008cfe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008cae:	4a17      	ldr	r2, [pc, #92]	; (8008d0c <HAL_SPI_MspInit+0x80>)
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <HAL_SPI_MspInit+0x80>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8008cba:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <HAL_SPI_MspInit+0x80>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cc6:	4a11      	ldr	r2, [pc, #68]	; (8008d0c <HAL_SPI_MspInit+0x80>)
 8008cc8:	4b10      	ldr	r3, [pc, #64]	; (8008d0c <HAL_SPI_MspInit+0x80>)
 8008cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ccc:	f043 0308 	orr.w	r3, r3, #8
 8008cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <HAL_SPI_MspInit+0x80>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8008cde:	231a      	movs	r3, #26
 8008ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cea:	2303      	movs	r3, #3
 8008cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008cee:	2305      	movs	r3, #5
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cf2:	f107 0314 	add.w	r3, r7, #20
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <HAL_SPI_MspInit+0x84>)
 8008cfa:	f7f7 fd75 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008cfe:	bf00      	nop
 8008d00:	3728      	adds	r7, #40	; 0x28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	40003800 	.word	0x40003800
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	48000c00 	.word	0x48000c00

08008d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d1a:	4a0f      	ldr	r2, [pc, #60]	; (8008d58 <HAL_MspInit+0x44>)
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <HAL_MspInit+0x44>)
 8008d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d20:	f043 0301 	orr.w	r3, r3, #1
 8008d24:	6613      	str	r3, [r2, #96]	; 0x60
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <HAL_MspInit+0x44>)
 8008d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	607b      	str	r3, [r7, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d32:	4a09      	ldr	r2, [pc, #36]	; (8008d58 <HAL_MspInit+0x44>)
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <HAL_MspInit+0x44>)
 8008d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <HAL_MspInit+0x44>)
 8008d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40021000 	.word	0x40021000

08008d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d60:	bf00      	nop
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d6e:	e7fe      	b.n	8008d6e <HardFault_Handler+0x4>

08008d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d74:	e7fe      	b.n	8008d74 <MemManage_Handler+0x4>

08008d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d76:	b480      	push	{r7}
 8008d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d7a:	e7fe      	b.n	8008d7a <BusFault_Handler+0x4>

08008d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d80:	e7fe      	b.n	8008d80 <UsageFault_Handler+0x4>

08008d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d82:	b480      	push	{r7}
 8008d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d86:	bf00      	nop
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d94:	bf00      	nop
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008da2:	bf00      	nop
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008db0:	f7f7 fbd6 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008db4:	bf00      	nop
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	f7f7 fee5 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008dc2:	bf00      	nop
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008dca:	2002      	movs	r0, #2
 8008dcc:	f7f7 fede 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008dd0:	bf00      	nop
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008dd8:	2004      	movs	r0, #4
 8008dda:	f7f7 fed7 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008dde:	bf00      	nop
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008de6:	2008      	movs	r0, #8
 8008de8:	f7f7 fed0 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008dec:	bf00      	nop
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008df4:	2020      	movs	r0, #32
 8008df6:	f7f7 fec9 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008dfa:	bf00      	nop
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008e04:	4802      	ldr	r0, [pc, #8]	; (8008e10 <OTG_FS_IRQHandler+0x10>)
 8008e06:	f7f8 f94f 	bl	80010a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000788 	.word	0x20000788

08008e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e18:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <SystemInit+0x64>)
 8008e1a:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <SystemInit+0x64>)
 8008e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008e28:	4a14      	ldr	r2, [pc, #80]	; (8008e7c <SystemInit+0x68>)
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <SystemInit+0x68>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <SystemInit+0x68>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008e3a:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <SystemInit+0x68>)
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <SystemInit+0x68>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008e44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008e48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <SystemInit+0x68>)
 8008e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e52:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <SystemInit+0x68>)
 8008e54:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <SystemInit+0x68>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008e5e:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <SystemInit+0x68>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <SystemInit+0x64>)
 8008e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8008e6c:	bf00      	nop
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	e000ed00 	.word	0xe000ed00
 8008e7c:	40021000 	.word	0x40021000

08008e80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008e86:	4a15      	ldr	r2, [pc, #84]	; (8008edc <MX_USART2_UART_Init+0x5c>)
 8008e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008e8a:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e92:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008ea4:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008ea6:	220c      	movs	r2, #12
 8008ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008eb6:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <MX_USART2_UART_Init+0x58>)
 8008ec4:	f7fb ffd6 	bl	8004e74 <HAL_UART_Init>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008ece:	f7ff fd0d 	bl	80088ec <Error_Handler>
  }

}
 8008ed2:	bf00      	nop
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000344 	.word	0x20000344
 8008edc:	40004400 	.word	0x40004400

08008ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	609a      	str	r2, [r3, #8]
 8008ef4:	60da      	str	r2, [r3, #12]
 8008ef6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a17      	ldr	r2, [pc, #92]	; (8008f5c <HAL_UART_MspInit+0x7c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d127      	bne.n	8008f52 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f02:	4a17      	ldr	r2, [pc, #92]	; (8008f60 <HAL_UART_MspInit+0x80>)
 8008f04:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <HAL_UART_MspInit+0x80>)
 8008f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f0e:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <HAL_UART_MspInit+0x80>)
 8008f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f1a:	4a11      	ldr	r2, [pc, #68]	; (8008f60 <HAL_UART_MspInit+0x80>)
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <HAL_UART_MspInit+0x80>)
 8008f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f20:	f043 0308 	orr.w	r3, r3, #8
 8008f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <HAL_UART_MspInit+0x80>)
 8008f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008f32:	2360      	movs	r3, #96	; 0x60
 8008f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f36:	2302      	movs	r3, #2
 8008f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008f42:	2307      	movs	r3, #7
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f46:	f107 0314 	add.w	r3, r7, #20
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4805      	ldr	r0, [pc, #20]	; (8008f64 <HAL_UART_MspInit+0x84>)
 8008f4e:	f7f7 fc4b 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008f52:	bf00      	nop
 8008f54:	3728      	adds	r7, #40	; 0x28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40004400 	.word	0x40004400
 8008f60:	40021000 	.word	0x40021000
 8008f64:	48000c00 	.word	0x48000c00

08008f68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	4906      	ldr	r1, [pc, #24]	; (8008f88 <MX_USB_HOST_Init+0x20>)
 8008f70:	4806      	ldr	r0, [pc, #24]	; (8008f8c <MX_USB_HOST_Init+0x24>)
 8008f72:	f7fd fe63 	bl	8006c3c <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 8008f76:	4906      	ldr	r1, [pc, #24]	; (8008f90 <MX_USB_HOST_Init+0x28>)
 8008f78:	4804      	ldr	r0, [pc, #16]	; (8008f8c <MX_USB_HOST_Init+0x24>)
 8008f7a:	f7fd fed2 	bl	8006d22 <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 8008f7e:	4803      	ldr	r0, [pc, #12]	; (8008f8c <MX_USB_HOST_Init+0x24>)
 8008f80:	f7fd ff5c 	bl	8006e3c <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008f84:	bf00      	nop
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	200003bc 	.word	0x200003bc
 8008f90:	20000000 	.word	0x20000000

08008f94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008f98:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <MX_USB_HOST_Process+0x10>)
 8008f9a:	f7fd ff5f 	bl	8006e5c <USBH_Process>
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200003bc 	.word	0x200003bc

08008fa8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d819      	bhi.n	8008ff0 <USBH_UserProcess+0x48>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBH_UserProcess+0x1c>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008ff1 	.word	0x08008ff1
 8008fc8:	08008fe1 	.word	0x08008fe1
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008fd9 	.word	0x08008fd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <USBH_UserProcess+0x58>)
 8008fda:	2203      	movs	r2, #3
 8008fdc:	701a      	strb	r2, [r3, #0]
  break;
 8008fde:	e008      	b.n	8008ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <USBH_UserProcess+0x58>)
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	701a      	strb	r2, [r3, #0]
  break;
 8008fe6:	e004      	b.n	8008ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <USBH_UserProcess+0x58>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
  break;
 8008fee:	e000      	b.n	8008ff2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ff0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	200000ac 	.word	0x200000ac

08009004 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009014:	d142      	bne.n	800909c <HAL_HCD_MspInit+0x98>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009016:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800901a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901c:	2302      	movs	r3, #2
 800901e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009024:	2303      	movs	r3, #3
 8009026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009028:	230a      	movs	r3, #10
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4619      	mov	r1, r3
 8009032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009036:	f7f7 fbd7 	bl	80007e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800903a:	4a1a      	ldr	r2, [pc, #104]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 800903c:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 800903e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009046:	4b17      	ldr	r3, [pc, #92]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 8009048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009052:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 8009054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d114      	bne.n	8009088 <HAL_HCD_MspInit+0x84>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800905e:	4a11      	ldr	r2, [pc, #68]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 8009060:	4b10      	ldr	r3, [pc, #64]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 8009062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009068:	6593      	str	r3, [r2, #88]	; 0x58
 800906a:	4b0e      	ldr	r3, [pc, #56]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 800906c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8009076:	f7f9 fc7d 	bl	8002974 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <HAL_HCD_MspInit+0xa0>)
 800907e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009084:	6593      	str	r3, [r2, #88]	; 0x58
 8009086:	e001      	b.n	800908c <HAL_HCD_MspInit+0x88>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009088:	f7f9 fc74 	bl	8002974 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800908c:	2200      	movs	r2, #0
 800908e:	2100      	movs	r1, #0
 8009090:	2043      	movs	r0, #67	; 0x43
 8009092:	f7f7 fb72 	bl	800077a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009096:	2043      	movs	r0, #67	; 0x43
 8009098:	f7f7 fb8b 	bl	80007b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800909c:	bf00      	nop
 800909e:	3728      	adds	r7, #40	; 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40021000 	.word	0x40021000

080090a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe f981 	bl	80073be <USBH_LL_IncTimer>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe f9c6 	bl	8007464 <USBH_LL_Connect>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe f9de 	bl	80074b0 <USBH_LL_Disconnect>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
 8009108:	4613      	mov	r3, r2
 800910a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe f973 	bl	8007412 <USBH_LL_PortEnabled>
} 
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe f973 	bl	800742e <USBH_LL_PortDisabled>
} 
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800915e:	2b01      	cmp	r3, #1
 8009160:	d12a      	bne.n	80091b8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009162:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <USBH_LL_Init+0x74>)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a15      	ldr	r2, [pc, #84]	; (80091c4 <USBH_LL_Init+0x74>)
 800916e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009172:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <USBH_LL_Init+0x74>)
 8009174:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009178:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800917a:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <USBH_LL_Init+0x74>)
 800917c:	2208      	movs	r2, #8
 800917e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009180:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <USBH_LL_Init+0x74>)
 8009182:	2203      	movs	r2, #3
 8009184:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <USBH_LL_Init+0x74>)
 8009188:	2200      	movs	r2, #0
 800918a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800918c:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <USBH_LL_Init+0x74>)
 800918e:	2202      	movs	r2, #2
 8009190:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <USBH_LL_Init+0x74>)
 8009194:	2200      	movs	r2, #0
 8009196:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009198:	480a      	ldr	r0, [pc, #40]	; (80091c4 <USBH_LL_Init+0x74>)
 800919a:	f7f7 fd0f 	bl	8000bbc <HAL_HCD_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80091a4:	f7ff fba2 	bl	80088ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80091a8:	4806      	ldr	r0, [pc, #24]	; (80091c4 <USBH_LL_Init+0x74>)
 80091aa:	f7f8 f8fc 	bl	80013a6 <HAL_HCD_GetCurrentFrame>
 80091ae:	4603      	mov	r3, r0
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7fe f8f4 	bl	80073a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000788 	.word	0x20000788

080091c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f8 f869 	bl	80012b6 <HAL_HCD_Start>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d816      	bhi.n	800921c <USBH_LL_Start+0x54>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <USBH_LL_Start+0x2c>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009205 	.word	0x08009205
 80091f8:	0800920b 	.word	0x0800920b
 80091fc:	08009211 	.word	0x08009211
 8009200:	08009217 	.word	0x08009217
    case HAL_OK :
      usb_status = USBH_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
    break;
 8009208:	e00b      	b.n	8009222 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800920a:	2302      	movs	r3, #2
 800920c:	73fb      	strb	r3, [r7, #15]
    break;
 800920e:	e008      	b.n	8009222 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009210:	2301      	movs	r3, #1
 8009212:	73fb      	strb	r3, [r7, #15]
    break;
 8009214:	e005      	b.n	8009222 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009216:	2302      	movs	r3, #2
 8009218:	73fb      	strb	r3, [r7, #15]
    break;
 800921a:	e002      	b.n	8009222 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 800921c:	2302      	movs	r3, #2
 800921e:	73fb      	strb	r3, [r7, #15]
    break;
 8009220:	bf00      	nop
  }
  return usb_status;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009242:	4618      	mov	r0, r3
 8009244:	f7f8 f85a 	bl	80012fc <HAL_HCD_Stop>
 8009248:	4603      	mov	r3, r0
 800924a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	2b03      	cmp	r3, #3
 8009250:	d816      	bhi.n	8009280 <USBH_LL_Stop+0x54>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <USBH_LL_Stop+0x2c>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009269 	.word	0x08009269
 800925c:	0800926f 	.word	0x0800926f
 8009260:	08009275 	.word	0x08009275
 8009264:	0800927b 	.word	0x0800927b
    case HAL_OK :
      usb_status = USBH_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
    break;
 800926c:	e00b      	b.n	8009286 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800926e:	2302      	movs	r3, #2
 8009270:	73fb      	strb	r3, [r7, #15]
    break;
 8009272:	e008      	b.n	8009286 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
    break;
 8009278:	e005      	b.n	8009286 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	73fb      	strb	r3, [r7, #15]
    break;
 800927e:	e002      	b.n	8009286 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8009280:	2302      	movs	r3, #2
 8009282:	73fb      	strb	r3, [r7, #15]
    break;
 8009284:	bf00      	nop
  }
  return usb_status;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f8 f88d 	bl	80013c2 <HAL_HCD_GetCurrentSpeed>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d007      	beq.n	80092be <USBH_LL_GetSpeed+0x2e>
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d302      	bcc.n	80092b8 <USBH_LL_GetSpeed+0x28>
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d006      	beq.n	80092c4 <USBH_LL_GetSpeed+0x34>
 80092b6:	e008      	b.n	80092ca <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
    break;
 80092bc:	e008      	b.n	80092d0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]
    break;
 80092c2:	e005      	b.n	80092d0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80092c4:	2302      	movs	r3, #2
 80092c6:	73fb      	strb	r3, [r7, #15]
    break;
 80092c8:	e002      	b.n	80092d0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80092ca:	2301      	movs	r3, #1
 80092cc:	73fb      	strb	r3, [r7, #15]
    break;
 80092ce:	bf00      	nop
  }
  return  speed;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7f8 f81f 	bl	8001336 <HAL_HCD_ResetPort>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d816      	bhi.n	8009330 <USBH_LL_ResetPort+0x54>
 8009302:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <USBH_LL_ResetPort+0x2c>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	08009319 	.word	0x08009319
 800930c:	0800931f 	.word	0x0800931f
 8009310:	08009325 	.word	0x08009325
 8009314:	0800932b 	.word	0x0800932b
    case HAL_OK :
      usb_status = USBH_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73fb      	strb	r3, [r7, #15]
    break;
 800931c:	e00b      	b.n	8009336 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800931e:	2302      	movs	r3, #2
 8009320:	73fb      	strb	r3, [r7, #15]
    break;
 8009322:	e008      	b.n	8009336 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009324:	2301      	movs	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
    break;
 8009328:	e005      	b.n	8009336 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800932a:	2302      	movs	r3, #2
 800932c:	73fb      	strb	r3, [r7, #15]
    break;
 800932e:	e002      	b.n	8009336 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 8009330:	2302      	movs	r3, #2
 8009332:	73fb      	strb	r3, [r7, #15]
    break;
 8009334:	bf00      	nop
  }
  return usb_status;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7f8 f810 	bl	800137c <HAL_HCD_HC_GetXferCount>
 800935c:	4603      	mov	r3, r0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b089      	sub	sp, #36	; 0x24
 800936c:	af04      	add	r7, sp, #16
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	4608      	mov	r0, r1
 8009372:	4611      	mov	r1, r2
 8009374:	461a      	mov	r2, r3
 8009376:	4603      	mov	r3, r0
 8009378:	70fb      	strb	r3, [r7, #3]
 800937a:	460b      	mov	r3, r1
 800937c:	70bb      	strb	r3, [r7, #2]
 800937e:	4613      	mov	r3, r2
 8009380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009390:	787c      	ldrb	r4, [r7, #1]
 8009392:	78ba      	ldrb	r2, [r7, #2]
 8009394:	78f9      	ldrb	r1, [r7, #3]
 8009396:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009398:	9302      	str	r3, [sp, #8]
 800939a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4623      	mov	r3, r4
 80093a8:	f7f7 fc5e 	bl	8000c68 <HAL_HCD_HC_Init>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d816      	bhi.n	80093e4 <USBH_LL_OpenPipe+0x7c>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <USBH_LL_OpenPipe+0x54>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093d3 	.word	0x080093d3
 80093c4:	080093d9 	.word	0x080093d9
 80093c8:	080093df 	.word	0x080093df
    case HAL_OK :
      usb_status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	e00b      	b.n	80093ea <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093d2:	2302      	movs	r3, #2
 80093d4:	73fb      	strb	r3, [r7, #15]
    break;
 80093d6:	e008      	b.n	80093ea <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	e005      	b.n	80093ea <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	73fb      	strb	r3, [r7, #15]
    break;
 80093e2:	e002      	b.n	80093ea <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 80093e4:	2302      	movs	r3, #2
 80093e6:	73fb      	strb	r3, [r7, #15]
    break;
 80093e8:	bf00      	nop
  }
  return usb_status;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd90      	pop	{r4, r7, pc}

080093f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7f7 fcc0 	bl	8000d98 <HAL_HCD_HC_Halt>
 8009418:	4603      	mov	r3, r0
 800941a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b03      	cmp	r3, #3
 8009420:	d816      	bhi.n	8009450 <USBH_LL_ClosePipe+0x5c>
 8009422:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <USBH_LL_ClosePipe+0x34>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009439 	.word	0x08009439
 800942c:	0800943f 	.word	0x0800943f
 8009430:	08009445 	.word	0x08009445
 8009434:	0800944b 	.word	0x0800944b
    case HAL_OK :
      usb_status = USBH_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
    break;
 800943c:	e00b      	b.n	8009456 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800943e:	2302      	movs	r3, #2
 8009440:	73fb      	strb	r3, [r7, #15]
    break;
 8009442:	e008      	b.n	8009456 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009444:	2301      	movs	r3, #1
 8009446:	73fb      	strb	r3, [r7, #15]
    break;
 8009448:	e005      	b.n	8009456 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800944a:	2302      	movs	r3, #2
 800944c:	73fb      	strb	r3, [r7, #15]
    break;
 800944e:	e002      	b.n	8009456 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8009450:	2302      	movs	r3, #2
 8009452:	73fb      	strb	r3, [r7, #15]
    break;
 8009454:	bf00      	nop
  }
  return usb_status;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b089      	sub	sp, #36	; 0x24
 8009464:	af04      	add	r7, sp, #16
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	4608      	mov	r0, r1
 800946a:	4611      	mov	r1, r2
 800946c:	461a      	mov	r2, r3
 800946e:	4603      	mov	r3, r0
 8009470:	70fb      	strb	r3, [r7, #3]
 8009472:	460b      	mov	r3, r1
 8009474:	70bb      	strb	r3, [r7, #2]
 8009476:	4613      	mov	r3, r2
 8009478:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009488:	787c      	ldrb	r4, [r7, #1]
 800948a:	78ba      	ldrb	r2, [r7, #2]
 800948c:	78f9      	ldrb	r1, [r7, #3]
 800948e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	4623      	mov	r3, r4
 80094a4:	f7f7 fc9c 	bl	8000de0 <HAL_HCD_HC_SubmitRequest>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d816      	bhi.n	80094e0 <USBH_LL_SubmitURB+0x80>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <USBH_LL_SubmitURB+0x58>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094c9 	.word	0x080094c9
 80094bc:	080094cf 	.word	0x080094cf
 80094c0:	080094d5 	.word	0x080094d5
 80094c4:	080094db 	.word	0x080094db
    case HAL_OK :
      usb_status = USBH_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
    break;
 80094cc:	e00b      	b.n	80094e6 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	73fb      	strb	r3, [r7, #15]
    break;
 80094d2:	e008      	b.n	80094e6 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80094d4:	2301      	movs	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	e005      	b.n	80094e6 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	73fb      	strb	r3, [r7, #15]
    break;
 80094de:	e002      	b.n	80094e6 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 80094e0:	2302      	movs	r3, #2
 80094e2:	73fb      	strb	r3, [r7, #15]
    break;
 80094e4:	bf00      	nop
  }
  return usb_status;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}

080094f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7f7 ff23 	bl	8001352 <HAL_HCD_HC_GetURBState>
 800950c:	4603      	mov	r3, r0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009528:	2b01      	cmp	r3, #1
 800952a:	d103      	bne.n	8009534 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f846 	bl	80095c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009534:	20c8      	movs	r0, #200	; 0xc8
 8009536:	f7f7 f82d 	bl	8000594 <HAL_Delay>
  return USBH_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
 8009550:	4613      	mov	r3, r2
 8009552:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800955a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800955c:	78fa      	ldrb	r2, [r7, #3]
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	440b      	add	r3, r1
 800956a:	333b      	adds	r3, #59	; 0x3b
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	68f9      	ldr	r1, [r7, #12]
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	440b      	add	r3, r1
 8009580:	3350      	adds	r3, #80	; 0x50
 8009582:	78ba      	ldrb	r2, [r7, #2]
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e009      	b.n	800959c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	68f9      	ldr	r1, [r7, #12]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	440b      	add	r3, r1
 8009596:	3351      	adds	r3, #81	; 0x51
 8009598:	78ba      	ldrb	r2, [r7, #2]
 800959a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f6 ffee 	bl	8000594 <HAL_Delay>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80095d4:	2301      	movs	r3, #1
 80095d6:	73fb      	strb	r3, [r7, #15]
 80095d8:	e001      	b.n	80095de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	461a      	mov	r2, r3
 80095e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095e6:	4803      	ldr	r0, [pc, #12]	; (80095f4 <MX_DriverVbusFS+0x34>)
 80095e8:	f7f7 faa6 	bl	8000b38 <HAL_GPIO_WritePin>
}
 80095ec:	bf00      	nop
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	48000800 	.word	0x48000800

080095f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80095f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009630 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80095fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80095fe:	e003      	b.n	8009608 <LoopCopyDataInit>

08009600 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009600:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009602:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009604:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009606:	3104      	adds	r1, #4

08009608 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009608:	480b      	ldr	r0, [pc, #44]	; (8009638 <LoopForever+0xa>)
	ldr	r3, =_edata
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <LoopForever+0xe>)
	adds	r2, r0, r1
 800960c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800960e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009610:	d3f6      	bcc.n	8009600 <CopyDataInit>
	ldr	r2, =_sbss
 8009612:	4a0b      	ldr	r2, [pc, #44]	; (8009640 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009614:	e002      	b.n	800961c <LoopFillZerobss>

08009616 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009616:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009618:	f842 3b04 	str.w	r3, [r2], #4

0800961c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <LoopForever+0x16>)
	cmp	r2, r3
 800961e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009620:	d3f9      	bcc.n	8009616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009622:	f7ff fbf7 	bl	8008e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009626:	f000 f811 	bl	800964c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800962a:	f7ff f899 	bl	8008760 <main>

0800962e <LoopForever>:

LoopForever:
    b LoopForever
 800962e:	e7fe      	b.n	800962e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009630:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8009634:	080098d0 	.word	0x080098d0
	ldr	r0, =_sdata
 8009638:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800963c:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8009640:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8009644:	20000a50 	.word	0x20000a50

08009648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009648:	e7fe      	b.n	8009648 <ADC1_2_IRQHandler>
	...

0800964c <__libc_init_array>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4e0d      	ldr	r6, [pc, #52]	; (8009684 <__libc_init_array+0x38>)
 8009650:	4c0d      	ldr	r4, [pc, #52]	; (8009688 <__libc_init_array+0x3c>)
 8009652:	1ba4      	subs	r4, r4, r6
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	2500      	movs	r5, #0
 8009658:	42a5      	cmp	r5, r4
 800965a:	d109      	bne.n	8009670 <__libc_init_array+0x24>
 800965c:	4e0b      	ldr	r6, [pc, #44]	; (800968c <__libc_init_array+0x40>)
 800965e:	4c0c      	ldr	r4, [pc, #48]	; (8009690 <__libc_init_array+0x44>)
 8009660:	f000 f8fc 	bl	800985c <_init>
 8009664:	1ba4      	subs	r4, r4, r6
 8009666:	10a4      	asrs	r4, r4, #2
 8009668:	2500      	movs	r5, #0
 800966a:	42a5      	cmp	r5, r4
 800966c:	d105      	bne.n	800967a <__libc_init_array+0x2e>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009674:	4798      	blx	r3
 8009676:	3501      	adds	r5, #1
 8009678:	e7ee      	b.n	8009658 <__libc_init_array+0xc>
 800967a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800967e:	4798      	blx	r3
 8009680:	3501      	adds	r5, #1
 8009682:	e7f2      	b.n	800966a <__libc_init_array+0x1e>
 8009684:	080098c8 	.word	0x080098c8
 8009688:	080098c8 	.word	0x080098c8
 800968c:	080098c8 	.word	0x080098c8
 8009690:	080098cc 	.word	0x080098cc

08009694 <malloc>:
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <malloc+0xc>)
 8009696:	4601      	mov	r1, r0
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f000 b861 	b.w	8009760 <_malloc_r>
 800969e:	bf00      	nop
 80096a0:	20000024 	.word	0x20000024

080096a4 <free>:
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <free+0xc>)
 80096a6:	4601      	mov	r1, r0
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f000 b80b 	b.w	80096c4 <_free_r>
 80096ae:	bf00      	nop
 80096b0:	20000024 	.word	0x20000024

080096b4 <memset>:
 80096b4:	4402      	add	r2, r0
 80096b6:	4603      	mov	r3, r0
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <memset+0xa>
 80096bc:	4770      	bx	lr
 80096be:	f803 1b01 	strb.w	r1, [r3], #1
 80096c2:	e7f9      	b.n	80096b8 <memset+0x4>

080096c4 <_free_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4605      	mov	r5, r0
 80096c8:	2900      	cmp	r1, #0
 80096ca:	d045      	beq.n	8009758 <_free_r+0x94>
 80096cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d0:	1f0c      	subs	r4, r1, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bfb8      	it	lt
 80096d6:	18e4      	addlt	r4, r4, r3
 80096d8:	f000 f8b0 	bl	800983c <__malloc_lock>
 80096dc:	4a1f      	ldr	r2, [pc, #124]	; (800975c <_free_r+0x98>)
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	4610      	mov	r0, r2
 80096e2:	b933      	cbnz	r3, 80096f2 <_free_r+0x2e>
 80096e4:	6063      	str	r3, [r4, #4]
 80096e6:	6014      	str	r4, [r2, #0]
 80096e8:	4628      	mov	r0, r5
 80096ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ee:	f000 b8a6 	b.w	800983e <__malloc_unlock>
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	d90c      	bls.n	8009710 <_free_r+0x4c>
 80096f6:	6821      	ldr	r1, [r4, #0]
 80096f8:	1862      	adds	r2, r4, r1
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bf04      	itt	eq
 80096fe:	681a      	ldreq	r2, [r3, #0]
 8009700:	685b      	ldreq	r3, [r3, #4]
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	bf04      	itt	eq
 8009706:	1852      	addeq	r2, r2, r1
 8009708:	6022      	streq	r2, [r4, #0]
 800970a:	6004      	str	r4, [r0, #0]
 800970c:	e7ec      	b.n	80096e8 <_free_r+0x24>
 800970e:	4613      	mov	r3, r2
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	b10a      	cbz	r2, 8009718 <_free_r+0x54>
 8009714:	42a2      	cmp	r2, r4
 8009716:	d9fa      	bls.n	800970e <_free_r+0x4a>
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	1858      	adds	r0, r3, r1
 800971c:	42a0      	cmp	r0, r4
 800971e:	d10b      	bne.n	8009738 <_free_r+0x74>
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	4401      	add	r1, r0
 8009724:	1858      	adds	r0, r3, r1
 8009726:	4282      	cmp	r2, r0
 8009728:	6019      	str	r1, [r3, #0]
 800972a:	d1dd      	bne.n	80096e8 <_free_r+0x24>
 800972c:	6810      	ldr	r0, [r2, #0]
 800972e:	6852      	ldr	r2, [r2, #4]
 8009730:	605a      	str	r2, [r3, #4]
 8009732:	4401      	add	r1, r0
 8009734:	6019      	str	r1, [r3, #0]
 8009736:	e7d7      	b.n	80096e8 <_free_r+0x24>
 8009738:	d902      	bls.n	8009740 <_free_r+0x7c>
 800973a:	230c      	movs	r3, #12
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	e7d3      	b.n	80096e8 <_free_r+0x24>
 8009740:	6820      	ldr	r0, [r4, #0]
 8009742:	1821      	adds	r1, r4, r0
 8009744:	428a      	cmp	r2, r1
 8009746:	bf04      	itt	eq
 8009748:	6811      	ldreq	r1, [r2, #0]
 800974a:	6852      	ldreq	r2, [r2, #4]
 800974c:	6062      	str	r2, [r4, #4]
 800974e:	bf04      	itt	eq
 8009750:	1809      	addeq	r1, r1, r0
 8009752:	6021      	streq	r1, [r4, #0]
 8009754:	605c      	str	r4, [r3, #4]
 8009756:	e7c7      	b.n	80096e8 <_free_r+0x24>
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	200000b0 	.word	0x200000b0

08009760 <_malloc_r>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	1ccd      	adds	r5, r1, #3
 8009764:	f025 0503 	bic.w	r5, r5, #3
 8009768:	3508      	adds	r5, #8
 800976a:	2d0c      	cmp	r5, #12
 800976c:	bf38      	it	cc
 800976e:	250c      	movcc	r5, #12
 8009770:	2d00      	cmp	r5, #0
 8009772:	4606      	mov	r6, r0
 8009774:	db01      	blt.n	800977a <_malloc_r+0x1a>
 8009776:	42a9      	cmp	r1, r5
 8009778:	d903      	bls.n	8009782 <_malloc_r+0x22>
 800977a:	230c      	movs	r3, #12
 800977c:	6033      	str	r3, [r6, #0]
 800977e:	2000      	movs	r0, #0
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	f000 f85b 	bl	800983c <__malloc_lock>
 8009786:	4a23      	ldr	r2, [pc, #140]	; (8009814 <_malloc_r+0xb4>)
 8009788:	6814      	ldr	r4, [r2, #0]
 800978a:	4621      	mov	r1, r4
 800978c:	b991      	cbnz	r1, 80097b4 <_malloc_r+0x54>
 800978e:	4c22      	ldr	r4, [pc, #136]	; (8009818 <_malloc_r+0xb8>)
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	b91b      	cbnz	r3, 800979c <_malloc_r+0x3c>
 8009794:	4630      	mov	r0, r6
 8009796:	f000 f841 	bl	800981c <_sbrk_r>
 800979a:	6020      	str	r0, [r4, #0]
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f000 f83c 	bl	800981c <_sbrk_r>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d126      	bne.n	80097f6 <_malloc_r+0x96>
 80097a8:	230c      	movs	r3, #12
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	4630      	mov	r0, r6
 80097ae:	f000 f846 	bl	800983e <__malloc_unlock>
 80097b2:	e7e4      	b.n	800977e <_malloc_r+0x1e>
 80097b4:	680b      	ldr	r3, [r1, #0]
 80097b6:	1b5b      	subs	r3, r3, r5
 80097b8:	d41a      	bmi.n	80097f0 <_malloc_r+0x90>
 80097ba:	2b0b      	cmp	r3, #11
 80097bc:	d90f      	bls.n	80097de <_malloc_r+0x7e>
 80097be:	600b      	str	r3, [r1, #0]
 80097c0:	50cd      	str	r5, [r1, r3]
 80097c2:	18cc      	adds	r4, r1, r3
 80097c4:	4630      	mov	r0, r6
 80097c6:	f000 f83a 	bl	800983e <__malloc_unlock>
 80097ca:	f104 000b 	add.w	r0, r4, #11
 80097ce:	1d23      	adds	r3, r4, #4
 80097d0:	f020 0007 	bic.w	r0, r0, #7
 80097d4:	1ac3      	subs	r3, r0, r3
 80097d6:	d01b      	beq.n	8009810 <_malloc_r+0xb0>
 80097d8:	425a      	negs	r2, r3
 80097da:	50e2      	str	r2, [r4, r3]
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
 80097de:	428c      	cmp	r4, r1
 80097e0:	bf0d      	iteet	eq
 80097e2:	6863      	ldreq	r3, [r4, #4]
 80097e4:	684b      	ldrne	r3, [r1, #4]
 80097e6:	6063      	strne	r3, [r4, #4]
 80097e8:	6013      	streq	r3, [r2, #0]
 80097ea:	bf18      	it	ne
 80097ec:	460c      	movne	r4, r1
 80097ee:	e7e9      	b.n	80097c4 <_malloc_r+0x64>
 80097f0:	460c      	mov	r4, r1
 80097f2:	6849      	ldr	r1, [r1, #4]
 80097f4:	e7ca      	b.n	800978c <_malloc_r+0x2c>
 80097f6:	1cc4      	adds	r4, r0, #3
 80097f8:	f024 0403 	bic.w	r4, r4, #3
 80097fc:	42a0      	cmp	r0, r4
 80097fe:	d005      	beq.n	800980c <_malloc_r+0xac>
 8009800:	1a21      	subs	r1, r4, r0
 8009802:	4630      	mov	r0, r6
 8009804:	f000 f80a 	bl	800981c <_sbrk_r>
 8009808:	3001      	adds	r0, #1
 800980a:	d0cd      	beq.n	80097a8 <_malloc_r+0x48>
 800980c:	6025      	str	r5, [r4, #0]
 800980e:	e7d9      	b.n	80097c4 <_malloc_r+0x64>
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	bf00      	nop
 8009814:	200000b0 	.word	0x200000b0
 8009818:	200000b4 	.word	0x200000b4

0800981c <_sbrk_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4c06      	ldr	r4, [pc, #24]	; (8009838 <_sbrk_r+0x1c>)
 8009820:	2300      	movs	r3, #0
 8009822:	4605      	mov	r5, r0
 8009824:	4608      	mov	r0, r1
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	f000 f80a 	bl	8009840 <_sbrk>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d102      	bne.n	8009836 <_sbrk_r+0x1a>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	b103      	cbz	r3, 8009836 <_sbrk_r+0x1a>
 8009834:	602b      	str	r3, [r5, #0]
 8009836:	bd38      	pop	{r3, r4, r5, pc}
 8009838:	20000a4c 	.word	0x20000a4c

0800983c <__malloc_lock>:
 800983c:	4770      	bx	lr

0800983e <__malloc_unlock>:
 800983e:	4770      	bx	lr

08009840 <_sbrk>:
 8009840:	4b04      	ldr	r3, [pc, #16]	; (8009854 <_sbrk+0x14>)
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	4602      	mov	r2, r0
 8009846:	b909      	cbnz	r1, 800984c <_sbrk+0xc>
 8009848:	4903      	ldr	r1, [pc, #12]	; (8009858 <_sbrk+0x18>)
 800984a:	6019      	str	r1, [r3, #0]
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	4402      	add	r2, r0
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	4770      	bx	lr
 8009854:	200000b8 	.word	0x200000b8
 8009858:	20000a50 	.word	0x20000a50

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
