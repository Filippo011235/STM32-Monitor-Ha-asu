
MonHa_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08003a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  20000068  08003ac4  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000029c  08003ac4  0002029c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006c9b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00010edf  00000000  00000000  00026d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000028e1  00000000  00000000  00037c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000bf0  00000000  00000000  0003a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e40  00000000  00000000  0003b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007719  00000000  00000000  0003bf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004cb2  00000000  00000000  00043641  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000482f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002460  00000000  00000000  00048370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003954 	.word	0x08003954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003954 	.word	0x08003954

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
	ldr	r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800059e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <LoopForever+0x16>)
	cmp	r2, r3
 80005a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005aa:	f000 fba5 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f002 fd87 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f000 f881 	bl	80006b8 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005bc:	08003a5c 	.word	0x08003a5c
	ldr	r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005c4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80005c8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80005cc:	2000029c 	.word	0x2000029c

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005d4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <_sbrk+0x2c>)
 80005d8:	6819      	ldr	r1, [r3, #0]
{
 80005da:	4602      	mov	r2, r0
	if (heap_end == 0)
 80005dc:	b909      	cbnz	r1, 80005e2 <_sbrk+0xe>
		heap_end = &end;
 80005de:	4909      	ldr	r1, [pc, #36]	; (8000604 <_sbrk+0x30>)
 80005e0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80005e2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80005e4:	4669      	mov	r1, sp
 80005e6:	4402      	add	r2, r0
 80005e8:	428a      	cmp	r2, r1
 80005ea:	d906      	bls.n	80005fa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80005ec:	f002 fd62 	bl	80030b4 <__errno>
 80005f0:	230c      	movs	r3, #12
 80005f2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80005fa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80005fc:	bd08      	pop	{r3, pc}
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084
 8000604:	2000029c 	.word	0x2000029c

08000608 <_write_uart>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//*******************************************************************************
//funkcja                                 		_write_uart()
int _write_uart(int file, char *ptr, int len){
 8000608:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2,ptr,len,50);
 800060a:	2332      	movs	r3, #50	; 0x32
int _write_uart(int file, char *ptr, int len){
 800060c:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart2,ptr,len,50);
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <_write_uart+0x14>)
 8000610:	b292      	uxth	r2, r2
 8000612:	f002 fc94 	bl	8002f3e <HAL_UART_Transmit>
	return len;
}
 8000616:	4620      	mov	r0, r4
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop
 800061c:	200001d4 	.word	0x200001d4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	2614      	movs	r6, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	a805      	add	r0, sp, #20
 800062c:	f002 fd6c 	bl	8003108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	4632      	mov	r2, r6
 8000632:	2100      	movs	r1, #0
 8000634:	4668      	mov	r0, sp
 8000636:	f002 fd67 	bl	8003108 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063a:	2288      	movs	r2, #136	; 0x88
 800063c:	2100      	movs	r1, #0
 800063e:	a816      	add	r0, sp, #88	; 0x58
 8000640:	f002 fd62 	bl	8003108 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000644:	2318      	movs	r3, #24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000646:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800064a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064c:	2707      	movs	r7, #7
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064e:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	eb0d 0006 	add.w	r0, sp, r6
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000654:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000656:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000658:	940a      	str	r4, [sp, #40]	; 0x28
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2600      	movs	r6, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000660:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f000 ff8b 	bl	8001584 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2203      	movs	r2, #3
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	210f      	movs	r1, #15
 8000674:	e88d 004e 	stmia.w	sp, {r1, r2, r3, r6}
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000678:	4668      	mov	r0, sp
 800067a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	9604      	str	r6, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067e:	f001 f9a7 	bl	80019d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <SystemClock_Config+0x94>)
 8000684:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 72;
 8000686:	2348      	movs	r3, #72	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000688:	9625      	str	r6, [sp, #148]	; 0x94
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800068a:	962f      	str	r6, [sp, #188]	; 0xbc
  PeriphClkInit.PLLSAI1.PLLSAI1N = 72;
 800068c:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800068e:	f44f 7600 	mov.w	r6, #512	; 0x200
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000696:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000698:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800069a:	9637      	str	r6, [sp, #220]	; 0xdc
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800069c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800069e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006a0:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a2:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006a4:	951c      	str	r5, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a6:	f001 fbb5 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	4630      	mov	r0, r6
 80006ac:	f000 fe20 	bl	80012f0 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80006b0:	b039      	add	sp, #228	; 0xe4
 80006b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b4:	00020802 	.word	0x00020802

080006b8 <main>:
{
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006bc:	4db4      	ldr	r5, [pc, #720]	; (8000990 <main+0x2d8>)
{
 80006be:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 80006c0:	f000 fb56 	bl	8000d70 <HAL_Init>
  SystemClock_Config();
 80006c4:	f7ff ffac 	bl	8000620 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	2214      	movs	r2, #20
 80006ca:	2100      	movs	r1, #0
 80006cc:	a80d      	add	r0, sp, #52	; 0x34
 80006ce:	f002 fd1b 	bl	8003108 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 80006d4:	48af      	ldr	r0, [pc, #700]	; (8000994 <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	64eb      	str	r3, [r5, #76]	; 0x4c
 80006dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	9308      	str	r3, [sp, #32]
 80006e4:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64eb      	str	r3, [r5, #76]	; 0x4c
 80006ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	9309      	str	r3, [sp, #36]	; 0x24
 80006f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000700:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	930a      	str	r3, [sp, #40]	; 0x28
 8000708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000712:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	930b      	str	r3, [sp, #44]	; 0x2c
 800071a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000724:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7184 	mov.w	r1, #264	; 0x108
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000734:	f000 fd3e 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	4896      	ldr	r0, [pc, #600]	; (8000998 <main+0x2e0>)

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000740:	f000 fd38 	bl	80011b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000746:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000748:	2702      	movs	r7, #2
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800074a:	a90d      	add	r1, sp, #52	; 0x34
 800074c:	4891      	ldr	r0, [pc, #580]	; (8000994 <main+0x2dc>)
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800074e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000752:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000756:	f000 fc51 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	a90d      	add	r1, sp, #52	; 0x34
 800075c:	488f      	ldr	r0, [pc, #572]	; (800099c <main+0x2e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075e:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	f000 fc4a 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000768:	232f      	movs	r3, #47	; 0x2f
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	a90d      	add	r1, sp, #52	; 0x34
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000774:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000776:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = LD_R_Pin;
 800077a:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f000 fc3e 	bl	8000ffc <HAL_GPIO_Init>
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000780:	a90d      	add	r1, sp, #52	; 0x34
 8000782:	4885      	ldr	r0, [pc, #532]	; (8000998 <main+0x2e0>)
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000784:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000788:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800078e:	f000 fc35 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000792:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000796:	a90d      	add	r1, sp, #52	; 0x34
 8000798:	487e      	ldr	r0, [pc, #504]	; (8000994 <main+0x2dc>)
  GPIO_InitStruct.Pin = LD_G_Pin;
 800079a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079e:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f000 fc2a 	bl	8000ffc <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	64ab      	str	r3, [r5, #72]	; 0x48
 80007b0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80007b2:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007b6:	4621      	mov	r1, r4
 80007b8:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ba:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007bc:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007be:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007c0:	f000 fb1a 	bl	8000df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007c4:	2039      	movs	r0, #57	; 0x39
 80007c6:	f000 fb4b 	bl	8000e60 <HAL_NVIC_EnableIRQ>
  hlcd.Instance = LCD;
 80007ca:	4875      	ldr	r0, [pc, #468]	; (80009a0 <main+0x2e8>)
 80007cc:	4b75      	ldr	r3, [pc, #468]	; (80009a4 <main+0x2ec>)
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80007ce:	6084      	str	r4, [r0, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80007d0:	250c      	movs	r5, #12
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80007d2:	e880 0018 	stmia.w	r0, {r3, r4}
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80007d6:	60c5      	str	r5, [r0, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80007d8:	6104      	str	r4, [r0, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80007da:	6144      	str	r4, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80007dc:	6184      	str	r4, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80007de:	61c4      	str	r4, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80007e0:	6204      	str	r4, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80007e2:	6304      	str	r4, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80007e4:	6284      	str	r4, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80007e6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80007e8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80007ea:	f000 fd01 	bl	80011f0 <HAL_LCD_Init>
  hqspi.Instance = QUADSPI;
 80007ee:	486e      	ldr	r0, [pc, #440]	; (80009a8 <main+0x2f0>)
  hqspi.Init.ClockPrescaler = 255;
 80007f0:	4b6e      	ldr	r3, [pc, #440]	; (80009ac <main+0x2f4>)
  hqspi.Init.FifoThreshold = 1;
 80007f2:	6086      	str	r6, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 80007f4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80007f8:	e880 0208 	stmia.w	r0, {r3, r9}
  hqspi.Init.FlashSize = 1;
 80007fc:	6106      	str	r6, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80007fe:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000800:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000802:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000804:	f000 fdd0 	bl	80013a8 <HAL_QSPI_Init>
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000808:	4869      	ldr	r0, [pc, #420]	; (80009b0 <main+0x2f8>)
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <main+0x2fc>)
 800080c:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000812:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000816:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.FrameInit.FrameLength = 64;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 32;
 800081c:	2320      	movs	r3, #32
 800081e:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  huart2.Instance = USART2;
 8000824:	4e64      	ldr	r6, [pc, #400]	; (80009b8 <main+0x300>)
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000826:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000828:	f64f 73ff 	movw	r3, #65535	; 0xffff
  hsai_BlockB1.SlotInit.SlotNumber = 4;
 800082c:	65c7      	str	r7, [r0, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 800082e:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000830:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000832:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000834:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000836:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000838:	6084      	str	r4, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800083a:	6104      	str	r4, [r0, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800083c:	6144      	str	r4, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800083e:	6184      	str	r4, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000840:	60c4      	str	r4, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000842:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000844:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000846:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000848:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800084a:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800084c:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800084e:	6584      	str	r4, [r0, #88]	; 0x58
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000850:	f002 f88a 	bl	8002968 <HAL_SAI_Init>
  huart2.Init.BaudRate = 115200;
 8000854:	4a59      	ldr	r2, [pc, #356]	; (80009bc <main+0x304>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000856:	6175      	str	r5, [r6, #20]
  huart2.Init.BaudRate = 115200;
 8000858:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085c:	4630      	mov	r0, r6
  huart2.Init.BaudRate = 115200;
 800085e:	e886 000c 	stmia.w	r6, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	60b4      	str	r4, [r6, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000868:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086a:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086c:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086e:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000870:	f002 fbee 	bl	8003050 <HAL_UART_Init>
  RTC_TimeTypeDef sTime = {0};
 8000874:	2214      	movs	r2, #20
 8000876:	4621      	mov	r1, r4
 8000878:	a80d      	add	r0, sp, #52	; 0x34
 800087a:	f002 fc45 	bl	8003108 <memset>
  hrtc.Instance = RTC;
 800087e:	4d50      	ldr	r5, [pc, #320]	; (80009c0 <main+0x308>)
 8000880:	4b50      	ldr	r3, [pc, #320]	; (80009c4 <main+0x30c>)
  hrtc.Init.SynchPrediv = 255;
 8000882:	f8c5 900c 	str.w	r9, [r5, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000886:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088a:	4628      	mov	r0, r5
  hrtc.Init.AsynchPrediv = 127;
 800088c:	237f      	movs	r3, #127	; 0x7f
  sTime.Hours = 23;
 800088e:	f04f 0917 	mov.w	r9, #23
  hrtc.Init.AsynchPrediv = 127;
 8000892:	60ab      	str	r3, [r5, #8]
  sTime.Minutes = 59;
 8000894:	f04f 0b3b 	mov.w	fp, #59	; 0x3b
  sTime.Seconds = 50;
 8000898:	f04f 0a32 	mov.w	sl, #50	; 0x32
  RTC_DateTypeDef sDate = {0};
 800089c:	9406      	str	r4, [sp, #24]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800089e:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008a0:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008a2:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a4:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a6:	f001 fead 	bl	8002604 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008aa:	4622      	mov	r2, r4
 80008ac:	a90d      	add	r1, sp, #52	; 0x34
 80008ae:	4628      	mov	r0, r5
  sTime.Hours = 23;
 80008b0:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
  sTime.Minutes = 59;
 80008b4:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  sTime.Seconds = 50;
 80008b8:	f88d a036 	strb.w	sl, [sp, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008bc:	9410      	str	r4, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008be:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008c0:	f001 ff69 	bl	8002796 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80008c4:	f88d 8018 	strb.w	r8, [sp, #24]
  RTC_Calendar.Year=19;
 80008c8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80009cc <main+0x314>
  sDate.Month = RTC_MONTH_APRIL;
 80008cc:	f88d 7019 	strb.w	r7, [sp, #25]
  sDate.Year = 19;
 80008d0:	2313      	movs	r3, #19
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80008d2:	4622      	mov	r2, r4
 80008d4:	a906      	add	r1, sp, #24
 80008d6:	4628      	mov	r0, r5
  sDate.Year = 19;
 80008d8:	f88d 301b 	strb.w	r3, [sp, #27]
 80008dc:	9305      	str	r3, [sp, #20]
  sDate.Date = 23;
 80008de:	f88d 901a 	strb.w	r9, [sp, #26]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80008e2:	f001 feef 	bl	80026c4 <HAL_RTC_SetDate>
  RTC_Calendar.Month=04;
 80008e6:	f888 7001 	strb.w	r7, [r8, #1]
  HAL_RTC_GetTime(&hrtc,&RTC_Time,RTC_FORMAT_BIN);
 80008ea:	4f37      	ldr	r7, [pc, #220]	; (80009c8 <main+0x310>)
  RTC_Calendar.Year=19;
 80008ec:	9b05      	ldr	r3, [sp, #20]
 80008ee:	f888 3003 	strb.w	r3, [r8, #3]
  HAL_RTC_SetDate(&hrtc,&RTC_Calendar,RTC_FORMAT_BIN);
 80008f2:	4622      	mov	r2, r4
 80008f4:	4641      	mov	r1, r8
 80008f6:	4628      	mov	r0, r5
  RTC_Calendar.Date=23;
 80008f8:	f888 9002 	strb.w	r9, [r8, #2]
  HAL_RTC_SetDate(&hrtc,&RTC_Calendar,RTC_FORMAT_BIN);
 80008fc:	f001 fee2 	bl	80026c4 <HAL_RTC_SetDate>
  HAL_RTC_GetTime(&hrtc,&RTC_Time,RTC_FORMAT_BIN);
 8000900:	4622      	mov	r2, r4
 8000902:	4639      	mov	r1, r7
 8000904:	4628      	mov	r0, r5
 8000906:	f001 ffcb 	bl	80028a0 <HAL_RTC_GetTime>
  HAL_RTC_SetTime(&hrtc,&RTC_Time,RTC_FORMAT_BIN);
 800090a:	4622      	mov	r2, r4
 800090c:	4639      	mov	r1, r7
 800090e:	4628      	mov	r0, r5
  RTC_Time.Hours=23;
 8000910:	f887 9000 	strb.w	r9, [r7]
  RTC_Time.Minutes=59;
 8000914:	f887 b001 	strb.w	fp, [r7, #1]
  RTC_Time.Seconds=50;
 8000918:	f887 a002 	strb.w	sl, [r7, #2]
  HAL_RTC_SetTime(&hrtc,&RTC_Time,RTC_FORMAT_BIN);
 800091c:	f001 ff3b 	bl	8002796 <HAL_RTC_SetTime>
  HAL_Delay(2000);
 8000920:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000924:	f000 fa48 	bl	8000db8 <HAL_Delay>
	  HAL_Delay(1000);
 8000928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092c:	f000 fa44 	bl	8000db8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	4817      	ldr	r0, [pc, #92]	; (8000994 <main+0x2dc>)
 8000936:	f000 fc42 	bl	80011be <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fa3c 	bl	8000db8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD_R_GPIO_Port, LD_R_Pin);
 8000940:	2104      	movs	r1, #4
 8000942:	4815      	ldr	r0, [pc, #84]	; (8000998 <main+0x2e0>)
 8000944:	f000 fc3b 	bl	80011be <HAL_GPIO_TogglePin>
	  HAL_Delay(2);
 8000948:	2002      	movs	r0, #2
 800094a:	f000 fa35 	bl	8000db8 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc,&RTC_Time,RTC_FORMAT_BIN);//pobranie do RTC_Time czasu
 800094e:	2200      	movs	r2, #0
 8000950:	491d      	ldr	r1, [pc, #116]	; (80009c8 <main+0x310>)
 8000952:	4628      	mov	r0, r5
 8000954:	f001 ffa4 	bl	80028a0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&RTC_Calendar,RTC_FORMAT_BIN);//pobranie do RTC_Calendar daty
 8000958:	2200      	movs	r2, #0
 800095a:	491c      	ldr	r1, [pc, #112]	; (80009cc <main+0x314>)
 800095c:	4628      	mov	r0, r5
 800095e:	f001 ffc3 	bl	80028e8 <HAL_RTC_GetDate>
	  size=sprintf(data,"Czas rtc: %dh\t%dm\t%ds \t  Data rtc:%d.%d.20%d\n",RTC_Time.Hours,RTC_Time.Minutes,RTC_Time.Seconds,RTC_Calendar.Date,RTC_Calendar.Month,RTC_Calendar.Year);
 8000962:	f898 1003 	ldrb.w	r1, [r8, #3]
 8000966:	787b      	ldrb	r3, [r7, #1]
 8000968:	783a      	ldrb	r2, [r7, #0]
 800096a:	9103      	str	r1, [sp, #12]
 800096c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8000970:	9102      	str	r1, [sp, #8]
 8000972:	f898 1002 	ldrb.w	r1, [r8, #2]
 8000976:	9101      	str	r1, [sp, #4]
 8000978:	78b9      	ldrb	r1, [r7, #2]
 800097a:	9100      	str	r1, [sp, #0]
 800097c:	a80d      	add	r0, sp, #52	; 0x34
 800097e:	4914      	ldr	r1, [pc, #80]	; (80009d0 <main+0x318>)
 8000980:	f002 fbca 	bl	8003118 <siprintf>
	  _write_uart(&huart2, data, size);
 8000984:	a90d      	add	r1, sp, #52	; 0x34
 8000986:	b282      	uxth	r2, r0
 8000988:	4630      	mov	r0, r6
 800098a:	f7ff fe3d 	bl	8000608 <_write_uart>
 800098e:	e021      	b.n	80009d4 <main+0x31c>
 8000990:	40021000 	.word	0x40021000
 8000994:	48001000 	.word	0x48001000
 8000998:	48000400 	.word	0x48000400
 800099c:	48000800 	.word	0x48000800
 80009a0:	20000198 	.word	0x20000198
 80009a4:	40002400 	.word	0x40002400
 80009a8:	20000250 	.word	0x20000250
 80009ac:	a0001000 	.word	0xa0001000
 80009b0:	200000a8 	.word	0x200000a8
 80009b4:	40015424 	.word	0x40015424
 80009b8:	200001d4 	.word	0x200001d4
 80009bc:	40004400 	.word	0x40004400
 80009c0:	2000012c 	.word	0x2000012c
 80009c4:	40002800 	.word	0x40002800
 80009c8:	20000094 	.word	0x20000094
 80009cc:	2000024c 	.word	0x2000024c
 80009d0:	0800396c 	.word	0x0800396c
	  size=sprintf(data,"surowy rtc:%d \t \t \t przetworzony %d\n",temp1,temp2);
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <main+0x334>)
 80009d6:	4906      	ldr	r1, [pc, #24]	; (80009f0 <main+0x338>)
 80009d8:	2200      	movs	r2, #0
 80009da:	a80d      	add	r0, sp, #52	; 0x34
 80009dc:	f002 fb9c 	bl	8003118 <siprintf>
	  _write_uart(&huart2, data, size);
 80009e0:	a90d      	add	r1, sp, #52	; 0x34
 80009e2:	b282      	uxth	r2, r0
 80009e4:	4630      	mov	r0, r6
 80009e6:	f7ff fe0f 	bl	8000608 <_write_uart>
 80009ea:	e79d      	b.n	8000928 <main+0x270>
 80009ec:	0002515c 	.word	0x0002515c
 80009f0:	0800399a 	.word	0x0800399a

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x2c>)
 80009fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009fc:	f042 0201 	orr.w	r2, r2, #1
 8000a00:	661a      	str	r2, [r3, #96]	; 0x60
 8000a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000a04:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	f002 0201 	and.w	r2, r2, #1
 8000a0a:	9200      	str	r2, [sp, #0]
 8000a0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a14:	659a      	str	r2, [r3, #88]	; 0x58
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	b002      	add	sp, #8
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000a28:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	2214      	movs	r2, #20
{
 8000a2c:	b08a      	sub	sp, #40	; 0x28
 8000a2e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	2100      	movs	r1, #0
 8000a32:	eb0d 0002 	add.w	r0, sp, r2
 8000a36:	f002 fb67 	bl	8003108 <memset>
  if(hlcd->Instance==LCD)
 8000a3a:	6822      	ldr	r2, [r4, #0]
 8000a3c:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <HAL_LCD_MspInit+0xd8>)
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d15c      	bne.n	8000afc <HAL_LCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a42:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	482e      	ldr	r0, [pc, #184]	; (8000b04 <HAL_LCD_MspInit+0xdc>)
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a50:	659a      	str	r2, [r3, #88]	; 0x58
 8000a52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a54:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a5e:	f042 0204 	orr.w	r2, r2, #4
 8000a62:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a66:	f002 0204 	and.w	r2, r2, #4
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a70:	f042 0201 	orr.w	r2, r2, #1
 8000a74:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a78:	f002 0201 	and.w	r2, r2, #1
 8000a7c:	9202      	str	r2, [sp, #8]
 8000a7e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a82:	f042 0202 	orr.w	r2, r2, #2
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a8a:	f002 0202 	and.w	r2, r2, #2
 8000a8e:	9203      	str	r2, [sp, #12]
 8000a90:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a94:	f042 0208 	orr.w	r2, r2, #8
 8000a98:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000aa4:	250b      	movs	r5, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000aa8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000aaa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	a905      	add	r1, sp, #20

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000ab2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f000 faa2 	bl	8000ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000ab8:	f248 73c0 	movw	r3, #34752	; 0x87c0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	a905      	add	r1, sp, #20
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000ac2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000aca:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f000 fa96 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000ad0:	f24f 2333 	movw	r3, #62003	; 0xf233
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	a905      	add	r1, sp, #20
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_LCD_MspInit+0xe0>)
    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000ad8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ae0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f000 fa8b 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000ae6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	a905      	add	r1, sp, #20
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <HAL_LCD_MspInit+0xe4>)
    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000aee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000af6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	f000 fa80 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000afc:	b00a      	add	sp, #40	; 0x28
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	40002400 	.word	0x40002400
 8000b04:	48000800 	.word	0x48000800
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	48000c00 	.word	0x48000c00

08000b10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b10:	b510      	push	{r4, lr}
 8000b12:	4604      	mov	r4, r0
 8000b14:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	2214      	movs	r2, #20
 8000b18:	2100      	movs	r1, #0
 8000b1a:	a803      	add	r0, sp, #12
 8000b1c:	f002 faf4 	bl	8003108 <memset>
  if(hqspi->Instance==QUADSPI)
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_QSPI_MspInit+0x64>)
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d122      	bne.n	8000b6e <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b28:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8000b2c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b30:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8000b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b3e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b48:	f042 0210 	orr.w	r2, r2, #16
 8000b4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000b58:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b66:	230a      	movs	r3, #10
 8000b68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f000 fa47 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b6e:	b008      	add	sp, #32
 8000b70:	bd10      	pop	{r4, pc}
 8000b72:	bf00      	nop
 8000b74:	a0001000 	.word	0xa0001000
 8000b78:	48001000 	.word	0x48001000

08000b7c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000b7c:	6802      	ldr	r2, [r0, #0]
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_RTC_MspInit+0x18>)
 8000b80:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b82:	bf01      	itttt	eq
 8000b84:	4a04      	ldreq	r2, [pc, #16]	; (8000b98 <HAL_RTC_MspInit+0x1c>)
 8000b86:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8000b8a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8000b8e:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8000b92:	4770      	bx	lr
 8000b94:	40002800 	.word	0x40002800
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	2214      	movs	r2, #20
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	a803      	add	r0, sp, #12
 8000ba8:	f002 faae 	bl	8003108 <memset>
  if(huart->Instance==USART2)
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_UART_MspInit+0x60>)
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d121      	bne.n	8000bf8 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	4810      	ldr	r0, [pc, #64]	; (8000c00 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bc2:	659a      	str	r2, [r3, #88]	; 0x58
 8000bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bc6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000bca:	9201      	str	r2, [sp, #4]
 8000bcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd0:	f042 0208 	orr.w	r2, r2, #8
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f000 fa02 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf8:	b008      	add	sp, #32
 8000bfa:	bd10      	pop	{r4, pc}
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	48000c00 	.word	0x48000c00

08000c04 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8000c08:	6802      	ldr	r2, [r0, #0]
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <HAL_SAI_MspInit+0xb8>)
 8000c0c:	429a      	cmp	r2, r3
{
 8000c0e:	b086      	sub	sp, #24
 8000c10:	4606      	mov	r6, r0
    if(hsai->Instance==SAI1_Block_B)
 8000c12:	d150      	bne.n	8000cb6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_SAI_MspInit+0xbc>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	b94a      	cbnz	r2, 8000c2e <HAL_SAI_MspInit+0x2a>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000c1a:	492a      	ldr	r1, [pc, #168]	; (8000cc4 <HAL_SAI_MspInit+0xc0>)
 8000c1c:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8000c1e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8000c22:	6608      	str	r0, [r1, #96]	; 0x60
 8000c24:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8000c26:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 8000c2a:	9100      	str	r1, [sp, #0]
 8000c2c:	9900      	ldr	r1, [sp, #0]
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <HAL_SAI_MspInit+0xc4>)
    SAI1_client ++;
 8000c30:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2500      	movs	r5, #0
    SAI1_client ++;
 8000c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c36:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8000c3c:	f04f 0880 	mov.w	r8, #128	; 0x80
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000c40:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c44:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8000c46:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f000 f9d5 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c56:	a901      	add	r1, sp, #4
 8000c58:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <HAL_SAI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000c5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c5c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f000 f9ca 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c68:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	a901      	add	r1, sp, #4
 8000c6c:	4817      	ldr	r0, [pc, #92]	; (8000ccc <HAL_SAI_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c6e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c70:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	9702      	str	r7, [sp, #8]

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA2_Channel2;
 8000c74:	4c16      	ldr	r4, [pc, #88]	; (8000cd0 <HAL_SAI_MspInit+0xcc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f000 f9bf 	bl	8000ffc <HAL_GPIO_Init>
    hdma_sai1_b.Init.Request = DMA_REQUEST_1;
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7e:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <HAL_SAI_MspInit+0xd0>)
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	60e5      	str	r5, [r4, #12]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c82:	2310      	movs	r3, #16
 8000c84:	2201      	movs	r2, #1
 8000c86:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8e:	6163      	str	r3, [r4, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c94:	61a3      	str	r3, [r4, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000c96:	2320      	movs	r3, #32
 8000c98:	61e3      	str	r3, [r4, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000c9a:	4620      	mov	r0, r4
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000ca0:	f8c4 8010 	str.w	r8, [r4, #16]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000ca4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000ca6:	f000 f8fd 	bl	8000ea4 <HAL_DMA_Init>
 8000caa:	b108      	cbz	r0, 8000cb0 <HAL_SAI_MspInit+0xac>
    {
      Error_Handler();
 8000cac:	f7ff fea2 	bl	80009f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8000cb0:	6734      	str	r4, [r6, #112]	; 0x70
 8000cb2:	62a6      	str	r6, [r4, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8000cb4:	66f4      	str	r4, [r6, #108]	; 0x6c
    }
}
 8000cb6:	b006      	add	sp, #24
 8000cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cbc:	40015424 	.word	0x40015424
 8000cc0:	20000088 	.word	0x20000088
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	20000150 	.word	0x20000150
 8000cd4:	4002041c 	.word	0x4002041c

08000cd8 <NMI_Handler>:
 8000cd8:	4770      	bx	lr

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler>

08000ce2 <SVC_Handler>:
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 b858 	b.w	8000d9c <HAL_IncTick>

08000cec <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <DMA2_Channel2_IRQHandler+0x8>)
 8000cee:	f000 b93b 	b.w	8000f68 <HAL_DMA_IRQHandler>
 8000cf2:	bf00      	nop
 8000cf4:	20000150 	.word	0x20000150

08000cf8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	490f      	ldr	r1, [pc, #60]	; (8000d38 <SystemInit+0x40>)
 8000cfa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000cfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <SystemInit+0x44>)
 8000d08:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d0a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8000d12:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000d1a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000d1e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d2c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d2e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	608b      	str	r3, [r1, #8]
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_InitTick+0x2c>)
{
 8000d44:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d50:	f000 f892 	bl	8000e78 <HAL_SYSTICK_Config>
 8000d54:	4604      	mov	r4, r0
 8000d56:	b938      	cbnz	r0, 8000d68 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4629      	mov	r1, r5
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f84a 	bl	8000df8 <HAL_NVIC_SetPriority>
 8000d64:	4620      	mov	r0, r4
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_Init+0x28>)
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000d78:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	f000 f829 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ffdc 	bl	8000d40 <HAL_InitTick>
 8000d88:	4604      	mov	r4, r0
 8000d8a:	b918      	cbnz	r0, 8000d94 <HAL_Init+0x24>
    HAL_MspInit();
 8000d8c:	f7ff fe34 	bl	80009f8 <HAL_MspInit>
}
 8000d90:	4620      	mov	r0, r4
 8000d92:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000d94:	2401      	movs	r4, #1
 8000d96:	e7fb      	b.n	8000d90 <HAL_Init+0x20>
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d9c:	4a02      	ldr	r2, [pc, #8]	; (8000da8 <HAL_IncTick+0xc>)
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000294 	.word	0x20000294

08000dac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <HAL_GetTick+0x8>)
 8000dae:	6818      	ldr	r0, [r3, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000294 	.word	0x20000294

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff fff6 	bl	8000dac <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000dc2:	4605      	mov	r5, r0
  {
    wait++;
 8000dc4:	bf18      	it	ne
 8000dc6:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc8:	f7ff fff0 	bl	8000dac <HAL_GetTick>
 8000dcc:	1b40      	subs	r0, r0, r5
 8000dce:	4284      	cmp	r4, r0
 8000dd0:	d8fa      	bhi.n	8000dc8 <HAL_Delay+0x10>
  {
  }
}
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000de4:	0200      	lsls	r0, r0, #8
 8000de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000dee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000df0:	60d3      	str	r3, [r2, #12]
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b530      	push	{r4, r5, lr}
 8000dfc:	68dc      	ldr	r4, [r3, #12]
 8000dfe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	bf28      	it	cs
 8000e0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 0501 	mov.w	r5, #1
 8000e14:	fa05 f303 	lsl.w	r3, r5, r3
 8000e18:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1c:	bf8c      	ite	hi
 8000e1e:	3c03      	subhi	r4, #3
 8000e20:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e22:	4019      	ands	r1, r3
 8000e24:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e26:	fa05 f404 	lsl.w	r4, r5, r4
 8000e2a:	3c01      	subs	r4, #1
 8000e2c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	ea42 0201 	orr.w	r2, r2, r1
 8000e34:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	bfaf      	iteee	ge
 8000e3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	f000 000f 	andlt.w	r0, r0, #15
 8000e42:	4b06      	ldrlt	r3, [pc, #24]	; (8000e5c <HAL_NVIC_SetPriority+0x64>)
 8000e44:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	bfa5      	ittet	ge
 8000e48:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e4c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e54:	bd30      	pop	{r4, r5, pc}
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	e000ed14 	.word	0xe000ed14

08000e60 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e60:	0942      	lsrs	r2, r0, #5
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 001f 	and.w	r0, r0, #31
 8000e68:	fa03 f000 	lsl.w	r0, r3, r0
 8000e6c:	4b01      	ldr	r3, [pc, #4]	; (8000e74 <HAL_NVIC_EnableIRQ+0x14>)
 8000e6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	3801      	subs	r0, #1
 8000e7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e7e:	d20a      	bcs.n	8000e96 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e84:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	21f0      	movs	r1, #240	; 0xf0
 8000e88:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d04e      	beq.n	8000f48 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eaa:	6801      	ldr	r1, [r0, #0]
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <HAL_DMA_Init+0xa8>)
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f04f 0414 	mov.w	r4, #20
 8000eb4:	d840      	bhi.n	8000f38 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eb6:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <HAL_DMA_Init+0xac>)
 8000eb8:	440a      	add	r2, r1
 8000eba:	fbb2 f2f4 	udiv	r2, r2, r4
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ec2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8000ec6:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ece:	6884      	ldr	r4, [r0, #8]
 8000ed0:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000ed4:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000ed6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed8:	432b      	orrs	r3, r5
 8000eda:	6945      	ldr	r5, [r0, #20]
 8000edc:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	6985      	ldr	r5, [r0, #24]
 8000ee0:	432b      	orrs	r3, r5
 8000ee2:	69c5      	ldr	r5, [r0, #28]
 8000ee4:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee6:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ee8:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000eec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef0:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000ef2:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ef4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000ef8:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000efa:	d014      	beq.n	8000f26 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000efc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_DMA_Init+0xb0>)
 8000f00:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f02:	bf0c      	ite	eq
 8000f04:	4914      	ldreq	r1, [pc, #80]	; (8000f58 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f06:	4915      	ldrne	r1, [pc, #84]	; (8000f5c <HAL_DMA_Init+0xb8>)
 8000f08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f0a:	680a      	ldr	r2, [r1, #0]
 8000f0c:	f003 031c 	and.w	r3, r3, #28
 8000f10:	240f      	movs	r4, #15
 8000f12:	409c      	lsls	r4, r3
 8000f14:	ea22 0204 	bic.w	r2, r2, r4
 8000f18:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f1a:	6842      	ldr	r2, [r0, #4]
 8000f1c:	680c      	ldr	r4, [r1, #0]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	4323      	orrs	r3, r4
 8000f24:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f28:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f2c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8000f30:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_DMA_Init+0xbc>)
 8000f3a:	440b      	add	r3, r1
 8000f3c:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_DMA_Init+0xc0>)
 8000f46:	e7be      	b.n	8000ec6 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
}
 8000f4a:	bd30      	pop	{r4, r5, pc}
 8000f4c:	40020407 	.word	0x40020407
 8000f50:	bffdfff8 	.word	0xbffdfff8
 8000f54:	40020000 	.word	0x40020000
 8000f58:	400200a8 	.word	0x400200a8
 8000f5c:	400204a8 	.word	0x400204a8
 8000f60:	bffdfbf8 	.word	0xbffdfbf8
 8000f64:	40020400 	.word	0x40020400

08000f68 <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f68:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000f6c:	6803      	ldr	r3, [r0, #0]
{
 8000f6e:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f70:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f74:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f76:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f78:	2404      	movs	r4, #4
 8000f7a:	4094      	lsls	r4, r2
 8000f7c:	4226      	tst	r6, r4
 8000f7e:	d00e      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x36>
 8000f80:	f015 0f04 	tst.w	r5, #4
 8000f84:	d00b      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f8a:	bf5e      	ittt	pl
 8000f8c:	681a      	ldrpl	r2, [r3, #0]
 8000f8e:	f022 0204 	bicpl.w	r2, r2, #4
 8000f92:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000f94:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000f96:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000f98:	b373      	cbz	r3, 8000ff8 <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8000f9a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f9c:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000f9e:	2402      	movs	r4, #2
 8000fa0:	4094      	lsls	r4, r2
 8000fa2:	4226      	tst	r6, r4
 8000fa4:	d012      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x64>
 8000fa6:	f015 0f02 	tst.w	r5, #2
 8000faa:	d00f      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	0695      	lsls	r5, r2, #26
 8000fb0:	d406      	bmi.n	8000fc0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f022 020a 	bic.w	r2, r2, #10
 8000fb8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000fc0:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fc2:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000fc4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8000fc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fca:	e7e5      	b.n	8000f98 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000fcc:	2408      	movs	r4, #8
 8000fce:	4094      	lsls	r4, r2
 8000fd0:	4234      	tst	r4, r6
 8000fd2:	d011      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x90>
 8000fd4:	072c      	lsls	r4, r5, #28
 8000fd6:	d50f      	bpl.n	8000ff8 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd8:	681c      	ldr	r4, [r3, #0]
 8000fda:	f024 040e 	bic.w	r4, r4, #14
 8000fde:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	fa03 f202 	lsl.w	r2, r3, r2
 8000fe6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fe8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000fea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ff6:	e7cf      	b.n	8000f98 <HAL_DMA_IRQHandler+0x30>
}
 8000ff8:	bc70      	pop	{r4, r5, r6}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80011b0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001008:	4c67      	ldr	r4, [pc, #412]	; (80011a8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 800100c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	9a01      	ldr	r2, [sp, #4]
 8001010:	40da      	lsrs	r2, r3
 8001012:	d102      	bne.n	800101a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001014:	b005      	add	sp, #20
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101a:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 800101c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101e:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001020:	ea12 0e06 	ands.w	lr, r2, r6
 8001024:	f000 80b1 	beq.w	800118a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001028:	684a      	ldr	r2, [r1, #4]
 800102a:	f022 0710 	bic.w	r7, r2, #16
 800102e:	2f02      	cmp	r7, #2
 8001030:	d116      	bne.n	8001060 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001032:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001036:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800103a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800103e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001042:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001046:	f04f 0c0f 	mov.w	ip, #15
 800104a:	fa0c fc0a 	lsl.w	ip, ip, sl
 800104e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001052:	690d      	ldr	r5, [r1, #16]
 8001054:	fa05 f50a 	lsl.w	r5, r5, sl
 8001058:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	f8c9 5020 	str.w	r5, [r9, #32]
 8001060:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001064:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001066:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800106a:	fa05 f50c 	lsl.w	r5, r5, ip
 800106e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001070:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001074:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001078:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001084:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001088:	d811      	bhi.n	80010ae <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800108a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001090:	68cf      	ldr	r7, [r1, #12]
 8001092:	fa07 f70c 	lsl.w	r7, r7, ip
 8001096:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800109a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800109c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80010a6:	409f      	lsls	r7, r3
 80010a8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80010ac:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ae:	f1ba 0f03 	cmp.w	sl, #3
 80010b2:	d107      	bne.n	80010c4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80010b4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010b6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010ba:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80010be:	409f      	lsls	r7, r3
 80010c0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80010c2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80010c4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010c8:	688e      	ldr	r6, [r1, #8]
 80010ca:	fa06 f60c 	lsl.w	r6, r6, ip
 80010ce:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80010d0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d2:	00d5      	lsls	r5, r2, #3
 80010d4:	d559      	bpl.n	800118a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80010da:	f045 0501 	orr.w	r5, r5, #1
 80010de:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80010e2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80010e6:	f023 0603 	bic.w	r6, r3, #3
 80010ea:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80010ee:	f005 0501 	and.w	r5, r5, #1
 80010f2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80010f6:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fc:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80010fe:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001100:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001104:	270f      	movs	r7, #15
 8001106:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001112:	d03c      	beq.n	800118e <HAL_GPIO_Init+0x192>
 8001114:	4d25      	ldr	r5, [pc, #148]	; (80011ac <HAL_GPIO_Init+0x1b0>)
 8001116:	42a8      	cmp	r0, r5
 8001118:	d03b      	beq.n	8001192 <HAL_GPIO_Init+0x196>
 800111a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800111e:	42a8      	cmp	r0, r5
 8001120:	d039      	beq.n	8001196 <HAL_GPIO_Init+0x19a>
 8001122:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001126:	42a8      	cmp	r0, r5
 8001128:	d037      	beq.n	800119a <HAL_GPIO_Init+0x19e>
 800112a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800112e:	42a8      	cmp	r0, r5
 8001130:	d035      	beq.n	800119e <HAL_GPIO_Init+0x1a2>
 8001132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001136:	42a8      	cmp	r0, r5
 8001138:	d033      	beq.n	80011a2 <HAL_GPIO_Init+0x1a6>
 800113a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800113e:	42a8      	cmp	r0, r5
 8001140:	bf14      	ite	ne
 8001142:	2507      	movne	r5, #7
 8001144:	2506      	moveq	r5, #6
 8001146:	fa05 f50c 	lsl.w	r5, r5, ip
 800114a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800114c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800114e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001150:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001154:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001156:	bf54      	ite	pl
 8001158:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800115a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800115e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001160:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001162:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001164:	bf54      	ite	pl
 8001166:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001168:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800116c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800116e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001170:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001172:	bf54      	ite	pl
 8001174:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001176:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800117a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800117c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117e:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001180:	bf54      	ite	pl
 8001182:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001184:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001188:	60e5      	str	r5, [r4, #12]
    position++;
 800118a:	3301      	adds	r3, #1
 800118c:	e73f      	b.n	800100e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118e:	2500      	movs	r5, #0
 8001190:	e7d9      	b.n	8001146 <HAL_GPIO_Init+0x14a>
 8001192:	2501      	movs	r5, #1
 8001194:	e7d7      	b.n	8001146 <HAL_GPIO_Init+0x14a>
 8001196:	2502      	movs	r5, #2
 8001198:	e7d5      	b.n	8001146 <HAL_GPIO_Init+0x14a>
 800119a:	2503      	movs	r5, #3
 800119c:	e7d3      	b.n	8001146 <HAL_GPIO_Init+0x14a>
 800119e:	2504      	movs	r5, #4
 80011a0:	e7d1      	b.n	8001146 <HAL_GPIO_Init+0x14a>
 80011a2:	2505      	movs	r5, #5
 80011a4:	e7cf      	b.n	8001146 <HAL_GPIO_Init+0x14a>
 80011a6:	bf00      	nop
 80011a8:	40010400 	.word	0x40010400
 80011ac:	48000400 	.word	0x48000400
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	b10a      	cbz	r2, 80011ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	6181      	str	r1, [r0, #24]
 80011b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ba:	6281      	str	r1, [r0, #40]	; 0x28
 80011bc:	4770      	bx	lr

080011be <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011be:	6943      	ldr	r3, [r0, #20]
 80011c0:	4059      	eors	r1, r3
 80011c2:	6141      	str	r1, [r0, #20]
 80011c4:	4770      	bx	lr

080011c6 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 80011c6:	b538      	push	{r3, r4, r5, lr}
 80011c8:	4604      	mov	r4, r0
  uint32_t tickstart = 0x00;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80011ca:	f7ff fdef 	bl	8000dac <HAL_GetTick>
 80011ce:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	069b      	lsls	r3, r3, #26
 80011d6:	d501      	bpl.n	80011dc <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80011d8:	2000      	movs	r0, #0
}
 80011da:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80011dc:	f7ff fde6 	bl	8000dac <HAL_GetTick>
 80011e0:	1b40      	subs	r0, r0, r5
 80011e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80011e6:	d9f3      	bls.n	80011d0 <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80011e8:	2301      	movs	r3, #1
 80011ea:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	bd38      	pop	{r3, r4, r5, pc}

080011f0 <HAL_LCD_Init>:
{
 80011f0:	b538      	push	{r3, r4, r5, lr}
  if(hlcd == NULL)
 80011f2:	4604      	mov	r4, r0
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d071      	beq.n	80012dc <HAL_LCD_Init+0xec>
  if(hlcd->State == HAL_LCD_STATE_RESET)
 80011f8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80011fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001200:	b91b      	cbnz	r3, 800120a <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 8001202:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 8001206:	f7ff fc0f 	bl	8000a28 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 800120a:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 800120c:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 800120e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6013      	str	r3, [r2, #0]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800121a:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 800121c:	4618      	mov	r0, r3
 800121e:	1d19      	adds	r1, r3, #4
 8001220:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001224:	3301      	adds	r3, #1
 8001226:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 8001228:	6048      	str	r0, [r1, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800122a:	d1f8      	bne.n	800121e <HAL_LCD_Init+0x2e>
  hlcd->Instance->SR |= LCD_SR_UDR;
 800122c:	6893      	ldr	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 800122e:	68a0      	ldr	r0, [r4, #8]
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6093      	str	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	6851      	ldr	r1, [r2, #4]
 800123a:	4303      	orrs	r3, r0
 800123c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800123e:	4303      	orrs	r3, r0
 8001240:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001242:	4303      	orrs	r3, r0
 8001244:	69e0      	ldr	r0, [r4, #28]
 8001246:	4303      	orrs	r3, r0
 8001248:	6a20      	ldr	r0, [r4, #32]
 800124a:	4303      	orrs	r3, r0
 800124c:	69a0      	ldr	r0, [r4, #24]
 800124e:	f021 717f 	bic.w	r1, r1, #66846720	; 0x3fc0000
 8001252:	4303      	orrs	r3, r0
 8001254:	f421 317f 	bic.w	r1, r1, #261120	; 0x3fc00
 8001258:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800125a:	f421 717c 	bic.w	r1, r1, #1008	; 0x3f0
 800125e:	f021 0101 	bic.w	r1, r1, #1
 8001262:	4303      	orrs	r3, r0
 8001264:	430b      	orrs	r3, r1
 8001266:	6053      	str	r3, [r2, #4]
  LCD_WaitForSynchro(hlcd);
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff ffac 	bl	80011c6 <LCD_WaitForSynchro>
  MODIFY_REG(hlcd->Instance->CR, \
 800126e:	6920      	ldr	r0, [r4, #16]
 8001270:	68e3      	ldr	r3, [r4, #12]
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	4303      	orrs	r3, r0
 8001276:	6960      	ldr	r0, [r4, #20]
 8001278:	6811      	ldr	r1, [r2, #0]
 800127a:	4303      	orrs	r3, r0
 800127c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800127e:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 8001282:	4303      	orrs	r3, r0
 8001284:	430b      	orrs	r3, r1
 8001286:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001290:	f7ff fd8c 	bl	8000dac <HAL_GetTick>
 8001294:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	07da      	lsls	r2, r3, #31
 800129c:	d50c      	bpl.n	80012b8 <HAL_LCD_Init+0xc8>
  tickstart = HAL_GetTick();
 800129e:	f7ff fd85 	bl	8000dac <HAL_GetTick>
 80012a2:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	06db      	lsls	r3, r3, #27
 80012aa:	d50f      	bpl.n	80012cc <HAL_LCD_Init+0xdc>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80012ac:	2000      	movs	r0, #0
  hlcd->State= HAL_LCD_STATE_READY;
 80012ae:	2301      	movs	r3, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80012b0:	63a0      	str	r0, [r4, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 80012b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80012b8:	f7ff fd78 	bl	8000dac <HAL_GetTick>
 80012bc:	1b40      	subs	r0, r0, r5
 80012be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012c2:	d9e8      	bls.n	8001296 <HAL_LCD_Init+0xa6>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80012c4:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80012c6:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 80012c8:	2003      	movs	r0, #3
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80012cc:	f7ff fd6e 	bl	8000dac <HAL_GetTick>
 80012d0:	1b40      	subs	r0, r0, r5
 80012d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012d6:	d9e5      	bls.n	80012a4 <HAL_LCD_Init+0xb4>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80012d8:	2310      	movs	r3, #16
 80012da:	e7f4      	b.n	80012c6 <HAL_LCD_Init+0xd6>
    return HAL_ERROR;
 80012dc:	2001      	movs	r0, #1
}
 80012de:	bd38      	pop	{r3, r4, r5, pc}

080012e0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_PWREx_GetVoltageRange+0xc>)
 80012e2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80012e4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fc:	d11c      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001302:	d015      	beq.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800130a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001310:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001312:	6811      	ldr	r1, [r2, #0]
 8001314:	2232      	movs	r2, #50	; 0x32
 8001316:	434a      	muls	r2, r1
 8001318:	490f      	ldr	r1, [pc, #60]	; (8001358 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800131a:	fbb2 f2f1 	udiv	r2, r2, r1
 800131e:	4619      	mov	r1, r3
 8001320:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001322:	6958      	ldr	r0, [r3, #20]
 8001324:	0540      	lsls	r0, r0, #21
 8001326:	d500      	bpl.n	800132a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001328:	b922      	cbnz	r2, 8001334 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	694b      	ldr	r3, [r1, #20]
 800132c:	055b      	lsls	r3, r3, #21
 800132e:	d40d      	bmi.n	800134c <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001330:	2000      	movs	r0, #0
 8001332:	4770      	bx	lr
        wait_loop_index--;
 8001334:	3a01      	subs	r2, #1
 8001336:	e7f4      	b.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001338:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800133c:	bf1f      	itttt	ne
 800133e:	681a      	ldrne	r2, [r3, #0]
 8001340:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001344:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001348:	601a      	strne	r2, [r3, #0]
 800134a:	e7f1      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 800134c:	2003      	movs	r0, #3
}
 800134e:	4770      	bx	lr
 8001350:	40007000 	.word	0x40007000
 8001354:	20000000 	.word	0x20000000
 8001358:	000f4240 	.word	0x000f4240

0800135c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001360:	9d06      	ldr	r5, [sp, #24]
 8001362:	4604      	mov	r4, r0
 8001364:	460f      	mov	r7, r1
 8001366:	4616      	mov	r6, r2
 8001368:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800136a:	6821      	ldr	r1, [r4, #0]
 800136c:	688a      	ldr	r2, [r1, #8]
 800136e:	423a      	tst	r2, r7
 8001370:	bf14      	ite	ne
 8001372:	2201      	movne	r2, #1
 8001374:	2200      	moveq	r2, #0
 8001376:	42b2      	cmp	r2, r6
 8001378:	d102      	bne.n	8001380 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800137a:	2000      	movs	r0, #0
}
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001380:	1c6b      	adds	r3, r5, #1
 8001382:	d0f3      	beq.n	800136c <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001384:	f7ff fd12 	bl	8000dac <HAL_GetTick>
 8001388:	eba0 0008 	sub.w	r0, r0, r8
 800138c:	4285      	cmp	r5, r0
 800138e:	d301      	bcc.n	8001394 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001390:	2d00      	cmp	r5, #0
 8001392:	d1ea      	bne.n	800136a <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001394:	2304      	movs	r3, #4
 8001396:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800139a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80013a2:	2001      	movs	r0, #1
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013a8 <HAL_QSPI_Init>:
{
 80013a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fcfe 	bl	8000dac <HAL_GetTick>
 80013b0:	4605      	mov	r5, r0
  if(hqspi == NULL)
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d049      	beq.n	800144a <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 80013b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d047      	beq.n	800144e <HAL_QSPI_Init+0xa6>
 80013be:	2301      	movs	r3, #1
 80013c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80013c4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80013c8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80013cc:	b93a      	cbnz	r2, 80013de <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 80013ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fb9c 	bl	8000b10 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80013d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80013dc:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80013de:	6820      	ldr	r0, [r4, #0]
 80013e0:	68a1      	ldr	r1, [r4, #8]
 80013e2:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80013e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80013e6:	3901      	subs	r1, #1
 80013e8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80013ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013f0:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80013f2:	2120      	movs	r1, #32
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	462b      	mov	r3, r5
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff ffae 	bl	800135c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001400:	b9f0      	cbnz	r0, 8001440 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001402:	6822      	ldr	r2, [r4, #0]
 8001404:	6865      	ldr	r5, [r4, #4]
 8001406:	6811      	ldr	r1, [r2, #0]
 8001408:	68e3      	ldr	r3, [r4, #12]
 800140a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800140e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001412:	f021 0110 	bic.w	r1, r1, #16
 8001416:	430b      	orrs	r3, r1
 8001418:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800141a:	69a1      	ldr	r1, [r4, #24]
 800141c:	6963      	ldr	r3, [r4, #20]
 800141e:	6855      	ldr	r5, [r2, #4]
 8001420:	430b      	orrs	r3, r1
 8001422:	6921      	ldr	r1, [r4, #16]
 8001424:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001428:	490a      	ldr	r1, [pc, #40]	; (8001454 <HAL_QSPI_Init+0xac>)
 800142a:	4029      	ands	r1, r5
 800142c:	430b      	orrs	r3, r1
 800142e:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001438:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800143a:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 800143c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001440:	2300      	movs	r3, #0
 8001442:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001446:	b003      	add	sp, #12
 8001448:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
 800144c:	e7fb      	b.n	8001446 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 800144e:	2002      	movs	r0, #2
 8001450:	e7f9      	b.n	8001446 <HAL_QSPI_Init+0x9e>
 8001452:	bf00      	nop
 8001454:	ffe0f8fe 	.word	0xffe0f8fe

08001458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001458:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800145a:	4d1e      	ldr	r5, [pc, #120]	; (80014d4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800145c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800145e:	00da      	lsls	r2, r3, #3
{
 8001460:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001462:	d518      	bpl.n	8001496 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001464:	f7ff ff3c 	bl	80012e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001468:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800146c:	d123      	bne.n	80014b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800146e:	2c80      	cmp	r4, #128	; 0x80
 8001470:	d929      	bls.n	80014c6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001472:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001474:	bf8c      	ite	hi
 8001476:	2002      	movhi	r0, #2
 8001478:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f023 0307 	bic.w	r3, r3, #7
 8001482:	4303      	orrs	r3, r0
 8001484:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800148c:	1a18      	subs	r0, r3, r0
 800148e:	bf18      	it	ne
 8001490:	2001      	movne	r0, #1
 8001492:	b003      	add	sp, #12
 8001494:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	65ab      	str	r3, [r5, #88]	; 0x58
 800149e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80014a8:	f7ff ff1a 	bl	80012e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80014b4:	e7d8      	b.n	8001468 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80014b6:	2c80      	cmp	r4, #128	; 0x80
 80014b8:	d807      	bhi.n	80014ca <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80014ba:	d008      	beq.n	80014ce <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80014bc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80014c0:	4258      	negs	r0, r3
 80014c2:	4158      	adcs	r0, r3
 80014c4:	e7d9      	b.n	800147a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014c6:	2000      	movs	r0, #0
 80014c8:	e7d7      	b.n	800147a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80014ca:	2003      	movs	r0, #3
 80014cc:	e7d5      	b.n	800147a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80014ce:	2002      	movs	r0, #2
 80014d0:	e7d3      	b.n	800147a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_RCC_GetSysClockFreq+0x98>)
 80014de:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014e2:	f012 020c 	ands.w	r2, r2, #12
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x18>
 80014e8:	2a0c      	cmp	r2, #12
 80014ea:	d115      	bne.n	8001518 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ec:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014f0:	2901      	cmp	r1, #1
 80014f2:	d118      	bne.n	8001526 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014f4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80014f6:	4820      	ldr	r0, [pc, #128]	; (8001578 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014f8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014fa:	bf55      	itete	pl
 80014fc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001500:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001502:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001506:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800150a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150e:	b382      	cbz	r2, 8001572 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001510:	2a0c      	cmp	r2, #12
 8001512:	d009      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x4c>
 8001514:	2000      	movs	r0, #0
  return sysclockfreq;
 8001516:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001518:	2a04      	cmp	r2, #4
 800151a:	d029      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x94>
 800151c:	2a08      	cmp	r2, #8
 800151e:	4817      	ldr	r0, [pc, #92]	; (800157c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001520:	bf18      	it	ne
 8001522:	2000      	movne	r0, #0
 8001524:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001526:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001528:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800152a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800152c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001530:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001534:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001536:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800153a:	d005      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x6c>
 800153c:	2903      	cmp	r1, #3
 800153e:	d012      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001540:	68d9      	ldr	r1, [r3, #12]
 8001542:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001546:	e003      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <HAL_RCC_GetSysClockFreq+0xa4>)
 800154c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001550:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001552:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001556:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800155a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800155c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800155e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001560:	fbb0 f0f3 	udiv	r0, r0, r3
 8001564:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001566:	68d9      	ldr	r1, [r3, #12]
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <HAL_RCC_GetSysClockFreq+0xa0>)
 800156a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800156e:	e7ef      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	080039d8 	.word	0x080039d8
 800157c:	007a1200 	.word	0x007a1200
 8001580:	00f42400 	.word	0x00f42400

08001584 <HAL_RCC_OscConfig>:
{
 8001584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001588:	4605      	mov	r5, r0
 800158a:	b918      	cbnz	r0, 8001594 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800158c:	2001      	movs	r0, #1
}
 800158e:	b003      	add	sp, #12
 8001590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001594:	4ca5      	ldr	r4, [pc, #660]	; (800182c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001596:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001598:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800159c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a6:	d53c      	bpl.n	8001622 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a8:	b11e      	cbz	r6, 80015b2 <HAL_RCC_OscConfig+0x2e>
 80015aa:	2e0c      	cmp	r6, #12
 80015ac:	d163      	bne.n	8001676 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015ae:	2f01      	cmp	r7, #1
 80015b0:	d161      	bne.n	8001676 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	0798      	lsls	r0, r3, #30
 80015b6:	d502      	bpl.n	80015be <HAL_RCC_OscConfig+0x3a>
 80015b8:	69ab      	ldr	r3, [r5, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0e6      	beq.n	800158c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	6a28      	ldr	r0, [r5, #32]
 80015c2:	0719      	lsls	r1, r3, #28
 80015c4:	bf56      	itet	pl
 80015c6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80015ca:	6823      	ldrmi	r3, [r4, #0]
 80015cc:	091b      	lsrpl	r3, r3, #4
 80015ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d2:	4283      	cmp	r3, r0
 80015d4:	d23a      	bcs.n	800164c <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d6:	f7ff ff3f 	bl	8001458 <RCC_SetFlashLatencyFromMSIRange>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1d6      	bne.n	800158c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	6a2a      	ldr	r2, [r5, #32]
 80015ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ee:	4313      	orrs	r3, r2
 80015f0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f2:	6863      	ldr	r3, [r4, #4]
 80015f4:	69ea      	ldr	r2, [r5, #28]
 80015f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015fe:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001600:	f7ff ff6c 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 8001604:	68a3      	ldr	r3, [r4, #8]
 8001606:	4a8a      	ldr	r2, [pc, #552]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	40d8      	lsrs	r0, r3
 8001614:	4b87      	ldr	r3, [pc, #540]	; (8001834 <HAL_RCC_OscConfig+0x2b0>)
 8001616:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fb91 	bl	8000d40 <HAL_InitTick>
        if(status != HAL_OK)
 800161e:	2800      	cmp	r0, #0
 8001620:	d1b5      	bne.n	800158e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	07d8      	lsls	r0, r3, #31
 8001626:	d45d      	bmi.n	80016e4 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	0799      	lsls	r1, r3, #30
 800162c:	f100 809c 	bmi.w	8001768 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	0718      	lsls	r0, r3, #28
 8001634:	f100 80d0 	bmi.w	80017d8 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	0759      	lsls	r1, r3, #29
 800163c:	f100 80fc 	bmi.w	8001838 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001640:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 8165 	bne.w	8001912 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
 800164a:	e7a0      	b.n	800158e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800165a:	4303      	orrs	r3, r0
 800165c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165e:	6863      	ldr	r3, [r4, #4]
 8001660:	69ea      	ldr	r2, [r5, #28]
 8001662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001666:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800166a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166c:	f7ff fef4 	bl	8001458 <RCC_SetFlashLatencyFromMSIRange>
 8001670:	2800      	cmp	r0, #0
 8001672:	d0c5      	beq.n	8001600 <HAL_RCC_OscConfig+0x7c>
 8001674:	e78a      	b.n	800158c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001676:	69ab      	ldr	r3, [r5, #24]
 8001678:	b31b      	cbz	r3, 80016c2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001682:	f7ff fb93 	bl	8000dac <HAL_GetTick>
 8001686:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	079a      	lsls	r2, r3, #30
 800168c:	d511      	bpl.n	80016b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	6a2a      	ldr	r2, [r5, #32]
 800169a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800169e:	4313      	orrs	r3, r2
 80016a0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	69ea      	ldr	r2, [r5, #28]
 80016a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ae:	6063      	str	r3, [r4, #4]
 80016b0:	e7b7      	b.n	8001622 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b2:	f7ff fb7b 	bl	8000dac <HAL_GetTick>
 80016b6:	eba0 0008 	sub.w	r0, r0, r8
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d9e4      	bls.n	8001688 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
 80016c0:	e765      	b.n	800158e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb6f 	bl	8000dac <HAL_GetTick>
 80016ce:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	079b      	lsls	r3, r3, #30
 80016d4:	d5a5      	bpl.n	8001622 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb69 	bl	8000dac <HAL_GetTick>
 80016da:	eba0 0008 	sub.w	r0, r0, r8
 80016de:	2802      	cmp	r0, #2
 80016e0:	d9f6      	bls.n	80016d0 <HAL_RCC_OscConfig+0x14c>
 80016e2:	e7ec      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016e4:	2e08      	cmp	r6, #8
 80016e6:	d003      	beq.n	80016f0 <HAL_RCC_OscConfig+0x16c>
 80016e8:	2e0c      	cmp	r6, #12
 80016ea:	d108      	bne.n	80016fe <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80016ec:	2f03      	cmp	r7, #3
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	039a      	lsls	r2, r3, #14
 80016f4:	d598      	bpl.n	8001628 <HAL_RCC_OscConfig+0xa4>
 80016f6:	686b      	ldr	r3, [r5, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d195      	bne.n	8001628 <HAL_RCC_OscConfig+0xa4>
 80016fc:	e746      	b.n	800158c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	686b      	ldr	r3, [r5, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d110      	bne.n	8001728 <HAL_RCC_OscConfig+0x1a4>
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800170e:	f7ff fb4d 	bl	8000dac <HAL_GetTick>
 8001712:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	039b      	lsls	r3, r3, #14
 8001718:	d486      	bmi.n	8001628 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171a:	f7ff fb47 	bl	8000dac <HAL_GetTick>
 800171e:	eba0 0008 	sub.w	r0, r0, r8
 8001722:	2864      	cmp	r0, #100	; 0x64
 8001724:	d9f6      	bls.n	8001714 <HAL_RCC_OscConfig+0x190>
 8001726:	e7ca      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172c:	d104      	bne.n	8001738 <HAL_RCC_OscConfig+0x1b4>
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	e7e6      	b.n	8001706 <HAL_RCC_OscConfig+0x182>
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800173e:	6022      	str	r2, [r4, #0]
 8001740:	6822      	ldr	r2, [r4, #0]
 8001742:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001746:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e0      	bne.n	800170e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 800174c:	f7ff fb2e 	bl	8000dac <HAL_GetTick>
 8001750:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	0398      	lsls	r0, r3, #14
 8001756:	f57f af67 	bpl.w	8001628 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175a:	f7ff fb27 	bl	8000dac <HAL_GetTick>
 800175e:	eba0 0008 	sub.w	r0, r0, r8
 8001762:	2864      	cmp	r0, #100	; 0x64
 8001764:	d9f5      	bls.n	8001752 <HAL_RCC_OscConfig+0x1ce>
 8001766:	e7aa      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001768:	2e04      	cmp	r6, #4
 800176a:	d003      	beq.n	8001774 <HAL_RCC_OscConfig+0x1f0>
 800176c:	2e0c      	cmp	r6, #12
 800176e:	d110      	bne.n	8001792 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001770:	2f02      	cmp	r7, #2
 8001772:	d10e      	bne.n	8001792 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	0559      	lsls	r1, r3, #21
 8001778:	d503      	bpl.n	8001782 <HAL_RCC_OscConfig+0x1fe>
 800177a:	68eb      	ldr	r3, [r5, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f43f af05 	beq.w	800158c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	6863      	ldr	r3, [r4, #4]
 8001784:	692a      	ldr	r2, [r5, #16]
 8001786:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800178a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800178e:	6063      	str	r3, [r4, #4]
 8001790:	e74e      	b.n	8001630 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	68eb      	ldr	r3, [r5, #12]
 8001794:	b17b      	cbz	r3, 80017b6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800179e:	f7ff fb05 	bl	8000dac <HAL_GetTick>
 80017a2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	055a      	lsls	r2, r3, #21
 80017a8:	d4eb      	bmi.n	8001782 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff faff 	bl	8000dac <HAL_GetTick>
 80017ae:	1bc0      	subs	r0, r0, r7
 80017b0:	2802      	cmp	r0, #2
 80017b2:	d9f7      	bls.n	80017a4 <HAL_RCC_OscConfig+0x220>
 80017b4:	e783      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017be:	f7ff faf5 	bl	8000dac <HAL_GetTick>
 80017c2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	055b      	lsls	r3, r3, #21
 80017c8:	f57f af32 	bpl.w	8001630 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff faee 	bl	8000dac <HAL_GetTick>
 80017d0:	1bc0      	subs	r0, r0, r7
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9f6      	bls.n	80017c4 <HAL_RCC_OscConfig+0x240>
 80017d6:	e772      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d8:	696b      	ldr	r3, [r5, #20]
 80017da:	b19b      	cbz	r3, 8001804 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80017dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017e8:	f7ff fae0 	bl	8000dac <HAL_GetTick>
 80017ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80017f2:	079a      	lsls	r2, r3, #30
 80017f4:	f53f af20 	bmi.w	8001638 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fad8 	bl	8000dac <HAL_GetTick>
 80017fc:	1bc0      	subs	r0, r0, r7
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9f5      	bls.n	80017ee <HAL_RCC_OscConfig+0x26a>
 8001802:	e75c      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001804:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001810:	f7ff facc 	bl	8000dac <HAL_GetTick>
 8001814:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001816:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800181a:	079b      	lsls	r3, r3, #30
 800181c:	f57f af0c 	bpl.w	8001638 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fac4 	bl	8000dac <HAL_GetTick>
 8001824:	1bc0      	subs	r0, r0, r7
 8001826:	2802      	cmp	r0, #2
 8001828:	d9f5      	bls.n	8001816 <HAL_RCC_OscConfig+0x292>
 800182a:	e748      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
 800182c:	40021000 	.word	0x40021000
 8001830:	080039bf 	.word	0x080039bf
 8001834:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800183a:	00d8      	lsls	r0, r3, #3
 800183c:	d429      	bmi.n	8001892 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	65a3      	str	r3, [r4, #88]	; 0x58
 8001846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001850:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001854:	4f5d      	ldr	r7, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x448>)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	05d9      	lsls	r1, r3, #23
 800185a:	d51d      	bpl.n	8001898 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	68ab      	ldr	r3, [r5, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d12b      	bne.n	80018ba <HAL_RCC_OscConfig+0x336>
 8001862:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800186e:	f7ff fa9d 	bl	8000dac <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001876:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001878:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800187c:	079b      	lsls	r3, r3, #30
 800187e:	d542      	bpl.n	8001906 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001880:	f1b8 0f00 	cmp.w	r8, #0
 8001884:	f43f aedc 	beq.w	8001640 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001890:	e6d6      	b.n	8001640 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001892:	f04f 0800 	mov.w	r8, #0
 8001896:	e7dd      	b.n	8001854 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80018a0:	f7ff fa84 	bl	8000dac <HAL_GetTick>
 80018a4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	05da      	lsls	r2, r3, #23
 80018aa:	d4d7      	bmi.n	800185c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ac:	f7ff fa7e 	bl	8000dac <HAL_GetTick>
 80018b0:	eba0 0009 	sub.w	r0, r0, r9
 80018b4:	2802      	cmp	r0, #2
 80018b6:	d9f6      	bls.n	80018a6 <HAL_RCC_OscConfig+0x322>
 80018b8:	e701      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x348>
 80018be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80018ca:	e7ca      	b.n	8001862 <HAL_RCC_OscConfig+0x2de>
 80018cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80018d8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80018dc:	f022 0204 	bic.w	r2, r2, #4
 80018e0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1c2      	bne.n	800186e <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa60 	bl	8000dac <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018f0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018f6:	0798      	lsls	r0, r3, #30
 80018f8:	d5c2      	bpl.n	8001880 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fa57 	bl	8000dac <HAL_GetTick>
 80018fe:	1bc0      	subs	r0, r0, r7
 8001900:	4548      	cmp	r0, r9
 8001902:	d9f6      	bls.n	80018f2 <HAL_RCC_OscConfig+0x36e>
 8001904:	e6db      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff fa51 	bl	8000dac <HAL_GetTick>
 800190a:	1bc0      	subs	r0, r0, r7
 800190c:	4548      	cmp	r0, r9
 800190e:	d9b3      	bls.n	8001878 <HAL_RCC_OscConfig+0x2f4>
 8001910:	e6d5      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	2e0c      	cmp	r6, #12
 8001914:	f43f ae3a 	beq.w	800158c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001918:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001920:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001922:	d137      	bne.n	8001994 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001924:	f7ff fa42 	bl	8000dac <HAL_GetTick>
 8001928:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	0199      	lsls	r1, r3, #6
 800192e:	d42b      	bmi.n	8001988 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001932:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001934:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001938:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800193a:	3a01      	subs	r2, #1
 800193c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001940:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001942:	0912      	lsrs	r2, r2, #4
 8001944:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001948:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800194a:	0852      	lsrs	r2, r2, #1
 800194c:	3a01      	subs	r2, #1
 800194e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001952:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800195c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001964:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001966:	68e3      	ldr	r3, [r4, #12]
 8001968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800196e:	f7ff fa1d 	bl	8000dac <HAL_GetTick>
 8001972:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	019a      	lsls	r2, r3, #6
 8001978:	f53f ae66 	bmi.w	8001648 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fa16 	bl	8000dac <HAL_GetTick>
 8001980:	1b40      	subs	r0, r0, r5
 8001982:	2802      	cmp	r0, #2
 8001984:	d9f6      	bls.n	8001974 <HAL_RCC_OscConfig+0x3f0>
 8001986:	e69a      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff fa10 	bl	8000dac <HAL_GetTick>
 800198c:	1b80      	subs	r0, r0, r6
 800198e:	2802      	cmp	r0, #2
 8001990:	d9cb      	bls.n	800192a <HAL_RCC_OscConfig+0x3a6>
 8001992:	e694      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800199a:	bf02      	ittt	eq
 800199c:	68e3      	ldreq	r3, [r4, #12]
 800199e:	f023 0303 	biceq.w	r3, r3, #3
 80019a2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019a4:	68e3      	ldr	r3, [r4, #12]
 80019a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ae:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80019b0:	f7ff f9fc 	bl	8000dac <HAL_GetTick>
 80019b4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	f57f ae45 	bpl.w	8001648 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f9f5 	bl	8000dac <HAL_GetTick>
 80019c2:	1b40      	subs	r0, r0, r5
 80019c4:	2802      	cmp	r0, #2
 80019c6:	d9f6      	bls.n	80019b6 <HAL_RCC_OscConfig+0x432>
 80019c8:	e679      	b.n	80016be <HAL_RCC_OscConfig+0x13a>
 80019ca:	bf00      	nop
 80019cc:	40007000 	.word	0x40007000

080019d0 <HAL_RCC_ClockConfig>:
{
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80019d6:	4604      	mov	r4, r0
 80019d8:	b910      	cbnz	r0, 80019e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
 80019dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4a40      	ldr	r2, [pc, #256]	; (8001ae4 <HAL_RCC_ClockConfig+0x114>)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d329      	bcc.n	8001a40 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	07d9      	lsls	r1, r3, #31
 80019f0:	d431      	bmi.n	8001a56 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f2:	6821      	ldr	r1, [r4, #0]
 80019f4:	078a      	lsls	r2, r1, #30
 80019f6:	d45b      	bmi.n	8001ab0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_RCC_ClockConfig+0x114>)
 80019fa:	6813      	ldr	r3, [r2, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	429e      	cmp	r6, r3
 8001a02:	d35d      	bcc.n	8001ac0 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	f011 0f04 	tst.w	r1, #4
 8001a08:	4d37      	ldr	r5, [pc, #220]	; (8001ae8 <HAL_RCC_ClockConfig+0x118>)
 8001a0a:	d164      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	070b      	lsls	r3, r1, #28
 8001a0e:	d506      	bpl.n	8001a1e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a10:	68ab      	ldr	r3, [r5, #8]
 8001a12:	6922      	ldr	r2, [r4, #16]
 8001a14:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a1c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1e:	f7ff fd5d 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 8001a22:	68ab      	ldr	r3, [r5, #8]
 8001a24:	4a31      	ldr	r2, [pc, #196]	; (8001aec <HAL_RCC_ClockConfig+0x11c>)
 8001a26:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	40d8      	lsrs	r0, r3
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_RCC_ClockConfig+0x120>)
 8001a38:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff b980 	b.w	8000d40 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	f023 0307 	bic.w	r3, r3, #7
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	6813      	ldr	r3, [r2, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4299      	cmp	r1, r3
 8001a52:	d1c2      	bne.n	80019da <HAL_RCC_ClockConfig+0xa>
 8001a54:	e7ca      	b.n	80019ec <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a56:	6862      	ldr	r2, [r4, #4]
 8001a58:	4d23      	ldr	r5, [pc, #140]	; (8001ae8 <HAL_RCC_ClockConfig+0x118>)
 8001a5a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	d11b      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a64:	d0b9      	beq.n	80019da <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	68ab      	ldr	r3, [r5, #8]
 8001a68:	f023 0303 	bic.w	r3, r3, #3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001a70:	f7ff f99c 	bl	8000dac <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a78:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	68ab      	ldr	r3, [r5, #8]
 8001a7c:	6862      	ldr	r2, [r4, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a86:	d0b4      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f990 	bl	8000dac <HAL_GetTick>
 8001a8c:	1bc0      	subs	r0, r0, r7
 8001a8e:	4540      	cmp	r0, r8
 8001a90:	d9f3      	bls.n	8001a7a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
}
 8001a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a98:	2a02      	cmp	r2, #2
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001aa0:	e7e0      	b.n	8001a64 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aa2:	b912      	cbnz	r2, 8001aaa <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa4:	f013 0f02 	tst.w	r3, #2
 8001aa8:	e7dc      	b.n	8001a64 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aaa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001aae:	e7d9      	b.n	8001a64 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_RCC_ClockConfig+0x118>)
 8001ab2:	68a0      	ldr	r0, [r4, #8]
 8001ab4:	6893      	ldr	r3, [r2, #8]
 8001ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aba:	4303      	orrs	r3, r0
 8001abc:	6093      	str	r3, [r2, #8]
 8001abe:	e79b      	b.n	80019f8 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f023 0307 	bic.w	r3, r3, #7
 8001ac6:	4333      	orrs	r3, r6
 8001ac8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	429e      	cmp	r6, r3
 8001ad2:	d182      	bne.n	80019da <HAL_RCC_ClockConfig+0xa>
 8001ad4:	e796      	b.n	8001a04 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad6:	68ab      	ldr	r3, [r5, #8]
 8001ad8:	68e2      	ldr	r2, [r4, #12]
 8001ada:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60ab      	str	r3, [r5, #8]
 8001ae2:	e793      	b.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	080039bf 	.word	0x080039bf
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b02:	6810      	ldr	r0, [r2, #0]
 8001b04:	f003 031f 	and.w	r3, r3, #31
}
 8001b08:	40d8      	lsrs	r0, r3
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	080039cf 	.word	0x080039cf
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b26:	6810      	ldr	r0, [r2, #0]
 8001b28:	f003 031f 	and.w	r3, r3, #31
}
 8001b2c:	40d8      	lsrs	r0, r3
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	080039cf 	.word	0x080039cf
 8001b38:	20000000 	.word	0x20000000

08001b3c <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8001b3c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <RCCEx_GetSAIxPeriphCLKFreq+0xb8>)
 8001b42:	d108      	bne.n	8001b56 <RCCEx_GetSAIxPeriphCLKFreq+0x1a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8001b44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b48:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8001b4c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001b50:	d14c      	bne.n	8001bec <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
 8001b52:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>)
 8001b54:	4770      	bx	lr
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8001b56:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001b5a:	d121      	bne.n	8001ba0 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8001b5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b60:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8001b64:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8001b68:	d0f3      	beq.n	8001b52 <RCCEx_GetSAIxPeriphCLKFreq+0x16>
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8001b6a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001b6e:	d116      	bne.n	8001b9e <RCCEx_GetSAIxPeriphCLKFreq+0x62>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8001b70:	68d8      	ldr	r0, [r3, #12]
 8001b72:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001b76:	d03c      	beq.n	8001bf2 <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8001b78:	68d8      	ldr	r0, [r3, #12]
 8001b7a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001b7e:	3001      	adds	r0, #1
 8001b80:	fbb1 f1f0 	udiv	r1, r1, r0
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001b84:	68d8      	ldr	r0, [r3, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8001b86:	68db      	ldr	r3, [r3, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001b88:	f3c0 2006 	ubfx	r0, r0, #8, #7
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8001b8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b90:	bf14      	ite	ne
 8001b92:	2311      	movne	r3, #17
 8001b94:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8001b96:	4348      	muls	r0, r1
 8001b98:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b9c:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8001b9e:	b972      	cbnz	r2, 8001bbe <RCCEx_GetSAIxPeriphCLKFreq+0x82>
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8001ba0:	6918      	ldr	r0, [r3, #16]
 8001ba2:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001ba6:	d024      	beq.n	8001bf2 <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8001ba8:	68d8      	ldr	r0, [r3, #12]
 8001baa:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001bae:	3001      	adds	r0, #1
 8001bb0:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8001bb4:	6918      	ldr	r0, [r3, #16]
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8001bb6:	691b      	ldr	r3, [r3, #16]
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8001bb8:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001bbc:	e7e6      	b.n	8001b8c <RCCEx_GetSAIxPeriphCLKFreq+0x50>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8001bbe:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001bc2:	d002      	beq.n	8001bca <RCCEx_GetSAIxPeriphCLKFreq+0x8e>
 8001bc4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001bc8:	d10e      	bne.n	8001be8 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8001bca:	6958      	ldr	r0, [r3, #20]
 8001bcc:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001bd0:	d00f      	beq.n	8001bf2 <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8001bd2:	68d8      	ldr	r0, [r3, #12]
 8001bd4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001bd8:	3001      	adds	r0, #1
 8001bda:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8001bde:	6958      	ldr	r0, [r3, #20]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8001be0:	695b      	ldr	r3, [r3, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8001be2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001be6:	e7d1      	b.n	8001b8c <RCCEx_GetSAIxPeriphCLKFreq+0x50>
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8001bec:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001bf0:	e7bd      	b.n	8001b6e <RCCEx_GetSAIxPeriphCLKFreq+0x32>
    }
  }


  return frequency;
}
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	001fff68 	.word	0x001fff68

08001bfc <RCCEx_PLLSAI1_Config>:
{
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001bfe:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <RCCEx_PLLSAI1_Config+0x118>)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	f012 0f03 	tst.w	r2, #3
{
 8001c06:	4605      	mov	r5, r0
 8001c08:	460e      	mov	r6, r1
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c0e:	d02a      	beq.n	8001c66 <RCCEx_PLLSAI1_Config+0x6a>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	4282      	cmp	r2, r0
 8001c18:	d13c      	bne.n	8001c94 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d03a      	beq.n	8001c94 <RCCEx_PLLSAI1_Config+0x98>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c1e:	68db      	ldr	r3, [r3, #12]
       ||
 8001c20:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c22:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c26:	3301      	adds	r3, #1
       ||
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d133      	bne.n	8001c94 <RCCEx_PLLSAI1_Config+0x98>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c32:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c34:	f7ff f8ba 	bl	8000dac <HAL_GetTick>
 8001c38:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	011a      	lsls	r2, r3, #4
 8001c3e:	d432      	bmi.n	8001ca6 <RCCEx_PLLSAI1_Config+0xaa>
 8001c40:	68af      	ldr	r7, [r5, #8]
      if(Divider == DIVIDER_P_UPDATE)
 8001c42:	2e00      	cmp	r6, #0
 8001c44:	d036      	beq.n	8001cb4 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c46:	2e01      	cmp	r6, #1
 8001c48:	d150      	bne.n	8001cec <RCCEx_PLLSAI1_Config+0xf0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c4a:	6922      	ldr	r2, [r4, #16]
 8001c4c:	6928      	ldr	r0, [r5, #16]
 8001c4e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c52:	0840      	lsrs	r0, r0, #1
 8001c54:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001c58:	3801      	subs	r0, #1
 8001c5a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001c5e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001c62:	6122      	str	r2, [r4, #16]
 8001c64:	e032      	b.n	8001ccc <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001c66:	2802      	cmp	r0, #2
 8001c68:	d010      	beq.n	8001c8c <RCCEx_PLLSAI1_Config+0x90>
 8001c6a:	2803      	cmp	r0, #3
 8001c6c:	d014      	beq.n	8001c98 <RCCEx_PLLSAI1_Config+0x9c>
 8001c6e:	2801      	cmp	r0, #1
 8001c70:	d110      	bne.n	8001c94 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	079f      	lsls	r7, r3, #30
 8001c76:	d538      	bpl.n	8001cea <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001c78:	68e3      	ldr	r3, [r4, #12]
 8001c7a:	686a      	ldr	r2, [r5, #4]
 8001c7c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001c80:	3a01      	subs	r2, #1
 8001c82:	4318      	orrs	r0, r3
 8001c84:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001c88:	60e0      	str	r0, [r4, #12]
 8001c8a:	e7cf      	b.n	8001c2c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c92:	d1f1      	bne.n	8001c78 <RCCEx_PLLSAI1_Config+0x7c>
 8001c94:	2001      	movs	r0, #1
 8001c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	0391      	lsls	r1, r2, #14
 8001c9c:	d4ec      	bmi.n	8001c78 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001ca4:	e7f5      	b.n	8001c92 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ca6:	f7ff f881 	bl	8000dac <HAL_GetTick>
 8001caa:	1bc0      	subs	r0, r0, r7
 8001cac:	2802      	cmp	r0, #2
 8001cae:	d9c4      	bls.n	8001c3a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cb4:	6921      	ldr	r1, [r4, #16]
 8001cb6:	68eb      	ldr	r3, [r5, #12]
 8001cb8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001cbc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001cc0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001cca:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd2:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f86a 	bl	8000dac <HAL_GetTick>
 8001cd8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	d513      	bpl.n	8001d08 <RCCEx_PLLSAI1_Config+0x10c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ce0:	6923      	ldr	r3, [r4, #16]
 8001ce2:	69aa      	ldr	r2, [r5, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6123      	str	r3, [r4, #16]
 8001ce8:	2000      	movs	r0, #0
}
 8001cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cec:	6923      	ldr	r3, [r4, #16]
 8001cee:	6968      	ldr	r0, [r5, #20]
 8001cf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001cf4:	0840      	lsrs	r0, r0, #1
 8001cf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001cfa:	3801      	subs	r0, #1
 8001cfc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001d00:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001d04:	6123      	str	r3, [r4, #16]
 8001d06:	e7e1      	b.n	8001ccc <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d08:	f7ff f850 	bl	8000dac <HAL_GetTick>
 8001d0c:	1b80      	subs	r0, r0, r6
 8001d0e:	2802      	cmp	r0, #2
 8001d10:	d9e3      	bls.n	8001cda <RCCEx_PLLSAI1_Config+0xde>
 8001d12:	e7cd      	b.n	8001cb0 <RCCEx_PLLSAI1_Config+0xb4>
 8001d14:	40021000 	.word	0x40021000

08001d18 <RCCEx_PLLSAI2_Config>:
{
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <RCCEx_PLLSAI2_Config+0xf8>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	f012 0f03 	tst.w	r2, #3
{
 8001d22:	4605      	mov	r5, r0
 8001d24:	460e      	mov	r6, r1
 8001d26:	461c      	mov	r4, r3
 8001d28:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d2a:	d028      	beq.n	8001d7e <RCCEx_PLLSAI2_Config+0x66>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	4282      	cmp	r2, r0
 8001d34:	d13a      	bne.n	8001dac <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001d36:	2a00      	cmp	r2, #0
 8001d38:	d038      	beq.n	8001dac <RCCEx_PLLSAI2_Config+0x94>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001d3a:	68db      	ldr	r3, [r3, #12]
       ||
 8001d3c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001d3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001d42:	3301      	adds	r3, #1
       ||
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d131      	bne.n	8001dac <RCCEx_PLLSAI2_Config+0x94>
    __HAL_RCC_PLLSAI2_DISABLE();
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001d50:	f7ff f82c 	bl	8000dac <HAL_GetTick>
 8001d54:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	009a      	lsls	r2, r3, #2
 8001d5a:	d430      	bmi.n	8001dbe <RCCEx_PLLSAI2_Config+0xa6>
 8001d5c:	68a8      	ldr	r0, [r5, #8]
      if(Divider == DIVIDER_P_UPDATE)
 8001d5e:	2e00      	cmp	r6, #0
 8001d60:	d034      	beq.n	8001dcc <RCCEx_PLLSAI2_Config+0xb4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001d62:	6963      	ldr	r3, [r4, #20]
 8001d64:	6929      	ldr	r1, [r5, #16]
 8001d66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d6a:	0849      	lsrs	r1, r1, #1
 8001d6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d70:	3901      	subs	r1, #1
 8001d72:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001d76:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001d7a:	6163      	str	r3, [r4, #20]
 8001d7c:	e032      	b.n	8001de4 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001d7e:	2802      	cmp	r0, #2
 8001d80:	d010      	beq.n	8001da4 <RCCEx_PLLSAI2_Config+0x8c>
 8001d82:	2803      	cmp	r0, #3
 8001d84:	d014      	beq.n	8001db0 <RCCEx_PLLSAI2_Config+0x98>
 8001d86:	2801      	cmp	r0, #1
 8001d88:	d110      	bne.n	8001dac <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	079f      	lsls	r7, r3, #30
 8001d8e:	d538      	bpl.n	8001e02 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d90:	68e3      	ldr	r3, [r4, #12]
 8001d92:	686a      	ldr	r2, [r5, #4]
 8001d94:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	4318      	orrs	r0, r3
 8001d9c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001da0:	60e0      	str	r0, [r4, #12]
 8001da2:	e7d1      	b.n	8001d48 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001daa:	d1f1      	bne.n	8001d90 <RCCEx_PLLSAI2_Config+0x78>
 8001dac:	2001      	movs	r0, #1
 8001dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	0391      	lsls	r1, r2, #14
 8001db4:	d4ec      	bmi.n	8001d90 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001dbc:	e7f5      	b.n	8001daa <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001dbe:	f7fe fff5 	bl	8000dac <HAL_GetTick>
 8001dc2:	1bc0      	subs	r0, r0, r7
 8001dc4:	2802      	cmp	r0, #2
 8001dc6:	d9c6      	bls.n	8001d56 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001dc8:	2003      	movs	r0, #3
 8001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001dcc:	6962      	ldr	r2, [r4, #20]
 8001dce:	68eb      	ldr	r3, [r5, #12]
 8001dd0:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001dd4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dd8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001de2:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001dec:	f7fe ffde 	bl	8000dac <HAL_GetTick>
 8001df0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	d505      	bpl.n	8001e04 <RCCEx_PLLSAI2_Config+0xec>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001df8:	6963      	ldr	r3, [r4, #20]
 8001dfa:	696a      	ldr	r2, [r5, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6163      	str	r3, [r4, #20]
 8001e00:	2000      	movs	r0, #0
}
 8001e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e04:	f7fe ffd2 	bl	8000dac <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	2802      	cmp	r0, #2
 8001e0c:	d9f1      	bls.n	8001df2 <RCCEx_PLLSAI2_Config+0xda>
 8001e0e:	e7db      	b.n	8001dc8 <RCCEx_PLLSAI2_Config+0xb0>
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001e14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e18:	6806      	ldr	r6, [r0, #0]
 8001e1a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001e1e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e20:	d024      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e22:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001e24:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001e28:	d02c      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001e2a:	d802      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e2c:	b1c1      	cbz	r1, 8001e60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001e2e:	2601      	movs	r6, #1
 8001e30:	e01c      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e32:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e38:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001e3c:	d1f7      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e3e:	4a4d      	ldr	r2, [pc, #308]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e40:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001e42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e50:	2600      	movs	r6, #0
 8001e52:	e00b      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e54:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e56:	68d3      	ldr	r3, [r2, #12]
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	60d3      	str	r3, [r2, #12]
      break;
 8001e5e:	e7ee      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e60:	3004      	adds	r0, #4
 8001e62:	f7ff fecb 	bl	8001bfc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e66:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d0e8      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	04d8      	lsls	r0, r3, #19
 8001e70:	d506      	bpl.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001e72:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001e74:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001e78:	d074      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001e7a:	d808      	bhi.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001e7c:	b1a9      	cbz	r1, 8001eaa <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001e7e:	2601      	movs	r6, #1
 8001e80:	4635      	mov	r5, r6
 8001e82:	e021      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e84:	2100      	movs	r1, #0
 8001e86:	3020      	adds	r0, #32
 8001e88:	f7ff ff46 	bl	8001d18 <RCCEx_PLLSAI2_Config>
 8001e8c:	e7eb      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001e8e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001e92:	d004      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001e94:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001e98:	d1f1      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001e9a:	4635      	mov	r5, r6
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e9e:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea0:	68d3      	ldr	r3, [r2, #12]
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	60d3      	str	r3, [r2, #12]
 8001ea8:	e7f7      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eaa:	1d20      	adds	r0, r4, #4
 8001eac:	f7ff fea6 	bl	8001bfc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	d15c      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001eba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ebe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	0399      	lsls	r1, r3, #14
 8001ecc:	f140 814f 	bpl.w	800216e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed0:	4f28      	ldr	r7, [pc, #160]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed4:	00da      	lsls	r2, r3, #3
 8001ed6:	f140 8176 	bpl.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ede:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001f78 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001ee2:	f8d9 3000 	ldr.w	r3, [r9]
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001eee:	f7fe ff5d 	bl	8000dac <HAL_GetTick>
 8001ef2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef4:	f8d9 3000 	ldr.w	r3, [r9]
 8001ef8:	05db      	lsls	r3, r3, #23
 8001efa:	d53f      	bpl.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d144      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f08:	d015      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001f0a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d011      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001f1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f36:	07d8      	lsls	r0, r3, #31
 8001f38:	d509      	bpl.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff37 	bl	8000dac <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f42:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f48:	0799      	lsls	r1, r3, #30
 8001f4a:	f140 8109 	bpl.w	8002160 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f52:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f60:	4635      	mov	r5, r6
 8001f62:	e012      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f64:	2100      	movs	r1, #0
 8001f66:	f104 0020 	add.w	r0, r4, #32
 8001f6a:	f7ff fed5 	bl	8001d18 <RCCEx_PLLSAI2_Config>
 8001f6e:	e79f      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001f70:	462e      	mov	r6, r5
 8001f72:	e7a9      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7c:	f7fe ff16 	bl	8000dac <HAL_GetTick>
 8001f80:	eba0 000a 	sub.w	r0, r0, sl
 8001f84:	2802      	cmp	r0, #2
 8001f86:	d9b5      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001f88:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001f8a:	f1b8 0f00 	cmp.w	r8, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	07da      	lsls	r2, r3, #31
 8001f9c:	d508      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4990      	ldr	r1, [pc, #576]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fa0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fa2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fa6:	f022 0203 	bic.w	r2, r2, #3
 8001faa:	4302      	orrs	r2, r0
 8001fac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb0:	079f      	lsls	r7, r3, #30
 8001fb2:	d508      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb4:	498a      	ldr	r1, [pc, #552]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001fb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fbc:	f022 020c 	bic.w	r2, r2, #12
 8001fc0:	4302      	orrs	r2, r0
 8001fc2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fc6:	075e      	lsls	r6, r3, #29
 8001fc8:	d508      	bpl.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fca:	4985      	ldr	r1, [pc, #532]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fcc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001fce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fd2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001fd6:	4302      	orrs	r2, r0
 8001fd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fdc:	0718      	lsls	r0, r3, #28
 8001fde:	d508      	bpl.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fe0:	497f      	ldr	r1, [pc, #508]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fe2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001fe4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fe8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fec:	4302      	orrs	r2, r0
 8001fee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ff2:	06d9      	lsls	r1, r3, #27
 8001ff4:	d508      	bpl.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ff6:	497a      	ldr	r1, [pc, #488]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ff8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ffa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002002:	4302      	orrs	r2, r0
 8002004:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002008:	069a      	lsls	r2, r3, #26
 800200a:	d508      	bpl.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800200c:	4974      	ldr	r1, [pc, #464]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800200e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002010:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002014:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002018:	4302      	orrs	r2, r0
 800201a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800201e:	059f      	lsls	r7, r3, #22
 8002020:	d508      	bpl.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002022:	496f      	ldr	r1, [pc, #444]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002024:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002026:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800202a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800202e:	4302      	orrs	r2, r0
 8002030:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002034:	055e      	lsls	r6, r3, #21
 8002036:	d508      	bpl.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002038:	4969      	ldr	r1, [pc, #420]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800203a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800203c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002040:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002044:	4302      	orrs	r2, r0
 8002046:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800204a:	0658      	lsls	r0, r3, #25
 800204c:	d508      	bpl.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800204e:	4964      	ldr	r1, [pc, #400]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002050:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002052:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002056:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800205a:	4302      	orrs	r2, r0
 800205c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002060:	0619      	lsls	r1, r3, #24
 8002062:	d508      	bpl.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002064:	495e      	ldr	r1, [pc, #376]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002068:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800206c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002070:	4302      	orrs	r2, r0
 8002072:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002076:	05da      	lsls	r2, r3, #23
 8002078:	d508      	bpl.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800207a:	4959      	ldr	r1, [pc, #356]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800207c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800207e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002082:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002086:	4302      	orrs	r2, r0
 8002088:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800208c:	049b      	lsls	r3, r3, #18
 800208e:	d50f      	bpl.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002090:	4a53      	ldr	r2, [pc, #332]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002092:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002094:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002098:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800209c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800209e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020a6:	d164      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	68d3      	ldr	r3, [r2, #12]
 80020aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ae:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	031f      	lsls	r7, r3, #12
 80020b4:	d50f      	bpl.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020b6:	4a4a      	ldr	r2, [pc, #296]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020b8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80020ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020be:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80020c2:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020cc:	d15c      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ce:	68d3      	ldr	r3, [r2, #12]
 80020d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	035e      	lsls	r6, r3, #13
 80020da:	d50f      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020dc:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020de:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80020e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020e4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80020e8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020ea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020f2:	d154      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f4:	68d3      	ldr	r3, [r2, #12]
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	0458      	lsls	r0, r3, #17
 8002100:	d512      	bpl.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002104:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002106:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800210a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800210e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002110:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002118:	d14c      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800211a:	2102      	movs	r1, #2
 800211c:	1d20      	adds	r0, r4, #4
 800211e:	f7ff fd6d 	bl	8001bfc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002122:	2800      	cmp	r0, #0
 8002124:	bf18      	it	ne
 8002126:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	0411      	lsls	r1, r2, #16
 800212c:	d508      	bpl.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800212e:	492c      	ldr	r1, [pc, #176]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002130:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002132:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002136:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800213a:	4303      	orrs	r3, r0
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002140:	03d3      	lsls	r3, r2, #15
 8002142:	d509      	bpl.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002144:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002146:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800214a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800214e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002152:	430b      	orrs	r3, r1
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002158:	4628      	mov	r0, r5
 800215a:	b002      	add	sp, #8
 800215c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fe24 	bl	8000dac <HAL_GetTick>
 8002164:	1b40      	subs	r0, r0, r5
 8002166:	4548      	cmp	r0, r9
 8002168:	f67f aeec 	bls.w	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800216c:	e70c      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800216e:	4635      	mov	r5, r6
 8002170:	e712      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002172:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002176:	d19b      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002178:	2101      	movs	r1, #1
 800217a:	1d20      	adds	r0, r4, #4
 800217c:	f7ff fd3e 	bl	8001bfc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002180:	2800      	cmp	r0, #0
 8002182:	bf18      	it	ne
 8002184:	4605      	movne	r5, r0
 8002186:	e793      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002188:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800218c:	d1a3      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800218e:	2101      	movs	r1, #1
 8002190:	1d20      	adds	r0, r4, #4
 8002192:	f7ff fd33 	bl	8001bfc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002196:	2800      	cmp	r0, #0
 8002198:	bf18      	it	ne
 800219a:	4605      	movne	r5, r0
 800219c:	e79b      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800219e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021a2:	d1ab      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a4:	2101      	movs	r1, #1
 80021a6:	1d20      	adds	r0, r4, #4
 80021a8:	f7ff fd28 	bl	8001bfc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021ac:	2800      	cmp	r0, #0
 80021ae:	bf18      	it	ne
 80021b0:	4605      	movne	r5, r0
 80021b2:	e7a3      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021b4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80021b8:	d1b6      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021ba:	2102      	movs	r1, #2
 80021bc:	f104 0020 	add.w	r0, r4, #32
 80021c0:	f7ff fdaa 	bl	8001d18 <RCCEx_PLLSAI2_Config>
 80021c4:	e7ad      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021d8:	f04f 0801 	mov.w	r8, #1
 80021dc:	e67f      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0xca>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80021e4:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80021e8:	4bc7      	ldr	r3, [pc, #796]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 80021ea:	d11d      	bne.n	8002228 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80021ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021f0:	f402 7240 	and.w	r2, r2, #768	; 0x300
    switch(srcclk)
 80021f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80021f8:	f000 81c6 	beq.w	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80021fc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002200:	d00b      	beq.n	800221a <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8002202:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        switch(srcclk)
 8002206:	d13a      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 800220c:	f013 0f02 	tst.w	r3, #2
 8002210:	bf0c      	ite	eq
 8002212:	2000      	moveq	r0, #0
 8002214:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002218:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800221a:	681b      	ldr	r3, [r3, #0]
        frequency = HSE_VALUE / 32U;
 800221c:	48bb      	ldr	r0, [pc, #748]	; (800250c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800221e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
            frequency = HSI_VALUE;
 8002222:	bf08      	it	eq
 8002224:	2000      	moveq	r0, #0
 8002226:	4770      	bx	lr
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	f002 0203 	and.w	r2, r2, #3
    switch(pll_oscsource)
 800222e:	2a02      	cmp	r2, #2
 8002230:	d027      	beq.n	8002282 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8002232:	2a03      	cmp	r2, #3
 8002234:	d02c      	beq.n	8002290 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8002236:	2a01      	cmp	r2, #1
 8002238:	d12f      	bne.n	800229a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	f011 0102 	ands.w	r1, r1, #2
 8002240:	d00d      	beq.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	0711      	lsls	r1, r2, #28
 8002246:	bf4c      	ite	mi
 8002248:	681a      	ldrmi	r2, [r3, #0]
 800224a:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
 800224e:	49b0      	ldr	r1, [pc, #704]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8002250:	bf4c      	ite	mi
 8002252:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
 8002256:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
 800225a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    switch(PeriphClk)
 800225e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002262:	f000 8183 	beq.w	800256c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8002266:	d855      	bhi.n	8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8002268:	2810      	cmp	r0, #16
 800226a:	f000 811d 	beq.w	80024a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800226e:	d829      	bhi.n	80022c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002270:	2802      	cmp	r0, #2
 8002272:	f000 80e4 	beq.w	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8002276:	d812      	bhi.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002278:	2801      	cmp	r0, #1
 800227a:	f000 80d2 	beq.w	8002422 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
  uint32_t frequency = 0U;
 800227e:	2000      	movs	r0, #0
}
 8002280:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002282:	681a      	ldr	r2, [r3, #0]
        pllvco = HSI_VALUE;
 8002284:	49a3      	ldr	r1, [pc, #652]	; (8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8002286:	f412 6f80 	tst.w	r2, #1024	; 0x400
        pllvco = HSE_VALUE;
 800228a:	bf08      	it	eq
 800228c:	2100      	moveq	r1, #0
 800228e:	e7e6      	b.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002290:	681a      	ldr	r2, [r3, #0]
        pllvco = HSE_VALUE;
 8002292:	49a1      	ldr	r1, [pc, #644]	; (8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8002294:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002298:	e7f7      	b.n	800228a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      pllvco = 0U;
 800229a:	2100      	movs	r1, #0
 800229c:	e7df      	b.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch(PeriphClk)
 800229e:	2804      	cmp	r0, #4
 80022a0:	f000 80f2 	beq.w	8002488 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80022a4:	2808      	cmp	r0, #8
 80022a6:	d1ea      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80022a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022ac:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
        switch(srcclk)
 80022b0:	2a40      	cmp	r2, #64	; 0x40
 80022b2:	f000 8140 	beq.w	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80022b6:	f240 80ee 	bls.w	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80022ba:	2a80      	cmp	r2, #128	; 0x80
 80022bc:	f000 8147 	beq.w	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80022c0:	2ac0      	cmp	r2, #192	; 0xc0
 80022c2:	e7a0      	b.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 80022c4:	2840      	cmp	r0, #64	; 0x40
 80022c6:	f000 8138 	beq.w	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80022ca:	d812      	bhi.n	80022f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80022cc:	2820      	cmp	r0, #32
 80022ce:	d1d6      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80022d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022d4:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
        switch(srcclk)
 80022d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022dc:	f000 812b 	beq.w	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80022e0:	f240 80d9 	bls.w	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80022e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022e8:	f000 8131 	beq.w	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80022ec:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80022f0:	e789      	b.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 80022f2:	2880      	cmp	r0, #128	; 0x80
 80022f4:	f000 8130 	beq.w	8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 80022f8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80022fc:	d1bf      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80022fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002302:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
        switch(srcclk)
 8002306:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800230a:	f000 8114 	beq.w	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800230e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002312:	e11b      	b.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
    switch(PeriphClk)
 8002314:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002318:	f000 80d4 	beq.w	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800231c:	d837      	bhi.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800231e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002322:	d04c      	beq.n	80023be <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8002324:	d813      	bhi.n	800234e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002326:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800232a:	d1a8      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800232c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002330:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        switch(srcclk)
 8002334:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002338:	f000 8126 	beq.w	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800233c:	f240 80ab 	bls.w	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002340:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002344:	f000 8103 	beq.w	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002348:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800234c:	e75b      	b.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 800234e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002352:	d034      	beq.n	80023be <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8002354:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002358:	d191      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800235a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800235e:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
        switch(srcclk)
 8002362:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002366:	d040      	beq.n	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8002368:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800236c:	d029      	beq.n	80023c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800236e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8002372:	d184      	bne.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800237a:	d081      	beq.n	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800237c:	6918      	ldr	r0, [r3, #16]
 800237e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8002382:	f43f af7d 	beq.w	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002386:	68da      	ldr	r2, [r3, #12]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002388:	6918      	ldr	r0, [r3, #16]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	e03a      	b.n	8002404 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
    switch(PeriphClk)
 800238e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002392:	f000 80cc 	beq.w	800252e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8002396:	d80c      	bhi.n	80023b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8002398:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800239c:	f47f af6f 	bne.w	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80023a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        switch(srcclk)
 80023a4:	f012 4280 	ands.w	r2, r2, #1073741824	; 0x40000000
 80023a8:	d078      	beq.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80023aa:	2a00      	cmp	r2, #0
 80023ac:	f040 80cf 	bne.w	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80023b0:	e765      	b.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch(PeriphClk)
 80023b2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80023b6:	d0d0      	beq.n	800235a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80023b8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80023bc:	e7cc      	b.n	8002358 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80023be:	f7ff bbbd 	b.w	8001b3c <RCCEx_GetSAIxPeriphCLKFreq>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	f010 0002 	ands.w	r0, r0, #2
 80023c8:	f43f af5a 	beq.w	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	0712      	lsls	r2, r2, #28
 80023d0:	bf4c      	ite	mi
 80023d2:	681b      	ldrmi	r3, [r3, #0]
 80023d4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80023da:	bf4c      	ite	mi
 80023dc:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 80023e0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80023e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023e8:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80023f0:	f43f af46 	beq.w	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80023f4:	68d8      	ldr	r0, [r3, #12]
 80023f6:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 80023fa:	f43f af41 	beq.w	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80023fe:	68da      	ldr	r2, [r3, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002400:	68d8      	ldr	r0, [r3, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8002402:	68db      	ldr	r3, [r3, #12]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002404:	f3c2 1202 	ubfx	r2, r2, #4, #3
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002408:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800240c:	3201      	adds	r2, #1
 800240e:	fbb1 f1f2 	udiv	r1, r1, r2
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8002412:	4348      	muls	r0, r1
 8002414:	f3c3 5141 	ubfx	r1, r3, #21, #2
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002418:	3101      	adds	r1, #1
 800241a:	0049      	lsls	r1, r1, #1
 800241c:	fbb0 f0f1 	udiv	r0, r0, r1
 8002420:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002422:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002426:	f002 0203 	and.w	r2, r2, #3
        switch(srcclk)
 800242a:	2a02      	cmp	r2, #2
 800242c:	f000 808f 	beq.w	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002430:	2a03      	cmp	r2, #3
 8002432:	f43f aee9 	beq.w	8002208 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8002436:	2a01      	cmp	r2, #1
 8002438:	d07d      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
          frequency = HAL_RCC_GetPCLK2Freq();
 800243a:	f7ff bb6d 	b.w	8001b18 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800243e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002442:	f002 020c 	and.w	r2, r2, #12
        switch(srcclk)
 8002446:	2a0c      	cmp	r2, #12
 8002448:	f63f af19 	bhi.w	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800244c:	a101      	add	r1, pc, #4	; (adr r1, 8002454 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800244e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002452:	bf00      	nop
 8002454:	0800249d 	.word	0x0800249d
 8002458:	0800227f 	.word	0x0800227f
 800245c:	0800227f 	.word	0x0800227f
 8002460:	0800227f 	.word	0x0800227f
 8002464:	08002537 	.word	0x08002537
 8002468:	0800227f 	.word	0x0800227f
 800246c:	0800227f 	.word	0x0800227f
 8002470:	0800227f 	.word	0x0800227f
 8002474:	0800254f 	.word	0x0800254f
 8002478:	0800227f 	.word	0x0800227f
 800247c:	0800227f 	.word	0x0800227f
 8002480:	0800227f 	.word	0x0800227f
 8002484:	08002209 	.word	0x08002209
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002488:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800248c:	f002 0230 	and.w	r2, r2, #48	; 0x30
        switch(srcclk)
 8002490:	2a10      	cmp	r2, #16
 8002492:	d050      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002494:	d804      	bhi.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        switch(srcclk)
 8002496:	2a00      	cmp	r2, #0
 8002498:	f47f aef1 	bne.w	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800249c:	f7ff bb2a 	b.w	8001af4 <HAL_RCC_GetPCLK1Freq>
        switch(srcclk)
 80024a0:	2a20      	cmp	r2, #32
 80024a2:	d054      	beq.n	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80024a4:	2a30      	cmp	r2, #48	; 0x30
 80024a6:	e6ae      	b.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80024a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
        switch(srcclk)
 80024b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80024b4:	d03f      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80024b6:	d9ee      	bls.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80024b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80024bc:	d047      	beq.n	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80024be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80024c2:	e6a0      	b.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80024c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024c8:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        switch(srcclk)
 80024cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80024d0:	d024      	beq.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80024d2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80024d6:	d02e      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80024d8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80024dc:	f47f aecf 	bne.w	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80024e0:	6918      	ldr	r0, [r3, #16]
 80024e2:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80024e6:	f43f aecb 	beq.w	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80024ea:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80024ec:	6918      	ldr	r0, [r3, #16]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 80024ee:	691b      	ldr	r3, [r3, #16]
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80024f0:	f3c2 1202 	ubfx	r2, r2, #4, #3
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80024f4:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80024f8:	3201      	adds	r2, #1
 80024fa:	fbb1 f1f2 	udiv	r1, r1, r2
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 80024fe:	4348      	muls	r0, r1
 8002500:	f3c3 6141 	ubfx	r1, r3, #25, #2
 8002504:	e788      	b.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	0003d090 	.word	0x0003d090
 8002510:	080039d8 	.word	0x080039d8
 8002514:	00f42400 	.word	0x00f42400
 8002518:	007a1200 	.word	0x007a1200
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 800251c:	6958      	ldr	r0, [r3, #20]
 800251e:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002522:	f43f aead 	beq.w	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002526:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002528:	6958      	ldr	r0, [r3, #20]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	e7e0      	b.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002532:	2b00      	cmp	r3, #0
 8002534:	da81      	bge.n	800243a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = HAL_RCC_GetSysClockFreq();
 8002536:	f7fe bfd1 	b.w	80014dc <HAL_RCC_GetSysClockFreq>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800253a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800253e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
        switch(srcclk)
 8002542:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002546:	d0f6      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002548:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        switch(srcclk)
 800254c:	d1a3      	bne.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800254e:	681b      	ldr	r3, [r3, #0]
            frequency = HSI_VALUE;
 8002550:	4812      	ldr	r0, [pc, #72]	; (800259c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8002552:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002556:	e664      	b.n	8002222 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002558:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800255c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
        switch(srcclk)
 8002560:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002564:	d0e7      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002566:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800256a:	e7ef      	b.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800256c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002570:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
        switch(srcclk)
 8002574:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002578:	d006      	beq.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800257a:	d98c      	bls.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 800257c:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002580:	d0e5      	beq.n	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002582:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002586:	e63e      	b.n	8002206 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            frequency = LSI_VALUE;
 800258c:	f013 0f02 	tst.w	r3, #2
 8002590:	bf0c      	ite	eq
 8002592:	2000      	moveq	r0, #0
 8002594:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	00f42400 	.word	0x00f42400

080025a0 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025a0:	6802      	ldr	r2, [r0, #0]
{
 80025a2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025a4:	68d3      	ldr	r3, [r2, #12]
 80025a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025aa:	60d3      	str	r3, [r2, #12]
{
 80025ac:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 80025ae:	f7fe fbfd 	bl	8000dac <HAL_GetTick>
 80025b2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	069b      	lsls	r3, r3, #26
 80025ba:	d501      	bpl.n	80025c0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80025bc:	2000      	movs	r0, #0
 80025be:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025c0:	f7fe fbf4 	bl	8000dac <HAL_GetTick>
 80025c4:	1b40      	subs	r0, r0, r5
 80025c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80025ca:	d9f3      	bls.n	80025b4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80025cc:	2003      	movs	r0, #3
}
 80025ce:	bd38      	pop	{r3, r4, r5, pc}

080025d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025d0:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80025d2:	6803      	ldr	r3, [r0, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	0652      	lsls	r2, r2, #25
{
 80025d8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80025da:	d501      	bpl.n	80025e0 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
 80025de:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80025e6:	f7fe fbe1 	bl	8000dac <HAL_GetTick>
 80025ea:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	065b      	lsls	r3, r3, #25
 80025f2:	d4f3      	bmi.n	80025dc <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80025f4:	f7fe fbda 	bl	8000dac <HAL_GetTick>
 80025f8:	1b40      	subs	r0, r0, r5
 80025fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80025fe:	d9f5      	bls.n	80025ec <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
}
 8002602:	bd38      	pop	{r3, r4, r5, pc}

08002604 <HAL_RTC_Init>:
{
 8002604:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8002606:	4604      	mov	r4, r0
 8002608:	b1d8      	cbz	r0, 8002642 <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800260a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800260e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002612:	b91b      	cbnz	r3, 800261c <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 8002614:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8002618:	f7fe fab0 	bl	8000b7c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800261c:	2302      	movs	r3, #2
 800261e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	22ca      	movs	r2, #202	; 0xca
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
 8002628:	2253      	movs	r2, #83	; 0x53
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800262c:	4620      	mov	r0, r4
 800262e:	f7ff ffcf 	bl	80025d0 <RTC_EnterInitMode>
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	4605      	mov	r5, r0
 8002636:	b138      	cbz	r0, 8002648 <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 800263c:	2304      	movs	r3, #4
 800263e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 8002642:	2501      	movs	r5, #1
}
 8002644:	4628      	mov	r0, r5
 8002646:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002648:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800264a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800264c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002654:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002656:	6862      	ldr	r2, [r4, #4]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	4302      	orrs	r2, r0
 800265c:	69a0      	ldr	r0, [r4, #24]
 800265e:	4302      	orrs	r2, r0
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002664:	68e2      	ldr	r2, [r4, #12]
 8002666:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	68a1      	ldr	r1, [r4, #8]
 800266c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002670:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002678:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	069b      	lsls	r3, r3, #26
 800267e:	d405      	bmi.n	800268c <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff ff8d 	bl	80025a0 <HAL_RTC_WaitForSynchro>
 8002686:	b108      	cbz	r0, 800268c <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	e7d5      	b.n	8002638 <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800268c:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800268e:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002692:	f022 0203 	bic.w	r2, r2, #3
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002698:	69e2      	ldr	r2, [r4, #28]
 800269a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800269c:	4302      	orrs	r2, r0
 800269e:	430a      	orrs	r2, r1
 80026a0:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 80026ac:	e7ca      	b.n	8002644 <HAL_RTC_Init+0x40>

080026ae <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80026ae:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while(temp >= 10U)
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d803      	bhi.n	80026bc <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | temp);
 80026b4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80026b8:	b2c0      	uxtb	r0, r0
 80026ba:	4770      	bx	lr
    temp -= 10U;
 80026bc:	380a      	subs	r0, #10
    bcdhigh++;
 80026be:	3301      	adds	r3, #1
    temp -= 10U;
 80026c0:	b2c0      	uxtb	r0, r0
 80026c2:	e7f5      	b.n	80026b0 <RTC_ByteToBcd2+0x2>

080026c4 <HAL_RTC_SetDate>:
{
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80026c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80026ca:	2b01      	cmp	r3, #1
{
 80026cc:	4605      	mov	r5, r0
 80026ce:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 80026d2:	d034      	beq.n	800273e <HAL_RTC_SetDate+0x7a>
 80026d4:	2301      	movs	r3, #1
 80026d6:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026da:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 80026de:	784b      	ldrb	r3, [r1, #1]
 80026e0:	78c8      	ldrb	r0, [r1, #3]
 80026e2:	788e      	ldrb	r6, [r1, #2]
 80026e4:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d14e      	bne.n	8002788 <HAL_RTC_SetDate+0xc4>
 80026ea:	06da      	lsls	r2, r3, #27
 80026ec:	d503      	bpl.n	80026f6 <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80026ee:	f023 0310 	bic.w	r3, r3, #16
 80026f2:	330a      	adds	r3, #10
 80026f4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80026f6:	f7ff ffda 	bl	80026ae <RTC_ByteToBcd2>
 80026fa:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80026fc:	7848      	ldrb	r0, [r1, #1]
 80026fe:	f7ff ffd6 	bl	80026ae <RTC_ByteToBcd2>
 8002702:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002704:	4630      	mov	r0, r6
 8002706:	f7ff ffd2 	bl	80026ae <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800270a:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 800270e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002712:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002716:	682b      	ldr	r3, [r5, #0]
 8002718:	22ca      	movs	r2, #202	; 0xca
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
 800271c:	2253      	movs	r2, #83	; 0x53
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002720:	4628      	mov	r0, r5
 8002722:	f7ff ff55 	bl	80025d0 <RTC_EnterInitMode>
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	4606      	mov	r6, r0
 800272a:	b150      	cbz	r0, 8002742 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002730:	2304      	movs	r3, #4
 8002732:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002736:	2300      	movs	r3, #0
 8002738:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 800273c:	2601      	movs	r6, #1
}
 800273e:	4630      	mov	r0, r6
 8002740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002742:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002746:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800274a:	605c      	str	r4, [r3, #4]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002752:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	069b      	lsls	r3, r3, #26
 8002758:	d40c      	bmi.n	8002774 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800275a:	4628      	mov	r0, r5
 800275c:	f7ff ff20 	bl	80025a0 <HAL_RTC_WaitForSynchro>
 8002760:	b140      	cbz	r0, 8002774 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002762:	682b      	ldr	r3, [r5, #0]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002768:	2304      	movs	r3, #4
 800276a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800276e:	f885 6020 	strb.w	r6, [r5, #32]
 8002772:	e7e3      	b.n	800273c <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800277a:	2301      	movs	r3, #1
 800277c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002780:	2300      	movs	r3, #0
 8002782:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 8002786:	e7da      	b.n	800273e <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002788:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800278a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800278e:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002790:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002794:	e7bf      	b.n	8002716 <HAL_RTC_SetDate+0x52>

08002796 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8002796:	f890 3020 	ldrb.w	r3, [r0, #32]
 800279a:	2b01      	cmp	r3, #1
{
 800279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a0:	4605      	mov	r5, r0
 80027a2:	460e      	mov	r6, r1
 80027a4:	4690      	mov	r8, r2
 80027a6:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 80027aa:	d017      	beq.n	80027dc <HAL_RTC_SetTime+0x46>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ac:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ae:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027b2:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 80027b4:	2401      	movs	r4, #1
 80027b6:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
 80027bc:	2253      	movs	r2, #83	; 0x53
 80027be:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027c0:	f7ff ff06 	bl	80025d0 <RTC_EnterInitMode>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	4607      	mov	r7, r0
 80027c8:	b158      	cbz	r0, 80027e2 <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027ce:	2304      	movs	r3, #4
 80027d0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80027d4:	2300      	movs	r3, #0
 80027d6:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 80027da:	2701      	movs	r7, #1
}
 80027dc:	4638      	mov	r0, r7
 80027de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e2:	7830      	ldrb	r0, [r6, #0]
 80027e4:	7874      	ldrb	r4, [r6, #1]
 80027e6:	78b1      	ldrb	r1, [r6, #2]
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027e8:	689b      	ldr	r3, [r3, #8]
    if(Format == RTC_FORMAT_BIN)
 80027ea:	f1b8 0f00 	cmp.w	r8, #0
 80027ee:	d138      	bne.n	8002862 <HAL_RTC_SetTime+0xcc>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027f0:	065a      	lsls	r2, r3, #25
        sTime->TimeFormat = 0x00U;
 80027f2:	bf58      	it	pl
 80027f4:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027f6:	f7ff ff5a 	bl	80026ae <RTC_ByteToBcd2>
 80027fa:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff ff56 	bl	80026ae <RTC_ByteToBcd2>
 8002802:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos ) | \
 8002804:	4608      	mov	r0, r1
 8002806:	f7ff ff52 	bl	80026ae <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800280a:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800280c:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8002810:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002814:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 800281e:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8002822:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002824:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002826:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800282c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800282e:	68f2      	ldr	r2, [r6, #12]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	4302      	orrs	r2, r0
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800283e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002840:	689c      	ldr	r4, [r3, #8]
 8002842:	f014 0420 	ands.w	r4, r4, #32
 8002846:	d118      	bne.n	800287a <HAL_RTC_SetTime+0xe4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002848:	4628      	mov	r0, r5
 800284a:	f7ff fea9 	bl	80025a0 <HAL_RTC_WaitForSynchro>
 800284e:	b1a0      	cbz	r0, 800287a <HAL_RTC_SetTime+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002856:	2304      	movs	r3, #4
 8002858:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800285c:	f885 4020 	strb.w	r4, [r5, #32]
 8002860:	e7bb      	b.n	80027da <HAL_RTC_SetTime+0x44>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002862:	065b      	lsls	r3, r3, #25
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002864:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8002868:	bf58      	it	pl
 800286a:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800286c:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002870:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002872:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002874:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002878:	e7ce      	b.n	8002818 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002880:	2301      	movs	r3, #1
 8002882:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc);
 8002886:	2300      	movs	r3, #0
 8002888:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 800288c:	e7a6      	b.n	80027dc <HAL_RTC_SetTime+0x46>

0800288e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800288e:	0903      	lsrs	r3, r0, #4
 8002890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 8002894:	f000 000f 	and.w	r0, r0, #15
 8002898:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800289c:	b2c0      	uxtb	r0, r0
 800289e:	4770      	bx	lr

080028a0 <HAL_RTC_GetTime>:
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80028a0:	6800      	ldr	r0, [r0, #0]
{
 80028a2:	b538      	push	{r3, r4, r5, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80028a4:	6903      	ldr	r3, [r0, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80028a6:	6804      	ldr	r4, [r0, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80028a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028ac:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80028ae:	f004 337f 	and.w	r3, r4, #2139062143	; 0x7f7f7f7f
 80028b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80028b6:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80028ba:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80028be:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80028c2:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80028c4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80028c6:	704d      	strb	r5, [r1, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80028c8:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80028ca:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80028cc:	b952      	cbnz	r2, 80028e4 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028ce:	f7ff ffde 	bl	800288e <RTC_Bcd2ToByte>
 80028d2:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff ffda 	bl	800288e <RTC_Bcd2ToByte>
 80028da:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028dc:	4620      	mov	r0, r4
 80028de:	f7ff ffd6 	bl	800288e <RTC_Bcd2ToByte>
 80028e2:	7088      	strb	r0, [r1, #2]
}
 80028e4:	2000      	movs	r0, #0
 80028e6:	bd38      	pop	{r3, r4, r5, pc}

080028e8 <HAL_RTC_GetDate>:
{
 80028e8:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028ea:	6803      	ldr	r3, [r0, #0]
 80028ec:	685c      	ldr	r4, [r3, #4]
 80028ee:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 80028f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year =  (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80028f6:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80028f8:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date =  (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80028fc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002900:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year =  (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002904:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002906:	704d      	strb	r5, [r1, #1]
  sDate->Date =  (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002908:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800290a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800290c:	b952      	cbnz	r2, 8002924 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800290e:	f7ff ffbe 	bl	800288e <RTC_Bcd2ToByte>
 8002912:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002914:	4628      	mov	r0, r5
 8002916:	f7ff ffba 	bl	800288e <RTC_Bcd2ToByte>
 800291a:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff ffb6 	bl	800288e <RTC_Bcd2ToByte>
 8002922:	7088      	strb	r0, [r1, #2]
}
 8002924:	2000      	movs	r0, #0
 8002926:	bd38      	pop	{r3, r4, r5, pc}

08002928 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800292a:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002932:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8002936:	680b      	ldr	r3, [r1, #0]
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800293c:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 800293e:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8002940:	b93a      	cbnz	r2, 8002952 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002942:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 800294e:	2003      	movs	r0, #3
      break;
 8002950:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8002952:	680b      	ldr	r3, [r1, #0]
 8002954:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 8002958:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800295c:	d1f0      	bne.n	8002940 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	4618      	mov	r0, r3

  return status;
}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_SAI_Init>:
{
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 800296a:	4604      	mov	r4, r0
 800296c:	b910      	cbnz	r0, 8002974 <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 800296e:	2501      	movs	r5, #1
}
 8002970:	4628      	mov	r0, r5
 8002972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8002974:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002978:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800297c:	b91b      	cbnz	r3, 8002986 <HAL_SAI_Init+0x1e>
    hsai->Lock = HAL_UNLOCKED;
 800297e:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8002982:	f7fe f93f 	bl	8000c04 <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff ffce 	bl	8002928 <SAI_Disable>
 800298c:	4605      	mov	r5, r0
 800298e:	2800      	cmp	r0, #0
 8002990:	d1ed      	bne.n	800296e <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  switch (hsai->Init.SynchroExt)
 8002998:	68e3      	ldr	r3, [r4, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	f000 8094 	beq.w	8002ac8 <HAL_SAI_Init+0x160>
      tmpregisterGCR = 0;
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	bf0c      	ite	eq
 80029a4:	2320      	moveq	r3, #32
 80029a6:	2300      	movne	r3, #0
  switch (hsai->Init.Synchro)
 80029a8:	68a2      	ldr	r2, [r4, #8]
 80029aa:	2a02      	cmp	r2, #2
 80029ac:	f000 8090 	beq.w	8002ad0 <HAL_SAI_Init+0x168>
 80029b0:	2a03      	cmp	r2, #3
 80029b2:	f000 808b 	beq.w	8002acc <HAL_SAI_Init+0x164>
      syncen_bits = 0;
 80029b6:	2a01      	cmp	r2, #1
 80029b8:	bf0c      	ite	eq
 80029ba:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80029be:	2600      	movne	r6, #0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80029c0:	6822      	ldr	r2, [r4, #0]
 80029c2:	494a      	ldr	r1, [pc, #296]	; (8002aec <HAL_SAI_Init+0x184>)
 80029c4:	428a      	cmp	r2, r1
 80029c6:	d003      	beq.n	80029d0 <HAL_SAI_Init+0x68>
 80029c8:	4849      	ldr	r0, [pc, #292]	; (8002af0 <HAL_SAI_Init+0x188>)
 80029ca:	4282      	cmp	r2, r0
 80029cc:	f040 8083 	bne.w	8002ad6 <HAL_SAI_Init+0x16e>
    SAI1->GCR = tmpregisterGCR;
 80029d0:	4848      	ldr	r0, [pc, #288]	; (8002af4 <HAL_SAI_Init+0x18c>)
    SAI2->GCR = tmpregisterGCR;
 80029d2:	6003      	str	r3, [r0, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80029d4:	69e3      	ldr	r3, [r4, #28]
 80029d6:	b1b3      	cbz	r3, 8002a06 <HAL_SAI_Init+0x9e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80029d8:	428a      	cmp	r2, r1
 80029da:	d002      	beq.n	80029e2 <HAL_SAI_Init+0x7a>
 80029dc:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_SAI_Init+0x188>)
 80029de:	429a      	cmp	r2, r3
 80029e0:	d17b      	bne.n	8002ada <HAL_SAI_Init+0x172>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80029e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80029e6:	f7ff fbfd 	bl	80021e4 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80029ea:	69e3      	ldr	r3, [r4, #28]
 80029ec:	220a      	movs	r2, #10
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	4350      	muls	r0, r2
 80029f2:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 80029f6:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10U) > 8U)
 80029fa:	fb02 0013 	mls	r0, r2, r3, r0
 80029fe:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8002a00:	bf08      	it	eq
 8002a02:	3301      	addeq	r3, #1
 8002a04:	6223      	str	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a0a:	f033 0102 	bics.w	r1, r3, #2
 8002a0e:	d167      	bne.n	8002ae0 <HAL_SAI_Init+0x178>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8002a10:	2a01      	cmp	r2, #1
 8002a12:	bf18      	it	ne
 8002a14:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002a18:	6822      	ldr	r2, [r4, #0]
 8002a1a:	4837      	ldr	r0, [pc, #220]	; (8002af8 <HAL_SAI_Init+0x190>)
 8002a1c:	6817      	ldr	r7, [r2, #0]
 8002a1e:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002a20:	6b27      	ldr	r7, [r4, #48]	; 0x30
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002a22:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002a24:	433b      	orrs	r3, r7
 8002a26:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002a28:	6810      	ldr	r0, [r2, #0]
 8002a2a:	433b      	orrs	r3, r7
 8002a2c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002a2e:	433b      	orrs	r3, r7
 8002a30:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8002a32:	433b      	orrs	r3, r7
 8002a34:	6927      	ldr	r7, [r4, #16]
 8002a36:	433b      	orrs	r3, r7
 8002a38:	6967      	ldr	r7, [r4, #20]
 8002a3a:	433b      	orrs	r3, r7
 8002a3c:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002a3e:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002a40:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8002a44:	4333      	orrs	r3, r6
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002a4a:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002a4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002a4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a52:	f023 030f 	bic.w	r3, r3, #15
 8002a56:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002a58:	69a3      	ldr	r3, [r4, #24]
 8002a5a:	6851      	ldr	r1, [r2, #4]
 8002a5c:	4303      	orrs	r3, r0
 8002a5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002a60:	4303      	orrs	r3, r0
 8002a62:	430b      	orrs	r3, r1
 8002a64:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002a66:	6891      	ldr	r1, [r2, #8]
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_SAI_Init+0x194>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002a6a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002a70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a72:	6891      	ldr	r1, [r2, #8]
 8002a74:	4303      	orrs	r3, r0
 8002a76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002a78:	4303      	orrs	r3, r0
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a7e:	3901      	subs	r1, #1
 8002a80:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8002a82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002a84:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002a86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a8a:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8002a8c:	68d3      	ldr	r3, [r2, #12]
 8002a8e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002a92:	f023 030f 	bic.w	r3, r3, #15
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002a9c:	68d1      	ldr	r1, [r2, #12]
 8002a9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aa2:	4303      	orrs	r3, r0
 8002aa4:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8002aa6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002aa8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8002aac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002aae:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002ab0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ab4:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002ab6:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8002ab8:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002aba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8002abe:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8002ac2:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
 8002ac6:	e753      	b.n	8002970 <HAL_SAI_Init+0x8>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8002ac8:	2310      	movs	r3, #16
 8002aca:	e76d      	b.n	80029a8 <HAL_SAI_Init+0x40>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002acc:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8002ad0:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8002ad4:	e774      	b.n	80029c0 <HAL_SAI_Init+0x58>
    SAI2->GCR = tmpregisterGCR;
 8002ad6:	480a      	ldr	r0, [pc, #40]	; (8002b00 <HAL_SAI_Init+0x198>)
 8002ad8:	e77b      	b.n	80029d2 <HAL_SAI_Init+0x6a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002ada:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ade:	e782      	b.n	80029e6 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8002ae0:	2a01      	cmp	r2, #1
 8002ae2:	bf14      	ite	ne
 8002ae4:	2100      	movne	r1, #0
 8002ae6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002aea:	e795      	b.n	8002a18 <HAL_SAI_Init+0xb0>
 8002aec:	40015404 	.word	0x40015404
 8002af0:	40015424 	.word	0x40015424
 8002af4:	40015400 	.word	0x40015400
 8002af8:	ff05c010 	.word	0xff05c010
 8002afc:	fff88000 	.word	0xfff88000
 8002b00:	40015800 	.word	0x40015800

08002b04 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b04:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b06:	69c1      	ldr	r1, [r0, #28]
{
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b0c:	6883      	ldr	r3, [r0, #8]
 8002b0e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b10:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b12:	4303      	orrs	r3, r0
 8002b14:	6960      	ldr	r0, [r4, #20]
 8002b16:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b18:	48ba      	ldr	r0, [pc, #744]	; (8002e04 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b1a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b1c:	4028      	ands	r0, r5
 8002b1e:	4303      	orrs	r3, r0
 8002b20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b22:	6853      	ldr	r3, [r2, #4]
 8002b24:	68e0      	ldr	r0, [r4, #12]
 8002b26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b2e:	4bb6      	ldr	r3, [pc, #728]	; (8002e08 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b30:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b32:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b34:	bf1c      	itt	ne
 8002b36:	6a23      	ldrne	r3, [r4, #32]
 8002b38:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b3a:	6893      	ldr	r3, [r2, #8]
 8002b3c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b40:	4303      	orrs	r3, r0
 8002b42:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b44:	4bb1      	ldr	r3, [pc, #708]	; (8002e0c <UART_SetConfig+0x308>)
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d119      	bne.n	8002b7e <UART_SetConfig+0x7a>
 8002b4a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002b4e:	4ab0      	ldr	r2, [pc, #704]	; (8002e10 <UART_SetConfig+0x30c>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b58:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	f040 8138 	bne.w	8002dd2 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	f200 808f 	bhi.w	8002c86 <UART_SetConfig+0x182>
 8002b68:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b6c:	00ca011a 	.word	0x00ca011a
 8002b70:	008d00f9 	.word	0x008d00f9
 8002b74:	008d0114 	.word	0x008d0114
 8002b78:	008d008d 	.word	0x008d008d
 8002b7c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b7e:	4ba5      	ldr	r3, [pc, #660]	; (8002e14 <UART_SetConfig+0x310>)
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <UART_SetConfig+0x90>
 8002b84:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002b88:	4aa3      	ldr	r2, [pc, #652]	; (8002e18 <UART_SetConfig+0x314>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	e7e1      	b.n	8002b58 <UART_SetConfig+0x54>
 8002b94:	4ba1      	ldr	r3, [pc, #644]	; (8002e1c <UART_SetConfig+0x318>)
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d123      	bne.n	8002be2 <UART_SetConfig+0xde>
 8002b9a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	f000 80f1 	beq.w	8002d8e <UART_SetConfig+0x28a>
 8002bac:	d80b      	bhi.n	8002bc6 <UART_SetConfig+0xc2>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80f3 	beq.w	8002d9a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002bb8:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002bbc:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc0:	f000 80f8 	beq.w	8002db4 <UART_SetConfig+0x2b0>
 8002bc4:	e0a8      	b.n	8002d18 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	f000 80c6 	beq.w	8002d58 <UART_SetConfig+0x254>
 8002bcc:	2b30      	cmp	r3, #48	; 0x30
 8002bce:	d1f1      	bne.n	8002bb4 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002bd4:	f040 80b8 	bne.w	8002d48 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bd8:	6860      	ldr	r0, [r4, #4]
 8002bda:	0843      	lsrs	r3, r0, #1
 8002bdc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002be0:	e0c3      	b.n	8002d6a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be2:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <UART_SetConfig+0x31c>)
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d11e      	bne.n	8002c26 <UART_SetConfig+0x122>
 8002be8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	f000 80bb 	beq.w	8002d70 <UART_SetConfig+0x26c>
 8002bfa:	d80a      	bhi.n	8002c12 <UART_SetConfig+0x10e>
 8002bfc:	b97b      	cbnz	r3, 8002c1e <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <UART_SetConfig+0x304>)
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 80ca 	bne.w	8002d9a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c06:	f7fe ff75 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
        break;
 8002c0a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002c0c:	bbb0      	cbnz	r0, 8002c7c <UART_SetConfig+0x178>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	e03a      	b.n	8002c88 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c12:	2b80      	cmp	r3, #128	; 0x80
 8002c14:	f000 809d 	beq.w	8002d52 <UART_SetConfig+0x24e>
 8002c18:	2bc0      	cmp	r3, #192	; 0xc0
 8002c1a:	f000 80b0 	beq.w	8002d7e <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <UART_SetConfig+0x304>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1c7      	bne.n	8002bb4 <UART_SetConfig+0xb0>
 8002c24:	e02f      	b.n	8002c86 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <UART_SetConfig+0x320>)
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d111      	bne.n	8002c50 <UART_SetConfig+0x14c>
 8002c2c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3c:	f000 8098 	beq.w	8002d70 <UART_SetConfig+0x26c>
 8002c40:	d9dc      	bls.n	8002bfc <UART_SetConfig+0xf8>
 8002c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c46:	f000 8084 	beq.w	8002d52 <UART_SetConfig+0x24e>
 8002c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4e:	e7e4      	b.n	8002c1a <UART_SetConfig+0x116>
 8002c50:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <UART_SetConfig+0x304>)
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d1ae      	bne.n	8002bb4 <UART_SetConfig+0xb0>
 8002c56:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	f000 8083 	beq.w	8002d70 <UART_SetConfig+0x26c>
 8002c6a:	d9c7      	bls.n	8002bfc <UART_SetConfig+0xf8>
 8002c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c70:	d06f      	beq.n	8002d52 <UART_SetConfig+0x24e>
 8002c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c76:	e7d0      	b.n	8002c1a <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002c78:	486b      	ldr	r0, [pc, #428]	; (8002e28 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c7a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002c82:	4281      	cmp	r1, r0
 8002c84:	d905      	bls.n	8002c92 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002c86:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002c8c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002c8e:	4610      	mov	r0, r2
 8002c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002c92:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002c96:	d8f6      	bhi.n	8002c86 <UART_SetConfig+0x182>
        switch (clocksource)
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d82e      	bhi.n	8002cfa <UART_SetConfig+0x1f6>
 8002c9c:	e8df f003 	tbb	[pc, r3]
 8002ca0:	2d1c2d05 	.word	0x2d1c2d05
 8002ca4:	2d2d2d24 	.word	0x2d2d2d24
 8002ca8:	27          	.byte	0x27
 8002ca9:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002caa:	f7fe ff23 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cb4:	0856      	lsrs	r6, r2, #1
 8002cb6:	2700      	movs	r7, #0
 8002cb8:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002cc2:	f7fd fad5 	bl	8000270 <__aeabi_uldivmod>
            break;
 8002cc6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <UART_SetConfig+0x328>)
 8002cca:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	d8d9      	bhi.n	8002c86 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	60d8      	str	r0, [r3, #12]
 8002cd6:	e7d7      	b.n	8002c88 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002cd8:	4855      	ldr	r0, [pc, #340]	; (8002e30 <UART_SetConfig+0x32c>)
 8002cda:	0855      	lsrs	r5, r2, #1
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002ce2:	f141 0100 	adc.w	r1, r1, #0
 8002ce6:	e7ec      	b.n	8002cc2 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ce8:	f7fe fbf8 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 8002cec:	e7df      	b.n	8002cae <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002cee:	0850      	lsrs	r0, r2, #1
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002cf8:	e7f3      	b.n	8002ce2 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002cfa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e7e3      	b.n	8002cc8 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d00:	f7fe ff0a 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8002d04:	e04e      	b.n	8002da4 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d06:	f7fe fef5 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d16:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d18:	f1a3 0010 	sub.w	r0, r3, #16
 8002d1c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002d20:	4288      	cmp	r0, r1
 8002d22:	d8b0      	bhi.n	8002c86 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002d24:	6821      	ldr	r1, [r4, #0]
 8002d26:	60cb      	str	r3, [r1, #12]
 8002d28:	e7ae      	b.n	8002c88 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d2a:	f7fe fef5 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8002d2e:	e7ec      	b.n	8002d0a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d30:	6860      	ldr	r0, [r4, #4]
 8002d32:	0843      	lsrs	r3, r0, #1
 8002d34:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d38:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d40:	e7e8      	b.n	8002d14 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d42:	f7fe fbcb 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 8002d46:	e7e0      	b.n	8002d0a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d48:	6860      	ldr	r0, [r4, #4]
 8002d4a:	0843      	lsrs	r3, r0, #1
 8002d4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d50:	e7f4      	b.n	8002d3c <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <UART_SetConfig+0x304>)
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d08f      	beq.n	8002c78 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d58:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d5c:	d1e8      	bne.n	8002d30 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d5e:	6860      	ldr	r0, [r4, #4]
 8002d60:	0843      	lsrs	r3, r0, #1
 8002d62:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002d66:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d6a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d6e:	e01f      	b.n	8002db0 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <UART_SetConfig+0x304>)
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d10b      	bne.n	8002d8e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002d76:	f7fe fbb1 	bl	80014dc <HAL_RCC_GetSysClockFreq>
        break;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e746      	b.n	8002c0c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <UART_SetConfig+0x304>)
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f47f af25 	bne.w	8002bd0 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002d86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	e776      	b.n	8002c7c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d92:	d1d6      	bne.n	8002d42 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d94:	f7fe fba2 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 8002d98:	e004      	b.n	8002da4 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d9e:	d1b2      	bne.n	8002d06 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002da0:	f7fe fea8 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002da4:	6861      	ldr	r1, [r4, #4]
 8002da6:	084a      	lsrs	r2, r1, #1
 8002da8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002dac:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db4:	f1a3 0010 	sub.w	r0, r3, #16
 8002db8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002dbc:	4288      	cmp	r0, r1
 8002dbe:	f63f af62 	bhi.w	8002c86 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002dc2:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002dc6:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc8:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	60c3      	str	r3, [r0, #12]
 8002dd0:	e75a      	b.n	8002c88 <UART_SetConfig+0x184>
    switch (clocksource)
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	f63f af57 	bhi.w	8002c86 <UART_SetConfig+0x182>
 8002dd8:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <UART_SetConfig+0x2dc>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002d07 	.word	0x08002d07
 8002de4:	08002d2b 	.word	0x08002d2b
 8002de8:	08002d31 	.word	0x08002d31
 8002dec:	08002c87 	.word	0x08002c87
 8002df0:	08002d43 	.word	0x08002d43
 8002df4:	08002c87 	.word	0x08002c87
 8002df8:	08002c87 	.word	0x08002c87
 8002dfc:	08002c87 	.word	0x08002c87
 8002e00:	08002d49 	.word	0x08002d49
 8002e04:	efff69f3 	.word	0xefff69f3
 8002e08:	40008000 	.word	0x40008000
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	08003a08 	.word	0x08003a08
 8002e14:	40004400 	.word	0x40004400
 8002e18:	08003a0c 	.word	0x08003a0c
 8002e1c:	40004800 	.word	0x40004800
 8002e20:	40004c00 	.word	0x40004c00
 8002e24:	40005000 	.word	0x40005000
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	000ffcff 	.word	0x000ffcff
 8002e30:	f4240000 	.word	0xf4240000

08002e34 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002e36:	07da      	lsls	r2, r3, #31
{
 8002e38:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3a:	d506      	bpl.n	8002e4a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e3c:	6801      	ldr	r1, [r0, #0]
 8002e3e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002e40:	684a      	ldr	r2, [r1, #4]
 8002e42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002e46:	4322      	orrs	r2, r4
 8002e48:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e4a:	079c      	lsls	r4, r3, #30
 8002e4c:	d506      	bpl.n	8002e5c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e4e:	6801      	ldr	r1, [r0, #0]
 8002e50:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002e52:	684a      	ldr	r2, [r1, #4]
 8002e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e58:	4322      	orrs	r2, r4
 8002e5a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e5c:	0759      	lsls	r1, r3, #29
 8002e5e:	d506      	bpl.n	8002e6e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e60:	6801      	ldr	r1, [r0, #0]
 8002e62:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002e64:	684a      	ldr	r2, [r1, #4]
 8002e66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e6a:	4322      	orrs	r2, r4
 8002e6c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6e:	071a      	lsls	r2, r3, #28
 8002e70:	d506      	bpl.n	8002e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e72:	6801      	ldr	r1, [r0, #0]
 8002e74:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e76:	684a      	ldr	r2, [r1, #4]
 8002e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7c:	4322      	orrs	r2, r4
 8002e7e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e80:	06dc      	lsls	r4, r3, #27
 8002e82:	d506      	bpl.n	8002e92 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e84:	6801      	ldr	r1, [r0, #0]
 8002e86:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002e88:	688a      	ldr	r2, [r1, #8]
 8002e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e8e:	4322      	orrs	r2, r4
 8002e90:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e92:	0699      	lsls	r1, r3, #26
 8002e94:	d506      	bpl.n	8002ea4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e96:	6801      	ldr	r1, [r0, #0]
 8002e98:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002e9a:	688a      	ldr	r2, [r1, #8]
 8002e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea0:	4322      	orrs	r2, r4
 8002ea2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ea4:	065a      	lsls	r2, r3, #25
 8002ea6:	d50f      	bpl.n	8002ec8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea8:	6801      	ldr	r1, [r0, #0]
 8002eaa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002eac:	684a      	ldr	r2, [r1, #4]
 8002eae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002eb2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eba:	d105      	bne.n	8002ec8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ebc:	684a      	ldr	r2, [r1, #4]
 8002ebe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ec0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ec4:	4322      	orrs	r2, r4
 8002ec6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	d506      	bpl.n	8002eda <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ecc:	6802      	ldr	r2, [r0, #0]
 8002ece:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ed0:	6853      	ldr	r3, [r2, #4]
 8002ed2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	bd10      	pop	{r4, pc}

08002edc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee0:	9d06      	ldr	r5, [sp, #24]
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	460f      	mov	r7, r1
 8002ee6:	4616      	mov	r6, r2
 8002ee8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eea:	6821      	ldr	r1, [r4, #0]
 8002eec:	69ca      	ldr	r2, [r1, #28]
 8002eee:	ea37 0302 	bics.w	r3, r7, r2
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2201      	moveq	r2, #1
 8002ef6:	2200      	movne	r2, #0
 8002ef8:	42b2      	cmp	r2, r6
 8002efa:	d002      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002efc:	2000      	movs	r0, #0
}
 8002efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	1c6b      	adds	r3, r5, #1
 8002f04:	d0f2      	beq.n	8002eec <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f06:	b99d      	cbnz	r5, 8002f30 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002f20:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002f24:	2300      	movs	r3, #0
 8002f26:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002f2a:	2003      	movs	r0, #3
 8002f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f30:	f7fd ff3c 	bl	8000dac <HAL_GetTick>
 8002f34:	eba0 0008 	sub.w	r0, r0, r8
 8002f38:	4285      	cmp	r5, r0
 8002f3a:	d2d6      	bcs.n	8002eea <UART_WaitOnFlagUntilTimeout+0xe>
 8002f3c:	e7e4      	b.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x2c>

08002f3e <HAL_UART_Transmit>:
{
 8002f3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f42:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002f44:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002f48:	2b20      	cmp	r3, #32
{
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	460d      	mov	r5, r1
 8002f4e:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002f50:	d14a      	bne.n	8002fe8 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002f52:	2900      	cmp	r1, #0
 8002f54:	d046      	beq.n	8002fe4 <HAL_UART_Transmit+0xa6>
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d044      	beq.n	8002fe4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002f5a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d042      	beq.n	8002fe8 <HAL_UART_Transmit+0xaa>
 8002f62:	2301      	movs	r3, #1
 8002f64:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6c:	2321      	movs	r3, #33	; 0x21
 8002f6e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002f72:	f7fd ff1b 	bl	8000dac <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002f76:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002f7a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002f7c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f80:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f84:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002f86:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f88:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8002f8a:	b952      	cbnz	r2, 8002fa2 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff ffa4 	bl	8002edc <UART_WaitOnFlagUntilTimeout>
 8002f94:	b958      	cbnz	r0, 8002fae <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002f96:	2320      	movs	r3, #32
 8002f98:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002f9c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002fa0:	e006      	b.n	8002fb0 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f7ff ff98 	bl	8002edc <UART_WaitOnFlagUntilTimeout>
 8002fac:	b118      	cbz	r0, 8002fb6 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002fae:	2003      	movs	r0, #3
}
 8002fb0:	b002      	add	sp, #8
 8002fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb6:	68a3      	ldr	r3, [r4, #8]
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d10d      	bne.n	8002fdc <HAL_UART_Transmit+0x9e>
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	b95b      	cbnz	r3, 8002fdc <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002fc4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002fce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002fda:	e7d1      	b.n	8002f80 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002fdc:	782b      	ldrb	r3, [r5, #0]
 8002fde:	8513      	strh	r3, [r2, #40]	; 0x28
 8002fe0:	3501      	adds	r5, #1
 8002fe2:	e7f4      	b.n	8002fce <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e7e3      	b.n	8002fb0 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002fe8:	2002      	movs	r0, #2
 8002fea:	e7e1      	b.n	8002fb0 <HAL_UART_Transmit+0x72>

08002fec <UART_CheckIdleState>:
{
 8002fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002ff4:	f7fd feda 	bl	8000dac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002ffe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003000:	d417      	bmi.n	8003032 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	075b      	lsls	r3, r3, #29
 8003008:	d50a      	bpl.n	8003020 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	462b      	mov	r3, r5
 8003014:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff ff5f 	bl	8002edc <UART_WaitOnFlagUntilTimeout>
 800301e:	b9a0      	cbnz	r0, 800304a <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003020:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003022:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003024:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8003028:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800302c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003030:	e00c      	b.n	800304c <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4632      	mov	r2, r6
 800303a:	4603      	mov	r3, r0
 800303c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ff4b 	bl	8002edc <UART_WaitOnFlagUntilTimeout>
 8003046:	2800      	cmp	r0, #0
 8003048:	d0db      	beq.n	8003002 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800304a:	2003      	movs	r0, #3
}
 800304c:	b002      	add	sp, #8
 800304e:	bd70      	pop	{r4, r5, r6, pc}

08003050 <HAL_UART_Init>:
{
 8003050:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003052:	4604      	mov	r4, r0
 8003054:	b360      	cbz	r0, 80030b0 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800305a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800305e:	b91b      	cbnz	r3, 8003068 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003060:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003064:	f7fd fd9a 	bl	8000b9c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003068:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800306a:	2324      	movs	r3, #36	; 0x24
 800306c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff fd43 	bl	8002b04 <UART_SetConfig>
 800307e:	2801      	cmp	r0, #1
 8003080:	d016      	beq.n	80030b0 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003084:	b113      	cbz	r3, 800308c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff fed4 	bl	8002e34 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003094:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800309c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80030a4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80030ac:	f7ff bf9e 	b.w	8002fec <UART_CheckIdleState>
}
 80030b0:	2001      	movs	r0, #1
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <__errno>:
 80030b4:	4b01      	ldr	r3, [pc, #4]	; (80030bc <__errno+0x8>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000004 	.word	0x20000004

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4e0d      	ldr	r6, [pc, #52]	; (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c6:	1ba4      	subs	r4, r4, r6
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2500      	movs	r5, #0
 80030cc:	42a5      	cmp	r5, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4e0b      	ldr	r6, [pc, #44]	; (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	; (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 fc3e 	bl	8003954 <_init>
 80030d8:	1ba4      	subs	r4, r4, r6
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2500      	movs	r5, #0
 80030de:	42a5      	cmp	r5, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e8:	4798      	blx	r3
 80030ea:	3501      	adds	r5, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f2:	4798      	blx	r3
 80030f4:	3501      	adds	r5, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003a54 	.word	0x08003a54
 80030fc:	08003a54 	.word	0x08003a54
 8003100:	08003a54 	.word	0x08003a54
 8003104:	08003a58 	.word	0x08003a58

08003108 <memset>:
 8003108:	4402      	add	r2, r0
 800310a:	4603      	mov	r3, r0
 800310c:	4293      	cmp	r3, r2
 800310e:	d100      	bne.n	8003112 <memset+0xa>
 8003110:	4770      	bx	lr
 8003112:	f803 1b01 	strb.w	r1, [r3], #1
 8003116:	e7f9      	b.n	800310c <memset+0x4>

08003118 <siprintf>:
 8003118:	b40e      	push	{r1, r2, r3}
 800311a:	b500      	push	{lr}
 800311c:	b09c      	sub	sp, #112	; 0x70
 800311e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003122:	ab1d      	add	r3, sp, #116	; 0x74
 8003124:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003128:	9002      	str	r0, [sp, #8]
 800312a:	9006      	str	r0, [sp, #24]
 800312c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003130:	480a      	ldr	r0, [pc, #40]	; (800315c <siprintf+0x44>)
 8003132:	9104      	str	r1, [sp, #16]
 8003134:	9107      	str	r1, [sp, #28]
 8003136:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800313a:	f853 2b04 	ldr.w	r2, [r3], #4
 800313e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003142:	6800      	ldr	r0, [r0, #0]
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	a902      	add	r1, sp, #8
 8003148:	f000 f866 	bl	8003218 <_svfiprintf_r>
 800314c:	9b02      	ldr	r3, [sp, #8]
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	b01c      	add	sp, #112	; 0x70
 8003154:	f85d eb04 	ldr.w	lr, [sp], #4
 8003158:	b003      	add	sp, #12
 800315a:	4770      	bx	lr
 800315c:	20000004 	.word	0x20000004

08003160 <__ssputs_r>:
 8003160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003164:	688e      	ldr	r6, [r1, #8]
 8003166:	429e      	cmp	r6, r3
 8003168:	4682      	mov	sl, r0
 800316a:	460c      	mov	r4, r1
 800316c:	4691      	mov	r9, r2
 800316e:	4698      	mov	r8, r3
 8003170:	d835      	bhi.n	80031de <__ssputs_r+0x7e>
 8003172:	898a      	ldrh	r2, [r1, #12]
 8003174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003178:	d031      	beq.n	80031de <__ssputs_r+0x7e>
 800317a:	6825      	ldr	r5, [r4, #0]
 800317c:	6909      	ldr	r1, [r1, #16]
 800317e:	1a6f      	subs	r7, r5, r1
 8003180:	6965      	ldr	r5, [r4, #20]
 8003182:	2302      	movs	r3, #2
 8003184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003188:	fb95 f5f3 	sdiv	r5, r5, r3
 800318c:	f108 0301 	add.w	r3, r8, #1
 8003190:	443b      	add	r3, r7
 8003192:	429d      	cmp	r5, r3
 8003194:	bf38      	it	cc
 8003196:	461d      	movcc	r5, r3
 8003198:	0553      	lsls	r3, r2, #21
 800319a:	d531      	bpl.n	8003200 <__ssputs_r+0xa0>
 800319c:	4629      	mov	r1, r5
 800319e:	f000 fb39 	bl	8003814 <_malloc_r>
 80031a2:	4606      	mov	r6, r0
 80031a4:	b950      	cbnz	r0, 80031bc <__ssputs_r+0x5c>
 80031a6:	230c      	movs	r3, #12
 80031a8:	f8ca 3000 	str.w	r3, [sl]
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031bc:	463a      	mov	r2, r7
 80031be:	6921      	ldr	r1, [r4, #16]
 80031c0:	f000 fab4 	bl	800372c <memcpy>
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ce:	81a3      	strh	r3, [r4, #12]
 80031d0:	6126      	str	r6, [r4, #16]
 80031d2:	6165      	str	r5, [r4, #20]
 80031d4:	443e      	add	r6, r7
 80031d6:	1bed      	subs	r5, r5, r7
 80031d8:	6026      	str	r6, [r4, #0]
 80031da:	60a5      	str	r5, [r4, #8]
 80031dc:	4646      	mov	r6, r8
 80031de:	4546      	cmp	r6, r8
 80031e0:	bf28      	it	cs
 80031e2:	4646      	movcs	r6, r8
 80031e4:	4632      	mov	r2, r6
 80031e6:	4649      	mov	r1, r9
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	f000 faaa 	bl	8003742 <memmove>
 80031ee:	68a3      	ldr	r3, [r4, #8]
 80031f0:	1b9b      	subs	r3, r3, r6
 80031f2:	60a3      	str	r3, [r4, #8]
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	441e      	add	r6, r3
 80031f8:	6026      	str	r6, [r4, #0]
 80031fa:	2000      	movs	r0, #0
 80031fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003200:	462a      	mov	r2, r5
 8003202:	f000 fb65 	bl	80038d0 <_realloc_r>
 8003206:	4606      	mov	r6, r0
 8003208:	2800      	cmp	r0, #0
 800320a:	d1e1      	bne.n	80031d0 <__ssputs_r+0x70>
 800320c:	6921      	ldr	r1, [r4, #16]
 800320e:	4650      	mov	r0, sl
 8003210:	f000 fab2 	bl	8003778 <_free_r>
 8003214:	e7c7      	b.n	80031a6 <__ssputs_r+0x46>
	...

08003218 <_svfiprintf_r>:
 8003218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321c:	b09d      	sub	sp, #116	; 0x74
 800321e:	4680      	mov	r8, r0
 8003220:	9303      	str	r3, [sp, #12]
 8003222:	898b      	ldrh	r3, [r1, #12]
 8003224:	061c      	lsls	r4, r3, #24
 8003226:	460d      	mov	r5, r1
 8003228:	4616      	mov	r6, r2
 800322a:	d50f      	bpl.n	800324c <_svfiprintf_r+0x34>
 800322c:	690b      	ldr	r3, [r1, #16]
 800322e:	b96b      	cbnz	r3, 800324c <_svfiprintf_r+0x34>
 8003230:	2140      	movs	r1, #64	; 0x40
 8003232:	f000 faef 	bl	8003814 <_malloc_r>
 8003236:	6028      	str	r0, [r5, #0]
 8003238:	6128      	str	r0, [r5, #16]
 800323a:	b928      	cbnz	r0, 8003248 <_svfiprintf_r+0x30>
 800323c:	230c      	movs	r3, #12
 800323e:	f8c8 3000 	str.w	r3, [r8]
 8003242:	f04f 30ff 	mov.w	r0, #4294967295
 8003246:	e0c5      	b.n	80033d4 <_svfiprintf_r+0x1bc>
 8003248:	2340      	movs	r3, #64	; 0x40
 800324a:	616b      	str	r3, [r5, #20]
 800324c:	2300      	movs	r3, #0
 800324e:	9309      	str	r3, [sp, #36]	; 0x24
 8003250:	2320      	movs	r3, #32
 8003252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003256:	2330      	movs	r3, #48	; 0x30
 8003258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800325c:	f04f 0b01 	mov.w	fp, #1
 8003260:	4637      	mov	r7, r6
 8003262:	463c      	mov	r4, r7
 8003264:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d13c      	bne.n	80032e6 <_svfiprintf_r+0xce>
 800326c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003270:	d00b      	beq.n	800328a <_svfiprintf_r+0x72>
 8003272:	4653      	mov	r3, sl
 8003274:	4632      	mov	r2, r6
 8003276:	4629      	mov	r1, r5
 8003278:	4640      	mov	r0, r8
 800327a:	f7ff ff71 	bl	8003160 <__ssputs_r>
 800327e:	3001      	adds	r0, #1
 8003280:	f000 80a3 	beq.w	80033ca <_svfiprintf_r+0x1b2>
 8003284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003286:	4453      	add	r3, sl
 8003288:	9309      	str	r3, [sp, #36]	; 0x24
 800328a:	783b      	ldrb	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 809c 	beq.w	80033ca <_svfiprintf_r+0x1b2>
 8003292:	2300      	movs	r3, #0
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	9304      	str	r3, [sp, #16]
 800329a:	9307      	str	r3, [sp, #28]
 800329c:	9205      	str	r2, [sp, #20]
 800329e:	9306      	str	r3, [sp, #24]
 80032a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032a4:	931a      	str	r3, [sp, #104]	; 0x68
 80032a6:	2205      	movs	r2, #5
 80032a8:	7821      	ldrb	r1, [r4, #0]
 80032aa:	4850      	ldr	r0, [pc, #320]	; (80033ec <_svfiprintf_r+0x1d4>)
 80032ac:	f7fc ff90 	bl	80001d0 <memchr>
 80032b0:	1c67      	adds	r7, r4, #1
 80032b2:	9b04      	ldr	r3, [sp, #16]
 80032b4:	b9d8      	cbnz	r0, 80032ee <_svfiprintf_r+0xd6>
 80032b6:	06d9      	lsls	r1, r3, #27
 80032b8:	bf44      	itt	mi
 80032ba:	2220      	movmi	r2, #32
 80032bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032c0:	071a      	lsls	r2, r3, #28
 80032c2:	bf44      	itt	mi
 80032c4:	222b      	movmi	r2, #43	; 0x2b
 80032c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ca:	7822      	ldrb	r2, [r4, #0]
 80032cc:	2a2a      	cmp	r2, #42	; 0x2a
 80032ce:	d016      	beq.n	80032fe <_svfiprintf_r+0xe6>
 80032d0:	9a07      	ldr	r2, [sp, #28]
 80032d2:	2100      	movs	r1, #0
 80032d4:	200a      	movs	r0, #10
 80032d6:	4627      	mov	r7, r4
 80032d8:	3401      	adds	r4, #1
 80032da:	783b      	ldrb	r3, [r7, #0]
 80032dc:	3b30      	subs	r3, #48	; 0x30
 80032de:	2b09      	cmp	r3, #9
 80032e0:	d951      	bls.n	8003386 <_svfiprintf_r+0x16e>
 80032e2:	b1c9      	cbz	r1, 8003318 <_svfiprintf_r+0x100>
 80032e4:	e011      	b.n	800330a <_svfiprintf_r+0xf2>
 80032e6:	2b25      	cmp	r3, #37	; 0x25
 80032e8:	d0c0      	beq.n	800326c <_svfiprintf_r+0x54>
 80032ea:	4627      	mov	r7, r4
 80032ec:	e7b9      	b.n	8003262 <_svfiprintf_r+0x4a>
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <_svfiprintf_r+0x1d4>)
 80032f0:	1a80      	subs	r0, r0, r2
 80032f2:	fa0b f000 	lsl.w	r0, fp, r0
 80032f6:	4318      	orrs	r0, r3
 80032f8:	9004      	str	r0, [sp, #16]
 80032fa:	463c      	mov	r4, r7
 80032fc:	e7d3      	b.n	80032a6 <_svfiprintf_r+0x8e>
 80032fe:	9a03      	ldr	r2, [sp, #12]
 8003300:	1d11      	adds	r1, r2, #4
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	9103      	str	r1, [sp, #12]
 8003306:	2a00      	cmp	r2, #0
 8003308:	db01      	blt.n	800330e <_svfiprintf_r+0xf6>
 800330a:	9207      	str	r2, [sp, #28]
 800330c:	e004      	b.n	8003318 <_svfiprintf_r+0x100>
 800330e:	4252      	negs	r2, r2
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	9207      	str	r2, [sp, #28]
 8003316:	9304      	str	r3, [sp, #16]
 8003318:	783b      	ldrb	r3, [r7, #0]
 800331a:	2b2e      	cmp	r3, #46	; 0x2e
 800331c:	d10e      	bne.n	800333c <_svfiprintf_r+0x124>
 800331e:	787b      	ldrb	r3, [r7, #1]
 8003320:	2b2a      	cmp	r3, #42	; 0x2a
 8003322:	f107 0101 	add.w	r1, r7, #1
 8003326:	d132      	bne.n	800338e <_svfiprintf_r+0x176>
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	1d1a      	adds	r2, r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	9203      	str	r2, [sp, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	bfb8      	it	lt
 8003334:	f04f 33ff 	movlt.w	r3, #4294967295
 8003338:	3702      	adds	r7, #2
 800333a:	9305      	str	r3, [sp, #20]
 800333c:	4c2c      	ldr	r4, [pc, #176]	; (80033f0 <_svfiprintf_r+0x1d8>)
 800333e:	7839      	ldrb	r1, [r7, #0]
 8003340:	2203      	movs	r2, #3
 8003342:	4620      	mov	r0, r4
 8003344:	f7fc ff44 	bl	80001d0 <memchr>
 8003348:	b138      	cbz	r0, 800335a <_svfiprintf_r+0x142>
 800334a:	2340      	movs	r3, #64	; 0x40
 800334c:	1b00      	subs	r0, r0, r4
 800334e:	fa03 f000 	lsl.w	r0, r3, r0
 8003352:	9b04      	ldr	r3, [sp, #16]
 8003354:	4303      	orrs	r3, r0
 8003356:	9304      	str	r3, [sp, #16]
 8003358:	3701      	adds	r7, #1
 800335a:	7839      	ldrb	r1, [r7, #0]
 800335c:	4825      	ldr	r0, [pc, #148]	; (80033f4 <_svfiprintf_r+0x1dc>)
 800335e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003362:	2206      	movs	r2, #6
 8003364:	1c7e      	adds	r6, r7, #1
 8003366:	f7fc ff33 	bl	80001d0 <memchr>
 800336a:	2800      	cmp	r0, #0
 800336c:	d035      	beq.n	80033da <_svfiprintf_r+0x1c2>
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <_svfiprintf_r+0x1e0>)
 8003370:	b9fb      	cbnz	r3, 80033b2 <_svfiprintf_r+0x19a>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	3307      	adds	r3, #7
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	3308      	adds	r3, #8
 800337c:	9303      	str	r3, [sp, #12]
 800337e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003380:	444b      	add	r3, r9
 8003382:	9309      	str	r3, [sp, #36]	; 0x24
 8003384:	e76c      	b.n	8003260 <_svfiprintf_r+0x48>
 8003386:	fb00 3202 	mla	r2, r0, r2, r3
 800338a:	2101      	movs	r1, #1
 800338c:	e7a3      	b.n	80032d6 <_svfiprintf_r+0xbe>
 800338e:	2300      	movs	r3, #0
 8003390:	9305      	str	r3, [sp, #20]
 8003392:	4618      	mov	r0, r3
 8003394:	240a      	movs	r4, #10
 8003396:	460f      	mov	r7, r1
 8003398:	3101      	adds	r1, #1
 800339a:	783a      	ldrb	r2, [r7, #0]
 800339c:	3a30      	subs	r2, #48	; 0x30
 800339e:	2a09      	cmp	r2, #9
 80033a0:	d903      	bls.n	80033aa <_svfiprintf_r+0x192>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ca      	beq.n	800333c <_svfiprintf_r+0x124>
 80033a6:	9005      	str	r0, [sp, #20]
 80033a8:	e7c8      	b.n	800333c <_svfiprintf_r+0x124>
 80033aa:	fb04 2000 	mla	r0, r4, r0, r2
 80033ae:	2301      	movs	r3, #1
 80033b0:	e7f1      	b.n	8003396 <_svfiprintf_r+0x17e>
 80033b2:	ab03      	add	r3, sp, #12
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	462a      	mov	r2, r5
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <_svfiprintf_r+0x1e4>)
 80033ba:	a904      	add	r1, sp, #16
 80033bc:	4640      	mov	r0, r8
 80033be:	f3af 8000 	nop.w
 80033c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033c6:	4681      	mov	r9, r0
 80033c8:	d1d9      	bne.n	800337e <_svfiprintf_r+0x166>
 80033ca:	89ab      	ldrh	r3, [r5, #12]
 80033cc:	065b      	lsls	r3, r3, #25
 80033ce:	f53f af38 	bmi.w	8003242 <_svfiprintf_r+0x2a>
 80033d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033d4:	b01d      	add	sp, #116	; 0x74
 80033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033da:	ab03      	add	r3, sp, #12
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	462a      	mov	r2, r5
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <_svfiprintf_r+0x1e4>)
 80033e2:	a904      	add	r1, sp, #16
 80033e4:	4640      	mov	r0, r8
 80033e6:	f000 f881 	bl	80034ec <_printf_i>
 80033ea:	e7ea      	b.n	80033c2 <_svfiprintf_r+0x1aa>
 80033ec:	08003a19 	.word	0x08003a19
 80033f0:	08003a1f 	.word	0x08003a1f
 80033f4:	08003a23 	.word	0x08003a23
 80033f8:	00000000 	.word	0x00000000
 80033fc:	08003161 	.word	0x08003161

08003400 <_printf_common>:
 8003400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003404:	4691      	mov	r9, r2
 8003406:	461f      	mov	r7, r3
 8003408:	688a      	ldr	r2, [r1, #8]
 800340a:	690b      	ldr	r3, [r1, #16]
 800340c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003410:	4293      	cmp	r3, r2
 8003412:	bfb8      	it	lt
 8003414:	4613      	movlt	r3, r2
 8003416:	f8c9 3000 	str.w	r3, [r9]
 800341a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800341e:	4606      	mov	r6, r0
 8003420:	460c      	mov	r4, r1
 8003422:	b112      	cbz	r2, 800342a <_printf_common+0x2a>
 8003424:	3301      	adds	r3, #1
 8003426:	f8c9 3000 	str.w	r3, [r9]
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	0699      	lsls	r1, r3, #26
 800342e:	bf42      	ittt	mi
 8003430:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003434:	3302      	addmi	r3, #2
 8003436:	f8c9 3000 	strmi.w	r3, [r9]
 800343a:	6825      	ldr	r5, [r4, #0]
 800343c:	f015 0506 	ands.w	r5, r5, #6
 8003440:	d107      	bne.n	8003452 <_printf_common+0x52>
 8003442:	f104 0a19 	add.w	sl, r4, #25
 8003446:	68e3      	ldr	r3, [r4, #12]
 8003448:	f8d9 2000 	ldr.w	r2, [r9]
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	429d      	cmp	r5, r3
 8003450:	db29      	blt.n	80034a6 <_printf_common+0xa6>
 8003452:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	3300      	adds	r3, #0
 800345a:	bf18      	it	ne
 800345c:	2301      	movne	r3, #1
 800345e:	0692      	lsls	r2, r2, #26
 8003460:	d42e      	bmi.n	80034c0 <_printf_common+0xc0>
 8003462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003466:	4639      	mov	r1, r7
 8003468:	4630      	mov	r0, r6
 800346a:	47c0      	blx	r8
 800346c:	3001      	adds	r0, #1
 800346e:	d021      	beq.n	80034b4 <_printf_common+0xb4>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	68e5      	ldr	r5, [r4, #12]
 8003474:	f8d9 2000 	ldr.w	r2, [r9]
 8003478:	f003 0306 	and.w	r3, r3, #6
 800347c:	2b04      	cmp	r3, #4
 800347e:	bf08      	it	eq
 8003480:	1aad      	subeq	r5, r5, r2
 8003482:	68a3      	ldr	r3, [r4, #8]
 8003484:	6922      	ldr	r2, [r4, #16]
 8003486:	bf0c      	ite	eq
 8003488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800348c:	2500      	movne	r5, #0
 800348e:	4293      	cmp	r3, r2
 8003490:	bfc4      	itt	gt
 8003492:	1a9b      	subgt	r3, r3, r2
 8003494:	18ed      	addgt	r5, r5, r3
 8003496:	f04f 0900 	mov.w	r9, #0
 800349a:	341a      	adds	r4, #26
 800349c:	454d      	cmp	r5, r9
 800349e:	d11b      	bne.n	80034d8 <_printf_common+0xd8>
 80034a0:	2000      	movs	r0, #0
 80034a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a6:	2301      	movs	r3, #1
 80034a8:	4652      	mov	r2, sl
 80034aa:	4639      	mov	r1, r7
 80034ac:	4630      	mov	r0, r6
 80034ae:	47c0      	blx	r8
 80034b0:	3001      	adds	r0, #1
 80034b2:	d103      	bne.n	80034bc <_printf_common+0xbc>
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034bc:	3501      	adds	r5, #1
 80034be:	e7c2      	b.n	8003446 <_printf_common+0x46>
 80034c0:	18e1      	adds	r1, r4, r3
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	2030      	movs	r0, #48	; 0x30
 80034c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ca:	4422      	add	r2, r4
 80034cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034d4:	3302      	adds	r3, #2
 80034d6:	e7c4      	b.n	8003462 <_printf_common+0x62>
 80034d8:	2301      	movs	r3, #1
 80034da:	4622      	mov	r2, r4
 80034dc:	4639      	mov	r1, r7
 80034de:	4630      	mov	r0, r6
 80034e0:	47c0      	blx	r8
 80034e2:	3001      	adds	r0, #1
 80034e4:	d0e6      	beq.n	80034b4 <_printf_common+0xb4>
 80034e6:	f109 0901 	add.w	r9, r9, #1
 80034ea:	e7d7      	b.n	800349c <_printf_common+0x9c>

080034ec <_printf_i>:
 80034ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034f0:	4617      	mov	r7, r2
 80034f2:	7e0a      	ldrb	r2, [r1, #24]
 80034f4:	b085      	sub	sp, #20
 80034f6:	2a6e      	cmp	r2, #110	; 0x6e
 80034f8:	4698      	mov	r8, r3
 80034fa:	4606      	mov	r6, r0
 80034fc:	460c      	mov	r4, r1
 80034fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003500:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003504:	f000 80bc 	beq.w	8003680 <_printf_i+0x194>
 8003508:	d81a      	bhi.n	8003540 <_printf_i+0x54>
 800350a:	2a63      	cmp	r2, #99	; 0x63
 800350c:	d02e      	beq.n	800356c <_printf_i+0x80>
 800350e:	d80a      	bhi.n	8003526 <_printf_i+0x3a>
 8003510:	2a00      	cmp	r2, #0
 8003512:	f000 80c8 	beq.w	80036a6 <_printf_i+0x1ba>
 8003516:	2a58      	cmp	r2, #88	; 0x58
 8003518:	f000 808a 	beq.w	8003630 <_printf_i+0x144>
 800351c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003520:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003524:	e02a      	b.n	800357c <_printf_i+0x90>
 8003526:	2a64      	cmp	r2, #100	; 0x64
 8003528:	d001      	beq.n	800352e <_printf_i+0x42>
 800352a:	2a69      	cmp	r2, #105	; 0x69
 800352c:	d1f6      	bne.n	800351c <_printf_i+0x30>
 800352e:	6821      	ldr	r1, [r4, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003536:	d023      	beq.n	8003580 <_printf_i+0x94>
 8003538:	1d11      	adds	r1, r2, #4
 800353a:	6019      	str	r1, [r3, #0]
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	e027      	b.n	8003590 <_printf_i+0xa4>
 8003540:	2a73      	cmp	r2, #115	; 0x73
 8003542:	f000 80b4 	beq.w	80036ae <_printf_i+0x1c2>
 8003546:	d808      	bhi.n	800355a <_printf_i+0x6e>
 8003548:	2a6f      	cmp	r2, #111	; 0x6f
 800354a:	d02a      	beq.n	80035a2 <_printf_i+0xb6>
 800354c:	2a70      	cmp	r2, #112	; 0x70
 800354e:	d1e5      	bne.n	800351c <_printf_i+0x30>
 8003550:	680a      	ldr	r2, [r1, #0]
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	600a      	str	r2, [r1, #0]
 8003558:	e003      	b.n	8003562 <_printf_i+0x76>
 800355a:	2a75      	cmp	r2, #117	; 0x75
 800355c:	d021      	beq.n	80035a2 <_printf_i+0xb6>
 800355e:	2a78      	cmp	r2, #120	; 0x78
 8003560:	d1dc      	bne.n	800351c <_printf_i+0x30>
 8003562:	2278      	movs	r2, #120	; 0x78
 8003564:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003568:	496e      	ldr	r1, [pc, #440]	; (8003724 <_printf_i+0x238>)
 800356a:	e064      	b.n	8003636 <_printf_i+0x14a>
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003572:	1d11      	adds	r1, r2, #4
 8003574:	6019      	str	r1, [r3, #0]
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800357c:	2301      	movs	r3, #1
 800357e:	e0a3      	b.n	80036c8 <_printf_i+0x1dc>
 8003580:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003584:	f102 0104 	add.w	r1, r2, #4
 8003588:	6019      	str	r1, [r3, #0]
 800358a:	d0d7      	beq.n	800353c <_printf_i+0x50>
 800358c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da03      	bge.n	800359c <_printf_i+0xb0>
 8003594:	222d      	movs	r2, #45	; 0x2d
 8003596:	425b      	negs	r3, r3
 8003598:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800359c:	4962      	ldr	r1, [pc, #392]	; (8003728 <_printf_i+0x23c>)
 800359e:	220a      	movs	r2, #10
 80035a0:	e017      	b.n	80035d2 <_printf_i+0xe6>
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80035aa:	d003      	beq.n	80035b4 <_printf_i+0xc8>
 80035ac:	1d08      	adds	r0, r1, #4
 80035ae:	6018      	str	r0, [r3, #0]
 80035b0:	680b      	ldr	r3, [r1, #0]
 80035b2:	e006      	b.n	80035c2 <_printf_i+0xd6>
 80035b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035b8:	f101 0004 	add.w	r0, r1, #4
 80035bc:	6018      	str	r0, [r3, #0]
 80035be:	d0f7      	beq.n	80035b0 <_printf_i+0xc4>
 80035c0:	880b      	ldrh	r3, [r1, #0]
 80035c2:	4959      	ldr	r1, [pc, #356]	; (8003728 <_printf_i+0x23c>)
 80035c4:	2a6f      	cmp	r2, #111	; 0x6f
 80035c6:	bf14      	ite	ne
 80035c8:	220a      	movne	r2, #10
 80035ca:	2208      	moveq	r2, #8
 80035cc:	2000      	movs	r0, #0
 80035ce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80035d2:	6865      	ldr	r5, [r4, #4]
 80035d4:	60a5      	str	r5, [r4, #8]
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	f2c0 809c 	blt.w	8003714 <_printf_i+0x228>
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	f020 0004 	bic.w	r0, r0, #4
 80035e2:	6020      	str	r0, [r4, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d13f      	bne.n	8003668 <_printf_i+0x17c>
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	f040 8095 	bne.w	8003718 <_printf_i+0x22c>
 80035ee:	4675      	mov	r5, lr
 80035f0:	2a08      	cmp	r2, #8
 80035f2:	d10b      	bne.n	800360c <_printf_i+0x120>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07da      	lsls	r2, r3, #31
 80035f8:	d508      	bpl.n	800360c <_printf_i+0x120>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	6862      	ldr	r2, [r4, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bfde      	ittt	le
 8003602:	2330      	movle	r3, #48	; 0x30
 8003604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003608:	f105 35ff 	addle.w	r5, r5, #4294967295
 800360c:	ebae 0305 	sub.w	r3, lr, r5
 8003610:	6123      	str	r3, [r4, #16]
 8003612:	f8cd 8000 	str.w	r8, [sp]
 8003616:	463b      	mov	r3, r7
 8003618:	aa03      	add	r2, sp, #12
 800361a:	4621      	mov	r1, r4
 800361c:	4630      	mov	r0, r6
 800361e:	f7ff feef 	bl	8003400 <_printf_common>
 8003622:	3001      	adds	r0, #1
 8003624:	d155      	bne.n	80036d2 <_printf_i+0x1e6>
 8003626:	f04f 30ff 	mov.w	r0, #4294967295
 800362a:	b005      	add	sp, #20
 800362c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003630:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003634:	493c      	ldr	r1, [pc, #240]	; (8003728 <_printf_i+0x23c>)
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800363e:	f100 0504 	add.w	r5, r0, #4
 8003642:	601d      	str	r5, [r3, #0]
 8003644:	d001      	beq.n	800364a <_printf_i+0x15e>
 8003646:	6803      	ldr	r3, [r0, #0]
 8003648:	e002      	b.n	8003650 <_printf_i+0x164>
 800364a:	0655      	lsls	r5, r2, #25
 800364c:	d5fb      	bpl.n	8003646 <_printf_i+0x15a>
 800364e:	8803      	ldrh	r3, [r0, #0]
 8003650:	07d0      	lsls	r0, r2, #31
 8003652:	bf44      	itt	mi
 8003654:	f042 0220 	orrmi.w	r2, r2, #32
 8003658:	6022      	strmi	r2, [r4, #0]
 800365a:	b91b      	cbnz	r3, 8003664 <_printf_i+0x178>
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	f022 0220 	bic.w	r2, r2, #32
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	e7b1      	b.n	80035cc <_printf_i+0xe0>
 8003668:	4675      	mov	r5, lr
 800366a:	fbb3 f0f2 	udiv	r0, r3, r2
 800366e:	fb02 3310 	mls	r3, r2, r0, r3
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003678:	4603      	mov	r3, r0
 800367a:	2800      	cmp	r0, #0
 800367c:	d1f5      	bne.n	800366a <_printf_i+0x17e>
 800367e:	e7b7      	b.n	80035f0 <_printf_i+0x104>
 8003680:	6808      	ldr	r0, [r1, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	6949      	ldr	r1, [r1, #20]
 8003686:	f010 0f80 	tst.w	r0, #128	; 0x80
 800368a:	d004      	beq.n	8003696 <_printf_i+0x1aa>
 800368c:	1d10      	adds	r0, r2, #4
 800368e:	6018      	str	r0, [r3, #0]
 8003690:	6813      	ldr	r3, [r2, #0]
 8003692:	6019      	str	r1, [r3, #0]
 8003694:	e007      	b.n	80036a6 <_printf_i+0x1ba>
 8003696:	f010 0f40 	tst.w	r0, #64	; 0x40
 800369a:	f102 0004 	add.w	r0, r2, #4
 800369e:	6018      	str	r0, [r3, #0]
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	d0f6      	beq.n	8003692 <_printf_i+0x1a6>
 80036a4:	8019      	strh	r1, [r3, #0]
 80036a6:	2300      	movs	r3, #0
 80036a8:	6123      	str	r3, [r4, #16]
 80036aa:	4675      	mov	r5, lr
 80036ac:	e7b1      	b.n	8003612 <_printf_i+0x126>
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	1d11      	adds	r1, r2, #4
 80036b2:	6019      	str	r1, [r3, #0]
 80036b4:	6815      	ldr	r5, [r2, #0]
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4628      	mov	r0, r5
 80036bc:	f7fc fd88 	bl	80001d0 <memchr>
 80036c0:	b108      	cbz	r0, 80036c6 <_printf_i+0x1da>
 80036c2:	1b40      	subs	r0, r0, r5
 80036c4:	6060      	str	r0, [r4, #4]
 80036c6:	6863      	ldr	r3, [r4, #4]
 80036c8:	6123      	str	r3, [r4, #16]
 80036ca:	2300      	movs	r3, #0
 80036cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d0:	e79f      	b.n	8003612 <_printf_i+0x126>
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	462a      	mov	r2, r5
 80036d6:	4639      	mov	r1, r7
 80036d8:	4630      	mov	r0, r6
 80036da:	47c0      	blx	r8
 80036dc:	3001      	adds	r0, #1
 80036de:	d0a2      	beq.n	8003626 <_printf_i+0x13a>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	079b      	lsls	r3, r3, #30
 80036e4:	d507      	bpl.n	80036f6 <_printf_i+0x20a>
 80036e6:	2500      	movs	r5, #0
 80036e8:	f104 0919 	add.w	r9, r4, #25
 80036ec:	68e3      	ldr	r3, [r4, #12]
 80036ee:	9a03      	ldr	r2, [sp, #12]
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	429d      	cmp	r5, r3
 80036f4:	db05      	blt.n	8003702 <_printf_i+0x216>
 80036f6:	68e0      	ldr	r0, [r4, #12]
 80036f8:	9b03      	ldr	r3, [sp, #12]
 80036fa:	4298      	cmp	r0, r3
 80036fc:	bfb8      	it	lt
 80036fe:	4618      	movlt	r0, r3
 8003700:	e793      	b.n	800362a <_printf_i+0x13e>
 8003702:	2301      	movs	r3, #1
 8003704:	464a      	mov	r2, r9
 8003706:	4639      	mov	r1, r7
 8003708:	4630      	mov	r0, r6
 800370a:	47c0      	blx	r8
 800370c:	3001      	adds	r0, #1
 800370e:	d08a      	beq.n	8003626 <_printf_i+0x13a>
 8003710:	3501      	adds	r5, #1
 8003712:	e7eb      	b.n	80036ec <_printf_i+0x200>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1a7      	bne.n	8003668 <_printf_i+0x17c>
 8003718:	780b      	ldrb	r3, [r1, #0]
 800371a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800371e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003722:	e765      	b.n	80035f0 <_printf_i+0x104>
 8003724:	08003a3b 	.word	0x08003a3b
 8003728:	08003a2a 	.word	0x08003a2a

0800372c <memcpy>:
 800372c:	b510      	push	{r4, lr}
 800372e:	1e43      	subs	r3, r0, #1
 8003730:	440a      	add	r2, r1
 8003732:	4291      	cmp	r1, r2
 8003734:	d100      	bne.n	8003738 <memcpy+0xc>
 8003736:	bd10      	pop	{r4, pc}
 8003738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800373c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003740:	e7f7      	b.n	8003732 <memcpy+0x6>

08003742 <memmove>:
 8003742:	4288      	cmp	r0, r1
 8003744:	b510      	push	{r4, lr}
 8003746:	eb01 0302 	add.w	r3, r1, r2
 800374a:	d803      	bhi.n	8003754 <memmove+0x12>
 800374c:	1e42      	subs	r2, r0, #1
 800374e:	4299      	cmp	r1, r3
 8003750:	d10c      	bne.n	800376c <memmove+0x2a>
 8003752:	bd10      	pop	{r4, pc}
 8003754:	4298      	cmp	r0, r3
 8003756:	d2f9      	bcs.n	800374c <memmove+0xa>
 8003758:	1881      	adds	r1, r0, r2
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	42d3      	cmn	r3, r2
 800375e:	d100      	bne.n	8003762 <memmove+0x20>
 8003760:	bd10      	pop	{r4, pc}
 8003762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003766:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800376a:	e7f7      	b.n	800375c <memmove+0x1a>
 800376c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003770:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003774:	e7eb      	b.n	800374e <memmove+0xc>
	...

08003778 <_free_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4605      	mov	r5, r0
 800377c:	2900      	cmp	r1, #0
 800377e:	d045      	beq.n	800380c <_free_r+0x94>
 8003780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003784:	1f0c      	subs	r4, r1, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	bfb8      	it	lt
 800378a:	18e4      	addlt	r4, r4, r3
 800378c:	f000 f8d6 	bl	800393c <__malloc_lock>
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <_free_r+0x98>)
 8003792:	6813      	ldr	r3, [r2, #0]
 8003794:	4610      	mov	r0, r2
 8003796:	b933      	cbnz	r3, 80037a6 <_free_r+0x2e>
 8003798:	6063      	str	r3, [r4, #4]
 800379a:	6014      	str	r4, [r2, #0]
 800379c:	4628      	mov	r0, r5
 800379e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037a2:	f000 b8cc 	b.w	800393e <__malloc_unlock>
 80037a6:	42a3      	cmp	r3, r4
 80037a8:	d90c      	bls.n	80037c4 <_free_r+0x4c>
 80037aa:	6821      	ldr	r1, [r4, #0]
 80037ac:	1862      	adds	r2, r4, r1
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bf04      	itt	eq
 80037b2:	681a      	ldreq	r2, [r3, #0]
 80037b4:	685b      	ldreq	r3, [r3, #4]
 80037b6:	6063      	str	r3, [r4, #4]
 80037b8:	bf04      	itt	eq
 80037ba:	1852      	addeq	r2, r2, r1
 80037bc:	6022      	streq	r2, [r4, #0]
 80037be:	6004      	str	r4, [r0, #0]
 80037c0:	e7ec      	b.n	800379c <_free_r+0x24>
 80037c2:	4613      	mov	r3, r2
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	b10a      	cbz	r2, 80037cc <_free_r+0x54>
 80037c8:	42a2      	cmp	r2, r4
 80037ca:	d9fa      	bls.n	80037c2 <_free_r+0x4a>
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	1858      	adds	r0, r3, r1
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d10b      	bne.n	80037ec <_free_r+0x74>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	4401      	add	r1, r0
 80037d8:	1858      	adds	r0, r3, r1
 80037da:	4282      	cmp	r2, r0
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	d1dd      	bne.n	800379c <_free_r+0x24>
 80037e0:	6810      	ldr	r0, [r2, #0]
 80037e2:	6852      	ldr	r2, [r2, #4]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	4401      	add	r1, r0
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	e7d7      	b.n	800379c <_free_r+0x24>
 80037ec:	d902      	bls.n	80037f4 <_free_r+0x7c>
 80037ee:	230c      	movs	r3, #12
 80037f0:	602b      	str	r3, [r5, #0]
 80037f2:	e7d3      	b.n	800379c <_free_r+0x24>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	1821      	adds	r1, r4, r0
 80037f8:	428a      	cmp	r2, r1
 80037fa:	bf04      	itt	eq
 80037fc:	6811      	ldreq	r1, [r2, #0]
 80037fe:	6852      	ldreq	r2, [r2, #4]
 8003800:	6062      	str	r2, [r4, #4]
 8003802:	bf04      	itt	eq
 8003804:	1809      	addeq	r1, r1, r0
 8003806:	6021      	streq	r1, [r4, #0]
 8003808:	605c      	str	r4, [r3, #4]
 800380a:	e7c7      	b.n	800379c <_free_r+0x24>
 800380c:	bd38      	pop	{r3, r4, r5, pc}
 800380e:	bf00      	nop
 8003810:	2000008c 	.word	0x2000008c

08003814 <_malloc_r>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	1ccd      	adds	r5, r1, #3
 8003818:	f025 0503 	bic.w	r5, r5, #3
 800381c:	3508      	adds	r5, #8
 800381e:	2d0c      	cmp	r5, #12
 8003820:	bf38      	it	cc
 8003822:	250c      	movcc	r5, #12
 8003824:	2d00      	cmp	r5, #0
 8003826:	4606      	mov	r6, r0
 8003828:	db01      	blt.n	800382e <_malloc_r+0x1a>
 800382a:	42a9      	cmp	r1, r5
 800382c:	d903      	bls.n	8003836 <_malloc_r+0x22>
 800382e:	230c      	movs	r3, #12
 8003830:	6033      	str	r3, [r6, #0]
 8003832:	2000      	movs	r0, #0
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	f000 f881 	bl	800393c <__malloc_lock>
 800383a:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <_malloc_r+0xb4>)
 800383c:	6814      	ldr	r4, [r2, #0]
 800383e:	4621      	mov	r1, r4
 8003840:	b991      	cbnz	r1, 8003868 <_malloc_r+0x54>
 8003842:	4c22      	ldr	r4, [pc, #136]	; (80038cc <_malloc_r+0xb8>)
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	b91b      	cbnz	r3, 8003850 <_malloc_r+0x3c>
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f867 	bl	800391c <_sbrk_r>
 800384e:	6020      	str	r0, [r4, #0]
 8003850:	4629      	mov	r1, r5
 8003852:	4630      	mov	r0, r6
 8003854:	f000 f862 	bl	800391c <_sbrk_r>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d126      	bne.n	80038aa <_malloc_r+0x96>
 800385c:	230c      	movs	r3, #12
 800385e:	6033      	str	r3, [r6, #0]
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f86c 	bl	800393e <__malloc_unlock>
 8003866:	e7e4      	b.n	8003832 <_malloc_r+0x1e>
 8003868:	680b      	ldr	r3, [r1, #0]
 800386a:	1b5b      	subs	r3, r3, r5
 800386c:	d41a      	bmi.n	80038a4 <_malloc_r+0x90>
 800386e:	2b0b      	cmp	r3, #11
 8003870:	d90f      	bls.n	8003892 <_malloc_r+0x7e>
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	50cd      	str	r5, [r1, r3]
 8003876:	18cc      	adds	r4, r1, r3
 8003878:	4630      	mov	r0, r6
 800387a:	f000 f860 	bl	800393e <__malloc_unlock>
 800387e:	f104 000b 	add.w	r0, r4, #11
 8003882:	1d23      	adds	r3, r4, #4
 8003884:	f020 0007 	bic.w	r0, r0, #7
 8003888:	1ac3      	subs	r3, r0, r3
 800388a:	d01b      	beq.n	80038c4 <_malloc_r+0xb0>
 800388c:	425a      	negs	r2, r3
 800388e:	50e2      	str	r2, [r4, r3]
 8003890:	bd70      	pop	{r4, r5, r6, pc}
 8003892:	428c      	cmp	r4, r1
 8003894:	bf0d      	iteet	eq
 8003896:	6863      	ldreq	r3, [r4, #4]
 8003898:	684b      	ldrne	r3, [r1, #4]
 800389a:	6063      	strne	r3, [r4, #4]
 800389c:	6013      	streq	r3, [r2, #0]
 800389e:	bf18      	it	ne
 80038a0:	460c      	movne	r4, r1
 80038a2:	e7e9      	b.n	8003878 <_malloc_r+0x64>
 80038a4:	460c      	mov	r4, r1
 80038a6:	6849      	ldr	r1, [r1, #4]
 80038a8:	e7ca      	b.n	8003840 <_malloc_r+0x2c>
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d005      	beq.n	80038c0 <_malloc_r+0xac>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4630      	mov	r0, r6
 80038b8:	f000 f830 	bl	800391c <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d0cd      	beq.n	800385c <_malloc_r+0x48>
 80038c0:	6025      	str	r5, [r4, #0]
 80038c2:	e7d9      	b.n	8003878 <_malloc_r+0x64>
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	bf00      	nop
 80038c8:	2000008c 	.word	0x2000008c
 80038cc:	20000090 	.word	0x20000090

080038d0 <_realloc_r>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	4607      	mov	r7, r0
 80038d4:	4614      	mov	r4, r2
 80038d6:	460e      	mov	r6, r1
 80038d8:	b921      	cbnz	r1, 80038e4 <_realloc_r+0x14>
 80038da:	4611      	mov	r1, r2
 80038dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038e0:	f7ff bf98 	b.w	8003814 <_malloc_r>
 80038e4:	b922      	cbnz	r2, 80038f0 <_realloc_r+0x20>
 80038e6:	f7ff ff47 	bl	8003778 <_free_r>
 80038ea:	4625      	mov	r5, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f0:	f000 f826 	bl	8003940 <_malloc_usable_size_r>
 80038f4:	4284      	cmp	r4, r0
 80038f6:	d90f      	bls.n	8003918 <_realloc_r+0x48>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4638      	mov	r0, r7
 80038fc:	f7ff ff8a 	bl	8003814 <_malloc_r>
 8003900:	4605      	mov	r5, r0
 8003902:	2800      	cmp	r0, #0
 8003904:	d0f2      	beq.n	80038ec <_realloc_r+0x1c>
 8003906:	4631      	mov	r1, r6
 8003908:	4622      	mov	r2, r4
 800390a:	f7ff ff0f 	bl	800372c <memcpy>
 800390e:	4631      	mov	r1, r6
 8003910:	4638      	mov	r0, r7
 8003912:	f7ff ff31 	bl	8003778 <_free_r>
 8003916:	e7e9      	b.n	80038ec <_realloc_r+0x1c>
 8003918:	4635      	mov	r5, r6
 800391a:	e7e7      	b.n	80038ec <_realloc_r+0x1c>

0800391c <_sbrk_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4c06      	ldr	r4, [pc, #24]	; (8003938 <_sbrk_r+0x1c>)
 8003920:	2300      	movs	r3, #0
 8003922:	4605      	mov	r5, r0
 8003924:	4608      	mov	r0, r1
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	f7fc fe54 	bl	80005d4 <_sbrk>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_sbrk_r+0x1a>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	b103      	cbz	r3, 8003936 <_sbrk_r+0x1a>
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	20000298 	.word	0x20000298

0800393c <__malloc_lock>:
 800393c:	4770      	bx	lr

0800393e <__malloc_unlock>:
 800393e:	4770      	bx	lr

08003940 <_malloc_usable_size_r>:
 8003940:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003944:	2800      	cmp	r0, #0
 8003946:	f1a0 0004 	sub.w	r0, r0, #4
 800394a:	bfbc      	itt	lt
 800394c:	580b      	ldrlt	r3, [r1, r0]
 800394e:	18c0      	addlt	r0, r0, r3
 8003950:	4770      	bx	lr
	...

08003954 <_init>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr

08003960 <_fini>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr
