
MonHa_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  20000004  080031c8  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000025c  080031c8  0002025c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006bef  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00010ce7  00000000  00000000  00026c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002671  00000000  00000000  0003790a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b98  00000000  00000000  00039f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e78  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000876c  00000000  00000000  0003b990  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000049ed  00000000  00000000  000440fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00048ae9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000020f8  00000000  00000000  00048b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003140 	.word	0x08003140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003140 	.word	0x08003140

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004de:	e003      	b.n	80004e8 <LoopCopyDataInit>

080004e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004e6:	3104      	adds	r1, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <LoopForever+0xe>)
	adds	r2, r0, r1
 80004ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004f0:	d3f6      	bcc.n	80004e0 <CopyDataInit>
	ldr	r2, =_sbss
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004f4:	e002      	b.n	80004fc <LoopFillZerobss>

080004f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004f8:	f842 3b04 	str.w	r3, [r2], #4

080004fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <LoopForever+0x16>)
	cmp	r2, r3
 80004fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000500:	d3f9      	bcc.n	80004f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000502:	f000 fc1b 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f002 fdef 	bl	80030e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050a:	f000 f945 	bl	8000798 <main>

0800050e <LoopForever>:

LoopForever:
    b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000514:	080031c4 	.word	0x080031c4
	ldr	r0, =_sdata
 8000518:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800051c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000520:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000524:	2000025c 	.word	0x2000025c

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>
	...

0800052c <BSP_LCD_GLASS_DisplayBar>:
  *     @arg BAR0: LCD GLASS Bar 2
  *     @arg BAR0: LCD GLASS Bar 3
  * @retval None
  */
void BSP_LCD_GLASS_DisplayBar(uint32_t BarId)
{
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        break;

      /* Bar 3 */
      case LCD_BAR_3:
        /* Set BAR3 */
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 800052e:	4d19      	ldr	r5, [pc, #100]	; (8000594 <BSP_LCD_GLASS_DisplayBar+0x68>)
{
 8000530:	4606      	mov	r6, r0
  uint32_t position = 0;
 8000532:	2400      	movs	r4, #0
    switch(BarId & (1 << position))
 8000534:	2701      	movs	r7, #1
  while ((BarId) >> position)
 8000536:	fa36 f304 	lsrs.w	r3, r6, r4
 800053a:	d104      	bne.n	8000546 <BSP_LCD_GLASS_DisplayBar+0x1a>
    }
    position++;
  }

  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 800053c:	4815      	ldr	r0, [pc, #84]	; (8000594 <BSP_LCD_GLASS_DisplayBar+0x68>)
}
 800053e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000542:	f000 be9e 	b.w	8001282 <HAL_LCD_UpdateDisplayRequest>
    switch(BarId & (1 << position))
 8000546:	fa07 f304 	lsl.w	r3, r7, r4
 800054a:	4033      	ands	r3, r6
 800054c:	3b01      	subs	r3, #1
 800054e:	2b07      	cmp	r3, #7
 8000550:	d80d      	bhi.n	800056e <BSP_LCD_GLASS_DisplayBar+0x42>
 8000552:	e8df f003 	tbb	[pc, r3]
 8000556:	0e04      	.short	0x0e04
 8000558:	0c0c140c 	.word	0x0c0c140c
 800055c:	190c      	.short	0x190c
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR0_SEG), LCD_BAR0_SEG);
 800055e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000562:	f46f 7280 	mvn.w	r2, #256	; 0x100
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR2_SEG), LCD_BAR2_SEG);
 8000566:	2106      	movs	r1, #6
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 8000568:	4628      	mov	r0, r5
 800056a:	f000 fe4a 	bl	8001202 <HAL_LCD_Write>
    position++;
 800056e:	3401      	adds	r4, #1
 8000570:	e7e1      	b.n	8000536 <BSP_LCD_GLASS_DisplayBar+0xa>
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR1_SEG), LCD_BAR1_SEG);
 8000572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000576:	f46f 7280 	mvn.w	r2, #256	; 0x100
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 800057a:	2104      	movs	r1, #4
 800057c:	e7f4      	b.n	8000568 <BSP_LCD_GLASS_DisplayBar+0x3c>
        HAL_LCD_Write(&LCDHandle, LCD_BAR0_2_COM, ~(LCD_BAR2_SEG), LCD_BAR2_SEG);
 800057e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000582:	f06f 7200 	mvn.w	r2, #33554432	; 0x2000000
 8000586:	e7ee      	b.n	8000566 <BSP_LCD_GLASS_DisplayBar+0x3a>
        HAL_LCD_Write(&LCDHandle, LCD_BAR1_3_COM, ~(LCD_BAR3_SEG), LCD_BAR3_SEG);
 8000588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800058c:	f06f 7200 	mvn.w	r2, #33554432	; 0x2000000
 8000590:	e7f3      	b.n	800057a <BSP_LCD_GLASS_DisplayBar+0x4e>
 8000592:	bf00      	nop
 8000594:	200000b8 	.word	0x200000b8

08000598 <BSP_LCD_GLASS_Clear>:
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
  HAL_LCD_Clear(&LCDHandle);
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <BSP_LCD_GLASS_Clear+0x8>)
 800059a:	f000 be96 	b.w	80012ca <HAL_LCD_Clear>
 800059e:	bf00      	nop
 80005a0:	200000b8 	.word	0x200000b8

080005a4 <BSP_LCD_GLASS_Init>:
{
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80005a6:	4b51      	ldr	r3, [pc, #324]	; (80006ec <BSP_LCD_GLASS_Init+0x148>)
  LCDHandle.Instance              = LCD;
 80005a8:	4d51      	ldr	r5, [pc, #324]	; (80006f0 <BSP_LCD_GLASS_Init+0x14c>)
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80005aa:	2400      	movs	r4, #0
 80005ac:	e885 0018 	stmia.w	r5, {r3, r4}
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80005b0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80005b4:	60ab      	str	r3, [r5, #8]
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80005b6:	230c      	movs	r3, #12
{
 80005b8:	b0bf      	sub	sp, #252	; 0xfc
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80005ba:	60eb      	str	r3, [r5, #12]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80005bc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80005c0:	2340      	movs	r3, #64	; 0x40
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80005c2:	4621      	mov	r1, r4
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80005c4:	612b      	str	r3, [r5, #16]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80005c6:	61aa      	str	r2, [r5, #24]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80005c8:	622b      	str	r3, [r5, #32]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80005ca:	2214      	movs	r2, #20
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80005cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80005d0:	a806      	add	r0, sp, #24
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80005d2:	62eb      	str	r3, [r5, #44]	; 0x2c
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80005d4:	616c      	str	r4, [r5, #20]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80005d6:	61ec      	str	r4, [r5, #28]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80005d8:	626c      	str	r4, [r5, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 80005da:	62ac      	str	r4, [r5, #40]	; 0x28
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 80005dc:	632c      	str	r4, [r5, #48]	; 0x30
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80005de:	f002 fda7 	bl	8003130 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 80005e2:	4621      	mov	r1, r4
 80005e4:	2244      	movs	r2, #68	; 0x44
 80005e6:	a80b      	add	r0, sp, #44	; 0x2c
 80005e8:	f002 fda2 	bl	8003130 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80005ec:	4621      	mov	r1, r4

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80005f2:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80005f6:	2288      	movs	r2, #136	; 0x88
 80005f8:	a81c      	add	r0, sp, #112	; 0x70
 80005fa:	f002 fd99 	bl	8003130 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	65a3      	str	r3, [r4, #88]	; 0x58
 8000606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	9b00      	ldr	r3, [sp, #0]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8000610:	2304      	movs	r3, #4
 8000612:	930b      	str	r3, [sp, #44]	; 0x2c
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
  oscinitstruct.LSEState        = RCC_LSE_ON;
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8000614:	a80b      	add	r0, sp, #44	; 0x2c
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	930d      	str	r3, [sp, #52]	; 0x34
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 800061a:	f001 f86f 	bl	80016fc <HAL_RCC_OscConfig>
 800061e:	4606      	mov	r6, r0
 8000620:	b100      	cbz	r0, 8000624 <BSP_LCD_GLASS_Init+0x80>
 8000622:	e7fe      	b.n	8000622 <BSP_LCD_GLASS_Init+0x7e>
    while(1);
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000628:	931c      	str	r3, [sp, #112]	; 0x70
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 800062a:	a81c      	add	r0, sp, #112	; 0x70
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800062c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000630:	933d      	str	r3, [sp, #244]	; 0xf4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8000632:	f001 fcab 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800063e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000650:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000662:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	9303      	str	r3, [sp, #12]
 800066a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000674:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8000676:	9608      	str	r6, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	9304      	str	r3, [sp, #16]
 800067e:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8000680:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000684:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8000686:	2303      	movs	r3, #3
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8000688:	2702      	movs	r7, #2
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 800068a:	9309      	str	r3, [sp, #36]	; 0x24
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 800068c:	a906      	add	r1, sp, #24
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 800068e:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8000694:	930a      	str	r3, [sp, #40]	; 0x28
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8000696:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000698:	f000 fcd2 	bl	8001040 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 800069c:	f24f 2333 	movw	r3, #62003	; 0xf233
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80006a0:	a906      	add	r1, sp, #24
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <BSP_LCD_GLASS_Init+0x150>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80006a4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80006a6:	f000 fccb 	bl	8001040 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80006aa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80006ae:	a906      	add	r1, sp, #24
 80006b0:	4811      	ldr	r0, [pc, #68]	; (80006f8 <BSP_LCD_GLASS_Init+0x154>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80006b2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80006b4:	f000 fcc4 	bl	8001040 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80006b8:	a906      	add	r1, sp, #24
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80006ba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <BSP_LCD_GLASS_Init+0x158>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80006c0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80006c2:	f000 fcbd 	bl	8001040 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80006c6:	4638      	mov	r0, r7
 80006c8:	f000 fb98 	bl	8000dfc <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80006cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80006ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80006d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80006d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006da:	9305      	str	r3, [sp, #20]
  HAL_LCD_Init(&LCDHandle);
 80006dc:	4628      	mov	r0, r5
  __HAL_RCC_LCD_CLK_ENABLE();
 80006de:	9b05      	ldr	r3, [sp, #20]
  HAL_LCD_Init(&LCDHandle);
 80006e0:	f000 fe41 	bl	8001366 <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 80006e4:	f7ff ff58 	bl	8000598 <BSP_LCD_GLASS_Clear>
}
 80006e8:	b03f      	add	sp, #252	; 0xfc
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	40002400 	.word	0x40002400
 80006f0:	200000b8 	.word	0x200000b8
 80006f4:	48000400 	.word	0x48000400
 80006f8:	48000800 	.word	0x48000800
 80006fc:	48000c00 	.word	0x48000c00

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	2614      	movs	r6, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	2244      	movs	r2, #68	; 0x44
 8000708:	2100      	movs	r1, #0
 800070a:	a805      	add	r0, sp, #20
 800070c:	f002 fd10 	bl	8003130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	4632      	mov	r2, r6
 8000712:	2100      	movs	r1, #0
 8000714:	4668      	mov	r0, sp
 8000716:	f002 fd0b 	bl	8003130 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071a:	2288      	movs	r2, #136	; 0x88
 800071c:	2100      	movs	r1, #0
 800071e:	a816      	add	r0, sp, #88	; 0x58
 8000720:	f002 fd06 	bl	8003130 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000724:	2318      	movs	r3, #24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000726:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800072a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072c:	2707      	movs	r7, #7
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800072e:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	eb0d 0006 	add.w	r0, sp, r6
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000734:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000736:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000738:	940a      	str	r4, [sp, #40]	; 0x28
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2600      	movs	r6, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000740:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000742:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000744:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000746:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000748:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f000 ffd7 	bl	80016fc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2203      	movs	r2, #3
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	210f      	movs	r1, #15
 8000754:	e88d 004e 	stmia.w	sp, {r1, r2, r3, r6}
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	4668      	mov	r0, sp
 800075a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	9604      	str	r6, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	f001 f9f3 	bl	8001b48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <SystemClock_Config+0x94>)
 8000764:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 72;
 8000766:	2348      	movs	r3, #72	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000768:	9625      	str	r6, [sp, #148]	; 0x94
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800076a:	962f      	str	r6, [sp, #188]	; 0xbc
  PeriphClkInit.PLLSAI1.PLLSAI1N = 72;
 800076c:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800076e:	f44f 7600 	mov.w	r6, #512	; 0x200
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000778:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800077a:	9637      	str	r6, [sp, #220]	; 0xdc
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800077c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000780:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000782:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000784:	951c      	str	r5, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000786:	f001 fc01 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078a:	4630      	mov	r0, r6
 800078c:	f000 fe6c 	bl	8001468 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8000790:	b039      	add	sp, #228	; 0xe4
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	00020802 	.word	0x00020802

08000798 <main>:
{
 8000798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079c:	4d98      	ldr	r5, [pc, #608]	; (8000a00 <main+0x268>)
{
 800079e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80007a0:	f000 fb08 	bl	8000db4 <HAL_Init>
  SystemClock_Config();
 80007a4:	f7ff ffac 	bl	8000700 <SystemClock_Config>
BSP_LCD_GLASS_Init();
 80007a8:	f7ff fefc 	bl	80005a4 <BSP_LCD_GLASS_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	2214      	movs	r2, #20
 80007ae:	2100      	movs	r1, #0
 80007b0:	a807      	add	r0, sp, #28
 80007b2:	f002 fcbd 	bl	8003130 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 80007b8:	4892      	ldr	r0, [pc, #584]	; (8000a04 <main+0x26c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	64eb      	str	r3, [r5, #76]	; 0x4c
 80007c0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	64eb      	str	r3, [r5, #76]	; 0x4c
 80007d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	9303      	str	r3, [sp, #12]
 80007da:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80007e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	9304      	str	r3, [sp, #16]
 80007ec:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80007f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	9305      	str	r3, [sp, #20]
 80007fe:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000800:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000808:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7184 	mov.w	r1, #264	; 0x108
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000818:	f000 fcee 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	4879      	ldr	r0, [pc, #484]	; (8000a08 <main+0x270>)

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000824:	f000 fce8 	bl	80011f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800082c:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2602      	movs	r6, #2
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000830:	a907      	add	r1, sp, #28
 8000832:	4874      	ldr	r0, [pc, #464]	; (8000a04 <main+0x26c>)
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000834:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800083e:	f000 fbff 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000842:	a907      	add	r1, sp, #28
 8000844:	4871      	ldr	r0, [pc, #452]	; (8000a0c <main+0x274>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000846:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f000 fbf7 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000852:	232f      	movs	r3, #47	; 0x2f
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	a907      	add	r1, sp, #28
 8000856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 800085a:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800085e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000862:	2604      	movs	r6, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f000 fbec 	bl	8001040 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000868:	a907      	add	r1, sp, #28
 800086a:	4867      	ldr	r0, [pc, #412]	; (8000a08 <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000874:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000878:	f000 fbe2 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800087c:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000880:	a907      	add	r1, sp, #28
 8000882:	4860      	ldr	r0, [pc, #384]	; (8000a04 <main+0x26c>)
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000884:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000890:	f000 fbd6 	bl	8001040 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000894:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	64ab      	str	r3, [r5, #72]	; 0x48
 800089c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800089e:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80008a2:	4621      	mov	r1, r4
 80008a4:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008a6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80008a8:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80008ac:	f000 fac6 	bl	8000e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80008b0:	2039      	movs	r0, #57	; 0x39
 80008b2:	f000 faf7 	bl	8000ea4 <HAL_NVIC_EnableIRQ>
  hlcd.Instance = LCD;
 80008b6:	4856      	ldr	r0, [pc, #344]	; (8000a10 <main+0x278>)
 80008b8:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <main+0x27c>)
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80008ba:	6084      	str	r4, [r0, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80008bc:	250c      	movs	r5, #12
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80008be:	e880 0018 	stmia.w	r0, {r3, r4}
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80008c2:	60c5      	str	r5, [r0, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80008c4:	6104      	str	r4, [r0, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80008c6:	6144      	str	r4, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80008c8:	6184      	str	r4, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80008ca:	61c4      	str	r4, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80008cc:	6204      	str	r4, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80008ce:	6304      	str	r4, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80008d0:	6284      	str	r4, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80008d2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80008d4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80008d6:	f000 fd46 	bl	8001366 <HAL_LCD_Init>
  hqspi.Instance = QUADSPI;
 80008da:	484f      	ldr	r0, [pc, #316]	; (8000a18 <main+0x280>)
  hqspi.Init.ClockPrescaler = 255;
 80008dc:	4b4f      	ldr	r3, [pc, #316]	; (8000a1c <main+0x284>)
  hqspi.Init.FifoThreshold = 1;
 80008de:	f8c0 8008 	str.w	r8, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 80008e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80008e6:	e880 0208 	stmia.w	r0, {r3, r9}
  hqspi.Init.FlashSize = 1;
 80008ea:	f8c0 8010 	str.w	r8, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008ee:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008f0:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008f2:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008f4:	f000 fe14 	bl	8001520 <HAL_QSPI_Init>
  hsai_BlockB1.Instance = SAI1_Block_B;
 80008f8:	4849      	ldr	r0, [pc, #292]	; (8000a20 <main+0x288>)
 80008fa:	4b4a      	ldr	r3, [pc, #296]	; (8000a24 <main+0x28c>)
 80008fc:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000902:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000906:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.FrameInit.FrameLength = 64;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 32;
 800090c:	2320      	movs	r3, #32
 800090e:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000914:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091a:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800091c:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800091e:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000920:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000922:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000924:	6084      	str	r4, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000926:	6104      	str	r4, [r0, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000928:	6144      	str	r4, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800092a:	6184      	str	r4, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800092c:	60c4      	str	r4, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800092e:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000930:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000932:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000934:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000936:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000938:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800093a:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 4;
 800093c:	65c6      	str	r6, [r0, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800093e:	f002 f883 	bl	8002a48 <HAL_SAI_Init>
  huart2.Instance = USART2;
 8000942:	4839      	ldr	r0, [pc, #228]	; (8000a28 <main+0x290>)
  huart2.Init.BaudRate = 115200;
 8000944:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <main+0x294>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000946:	6145      	str	r5, [r0, #20]
  huart2.Init.BaudRate = 115200;
 8000948:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800094c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000950:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000952:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000954:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	f002 fb90 	bl	8003082 <HAL_UART_Init>
  RTC_TimeTypeDef sTime = {0};
 8000962:	2214      	movs	r2, #20
 8000964:	4621      	mov	r1, r4
 8000966:	a807      	add	r0, sp, #28
 8000968:	f002 fbe2 	bl	8003130 <memset>
  hrtc.Instance = RTC;
 800096c:	4d30      	ldr	r5, [pc, #192]	; (8000a30 <main+0x298>)
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <main+0x29c>)
  RTC_DateTypeDef sDate = {0};
 8000970:	9400      	str	r4, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000972:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000976:	4628      	mov	r0, r5
  hrtc.Init.AsynchPrediv = 127;
 8000978:	237f      	movs	r3, #127	; 0x7f
 800097a:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 800097c:	f8c5 900c 	str.w	r9, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000980:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000982:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000984:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000986:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000988:	f001 fef8 	bl	800277c <HAL_RTC_Init>
  sTime.Minutes = 59;
 800098c:	233b      	movs	r3, #59	; 0x3b
  sTime.Hours = 23;
 800098e:	f04f 0817 	mov.w	r8, #23
  sTime.Minutes = 59;
 8000992:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000996:	4622      	mov	r2, r4
  sTime.Seconds = 50;
 8000998:	2332      	movs	r3, #50	; 0x32
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800099a:	a907      	add	r1, sp, #28
 800099c:	4628      	mov	r0, r5
  sTime.Seconds = 50;
 800099e:	f88d 301e 	strb.w	r3, [sp, #30]
  sTime.Hours = 23;
 80009a2:	f88d 801c 	strb.w	r8, [sp, #28]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009a6:	940a      	str	r4, [sp, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009a8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009aa:	f001 ffb0 	bl	800290e <HAL_RTC_SetTime>
  sDate.Year = 19;
 80009ae:	2313      	movs	r3, #19
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009b0:	4622      	mov	r2, r4
 80009b2:	4669      	mov	r1, sp
 80009b4:	4628      	mov	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80009b6:	f88d 7000 	strb.w	r7, [sp]
  sDate.Month = RTC_MONTH_APRIL;
 80009ba:	f88d 6001 	strb.w	r6, [sp, #1]
  sDate.Date = 23;
 80009be:	f88d 8002 	strb.w	r8, [sp, #2]
  sDate.Year = 19;
 80009c2:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009c6:	f001 ff39 	bl	800283c <HAL_RTC_SetDate>
	  temporar1=(temporar1+1)%4;
 80009ca:	3401      	adds	r4, #1
	  BSP_LCD_GLASS_Clear();
 80009cc:	f7ff fde4 	bl	8000598 <BSP_LCD_GLASS_Clear>
	  temporar1=(temporar1+1)%4;
 80009d0:	f004 0403 	and.w	r4, r4, #3
	  HAL_Delay(100);
 80009d4:	2064      	movs	r0, #100	; 0x64
 80009d6:	f000 fa11 	bl	8000dfc <HAL_Delay>
	  switch (temporar1) {
 80009da:	2c02      	cmp	r4, #2
 80009dc:	d00c      	beq.n	80009f8 <main+0x260>
 80009de:	2c03      	cmp	r4, #3
 80009e0:	d00c      	beq.n	80009fc <main+0x264>
 80009e2:	2c01      	cmp	r4, #1
			BSP_LCD_GLASS_DisplayBar(LCD_BAR_0);
 80009e4:	bf14      	ite	ne
 80009e6:	2001      	movne	r0, #1
			BSP_LCD_GLASS_DisplayBar(LCD_BAR_1);
 80009e8:	2002      	moveq	r0, #2
			BSP_LCD_GLASS_DisplayBar(LCD_BAR_3);
 80009ea:	f7ff fd9f 	bl	800052c <BSP_LCD_GLASS_DisplayBar>
	  HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f2:	f000 fa03 	bl	8000dfc <HAL_Delay>
	  BSP_LCD_GLASS_Clear();
 80009f6:	e7e8      	b.n	80009ca <main+0x232>
			BSP_LCD_GLASS_DisplayBar(LCD_BAR_2);
 80009f8:	2004      	movs	r0, #4
 80009fa:	e7f6      	b.n	80009ea <main+0x252>
			BSP_LCD_GLASS_DisplayBar(LCD_BAR_3);
 80009fc:	2008      	movs	r0, #8
 80009fe:	e7f4      	b.n	80009ea <main+0x252>
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48001000 	.word	0x48001000
 8000a08:	48000400 	.word	0x48000400
 8000a0c:	48000800 	.word	0x48000800
 8000a10:	20000160 	.word	0x20000160
 8000a14:	40002400 	.word	0x40002400
 8000a18:	20000214 	.word	0x20000214
 8000a1c:	a0001000 	.word	0xa0001000
 8000a20:	20000034 	.word	0x20000034
 8000a24:	40015424 	.word	0x40015424
 8000a28:	2000019c 	.word	0x2000019c
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	200000f4 	.word	0x200000f4
 8000a34:	40002800 	.word	0x40002800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	4770      	bx	lr
	...

08000a3c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_MspInit+0x2c>)
 8000a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a40:	f042 0201 	orr.w	r2, r2, #1
 8000a44:	661a      	str	r2, [r3, #96]	; 0x60
 8000a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000a48:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	f002 0201 	and.w	r2, r2, #1
 8000a4e:	9200      	str	r2, [sp, #0]
 8000a50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a58:	659a      	str	r2, [r3, #88]	; 0x58
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	b002      	add	sp, #8
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000a6c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	2214      	movs	r2, #20
{
 8000a70:	b08a      	sub	sp, #40	; 0x28
 8000a72:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2100      	movs	r1, #0
 8000a76:	eb0d 0002 	add.w	r0, sp, r2
 8000a7a:	f002 fb59 	bl	8003130 <memset>
  if(hlcd->Instance==LCD)
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_LCD_MspInit+0xd8>)
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d15c      	bne.n	8000b40 <HAL_LCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a86:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	482e      	ldr	r0, [pc, #184]	; (8000b48 <HAL_LCD_MspInit+0xdc>)
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a94:	659a      	str	r2, [r3, #88]	; 0x58
 8000a96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a98:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa2:	f042 0204 	orr.w	r2, r2, #4
 8000aa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aaa:	f002 0204 	and.w	r2, r2, #4
 8000aae:	9201      	str	r2, [sp, #4]
 8000ab0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab4:	f042 0201 	orr.w	r2, r2, #1
 8000ab8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000abc:	f002 0201 	and.w	r2, r2, #1
 8000ac0:	9202      	str	r2, [sp, #8]
 8000ac2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac6:	f042 0202 	orr.w	r2, r2, #2
 8000aca:	64da      	str	r2, [r3, #76]	; 0x4c
 8000acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ace:	f002 0202 	and.w	r2, r2, #2
 8000ad2:	9203      	str	r2, [sp, #12]
 8000ad4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad8:	f042 0208 	orr.w	r2, r2, #8
 8000adc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ae8:	250b      	movs	r5, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000aec:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000aee:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	a905      	add	r1, sp, #20

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000af6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f000 faa2 	bl	8001040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000afc:	f248 73c0 	movw	r3, #34752	; 0x87c0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	a905      	add	r1, sp, #20
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000b06:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b0e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f000 fa96 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000b14:	f24f 2333 	movw	r3, #62003	; 0xf233
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	a905      	add	r1, sp, #20
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <HAL_LCD_MspInit+0xe0>)
    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000b1c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b24:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f000 fa8b 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000b2a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	a905      	add	r1, sp, #20
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <HAL_LCD_MspInit+0xe4>)
    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000b32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b3a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f000 fa80 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000b40:	b00a      	add	sp, #40	; 0x28
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	40002400 	.word	0x40002400
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000c00 	.word	0x48000c00

08000b54 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000b54:	b510      	push	{r4, lr}
 8000b56:	4604      	mov	r4, r0
 8000b58:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	2214      	movs	r2, #20
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	a803      	add	r0, sp, #12
 8000b60:	f002 fae6 	bl	8003130 <memset>
  if(hqspi->Instance==QUADSPI)
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_QSPI_MspInit+0x64>)
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d122      	bne.n	8000bb2 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b6c:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8000b70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b74:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b7e:	651a      	str	r2, [r3, #80]	; 0x50
 8000b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b82:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b8c:	f042 0210 	orr.w	r2, r2, #16
 8000b90:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000b9c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000ba0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000baa:	230a      	movs	r3, #10
 8000bac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bae:	f000 fa47 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000bb2:	b008      	add	sp, #32
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	bf00      	nop
 8000bb8:	a0001000 	.word	0xa0001000
 8000bbc:	48001000 	.word	0x48001000

08000bc0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000bc0:	6802      	ldr	r2, [r0, #0]
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_RTC_MspInit+0x18>)
 8000bc4:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bc6:	bf01      	itttt	eq
 8000bc8:	4a04      	ldreq	r2, [pc, #16]	; (8000bdc <HAL_RTC_MspInit+0x1c>)
 8000bca:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8000bce:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8000bd2:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8000bd6:	4770      	bx	lr
 8000bd8:	40002800 	.word	0x40002800
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b510      	push	{r4, lr}
 8000be2:	4604      	mov	r4, r0
 8000be4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	2214      	movs	r2, #20
 8000be8:	2100      	movs	r1, #0
 8000bea:	a803      	add	r0, sp, #12
 8000bec:	f002 faa0 	bl	8003130 <memset>
  if(huart->Instance==USART2)
 8000bf0:	6822      	ldr	r2, [r4, #0]
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_UART_MspInit+0x60>)
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d121      	bne.n	8000c3c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c00:	4810      	ldr	r0, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c06:	659a      	str	r2, [r3, #88]	; 0x58
 8000c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c14:	f042 0208 	orr.w	r2, r2, #8
 8000c18:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c24:	2360      	movs	r3, #96	; 0x60
 8000c26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c34:	2307      	movs	r3, #7
 8000c36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	f000 fa02 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c3c:	b008      	add	sp, #32
 8000c3e:	bd10      	pop	{r4, pc}
 8000c40:	40004400 	.word	0x40004400
 8000c44:	48000c00 	.word	0x48000c00

08000c48 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8000c4c:	6802      	ldr	r2, [r0, #0]
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <HAL_SAI_MspInit+0xb8>)
 8000c50:	429a      	cmp	r2, r3
{
 8000c52:	b086      	sub	sp, #24
 8000c54:	4606      	mov	r6, r0
    if(hsai->Instance==SAI1_Block_B)
 8000c56:	d150      	bne.n	8000cfa <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_SAI_MspInit+0xbc>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	b94a      	cbnz	r2, 8000c72 <HAL_SAI_MspInit+0x2a>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000c5e:	492a      	ldr	r1, [pc, #168]	; (8000d08 <HAL_SAI_MspInit+0xc0>)
 8000c60:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8000c62:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8000c66:	6608      	str	r0, [r1, #96]	; 0x60
 8000c68:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8000c6a:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 8000c6e:	9100      	str	r1, [sp, #0]
 8000c70:	9900      	ldr	r1, [sp, #0]
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000c72:	4826      	ldr	r0, [pc, #152]	; (8000d0c <HAL_SAI_MspInit+0xc4>)
    SAI1_client ++;
 8000c74:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2500      	movs	r5, #0
    SAI1_client ++;
 8000c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c7a:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8000c80:	f04f 0880 	mov.w	r8, #128	; 0x80
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000c84:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c88:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8000c8a:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f000 f9d5 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000c96:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	a901      	add	r1, sp, #4
 8000c9c:	481b      	ldr	r0, [pc, #108]	; (8000d0c <HAL_SAI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000c9e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ca0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f000 f9ca 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cac:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	a901      	add	r1, sp, #4
 8000cb0:	4817      	ldr	r0, [pc, #92]	; (8000d10 <HAL_SAI_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000cb4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	9702      	str	r7, [sp, #8]

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA2_Channel2;
 8000cb8:	4c16      	ldr	r4, [pc, #88]	; (8000d14 <HAL_SAI_MspInit+0xcc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f000 f9bf 	bl	8001040 <HAL_GPIO_Init>
    hdma_sai1_b.Init.Request = DMA_REQUEST_1;
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cc2:	4915      	ldr	r1, [pc, #84]	; (8000d18 <HAL_SAI_MspInit+0xd0>)
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	60e5      	str	r5, [r4, #12]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	2201      	movs	r2, #1
 8000cca:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	6163      	str	r3, [r4, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	61a3      	str	r3, [r4, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000cda:	2320      	movs	r3, #32
 8000cdc:	61e3      	str	r3, [r4, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000cde:	4620      	mov	r0, r4
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000ce4:	f8c4 8010 	str.w	r8, [r4, #16]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000ce8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000cea:	f000 f8fd 	bl	8000ee8 <HAL_DMA_Init>
 8000cee:	b108      	cbz	r0, 8000cf4 <HAL_SAI_MspInit+0xac>
    {
      Error_Handler();
 8000cf0:	f7ff fea2 	bl	8000a38 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8000cf4:	6734      	str	r4, [r6, #112]	; 0x70
 8000cf6:	62a6      	str	r6, [r4, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8000cf8:	66f4      	str	r4, [r6, #108]	; 0x6c
    }
}
 8000cfa:	b006      	add	sp, #24
 8000cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d00:	40015424 	.word	0x40015424
 8000d04:	20000020 	.word	0x20000020
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	20000118 	.word	0x20000118
 8000d18:	4002041c 	.word	0x4002041c

08000d1c <NMI_Handler>:
 8000d1c:	4770      	bx	lr

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler>

08000d26 <SVC_Handler>:
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 b858 	b.w	8000de0 <HAL_IncTick>

08000d30 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <DMA2_Channel2_IRQHandler+0x8>)
 8000d32:	f000 b93b 	b.w	8000fac <HAL_DMA_IRQHandler>
 8000d36:	bf00      	nop
 8000d38:	20000118 	.word	0x20000118

08000d3c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	490f      	ldr	r1, [pc, #60]	; (8000d7c <SystemInit+0x40>)
 8000d3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000d42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <SystemInit+0x44>)
 8000d4c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d4e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000d50:	f042 0201 	orr.w	r2, r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8000d56:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000d5e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000d62:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d70:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d72:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	608b      	str	r3, [r1, #8]
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_InitTick+0x2c>)
{
 8000d88:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d94:	f000 f892 	bl	8000ebc <HAL_SYSTICK_Config>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	b938      	cbnz	r0, 8000dac <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4629      	mov	r1, r5
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f84a 	bl	8000e3c <HAL_NVIC_SetPriority>
 8000da8:	4620      	mov	r0, r4
 8000daa:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000000 	.word	0x20000000

08000db4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_Init+0x28>)
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000dbc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc2:	f000 f829 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff ffdc 	bl	8000d84 <HAL_InitTick>
 8000dcc:	4604      	mov	r4, r0
 8000dce:	b918      	cbnz	r0, 8000dd8 <HAL_Init+0x24>
    HAL_MspInit();
 8000dd0:	f7ff fe34 	bl	8000a3c <HAL_MspInit>
}
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000dd8:	2401      	movs	r4, #1
 8000dda:	e7fb      	b.n	8000dd4 <HAL_Init+0x20>
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000de0:	4a02      	ldr	r2, [pc, #8]	; (8000dec <HAL_IncTick+0xc>)
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000258 	.word	0x20000258

08000df0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000df0:	4b01      	ldr	r3, [pc, #4]	; (8000df8 <HAL_GetTick+0x8>)
 8000df2:	6818      	ldr	r0, [r3, #0]
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000258 	.word	0x20000258

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b538      	push	{r3, r4, r5, lr}
 8000dfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fff6 	bl	8000df0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e04:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e06:	4605      	mov	r5, r0
  {
    wait++;
 8000e08:	bf18      	it	ne
 8000e0a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0c:	f7ff fff0 	bl	8000df0 <HAL_GetTick>
 8000e10:	1b40      	subs	r0, r0, r5
 8000e12:	4284      	cmp	r4, r0
 8000e14:	d8fa      	bhi.n	8000e0c <HAL_Delay+0x10>
  {
  }
}
 8000e16:	bd38      	pop	{r3, r4, r5, pc}

08000e18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e20:	041b      	lsls	r3, r3, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e28:	0200      	lsls	r0, r0, #8
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e34:	60d3      	str	r3, [r2, #12]
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b530      	push	{r4, r5, lr}
 8000e40:	68dc      	ldr	r4, [r3, #12]
 8000e42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	bf28      	it	cs
 8000e50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 0501 	mov.w	r5, #1
 8000e58:	fa05 f303 	lsl.w	r3, r5, r3
 8000e5c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e60:	bf8c      	ite	hi
 8000e62:	3c03      	subhi	r4, #3
 8000e64:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e66:	4019      	ands	r1, r3
 8000e68:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e6e:	3c01      	subs	r4, #1
 8000e70:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	ea42 0201 	orr.w	r2, r2, r1
 8000e78:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	bfaf      	iteee	ge
 8000e7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	f000 000f 	andlt.w	r0, r0, #15
 8000e86:	4b06      	ldrlt	r3, [pc, #24]	; (8000ea0 <HAL_NVIC_SetPriority+0x64>)
 8000e88:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	bfa5      	ittet	ge
 8000e8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e90:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	e000ed14 	.word	0xe000ed14

08000ea4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ea4:	0942      	lsrs	r2, r0, #5
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f000 001f 	and.w	r0, r0, #31
 8000eac:	fa03 f000 	lsl.w	r0, r3, r0
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <HAL_NVIC_EnableIRQ+0x14>)
 8000eb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ec2:	d20a      	bcs.n	8000eda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	21f0      	movs	r1, #240	; 0xf0
 8000ecc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d04e      	beq.n	8000f8c <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eee:	6801      	ldr	r1, [r0, #0]
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_DMA_Init+0xa8>)
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	f04f 0414 	mov.w	r4, #20
 8000ef8:	d840      	bhi.n	8000f7c <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_DMA_Init+0xac>)
 8000efc:	440a      	add	r2, r1
 8000efe:	fbb2 f2f4 	udiv	r2, r2, r4
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f06:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8000f0a:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f12:	6884      	ldr	r4, [r0, #8]
 8000f14:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f16:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000f18:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000f1a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1c:	432b      	orrs	r3, r5
 8000f1e:	6945      	ldr	r5, [r0, #20]
 8000f20:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f22:	6985      	ldr	r5, [r0, #24]
 8000f24:	432b      	orrs	r3, r5
 8000f26:	69c5      	ldr	r5, [r0, #28]
 8000f28:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f2a:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f2c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000f30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f34:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000f36:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f38:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000f3c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f3e:	d014      	beq.n	8000f6a <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f40:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_DMA_Init+0xb0>)
 8000f44:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f46:	bf0c      	ite	eq
 8000f48:	4914      	ldreq	r1, [pc, #80]	; (8000f9c <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f4a:	4915      	ldrne	r1, [pc, #84]	; (8000fa0 <HAL_DMA_Init+0xb8>)
 8000f4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f4e:	680a      	ldr	r2, [r1, #0]
 8000f50:	f003 031c 	and.w	r3, r3, #28
 8000f54:	240f      	movs	r4, #15
 8000f56:	409c      	lsls	r4, r3
 8000f58:	ea22 0204 	bic.w	r2, r2, r4
 8000f5c:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f5e:	6842      	ldr	r2, [r0, #4]
 8000f60:	680c      	ldr	r4, [r1, #0]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	4323      	orrs	r3, r4
 8000f68:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6a:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f6c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6e:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8000f74:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8000f78:	4618      	mov	r0, r3
 8000f7a:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_DMA_Init+0xbc>)
 8000f7e:	440b      	add	r3, r1
 8000f80:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_DMA_Init+0xc0>)
 8000f8a:	e7be      	b.n	8000f0a <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
}
 8000f8e:	bd30      	pop	{r4, r5, pc}
 8000f90:	40020407 	.word	0x40020407
 8000f94:	bffdfff8 	.word	0xbffdfff8
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	400200a8 	.word	0x400200a8
 8000fa0:	400204a8 	.word	0x400204a8
 8000fa4:	bffdfbf8 	.word	0xbffdfbf8
 8000fa8:	40020400 	.word	0x40020400

08000fac <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000fae:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000fb0:	6803      	ldr	r3, [r0, #0]
{
 8000fb2:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000fb4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000fba:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000fbc:	2404      	movs	r4, #4
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	4226      	tst	r6, r4
 8000fc2:	d00e      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x36>
 8000fc4:	f015 0f04 	tst.w	r5, #4
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fce:	bf5e      	ittt	pl
 8000fd0:	681a      	ldrpl	r2, [r3, #0]
 8000fd2:	f022 0204 	bicpl.w	r2, r2, #4
 8000fd6:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000fd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000fda:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000fdc:	b373      	cbz	r3, 800103c <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8000fde:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000fe0:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000fe2:	2402      	movs	r4, #2
 8000fe4:	4094      	lsls	r4, r2
 8000fe6:	4226      	tst	r6, r4
 8000fe8:	d012      	beq.n	8001010 <HAL_DMA_IRQHandler+0x64>
 8000fea:	f015 0f02 	tst.w	r5, #2
 8000fee:	d00f      	beq.n	8001010 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	0695      	lsls	r5, r2, #26
 8000ff4:	d406      	bmi.n	8001004 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f022 020a 	bic.w	r2, r2, #10
 8000ffc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001004:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001006:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001008:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800100c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800100e:	e7e5      	b.n	8000fdc <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001010:	2408      	movs	r4, #8
 8001012:	4094      	lsls	r4, r2
 8001014:	4234      	tst	r4, r6
 8001016:	d011      	beq.n	800103c <HAL_DMA_IRQHandler+0x90>
 8001018:	072c      	lsls	r4, r5, #28
 800101a:	d50f      	bpl.n	800103c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101c:	681c      	ldr	r4, [r3, #0]
 800101e:	f024 040e 	bic.w	r4, r4, #14
 8001022:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001024:	2301      	movs	r3, #1
 8001026:	fa03 f202 	lsl.w	r2, r3, r2
 800102a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800102c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800102e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001032:	2300      	movs	r3, #0
 8001034:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001038:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800103a:	e7cf      	b.n	8000fdc <HAL_DMA_IRQHandler+0x30>
}
 800103c:	bc70      	pop	{r4, r5, r6}
 800103e:	4770      	bx	lr

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001044:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80011f4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800104c:	4c67      	ldr	r4, [pc, #412]	; (80011ec <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001050:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	9a01      	ldr	r2, [sp, #4]
 8001054:	40da      	lsrs	r2, r3
 8001056:	d102      	bne.n	800105e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001058:	b005      	add	sp, #20
 800105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001060:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001062:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001064:	ea12 0e06 	ands.w	lr, r2, r6
 8001068:	f000 80b1 	beq.w	80011ce <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106c:	684a      	ldr	r2, [r1, #4]
 800106e:	f022 0710 	bic.w	r7, r2, #16
 8001072:	2f02      	cmp	r7, #2
 8001074:	d116      	bne.n	80010a4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001076:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800107a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001082:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001086:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800108a:	f04f 0c0f 	mov.w	ip, #15
 800108e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001092:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001096:	690d      	ldr	r5, [r1, #16]
 8001098:	fa05 f50a 	lsl.w	r5, r5, sl
 800109c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80010a0:	f8c9 5020 	str.w	r5, [r9, #32]
 80010a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010aa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ae:	fa05 f50c 	lsl.w	r5, r5, ip
 80010b2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010bc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80010c8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010cc:	d811      	bhi.n	80010f2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80010ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	68cf      	ldr	r7, [r1, #12]
 80010d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80010da:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80010de:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010e0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e2:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010e6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80010ea:	409f      	lsls	r7, r3
 80010ec:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80010f0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010f2:	f1ba 0f03 	cmp.w	sl, #3
 80010f6:	d107      	bne.n	8001108 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80010f8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010fa:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010fe:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001102:	409f      	lsls	r7, r3
 8001104:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001106:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001108:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800110a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800110c:	688e      	ldr	r6, [r1, #8]
 800110e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001112:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001114:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001116:	00d5      	lsls	r5, r2, #3
 8001118:	d559      	bpl.n	80011ce <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800111e:	f045 0501 	orr.w	r5, r5, #1
 8001122:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001126:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800112a:	f023 0603 	bic.w	r6, r3, #3
 800112e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001132:	f005 0501 	and.w	r5, r5, #1
 8001136:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800113a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800113c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001142:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001144:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001148:	270f      	movs	r7, #15
 800114a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001152:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001156:	d03c      	beq.n	80011d2 <HAL_GPIO_Init+0x192>
 8001158:	4d25      	ldr	r5, [pc, #148]	; (80011f0 <HAL_GPIO_Init+0x1b0>)
 800115a:	42a8      	cmp	r0, r5
 800115c:	d03b      	beq.n	80011d6 <HAL_GPIO_Init+0x196>
 800115e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001162:	42a8      	cmp	r0, r5
 8001164:	d039      	beq.n	80011da <HAL_GPIO_Init+0x19a>
 8001166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800116a:	42a8      	cmp	r0, r5
 800116c:	d037      	beq.n	80011de <HAL_GPIO_Init+0x19e>
 800116e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001172:	42a8      	cmp	r0, r5
 8001174:	d035      	beq.n	80011e2 <HAL_GPIO_Init+0x1a2>
 8001176:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800117a:	42a8      	cmp	r0, r5
 800117c:	d033      	beq.n	80011e6 <HAL_GPIO_Init+0x1a6>
 800117e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001182:	42a8      	cmp	r0, r5
 8001184:	bf14      	ite	ne
 8001186:	2507      	movne	r5, #7
 8001188:	2506      	moveq	r5, #6
 800118a:	fa05 f50c 	lsl.w	r5, r5, ip
 800118e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001190:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001192:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001194:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800119a:	bf54      	ite	pl
 800119c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800119e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80011a2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80011a4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80011a8:	bf54      	ite	pl
 80011aa:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80011ac:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80011b0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80011b2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80011b6:	bf54      	ite	pl
 80011b8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80011ba:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80011be:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80011c0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80011c4:	bf54      	ite	pl
 80011c6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80011c8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80011cc:	60e5      	str	r5, [r4, #12]
    position++;
 80011ce:	3301      	adds	r3, #1
 80011d0:	e73f      	b.n	8001052 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d2:	2500      	movs	r5, #0
 80011d4:	e7d9      	b.n	800118a <HAL_GPIO_Init+0x14a>
 80011d6:	2501      	movs	r5, #1
 80011d8:	e7d7      	b.n	800118a <HAL_GPIO_Init+0x14a>
 80011da:	2502      	movs	r5, #2
 80011dc:	e7d5      	b.n	800118a <HAL_GPIO_Init+0x14a>
 80011de:	2503      	movs	r5, #3
 80011e0:	e7d3      	b.n	800118a <HAL_GPIO_Init+0x14a>
 80011e2:	2504      	movs	r5, #4
 80011e4:	e7d1      	b.n	800118a <HAL_GPIO_Init+0x14a>
 80011e6:	2505      	movs	r5, #5
 80011e8:	e7cf      	b.n	800118a <HAL_GPIO_Init+0x14a>
 80011ea:	bf00      	nop
 80011ec:	40010400 	.word	0x40010400
 80011f0:	48000400 	.word	0x48000400
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	b10a      	cbz	r2, 80011fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	6181      	str	r1, [r0, #24]
 80011fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	6281      	str	r1, [r0, #40]	; 0x28
 8001200:	4770      	bx	lr

08001202 <HAL_LCD_Write>:
  * @param  RAMRegisterMask: specifies the LCD RAM Register Data Mask.
  * @param  Data: specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8001202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001206:	461d      	mov	r5, r3
  uint32_t tickstart = 0x00;

  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8001208:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800120c:	2b01      	cmp	r3, #1
{
 800120e:	4604      	mov	r4, r0
 8001210:	460f      	mov	r7, r1
 8001212:	4616      	mov	r6, r2
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8001214:	d003      	beq.n	800121e <HAL_LCD_Write+0x1c>
 8001216:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800121a:	2b02      	cmp	r3, #2
 800121c:	d12e      	bne.n	800127c <HAL_LCD_Write+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if(hlcd->State == HAL_LCD_STATE_READY)
 800121e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d009      	beq.n	800123c <HAL_LCD_Write+0x3a>
 8001228:	6821      	ldr	r1, [r4, #0]
 800122a:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);

    return HAL_OK;
 800122e:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8001230:	694b      	ldr	r3, [r1, #20]
 8001232:	4033      	ands	r3, r6
 8001234:	432b      	orrs	r3, r5
 8001236:	614b      	str	r3, [r1, #20]
    return HAL_OK;
 8001238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_LOCK(hlcd);
 800123c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001240:	2a01      	cmp	r2, #1
 8001242:	f04f 0002 	mov.w	r0, #2
 8001246:	d01a      	beq.n	800127e <HAL_LCD_Write+0x7c>
 8001248:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 800124c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      tickstart = HAL_GetTick();
 8001250:	f7ff fdce 	bl	8000df0 <HAL_GetTick>
 8001254:	4680      	mov	r8, r0
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	075b      	lsls	r3, r3, #29
 800125c:	d5e4      	bpl.n	8001228 <HAL_LCD_Write+0x26>
        if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800125e:	f7ff fdc7 	bl	8000df0 <HAL_GetTick>
 8001262:	eba0 0008 	sub.w	r0, r0, r8
 8001266:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800126a:	d9f4      	bls.n	8001256 <HAL_LCD_Write+0x54>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800126c:	2302      	movs	r3, #2
 800126e:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hlcd);
 8001270:	2300      	movs	r3, #0
 8001272:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8001276:	2003      	movs	r0, #3
 8001278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    return HAL_ERROR;
 800127c:	2001      	movs	r0, #1
  }
}
 800127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001282 <HAL_LCD_UpdateDisplayRequest>:
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
  uint32_t tickstart = 0x00;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001282:	6803      	ldr	r3, [r0, #0]
 8001284:	2208      	movs	r2, #8
{
 8001286:	b570      	push	{r4, r5, r6, lr}
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001288:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	f042 0204 	orr.w	r2, r2, #4
 8001290:	609a      	str	r2, [r3, #8]
{
 8001292:	4604      	mov	r4, r0

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001294:	f7ff fdac 	bl	8000df0 <HAL_GetTick>
 8001298:	4606      	mov	r6, r0

  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	689d      	ldr	r5, [r3, #8]
 800129e:	f015 0508 	ands.w	r5, r5, #8
 80012a2:	d006      	beq.n	80012b2 <HAL_LCD_UpdateDisplayRequest+0x30>

      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 80012a4:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 80012a6:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 80012a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hlcd);
 80012ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

  return HAL_OK;
}
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 80012b2:	f7ff fd9d 	bl	8000df0 <HAL_GetTick>
 80012b6:	1b80      	subs	r0, r0, r6
 80012b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012bc:	d9ed      	bls.n	800129a <HAL_LCD_UpdateDisplayRequest+0x18>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80012be:	2304      	movs	r3, #4
 80012c0:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hlcd);
 80012c2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80012c6:	2003      	movs	r0, #3
 80012c8:	bd70      	pop	{r4, r5, r6, pc}

080012ca <HAL_LCD_Clear>:
{
 80012ca:	b538      	push	{r3, r4, r5, lr}
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80012cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80012d0:	2b01      	cmp	r3, #1
{
 80012d2:	4604      	mov	r4, r0
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80012d4:	d003      	beq.n	80012de <HAL_LCD_Clear+0x14>
 80012d6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d12c      	bne.n	8001338 <HAL_LCD_Clear+0x6e>
    __HAL_LOCK(hlcd);
 80012de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	f04f 0002 	mov.w	r0, #2
 80012e8:	d027      	beq.n	800133a <HAL_LCD_Clear+0x70>
 80012ea:	2301      	movs	r3, #1
 80012ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hlcd->State = HAL_LCD_STATE_BUSY;
 80012f0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    tickstart = HAL_GetTick();
 80012f4:	f7ff fd7c 	bl	8000df0 <HAL_GetTick>
 80012f8:	4605      	mov	r5, r0
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80012fa:	6821      	ldr	r1, [r4, #0]
 80012fc:	688b      	ldr	r3, [r1, #8]
 80012fe:	f013 0304 	ands.w	r3, r3, #4
 8001302:	d10c      	bne.n	800131e <HAL_LCD_Clear+0x54>
      hlcd->Instance->RAM[counter] = 0;
 8001304:	4618      	mov	r0, r3
 8001306:	1d1a      	adds	r2, r3, #4
 8001308:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800130c:	3301      	adds	r3, #1
 800130e:	2b10      	cmp	r3, #16
      hlcd->Instance->RAM[counter] = 0;
 8001310:	6050      	str	r0, [r2, #4]
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001312:	d1f8      	bne.n	8001306 <HAL_LCD_Clear+0x3c>
    HAL_LCD_UpdateDisplayRequest(hlcd);
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff ffb4 	bl	8001282 <HAL_LCD_UpdateDisplayRequest>
    return HAL_OK;
 800131a:	2000      	movs	r0, #0
 800131c:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800131e:	f7ff fd67 	bl	8000df0 <HAL_GetTick>
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001328:	d9e7      	bls.n	80012fa <HAL_LCD_Clear+0x30>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800132a:	2302      	movs	r3, #2
 800132c:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hlcd);
 800132e:	2300      	movs	r3, #0
 8001330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
 8001336:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001338:	2001      	movs	r0, #1
}
 800133a:	bd38      	pop	{r3, r4, r5, pc}

0800133c <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4604      	mov	r4, r0
  uint32_t tickstart = 0x00;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001340:	f7ff fd56 	bl	8000df0 <HAL_GetTick>
 8001344:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	069b      	lsls	r3, r3, #26
 800134c:	d501      	bpl.n	8001352 <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800134e:	2000      	movs	r0, #0
}
 8001350:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001352:	f7ff fd4d 	bl	8000df0 <HAL_GetTick>
 8001356:	1b40      	subs	r0, r0, r5
 8001358:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800135c:	d9f3      	bls.n	8001346 <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800135e:	2301      	movs	r3, #1
 8001360:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8001362:	2003      	movs	r0, #3
 8001364:	bd38      	pop	{r3, r4, r5, pc}

08001366 <HAL_LCD_Init>:
{
 8001366:	b538      	push	{r3, r4, r5, lr}
  if(hlcd == NULL)
 8001368:	4604      	mov	r4, r0
 800136a:	2800      	cmp	r0, #0
 800136c:	d071      	beq.n	8001452 <HAL_LCD_Init+0xec>
  if(hlcd->State == HAL_LCD_STATE_RESET)
 800136e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001376:	b91b      	cbnz	r3, 8001380 <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 8001378:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 800137c:	f7ff fb76 	bl	8000a6c <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001380:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 8001382:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001384:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 8001388:	6813      	ldr	r3, [r2, #0]
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001390:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 8001392:	4618      	mov	r0, r3
 8001394:	1d19      	adds	r1, r3, #4
 8001396:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800139a:	3301      	adds	r3, #1
 800139c:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 800139e:	6048      	str	r0, [r1, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80013a0:	d1f8      	bne.n	8001394 <HAL_LCD_Init+0x2e>
  hlcd->Instance->SR |= LCD_SR_UDR;
 80013a2:	6893      	ldr	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 80013a4:	68a0      	ldr	r0, [r4, #8]
  hlcd->Instance->SR |= LCD_SR_UDR;
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6093      	str	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	6851      	ldr	r1, [r2, #4]
 80013b0:	4303      	orrs	r3, r0
 80013b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013b4:	4303      	orrs	r3, r0
 80013b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80013b8:	4303      	orrs	r3, r0
 80013ba:	69e0      	ldr	r0, [r4, #28]
 80013bc:	4303      	orrs	r3, r0
 80013be:	6a20      	ldr	r0, [r4, #32]
 80013c0:	4303      	orrs	r3, r0
 80013c2:	69a0      	ldr	r0, [r4, #24]
 80013c4:	f021 717f 	bic.w	r1, r1, #66846720	; 0x3fc0000
 80013c8:	4303      	orrs	r3, r0
 80013ca:	f421 317f 	bic.w	r1, r1, #261120	; 0x3fc00
 80013ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013d0:	f421 717c 	bic.w	r1, r1, #1008	; 0x3f0
 80013d4:	f021 0101 	bic.w	r1, r1, #1
 80013d8:	4303      	orrs	r3, r0
 80013da:	430b      	orrs	r3, r1
 80013dc:	6053      	str	r3, [r2, #4]
  LCD_WaitForSynchro(hlcd);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ffac 	bl	800133c <LCD_WaitForSynchro>
  MODIFY_REG(hlcd->Instance->CR, \
 80013e4:	6920      	ldr	r0, [r4, #16]
 80013e6:	68e3      	ldr	r3, [r4, #12]
 80013e8:	6822      	ldr	r2, [r4, #0]
 80013ea:	4303      	orrs	r3, r0
 80013ec:	6960      	ldr	r0, [r4, #20]
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	4303      	orrs	r3, r0
 80013f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80013f4:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 80013f8:	4303      	orrs	r3, r0
 80013fa:	430b      	orrs	r3, r1
 80013fc:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001406:	f7ff fcf3 	bl	8000df0 <HAL_GetTick>
 800140a:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	07da      	lsls	r2, r3, #31
 8001412:	d50c      	bpl.n	800142e <HAL_LCD_Init+0xc8>
  tickstart = HAL_GetTick();
 8001414:	f7ff fcec 	bl	8000df0 <HAL_GetTick>
 8001418:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	06db      	lsls	r3, r3, #27
 8001420:	d50f      	bpl.n	8001442 <HAL_LCD_Init+0xdc>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001422:	2000      	movs	r0, #0
  hlcd->State= HAL_LCD_STATE_READY;
 8001424:	2301      	movs	r3, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001426:	63a0      	str	r0, [r4, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8001428:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800142c:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 800142e:	f7ff fcdf 	bl	8000df0 <HAL_GetTick>
 8001432:	1b40      	subs	r0, r0, r5
 8001434:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001438:	d9e8      	bls.n	800140c <HAL_LCD_Init+0xa6>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800143a:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800143c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
 8001440:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001442:	f7ff fcd5 	bl	8000df0 <HAL_GetTick>
 8001446:	1b40      	subs	r0, r0, r5
 8001448:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800144c:	d9e5      	bls.n	800141a <HAL_LCD_Init+0xb4>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800144e:	2310      	movs	r3, #16
 8001450:	e7f4      	b.n	800143c <HAL_LCD_Init+0xd6>
    return HAL_ERROR;
 8001452:	2001      	movs	r0, #1
}
 8001454:	bd38      	pop	{r3, r4, r5, pc}
	...

08001458 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_PWREx_GetVoltageRange+0xc>)
 800145a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800145c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40007000 	.word	0x40007000

08001468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800146a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800146c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001470:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001474:	d11c      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001476:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800147a:	d015      	beq.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001486:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x64>)
 800148a:	6811      	ldr	r1, [r2, #0]
 800148c:	2232      	movs	r2, #50	; 0x32
 800148e:	434a      	muls	r2, r1
 8001490:	490f      	ldr	r1, [pc, #60]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001492:	fbb2 f2f1 	udiv	r2, r2, r1
 8001496:	4619      	mov	r1, r3
 8001498:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149a:	6958      	ldr	r0, [r3, #20]
 800149c:	0540      	lsls	r0, r0, #21
 800149e:	d500      	bpl.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80014a0:	b922      	cbnz	r2, 80014ac <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a2:	694b      	ldr	r3, [r1, #20]
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	d40d      	bmi.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
 80014aa:	4770      	bx	lr
        wait_loop_index--;
 80014ac:	3a01      	subs	r2, #1
 80014ae:	e7f4      	b.n	800149a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b4:	bf1f      	itttt	ne
 80014b6:	681a      	ldrne	r2, [r3, #0]
 80014b8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80014bc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80014c0:	601a      	strne	r2, [r3, #0]
 80014c2:	e7f1      	b.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80014c4:	2003      	movs	r0, #3
}
 80014c6:	4770      	bx	lr
 80014c8:	40007000 	.word	0x40007000
 80014cc:	20000000 	.word	0x20000000
 80014d0:	000f4240 	.word	0x000f4240

080014d4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80014d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d8:	9d06      	ldr	r5, [sp, #24]
 80014da:	4604      	mov	r4, r0
 80014dc:	460f      	mov	r7, r1
 80014de:	4616      	mov	r6, r2
 80014e0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80014e2:	6821      	ldr	r1, [r4, #0]
 80014e4:	688a      	ldr	r2, [r1, #8]
 80014e6:	423a      	tst	r2, r7
 80014e8:	bf14      	ite	ne
 80014ea:	2201      	movne	r2, #1
 80014ec:	2200      	moveq	r2, #0
 80014ee:	42b2      	cmp	r2, r6
 80014f0:	d102      	bne.n	80014f8 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80014f2:	2000      	movs	r0, #0
}
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80014f8:	1c6b      	adds	r3, r5, #1
 80014fa:	d0f3      	beq.n	80014e4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fc:	f7ff fc78 	bl	8000df0 <HAL_GetTick>
 8001500:	eba0 0008 	sub.w	r0, r0, r8
 8001504:	4285      	cmp	r5, r0
 8001506:	d301      	bcc.n	800150c <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001508:	2d00      	cmp	r5, #0
 800150a:	d1ea      	bne.n	80014e2 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800150c:	2304      	movs	r3, #4
 800150e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001512:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	63e3      	str	r3, [r4, #60]	; 0x3c
 800151a:	2001      	movs	r0, #1
 800151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001520 <HAL_QSPI_Init>:
{
 8001520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fc64 	bl	8000df0 <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800152a:	2c00      	cmp	r4, #0
 800152c:	d049      	beq.n	80015c2 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 800152e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001532:	2b01      	cmp	r3, #1
 8001534:	d047      	beq.n	80015c6 <HAL_QSPI_Init+0xa6>
 8001536:	2301      	movs	r3, #1
 8001538:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800153c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001540:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001544:	b93a      	cbnz	r2, 8001556 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001546:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fb02 	bl	8000b54 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001550:	f241 3388 	movw	r3, #5000	; 0x1388
 8001554:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001556:	6820      	ldr	r0, [r4, #0]
 8001558:	68a1      	ldr	r1, [r4, #8]
 800155a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800155c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800155e:	3901      	subs	r1, #1
 8001560:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001564:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001568:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800156a:	2120      	movs	r1, #32
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	462b      	mov	r3, r5
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff ffae 	bl	80014d4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001578:	b9f0      	cbnz	r0, 80015b8 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6865      	ldr	r5, [r4, #4]
 800157e:	6811      	ldr	r1, [r2, #0]
 8001580:	68e3      	ldr	r3, [r4, #12]
 8001582:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001586:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800158a:	f021 0110 	bic.w	r1, r1, #16
 800158e:	430b      	orrs	r3, r1
 8001590:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001592:	69a1      	ldr	r1, [r4, #24]
 8001594:	6963      	ldr	r3, [r4, #20]
 8001596:	6855      	ldr	r5, [r2, #4]
 8001598:	430b      	orrs	r3, r1
 800159a:	6921      	ldr	r1, [r4, #16]
 800159c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80015a0:	490a      	ldr	r1, [pc, #40]	; (80015cc <HAL_QSPI_Init+0xac>)
 80015a2:	4029      	ands	r1, r5
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80015b0:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80015b2:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 80015b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80015b8:	2300      	movs	r3, #0
 80015ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80015be:	b003      	add	sp, #12
 80015c0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80015c2:	2001      	movs	r0, #1
 80015c4:	e7fb      	b.n	80015be <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 80015c6:	2002      	movs	r0, #2
 80015c8:	e7f9      	b.n	80015be <HAL_QSPI_Init+0x9e>
 80015ca:	bf00      	nop
 80015cc:	ffe0f8fe 	.word	0xffe0f8fe

080015d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015d2:	4d1e      	ldr	r5, [pc, #120]	; (800164c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80015d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80015d6:	00da      	lsls	r2, r3, #3
{
 80015d8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015da:	d518      	bpl.n	800160e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015dc:	f7ff ff3c 	bl	8001458 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80015e4:	d123      	bne.n	800162e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80015e6:	2c80      	cmp	r4, #128	; 0x80
 80015e8:	d929      	bls.n	800163e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80015ea:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80015ec:	bf8c      	ite	hi
 80015ee:	2002      	movhi	r0, #2
 80015f0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	f023 0307 	bic.w	r3, r3, #7
 80015fa:	4303      	orrs	r3, r0
 80015fc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001604:	1a18      	subs	r0, r3, r0
 8001606:	bf18      	it	ne
 8001608:	2001      	movne	r0, #1
 800160a:	b003      	add	sp, #12
 800160c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	65ab      	str	r3, [r5, #88]	; 0x58
 8001616:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001620:	f7ff ff1a 	bl	8001458 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162a:	65ab      	str	r3, [r5, #88]	; 0x58
 800162c:	e7d8      	b.n	80015e0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800162e:	2c80      	cmp	r4, #128	; 0x80
 8001630:	d807      	bhi.n	8001642 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001632:	d008      	beq.n	8001646 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001634:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001638:	4258      	negs	r0, r3
 800163a:	4158      	adcs	r0, r3
 800163c:	e7d9      	b.n	80015f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800163e:	2000      	movs	r0, #0
 8001640:	e7d7      	b.n	80015f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001642:	2003      	movs	r0, #3
 8001644:	e7d5      	b.n	80015f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001646:	2002      	movs	r0, #2
 8001648:	e7d3      	b.n	80015f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001656:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001658:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800165a:	f012 020c 	ands.w	r2, r2, #12
 800165e:	d005      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x18>
 8001660:	2a0c      	cmp	r2, #12
 8001662:	d115      	bne.n	8001690 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001664:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001668:	2901      	cmp	r1, #1
 800166a:	d118      	bne.n	800169e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800166c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800166e:	4820      	ldr	r0, [pc, #128]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001670:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001672:	bf55      	itete	pl
 8001674:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001678:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800167a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800167e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001682:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001686:	b382      	cbz	r2, 80016ea <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001688:	2a0c      	cmp	r2, #12
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x4c>
 800168c:	2000      	movs	r0, #0
  return sysclockfreq;
 800168e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001690:	2a04      	cmp	r2, #4
 8001692:	d029      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x94>
 8001694:	2a08      	cmp	r2, #8
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001698:	bf18      	it	ne
 800169a:	2000      	movne	r0, #0
 800169c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800169e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016a0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016a2:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016a4:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016a8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80016ac:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016ae:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x6c>
 80016b4:	2903      	cmp	r1, #3
 80016b6:	d012      	beq.n	80016de <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80016be:	e003      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016c0:	68d9      	ldr	r1, [r3, #12]
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016c4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016c8:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016ca:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016ce:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80016d2:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016d4:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016d6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80016d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80016dc:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016de:	68d9      	ldr	r1, [r3, #12]
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016e2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80016e6:	e7ef      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08003170 	.word	0x08003170
 80016f4:	007a1200 	.word	0x007a1200
 80016f8:	00f42400 	.word	0x00f42400

080016fc <HAL_RCC_OscConfig>:
{
 80016fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001700:	4605      	mov	r5, r0
 8001702:	b918      	cbnz	r0, 800170c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
}
 8001706:	b003      	add	sp, #12
 8001708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170c:	4ca5      	ldr	r4, [pc, #660]	; (80019a4 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001710:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001712:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001714:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001716:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800171e:	d53c      	bpl.n	800179a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001720:	b11e      	cbz	r6, 800172a <HAL_RCC_OscConfig+0x2e>
 8001722:	2e0c      	cmp	r6, #12
 8001724:	d163      	bne.n	80017ee <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001726:	2f01      	cmp	r7, #1
 8001728:	d161      	bne.n	80017ee <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	0798      	lsls	r0, r3, #30
 800172e:	d502      	bpl.n	8001736 <HAL_RCC_OscConfig+0x3a>
 8001730:	69ab      	ldr	r3, [r5, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0e6      	beq.n	8001704 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	6a28      	ldr	r0, [r5, #32]
 800173a:	0719      	lsls	r1, r3, #28
 800173c:	bf56      	itet	pl
 800173e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001742:	6823      	ldrmi	r3, [r4, #0]
 8001744:	091b      	lsrpl	r3, r3, #4
 8001746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174a:	4283      	cmp	r3, r0
 800174c:	d23a      	bcs.n	80017c4 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174e:	f7ff ff3f 	bl	80015d0 <RCC_SetFlashLatencyFromMSIRange>
 8001752:	2800      	cmp	r0, #0
 8001754:	d1d6      	bne.n	8001704 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	6a2a      	ldr	r2, [r5, #32]
 8001762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001766:	4313      	orrs	r3, r2
 8001768:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176a:	6863      	ldr	r3, [r4, #4]
 800176c:	69ea      	ldr	r2, [r5, #28]
 800176e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001772:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001776:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001778:	f7ff ff6c 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 800177c:	68a3      	ldr	r3, [r4, #8]
 800177e:	4a8a      	ldr	r2, [pc, #552]	; (80019a8 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	40d8      	lsrs	r0, r3
 800178c:	4b87      	ldr	r3, [pc, #540]	; (80019ac <HAL_RCC_OscConfig+0x2b0>)
 800178e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff faf7 	bl	8000d84 <HAL_InitTick>
        if(status != HAL_OK)
 8001796:	2800      	cmp	r0, #0
 8001798:	d1b5      	bne.n	8001706 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	07d8      	lsls	r0, r3, #31
 800179e:	d45d      	bmi.n	800185c <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	0799      	lsls	r1, r3, #30
 80017a4:	f100 809c 	bmi.w	80018e0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a8:	682b      	ldr	r3, [r5, #0]
 80017aa:	0718      	lsls	r0, r3, #28
 80017ac:	f100 80d0 	bmi.w	8001950 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	0759      	lsls	r1, r3, #29
 80017b4:	f100 80fc 	bmi.w	80019b0 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 8165 	bne.w	8001a8a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80017c0:	2000      	movs	r0, #0
 80017c2:	e7a0      	b.n	8001706 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017d2:	4303      	orrs	r3, r0
 80017d4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	69ea      	ldr	r2, [r5, #28]
 80017da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017e2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e4:	f7ff fef4 	bl	80015d0 <RCC_SetFlashLatencyFromMSIRange>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d0c5      	beq.n	8001778 <HAL_RCC_OscConfig+0x7c>
 80017ec:	e78a      	b.n	8001704 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ee:	69ab      	ldr	r3, [r5, #24]
 80017f0:	b31b      	cbz	r3, 800183a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017fa:	f7ff faf9 	bl	8000df0 <HAL_GetTick>
 80017fe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	079a      	lsls	r2, r3, #30
 8001804:	d511      	bpl.n	800182a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6023      	str	r3, [r4, #0]
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	6a2a      	ldr	r2, [r5, #32]
 8001812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001816:	4313      	orrs	r3, r2
 8001818:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181a:	6863      	ldr	r3, [r4, #4]
 800181c:	69ea      	ldr	r2, [r5, #28]
 800181e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001826:	6063      	str	r3, [r4, #4]
 8001828:	e7b7      	b.n	800179a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182a:	f7ff fae1 	bl	8000df0 <HAL_GetTick>
 800182e:	eba0 0008 	sub.w	r0, r0, r8
 8001832:	2802      	cmp	r0, #2
 8001834:	d9e4      	bls.n	8001800 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001836:	2003      	movs	r0, #3
 8001838:	e765      	b.n	8001706 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001842:	f7ff fad5 	bl	8000df0 <HAL_GetTick>
 8001846:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	079b      	lsls	r3, r3, #30
 800184c:	d5a5      	bpl.n	800179a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184e:	f7ff facf 	bl	8000df0 <HAL_GetTick>
 8001852:	eba0 0008 	sub.w	r0, r0, r8
 8001856:	2802      	cmp	r0, #2
 8001858:	d9f6      	bls.n	8001848 <HAL_RCC_OscConfig+0x14c>
 800185a:	e7ec      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800185c:	2e08      	cmp	r6, #8
 800185e:	d003      	beq.n	8001868 <HAL_RCC_OscConfig+0x16c>
 8001860:	2e0c      	cmp	r6, #12
 8001862:	d108      	bne.n	8001876 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001864:	2f03      	cmp	r7, #3
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	039a      	lsls	r2, r3, #14
 800186c:	d598      	bpl.n	80017a0 <HAL_RCC_OscConfig+0xa4>
 800186e:	686b      	ldr	r3, [r5, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d195      	bne.n	80017a0 <HAL_RCC_OscConfig+0xa4>
 8001874:	e746      	b.n	8001704 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	686b      	ldr	r3, [r5, #4]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d110      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1a4>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001886:	f7ff fab3 	bl	8000df0 <HAL_GetTick>
 800188a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	039b      	lsls	r3, r3, #14
 8001890:	d486      	bmi.n	80017a0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001892:	f7ff faad 	bl	8000df0 <HAL_GetTick>
 8001896:	eba0 0008 	sub.w	r0, r0, r8
 800189a:	2864      	cmp	r0, #100	; 0x64
 800189c:	d9f6      	bls.n	800188c <HAL_RCC_OscConfig+0x190>
 800189e:	e7ca      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d104      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	e7e6      	b.n	800187e <HAL_RCC_OscConfig+0x182>
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018b6:	6022      	str	r2, [r4, #0]
 80018b8:	6822      	ldr	r2, [r4, #0]
 80018ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018be:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e0      	bne.n	8001886 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa94 	bl	8000df0 <HAL_GetTick>
 80018c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	0398      	lsls	r0, r3, #14
 80018ce:	f57f af67 	bpl.w	80017a0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff fa8d 	bl	8000df0 <HAL_GetTick>
 80018d6:	eba0 0008 	sub.w	r0, r0, r8
 80018da:	2864      	cmp	r0, #100	; 0x64
 80018dc:	d9f5      	bls.n	80018ca <HAL_RCC_OscConfig+0x1ce>
 80018de:	e7aa      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018e0:	2e04      	cmp	r6, #4
 80018e2:	d003      	beq.n	80018ec <HAL_RCC_OscConfig+0x1f0>
 80018e4:	2e0c      	cmp	r6, #12
 80018e6:	d110      	bne.n	800190a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80018e8:	2f02      	cmp	r7, #2
 80018ea:	d10e      	bne.n	800190a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	0559      	lsls	r1, r3, #21
 80018f0:	d503      	bpl.n	80018fa <HAL_RCC_OscConfig+0x1fe>
 80018f2:	68eb      	ldr	r3, [r5, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f43f af05 	beq.w	8001704 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	6863      	ldr	r3, [r4, #4]
 80018fc:	692a      	ldr	r2, [r5, #16]
 80018fe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001902:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001906:	6063      	str	r3, [r4, #4]
 8001908:	e74e      	b.n	80017a8 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190a:	68eb      	ldr	r3, [r5, #12]
 800190c:	b17b      	cbz	r3, 800192e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001916:	f7ff fa6b 	bl	8000df0 <HAL_GetTick>
 800191a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	055a      	lsls	r2, r3, #21
 8001920:	d4eb      	bmi.n	80018fa <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fa65 	bl	8000df0 <HAL_GetTick>
 8001926:	1bc0      	subs	r0, r0, r7
 8001928:	2802      	cmp	r0, #2
 800192a:	d9f7      	bls.n	800191c <HAL_RCC_OscConfig+0x220>
 800192c:	e783      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001934:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001936:	f7ff fa5b 	bl	8000df0 <HAL_GetTick>
 800193a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	f57f af32 	bpl.w	80017a8 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fa54 	bl	8000df0 <HAL_GetTick>
 8001948:	1bc0      	subs	r0, r0, r7
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x240>
 800194e:	e772      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001950:	696b      	ldr	r3, [r5, #20]
 8001952:	b19b      	cbz	r3, 800197c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001954:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001960:	f7ff fa46 	bl	8000df0 <HAL_GetTick>
 8001964:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001966:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800196a:	079a      	lsls	r2, r3, #30
 800196c:	f53f af20 	bmi.w	80017b0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fa3e 	bl	8000df0 <HAL_GetTick>
 8001974:	1bc0      	subs	r0, r0, r7
 8001976:	2802      	cmp	r0, #2
 8001978:	d9f5      	bls.n	8001966 <HAL_RCC_OscConfig+0x26a>
 800197a:	e75c      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 800197c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001988:	f7ff fa32 	bl	8000df0 <HAL_GetTick>
 800198c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001992:	079b      	lsls	r3, r3, #30
 8001994:	f57f af0c 	bpl.w	80017b0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fa2a 	bl	8000df0 <HAL_GetTick>
 800199c:	1bc0      	subs	r0, r0, r7
 800199e:	2802      	cmp	r0, #2
 80019a0:	d9f5      	bls.n	800198e <HAL_RCC_OscConfig+0x292>
 80019a2:	e748      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08003158 	.word	0x08003158
 80019ac:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019b2:	00d8      	lsls	r0, r3, #3
 80019b4:	d429      	bmi.n	8001a0a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80019be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019c8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4f5d      	ldr	r7, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x448>)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	05d9      	lsls	r1, r3, #23
 80019d2:	d51d      	bpl.n	8001a10 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	68ab      	ldr	r3, [r5, #8]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d12b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x336>
 80019da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa03 	bl	8000df0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019ee:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019f4:	079b      	lsls	r3, r3, #30
 80019f6:	d542      	bpl.n	8001a7e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 80019f8:	f1b8 0f00 	cmp.w	r8, #0
 80019fc:	f43f aedc 	beq.w	80017b8 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a06:	65a3      	str	r3, [r4, #88]	; 0x58
 8001a08:	e6d6      	b.n	80017b8 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	f04f 0800 	mov.w	r8, #0
 8001a0e:	e7dd      	b.n	80019cc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001a18:	f7ff f9ea 	bl	8000df0 <HAL_GetTick>
 8001a1c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	05da      	lsls	r2, r3, #23
 8001a22:	d4d7      	bmi.n	80019d4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7ff f9e4 	bl	8000df0 <HAL_GetTick>
 8001a28:	eba0 0009 	sub.w	r0, r0, r9
 8001a2c:	2802      	cmp	r0, #2
 8001a2e:	d9f6      	bls.n	8001a1e <HAL_RCC_OscConfig+0x322>
 8001a30:	e701      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x348>
 8001a36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001a42:	e7ca      	b.n	80019da <HAL_RCC_OscConfig+0x2de>
 8001a44:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001a50:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001a54:	f022 0204 	bic.w	r2, r2, #4
 8001a58:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1c2      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8001a60:	f7ff f9c6 	bl	8000df0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a68:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001a6e:	0798      	lsls	r0, r3, #30
 8001a70:	d5c2      	bpl.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f9bd 	bl	8000df0 <HAL_GetTick>
 8001a76:	1bc0      	subs	r0, r0, r7
 8001a78:	4548      	cmp	r0, r9
 8001a7a:	d9f6      	bls.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a7c:	e6db      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f9b7 	bl	8000df0 <HAL_GetTick>
 8001a82:	1bc0      	subs	r0, r0, r7
 8001a84:	4548      	cmp	r0, r9
 8001a86:	d9b3      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2f4>
 8001a88:	e6d5      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8a:	2e0c      	cmp	r6, #12
 8001a8c:	f43f ae3a 	beq.w	8001704 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a90:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a98:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9a:	d137      	bne.n	8001b0c <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9a8 	bl	8000df0 <HAL_GetTick>
 8001aa0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	0199      	lsls	r1, r3, #6
 8001aa6:	d42b      	bmi.n	8001b00 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001aaa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ab0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001ab2:	3a01      	subs	r2, #1
 8001ab4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001ab8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001aba:	0912      	lsrs	r2, r2, #4
 8001abc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001ac0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001ac2:	0852      	lsrs	r2, r2, #1
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001aca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001ad4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001adc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ade:	68e3      	ldr	r3, [r4, #12]
 8001ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f983 	bl	8000df0 <HAL_GetTick>
 8001aea:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	019a      	lsls	r2, r3, #6
 8001af0:	f53f ae66 	bmi.w	80017c0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f97c 	bl	8000df0 <HAL_GetTick>
 8001af8:	1b40      	subs	r0, r0, r5
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d9f6      	bls.n	8001aec <HAL_RCC_OscConfig+0x3f0>
 8001afe:	e69a      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f976 	bl	8000df0 <HAL_GetTick>
 8001b04:	1b80      	subs	r0, r0, r6
 8001b06:	2802      	cmp	r0, #2
 8001b08:	d9cb      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x3a6>
 8001b0a:	e694      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b12:	bf02      	ittt	eq
 8001b14:	68e3      	ldreq	r3, [r4, #12]
 8001b16:	f023 0303 	biceq.w	r3, r3, #3
 8001b1a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b1c:	68e3      	ldr	r3, [r4, #12]
 8001b1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001b28:	f7ff f962 	bl	8000df0 <HAL_GetTick>
 8001b2c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	f57f ae45 	bpl.w	80017c0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f95b 	bl	8000df0 <HAL_GetTick>
 8001b3a:	1b40      	subs	r0, r0, r5
 8001b3c:	2802      	cmp	r0, #2
 8001b3e:	d9f6      	bls.n	8001b2e <HAL_RCC_OscConfig+0x432>
 8001b40:	e679      	b.n	8001836 <HAL_RCC_OscConfig+0x13a>
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000

08001b48 <HAL_RCC_ClockConfig>:
{
 8001b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b4c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001b4e:	4604      	mov	r4, r0
 8001b50:	b910      	cbnz	r0, 8001b58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
 8001b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4a40      	ldr	r2, [pc, #256]	; (8001c5c <HAL_RCC_ClockConfig+0x114>)
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	428b      	cmp	r3, r1
 8001b62:	d329      	bcc.n	8001bb8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	07d9      	lsls	r1, r3, #31
 8001b68:	d431      	bmi.n	8001bce <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	6821      	ldr	r1, [r4, #0]
 8001b6c:	078a      	lsls	r2, r1, #30
 8001b6e:	d45b      	bmi.n	8001c28 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x114>)
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	429e      	cmp	r6, r3
 8001b7a:	d35d      	bcc.n	8001c38 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	f011 0f04 	tst.w	r1, #4
 8001b80:	4d37      	ldr	r5, [pc, #220]	; (8001c60 <HAL_RCC_ClockConfig+0x118>)
 8001b82:	d164      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	070b      	lsls	r3, r1, #28
 8001b86:	d506      	bpl.n	8001b96 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b88:	68ab      	ldr	r3, [r5, #8]
 8001b8a:	6922      	ldr	r2, [r4, #16]
 8001b8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b94:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b96:	f7ff fd5d 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001b9a:	68ab      	ldr	r3, [r5, #8]
 8001b9c:	4a31      	ldr	r2, [pc, #196]	; (8001c64 <HAL_RCC_ClockConfig+0x11c>)
 8001b9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	40d8      	lsrs	r0, r3
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_RCC_ClockConfig+0x120>)
 8001bb0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff b8e6 	b.w	8000d84 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	f023 0307 	bic.w	r3, r3, #7
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4299      	cmp	r1, r3
 8001bca:	d1c2      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xa>
 8001bcc:	e7ca      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	4d23      	ldr	r5, [pc, #140]	; (8001c60 <HAL_RCC_ClockConfig+0x118>)
 8001bd2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	d11b      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	d0b9      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bde:	68ab      	ldr	r3, [r5, #8]
 8001be0:	f023 0303 	bic.w	r3, r3, #3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001be8:	f7ff f902 	bl	8000df0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bf0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	68ab      	ldr	r3, [r5, #8]
 8001bf4:	6862      	ldr	r2, [r4, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bfe:	d0b4      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f8f6 	bl	8000df0 <HAL_GetTick>
 8001c04:	1bc0      	subs	r0, r0, r7
 8001c06:	4540      	cmp	r0, r8
 8001c08:	d9f3      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
}
 8001c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c10:	2a02      	cmp	r2, #2
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c18:	e7e0      	b.n	8001bdc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c1a:	b912      	cbnz	r2, 8001c22 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1c:	f013 0f02 	tst.w	r3, #2
 8001c20:	e7dc      	b.n	8001bdc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c22:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c26:	e7d9      	b.n	8001bdc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_RCC_ClockConfig+0x118>)
 8001c2a:	68a0      	ldr	r0, [r4, #8]
 8001c2c:	6893      	ldr	r3, [r2, #8]
 8001c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c32:	4303      	orrs	r3, r0
 8001c34:	6093      	str	r3, [r2, #8]
 8001c36:	e79b      	b.n	8001b70 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f023 0307 	bic.w	r3, r3, #7
 8001c3e:	4333      	orrs	r3, r6
 8001c40:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	6813      	ldr	r3, [r2, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	429e      	cmp	r6, r3
 8001c4a:	d182      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xa>
 8001c4c:	e796      	b.n	8001b7c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4e:	68ab      	ldr	r3, [r5, #8]
 8001c50:	68e2      	ldr	r2, [r4, #12]
 8001c52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60ab      	str	r3, [r5, #8]
 8001c5a:	e793      	b.n	8001b84 <HAL_RCC_ClockConfig+0x3c>
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003158 	.word	0x08003158
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c6e:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7a:	6810      	ldr	r0, [r2, #0]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
}
 8001c80:	40d8      	lsrs	r0, r3
 8001c82:	4770      	bx	lr
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08003168 	.word	0x08003168
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c9e:	6810      	ldr	r0, [r2, #0]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
}
 8001ca4:	40d8      	lsrs	r0, r3
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08003168 	.word	0x08003168
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8001cb4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <RCCEx_GetSAIxPeriphCLKFreq+0xb8>)
 8001cba:	d108      	bne.n	8001cce <RCCEx_GetSAIxPeriphCLKFreq+0x1a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8001cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cc0:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8001cc4:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001cc8:	d14c      	bne.n	8001d64 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
 8001cca:	4829      	ldr	r0, [pc, #164]	; (8001d70 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>)
 8001ccc:	4770      	bx	lr
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8001cce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001cd2:	d121      	bne.n	8001d18 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8001cd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cd8:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8001cdc:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8001ce0:	d0f3      	beq.n	8001cca <RCCEx_GetSAIxPeriphCLKFreq+0x16>
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8001ce2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001ce6:	d116      	bne.n	8001d16 <RCCEx_GetSAIxPeriphCLKFreq+0x62>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8001ce8:	68d8      	ldr	r0, [r3, #12]
 8001cea:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001cee:	d03c      	beq.n	8001d6a <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8001cf0:	68d8      	ldr	r0, [r3, #12]
 8001cf2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	fbb1 f1f0 	udiv	r1, r1, r0
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001cfc:	68d8      	ldr	r0, [r3, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8001cfe:	68db      	ldr	r3, [r3, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8001d00:	f3c0 2006 	ubfx	r0, r0, #8, #7
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 8001d04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d08:	bf14      	ite	ne
 8001d0a:	2311      	movne	r3, #17
 8001d0c:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8001d0e:	4348      	muls	r0, r1
 8001d10:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d14:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8001d16:	b972      	cbnz	r2, 8001d36 <RCCEx_GetSAIxPeriphCLKFreq+0x82>
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8001d18:	6918      	ldr	r0, [r3, #16]
 8001d1a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001d1e:	d024      	beq.n	8001d6a <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8001d20:	68d8      	ldr	r0, [r3, #12]
 8001d22:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001d26:	3001      	adds	r0, #1
 8001d28:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8001d2c:	6918      	ldr	r0, [r3, #16]
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8001d2e:	691b      	ldr	r3, [r3, #16]
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8001d30:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001d34:	e7e6      	b.n	8001d04 <RCCEx_GetSAIxPeriphCLKFreq+0x50>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8001d36:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001d3a:	d002      	beq.n	8001d42 <RCCEx_GetSAIxPeriphCLKFreq+0x8e>
 8001d3c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001d40:	d10e      	bne.n	8001d60 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8001d42:	6958      	ldr	r0, [r3, #20]
 8001d44:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001d48:	d00f      	beq.n	8001d6a <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8001d4a:	68d8      	ldr	r0, [r3, #12]
 8001d4c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001d50:	3001      	adds	r0, #1
 8001d52:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8001d56:	6958      	ldr	r0, [r3, #20]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8001d58:	695b      	ldr	r3, [r3, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8001d5a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001d5e:	e7d1      	b.n	8001d04 <RCCEx_GetSAIxPeriphCLKFreq+0x50>
 8001d60:	2000      	movs	r0, #0
 8001d62:	4770      	bx	lr
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8001d64:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001d68:	e7bd      	b.n	8001ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x32>
    }
  }


  return frequency;
}
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	001fff68 	.word	0x001fff68

08001d74 <RCCEx_PLLSAI1_Config>:
{
 8001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <RCCEx_PLLSAI1_Config+0x118>)
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	f012 0f03 	tst.w	r2, #3
{
 8001d7e:	4605      	mov	r5, r0
 8001d80:	460e      	mov	r6, r1
 8001d82:	461c      	mov	r4, r3
 8001d84:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d86:	d02a      	beq.n	8001dde <RCCEx_PLLSAI1_Config+0x6a>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	4282      	cmp	r2, r0
 8001d90:	d13c      	bne.n	8001e0c <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d03a      	beq.n	8001e0c <RCCEx_PLLSAI1_Config+0x98>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d96:	68db      	ldr	r3, [r3, #12]
       ||
 8001d98:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d9a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001d9e:	3301      	adds	r3, #1
       ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d133      	bne.n	8001e0c <RCCEx_PLLSAI1_Config+0x98>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001daa:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001dac:	f7ff f820 	bl	8000df0 <HAL_GetTick>
 8001db0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	011a      	lsls	r2, r3, #4
 8001db6:	d432      	bmi.n	8001e1e <RCCEx_PLLSAI1_Config+0xaa>
 8001db8:	68af      	ldr	r7, [r5, #8]
      if(Divider == DIVIDER_P_UPDATE)
 8001dba:	2e00      	cmp	r6, #0
 8001dbc:	d036      	beq.n	8001e2c <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8001dbe:	2e01      	cmp	r6, #1
 8001dc0:	d150      	bne.n	8001e64 <RCCEx_PLLSAI1_Config+0xf0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001dc2:	6922      	ldr	r2, [r4, #16]
 8001dc4:	6928      	ldr	r0, [r5, #16]
 8001dc6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001dca:	0840      	lsrs	r0, r0, #1
 8001dcc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001dd0:	3801      	subs	r0, #1
 8001dd2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001dd6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001dda:	6122      	str	r2, [r4, #16]
 8001ddc:	e032      	b.n	8001e44 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001dde:	2802      	cmp	r0, #2
 8001de0:	d010      	beq.n	8001e04 <RCCEx_PLLSAI1_Config+0x90>
 8001de2:	2803      	cmp	r0, #3
 8001de4:	d014      	beq.n	8001e10 <RCCEx_PLLSAI1_Config+0x9c>
 8001de6:	2801      	cmp	r0, #1
 8001de8:	d110      	bne.n	8001e0c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	079f      	lsls	r7, r3, #30
 8001dee:	d538      	bpl.n	8001e62 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	686a      	ldr	r2, [r5, #4]
 8001df4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	4318      	orrs	r0, r3
 8001dfc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001e00:	60e0      	str	r0, [r4, #12]
 8001e02:	e7cf      	b.n	8001da4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e0a:	d1f1      	bne.n	8001df0 <RCCEx_PLLSAI1_Config+0x7c>
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	0391      	lsls	r1, r2, #14
 8001e14:	d4ec      	bmi.n	8001df0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e1c:	e7f5      	b.n	8001e0a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e1e:	f7fe ffe7 	bl	8000df0 <HAL_GetTick>
 8001e22:	1bc0      	subs	r0, r0, r7
 8001e24:	2802      	cmp	r0, #2
 8001e26:	d9c4      	bls.n	8001db2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001e28:	2003      	movs	r0, #3
 8001e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e2c:	6921      	ldr	r1, [r4, #16]
 8001e2e:	68eb      	ldr	r3, [r5, #12]
 8001e30:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001e34:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001e38:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001e42:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e4a:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ffd0 	bl	8000df0 <HAL_GetTick>
 8001e50:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	d513      	bpl.n	8001e80 <RCCEx_PLLSAI1_Config+0x10c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001e58:	6923      	ldr	r3, [r4, #16]
 8001e5a:	69aa      	ldr	r2, [r5, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	6123      	str	r3, [r4, #16]
 8001e60:	2000      	movs	r0, #0
}
 8001e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e64:	6923      	ldr	r3, [r4, #16]
 8001e66:	6968      	ldr	r0, [r5, #20]
 8001e68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e6c:	0840      	lsrs	r0, r0, #1
 8001e6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e72:	3801      	subs	r0, #1
 8001e74:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001e78:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001e7c:	6123      	str	r3, [r4, #16]
 8001e7e:	e7e1      	b.n	8001e44 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e80:	f7fe ffb6 	bl	8000df0 <HAL_GetTick>
 8001e84:	1b80      	subs	r0, r0, r6
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d9e3      	bls.n	8001e52 <RCCEx_PLLSAI1_Config+0xde>
 8001e8a:	e7cd      	b.n	8001e28 <RCCEx_PLLSAI1_Config+0xb4>
 8001e8c:	40021000 	.word	0x40021000

08001e90 <RCCEx_PLLSAI2_Config>:
{
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <RCCEx_PLLSAI2_Config+0xf8>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	f012 0f03 	tst.w	r2, #3
{
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	460e      	mov	r6, r1
 8001e9e:	461c      	mov	r4, r3
 8001ea0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ea2:	d028      	beq.n	8001ef6 <RCCEx_PLLSAI2_Config+0x66>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	4282      	cmp	r2, r0
 8001eac:	d13a      	bne.n	8001f24 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d038      	beq.n	8001f24 <RCCEx_PLLSAI2_Config+0x94>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001eb2:	68db      	ldr	r3, [r3, #12]
       ||
 8001eb4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001eb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001eba:	3301      	adds	r3, #1
       ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d131      	bne.n	8001f24 <RCCEx_PLLSAI2_Config+0x94>
    __HAL_RCC_PLLSAI2_DISABLE();
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001ec8:	f7fe ff92 	bl	8000df0 <HAL_GetTick>
 8001ecc:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	009a      	lsls	r2, r3, #2
 8001ed2:	d430      	bmi.n	8001f36 <RCCEx_PLLSAI2_Config+0xa6>
 8001ed4:	68a8      	ldr	r0, [r5, #8]
      if(Divider == DIVIDER_P_UPDATE)
 8001ed6:	2e00      	cmp	r6, #0
 8001ed8:	d034      	beq.n	8001f44 <RCCEx_PLLSAI2_Config+0xb4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001eda:	6963      	ldr	r3, [r4, #20]
 8001edc:	6929      	ldr	r1, [r5, #16]
 8001ede:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ee2:	0849      	lsrs	r1, r1, #1
 8001ee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ee8:	3901      	subs	r1, #1
 8001eea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001eee:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001ef2:	6163      	str	r3, [r4, #20]
 8001ef4:	e032      	b.n	8001f5c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001ef6:	2802      	cmp	r0, #2
 8001ef8:	d010      	beq.n	8001f1c <RCCEx_PLLSAI2_Config+0x8c>
 8001efa:	2803      	cmp	r0, #3
 8001efc:	d014      	beq.n	8001f28 <RCCEx_PLLSAI2_Config+0x98>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d110      	bne.n	8001f24 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	079f      	lsls	r7, r3, #30
 8001f06:	d538      	bpl.n	8001f7a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f08:	68e3      	ldr	r3, [r4, #12]
 8001f0a:	686a      	ldr	r2, [r5, #4]
 8001f0c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001f10:	3a01      	subs	r2, #1
 8001f12:	4318      	orrs	r0, r3
 8001f14:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001f18:	60e0      	str	r0, [r4, #12]
 8001f1a:	e7d1      	b.n	8001ec0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f22:	d1f1      	bne.n	8001f08 <RCCEx_PLLSAI2_Config+0x78>
 8001f24:	2001      	movs	r0, #1
 8001f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	0391      	lsls	r1, r2, #14
 8001f2c:	d4ec      	bmi.n	8001f08 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001f34:	e7f5      	b.n	8001f22 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001f36:	f7fe ff5b 	bl	8000df0 <HAL_GetTick>
 8001f3a:	1bc0      	subs	r0, r0, r7
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d9c6      	bls.n	8001ece <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
 8001f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001f44:	6962      	ldr	r2, [r4, #20]
 8001f46:	68eb      	ldr	r3, [r5, #12]
 8001f48:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001f4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f50:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001f5a:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001f64:	f7fe ff44 	bl	8000df0 <HAL_GetTick>
 8001f68:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	d505      	bpl.n	8001f7c <RCCEx_PLLSAI2_Config+0xec>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001f70:	6963      	ldr	r3, [r4, #20]
 8001f72:	696a      	ldr	r2, [r5, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	6163      	str	r3, [r4, #20]
 8001f78:	2000      	movs	r0, #0
}
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001f7c:	f7fe ff38 	bl	8000df0 <HAL_GetTick>
 8001f80:	1b80      	subs	r0, r0, r6
 8001f82:	2802      	cmp	r0, #2
 8001f84:	d9f1      	bls.n	8001f6a <RCCEx_PLLSAI2_Config+0xda>
 8001f86:	e7db      	b.n	8001f40 <RCCEx_PLLSAI2_Config+0xb0>
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
{
 8001f8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f90:	6806      	ldr	r6, [r0, #0]
 8001f92:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001f96:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f98:	d024      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f9a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001f9c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001fa0:	d02c      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001fa2:	d802      	bhi.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fa4:	b1c1      	cbz	r1, 8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001fa6:	2601      	movs	r6, #1
 8001fa8:	e01c      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001faa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001fae:	d00d      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001fb0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001fb4:	d1f7      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb6:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001fba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fbe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fc8:	2600      	movs	r6, #0
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fcc:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	68d3      	ldr	r3, [r2, #12]
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	60d3      	str	r3, [r2, #12]
      break;
 8001fd6:	e7ee      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fd8:	3004      	adds	r0, #4
 8001fda:	f7ff fecb 	bl	8001d74 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fde:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	d0e8      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	04d8      	lsls	r0, r3, #19
 8001fe8:	d506      	bpl.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001fea:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001fec:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001ff0:	d074      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001ff2:	d808      	bhi.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001ff4:	b1a9      	cbz	r1, 8002022 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001ff6:	2601      	movs	r6, #1
 8001ff8:	4635      	mov	r5, r6
 8001ffa:	e021      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	3020      	adds	r0, #32
 8002000:	f7ff ff46 	bl	8001e90 <RCCEx_PLLSAI2_Config>
 8002004:	e7eb      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002006:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800200a:	d004      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800200c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002010:	d1f1      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002012:	4635      	mov	r5, r6
 8002014:	e009      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002016:	4a35      	ldr	r2, [pc, #212]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002018:	68d3      	ldr	r3, [r2, #12]
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	60d3      	str	r3, [r2, #12]
 8002020:	e7f7      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002022:	1d20      	adds	r0, r4, #4
 8002024:	f7ff fea6 	bl	8001d74 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002028:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800202a:	2d00      	cmp	r5, #0
 800202c:	d15c      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800202e:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002030:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002032:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002036:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800203a:	430b      	orrs	r3, r1
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	0399      	lsls	r1, r3, #14
 8002044:	f140 814f 	bpl.w	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002048:	4f28      	ldr	r7, [pc, #160]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800204c:	00da      	lsls	r2, r3, #3
 800204e:	f140 8176 	bpl.w	800233e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002052:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002056:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80020f0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800205a:	f8d9 3000 	ldr.w	r3, [r9]
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002066:	f7fe fec3 	bl	8000df0 <HAL_GetTick>
 800206a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206c:	f8d9 3000 	ldr.w	r3, [r9]
 8002070:	05db      	lsls	r3, r3, #23
 8002072:	d53f      	bpl.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002074:	2d00      	cmp	r5, #0
 8002076:	d144      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800207c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002080:	d015      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002082:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002086:	4293      	cmp	r3, r2
 8002088:	d011      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800208a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800208e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002092:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002096:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800209a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800209e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80020aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ae:	07d8      	lsls	r0, r3, #31
 80020b0:	d509      	bpl.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80020b2:	f7fe fe9d 	bl	8000df0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80020ba:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c0:	0799      	lsls	r1, r3, #30
 80020c2:	f140 8109 	bpl.w	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ca:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80020ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020d8:	4635      	mov	r5, r6
 80020da:	e012      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020dc:	2100      	movs	r1, #0
 80020de:	f104 0020 	add.w	r0, r4, #32
 80020e2:	f7ff fed5 	bl	8001e90 <RCCEx_PLLSAI2_Config>
 80020e6:	e79f      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80020e8:	462e      	mov	r6, r5
 80020ea:	e7a9      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fe7c 	bl	8000df0 <HAL_GetTick>
 80020f8:	eba0 000a 	sub.w	r0, r0, sl
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d9b5      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002100:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002102:	f1b8 0f00 	cmp.w	r8, #0
 8002106:	d003      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	07da      	lsls	r2, r3, #31
 8002114:	d508      	bpl.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002116:	4990      	ldr	r1, [pc, #576]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002118:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800211a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800211e:	f022 0203 	bic.w	r2, r2, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002128:	079f      	lsls	r7, r3, #30
 800212a:	d508      	bpl.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212c:	498a      	ldr	r1, [pc, #552]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800212e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002130:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002134:	f022 020c 	bic.w	r2, r2, #12
 8002138:	4302      	orrs	r2, r0
 800213a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800213e:	075e      	lsls	r6, r3, #29
 8002140:	d508      	bpl.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002142:	4985      	ldr	r1, [pc, #532]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002144:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002146:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800214a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800214e:	4302      	orrs	r2, r0
 8002150:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002154:	0718      	lsls	r0, r3, #28
 8002156:	d508      	bpl.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002158:	497f      	ldr	r1, [pc, #508]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800215a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800215c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002160:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002164:	4302      	orrs	r2, r0
 8002166:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800216a:	06d9      	lsls	r1, r3, #27
 800216c:	d508      	bpl.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800216e:	497a      	ldr	r1, [pc, #488]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002170:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002172:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002176:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800217a:	4302      	orrs	r2, r0
 800217c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002180:	069a      	lsls	r2, r3, #26
 8002182:	d508      	bpl.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002184:	4974      	ldr	r1, [pc, #464]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002186:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002188:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800218c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002190:	4302      	orrs	r2, r0
 8002192:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002196:	059f      	lsls	r7, r3, #22
 8002198:	d508      	bpl.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800219a:	496f      	ldr	r1, [pc, #444]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800219c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800219e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80021a6:	4302      	orrs	r2, r0
 80021a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ac:	055e      	lsls	r6, r3, #21
 80021ae:	d508      	bpl.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021b0:	4969      	ldr	r1, [pc, #420]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80021b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021bc:	4302      	orrs	r2, r0
 80021be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c2:	0658      	lsls	r0, r3, #25
 80021c4:	d508      	bpl.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c6:	4964      	ldr	r1, [pc, #400]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80021ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021d2:	4302      	orrs	r2, r0
 80021d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021d8:	0619      	lsls	r1, r3, #24
 80021da:	d508      	bpl.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021dc:	495e      	ldr	r1, [pc, #376]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80021e8:	4302      	orrs	r2, r0
 80021ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ee:	05da      	lsls	r2, r3, #23
 80021f0:	d508      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f2:	4959      	ldr	r1, [pc, #356]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021fa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80021fe:	4302      	orrs	r2, r0
 8002200:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002204:	049b      	lsls	r3, r3, #18
 8002206:	d50f      	bpl.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002208:	4a53      	ldr	r2, [pc, #332]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800220a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800220c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002210:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002214:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002216:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800221a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800221e:	d164      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002220:	68d3      	ldr	r3, [r2, #12]
 8002222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002226:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	031f      	lsls	r7, r3, #12
 800222c:	d50f      	bpl.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800222e:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002230:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002232:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002236:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800223a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800223c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002244:	d15c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002246:	68d3      	ldr	r3, [r2, #12]
 8002248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	035e      	lsls	r6, r3, #13
 8002252:	d50f      	bpl.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002254:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002256:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002258:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800225c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002260:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002262:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002266:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800226a:	d154      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800226c:	68d3      	ldr	r3, [r2, #12]
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	0458      	lsls	r0, r3, #17
 8002278:	d512      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800227a:	4937      	ldr	r1, [pc, #220]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800227c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800227e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002282:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002286:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002288:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002290:	d14c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002292:	2102      	movs	r1, #2
 8002294:	1d20      	adds	r0, r4, #4
 8002296:	f7ff fd6d 	bl	8001d74 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800229a:	2800      	cmp	r0, #0
 800229c:	bf18      	it	ne
 800229e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	0411      	lsls	r1, r2, #16
 80022a4:	d508      	bpl.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022a6:	492c      	ldr	r1, [pc, #176]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80022a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80022aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b2:	4303      	orrs	r3, r0
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022b8:	03d3      	lsls	r3, r2, #15
 80022ba:	d509      	bpl.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022bc:	4a26      	ldr	r2, [pc, #152]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80022be:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80022c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ca:	430b      	orrs	r3, r1
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80022d0:	4628      	mov	r0, r5
 80022d2:	b002      	add	sp, #8
 80022d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fd8a 	bl	8000df0 <HAL_GetTick>
 80022dc:	1b40      	subs	r0, r0, r5
 80022de:	4548      	cmp	r0, r9
 80022e0:	f67f aeec 	bls.w	80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>
 80022e4:	e70c      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80022e6:	4635      	mov	r5, r6
 80022e8:	e712      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022ea:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80022ee:	d19b      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f0:	2101      	movs	r1, #1
 80022f2:	1d20      	adds	r0, r4, #4
 80022f4:	f7ff fd3e 	bl	8001d74 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80022f8:	2800      	cmp	r0, #0
 80022fa:	bf18      	it	ne
 80022fc:	4605      	movne	r5, r0
 80022fe:	e793      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002300:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002304:	d1a3      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002306:	2101      	movs	r1, #1
 8002308:	1d20      	adds	r0, r4, #4
 800230a:	f7ff fd33 	bl	8001d74 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800230e:	2800      	cmp	r0, #0
 8002310:	bf18      	it	ne
 8002312:	4605      	movne	r5, r0
 8002314:	e79b      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002316:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800231a:	d1ab      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800231c:	2101      	movs	r1, #1
 800231e:	1d20      	adds	r0, r4, #4
 8002320:	f7ff fd28 	bl	8001d74 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002324:	2800      	cmp	r0, #0
 8002326:	bf18      	it	ne
 8002328:	4605      	movne	r5, r0
 800232a:	e7a3      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800232c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002330:	d1b6      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002332:	2102      	movs	r1, #2
 8002334:	f104 0020 	add.w	r0, r4, #32
 8002338:	f7ff fdaa 	bl	8001e90 <RCCEx_PLLSAI2_Config>
 800233c:	e7ad      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	65bb      	str	r3, [r7, #88]	; 0x58
 8002346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002350:	f04f 0801 	mov.w	r8, #1
 8002354:	e67f      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800235c:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8002360:	4bc7      	ldr	r3, [pc, #796]	; (8002680 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 8002362:	d11d      	bne.n	80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002364:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002368:	f402 7240 	and.w	r2, r2, #768	; 0x300
    switch(srcclk)
 800236c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002370:	f000 81c6 	beq.w	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8002374:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002378:	d00b      	beq.n	8002392 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800237a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        switch(srcclk)
 800237e:	d13a      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 8002384:	f013 0f02 	tst.w	r3, #2
 8002388:	bf0c      	ite	eq
 800238a:	2000      	moveq	r0, #0
 800238c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002390:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002392:	681b      	ldr	r3, [r3, #0]
        frequency = HSE_VALUE / 32U;
 8002394:	48bb      	ldr	r0, [pc, #748]	; (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002396:	f413 3f00 	tst.w	r3, #131072	; 0x20000
            frequency = HSI_VALUE;
 800239a:	bf08      	it	eq
 800239c:	2000      	moveq	r0, #0
 800239e:	4770      	bx	lr
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	f002 0203 	and.w	r2, r2, #3
    switch(pll_oscsource)
 80023a6:	2a02      	cmp	r2, #2
 80023a8:	d027      	beq.n	80023fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80023aa:	2a03      	cmp	r2, #3
 80023ac:	d02c      	beq.n	8002408 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80023ae:	2a01      	cmp	r2, #1
 80023b0:	d12f      	bne.n	8002412 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	f011 0102 	ands.w	r1, r1, #2
 80023b8:	d00d      	beq.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	0711      	lsls	r1, r2, #28
 80023be:	bf4c      	ite	mi
 80023c0:	681a      	ldrmi	r2, [r3, #0]
 80023c2:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
 80023c6:	49b0      	ldr	r1, [pc, #704]	; (8002688 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80023c8:	bf4c      	ite	mi
 80023ca:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
 80023ce:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
 80023d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    switch(PeriphClk)
 80023d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80023da:	f000 8183 	beq.w	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80023de:	d855      	bhi.n	800248c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80023e0:	2810      	cmp	r0, #16
 80023e2:	f000 811d 	beq.w	8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80023e6:	d829      	bhi.n	800243c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80023e8:	2802      	cmp	r0, #2
 80023ea:	f000 80e4 	beq.w	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80023ee:	d812      	bhi.n	8002416 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80023f0:	2801      	cmp	r0, #1
 80023f2:	f000 80d2 	beq.w	800259a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
  uint32_t frequency = 0U;
 80023f6:	2000      	movs	r0, #0
}
 80023f8:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80023fa:	681a      	ldr	r2, [r3, #0]
        pllvco = HSI_VALUE;
 80023fc:	49a3      	ldr	r1, [pc, #652]	; (800268c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80023fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
        pllvco = HSE_VALUE;
 8002402:	bf08      	it	eq
 8002404:	2100      	moveq	r1, #0
 8002406:	e7e6      	b.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002408:	681a      	ldr	r2, [r3, #0]
        pllvco = HSE_VALUE;
 800240a:	49a1      	ldr	r1, [pc, #644]	; (8002690 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800240c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002410:	e7f7      	b.n	8002402 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      pllvco = 0U;
 8002412:	2100      	movs	r1, #0
 8002414:	e7df      	b.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch(PeriphClk)
 8002416:	2804      	cmp	r0, #4
 8002418:	f000 80f2 	beq.w	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800241c:	2808      	cmp	r0, #8
 800241e:	d1ea      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002420:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002424:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
        switch(srcclk)
 8002428:	2a40      	cmp	r2, #64	; 0x40
 800242a:	f000 8140 	beq.w	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800242e:	f240 80ee 	bls.w	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002432:	2a80      	cmp	r2, #128	; 0x80
 8002434:	f000 8147 	beq.w	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002438:	2ac0      	cmp	r2, #192	; 0xc0
 800243a:	e7a0      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 800243c:	2840      	cmp	r0, #64	; 0x40
 800243e:	f000 8138 	beq.w	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8002442:	d812      	bhi.n	800246a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8002444:	2820      	cmp	r0, #32
 8002446:	d1d6      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002448:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800244c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
        switch(srcclk)
 8002450:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002454:	f000 812b 	beq.w	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002458:	f240 80d9 	bls.w	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 800245c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002460:	f000 8131 	beq.w	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002464:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002468:	e789      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 800246a:	2880      	cmp	r0, #128	; 0x80
 800246c:	f000 8130 	beq.w	80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8002470:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002474:	d1bf      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002476:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800247a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
        switch(srcclk)
 800247e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002482:	f000 8114 	beq.w	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002486:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800248a:	e11b      	b.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
    switch(PeriphClk)
 800248c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002490:	f000 80d4 	beq.w	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8002494:	d837      	bhi.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8002496:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800249a:	d04c      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 800249c:	d813      	bhi.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 800249e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80024a2:	d1a8      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80024a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024a8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        switch(srcclk)
 80024ac:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80024b0:	f000 8126 	beq.w	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80024b4:	f240 80ab 	bls.w	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80024b8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80024bc:	f000 8103 	beq.w	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80024c0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80024c4:	e75b      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 80024c6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80024ca:	d034      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 80024cc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80024d0:	d191      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80024d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024d6:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
        switch(srcclk)
 80024da:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80024de:	d040      	beq.n	8002562 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80024e0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80024e4:	d029      	beq.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 80024e6:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80024ea:	d184      	bne.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80024f2:	d081      	beq.n	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80024f4:	6918      	ldr	r0, [r3, #16]
 80024f6:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 80024fa:	f43f af7d 	beq.w	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80024fe:	68da      	ldr	r2, [r3, #12]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002500:	6918      	ldr	r0, [r3, #16]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	e03a      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
    switch(PeriphClk)
 8002506:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800250a:	f000 80cc 	beq.w	80026a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800250e:	d80c      	bhi.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8002510:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002514:	f47f af6f 	bne.w	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002518:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        switch(srcclk)
 800251c:	f012 4280 	ands.w	r2, r2, #1073741824	; 0x40000000
 8002520:	d078      	beq.n	8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002522:	2a00      	cmp	r2, #0
 8002524:	f040 80cf 	bne.w	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002528:	e765      	b.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch(PeriphClk)
 800252a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800252e:	d0d0      	beq.n	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8002530:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002534:	e7cc      	b.n	80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002536:	f7ff bbbd 	b.w	8001cb4 <RCCEx_GetSAIxPeriphCLKFreq>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f010 0002 	ands.w	r0, r0, #2
 8002540:	f43f af5a 	beq.w	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	0712      	lsls	r2, r2, #28
 8002548:	bf4c      	ite	mi
 800254a:	681b      	ldrmi	r3, [r3, #0]
 800254c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8002550:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8002552:	bf4c      	ite	mi
 8002554:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8002558:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800255c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002560:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002568:	f43f af46 	beq.w	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800256c:	68d8      	ldr	r0, [r3, #12]
 800256e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8002572:	f43f af41 	beq.w	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002576:	68da      	ldr	r2, [r3, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002578:	68d8      	ldr	r0, [r3, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800257a:	68db      	ldr	r3, [r3, #12]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800257c:	f3c2 1202 	ubfx	r2, r2, #4, #3
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002580:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002584:	3201      	adds	r2, #1
 8002586:	fbb1 f1f2 	udiv	r1, r1, r2
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800258a:	4348      	muls	r0, r1
 800258c:	f3c3 5141 	ubfx	r1, r3, #21, #2
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002590:	3101      	adds	r1, #1
 8002592:	0049      	lsls	r1, r1, #1
 8002594:	fbb0 f0f1 	udiv	r0, r0, r1
 8002598:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800259a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800259e:	f002 0203 	and.w	r2, r2, #3
        switch(srcclk)
 80025a2:	2a02      	cmp	r2, #2
 80025a4:	f000 808f 	beq.w	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80025a8:	2a03      	cmp	r2, #3
 80025aa:	f43f aee9 	beq.w	8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80025ae:	2a01      	cmp	r2, #1
 80025b0:	d07d      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
          frequency = HAL_RCC_GetPCLK2Freq();
 80025b2:	f7ff bb6d 	b.w	8001c90 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80025b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025ba:	f002 020c 	and.w	r2, r2, #12
        switch(srcclk)
 80025be:	2a0c      	cmp	r2, #12
 80025c0:	f63f af19 	bhi.w	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80025c4:	a101      	add	r1, pc, #4	; (adr r1, 80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80025c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	08002615 	.word	0x08002615
 80025d0:	080023f7 	.word	0x080023f7
 80025d4:	080023f7 	.word	0x080023f7
 80025d8:	080023f7 	.word	0x080023f7
 80025dc:	080026af 	.word	0x080026af
 80025e0:	080023f7 	.word	0x080023f7
 80025e4:	080023f7 	.word	0x080023f7
 80025e8:	080023f7 	.word	0x080023f7
 80025ec:	080026c7 	.word	0x080026c7
 80025f0:	080023f7 	.word	0x080023f7
 80025f4:	080023f7 	.word	0x080023f7
 80025f8:	080023f7 	.word	0x080023f7
 80025fc:	08002381 	.word	0x08002381
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002600:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002604:	f002 0230 	and.w	r2, r2, #48	; 0x30
        switch(srcclk)
 8002608:	2a10      	cmp	r2, #16
 800260a:	d050      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800260c:	d804      	bhi.n	8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        switch(srcclk)
 800260e:	2a00      	cmp	r2, #0
 8002610:	f47f aef1 	bne.w	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002614:	f7ff bb2a 	b.w	8001c6c <HAL_RCC_GetPCLK1Freq>
        switch(srcclk)
 8002618:	2a20      	cmp	r2, #32
 800261a:	d054      	beq.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800261c:	2a30      	cmp	r2, #48	; 0x30
 800261e:	e6ae      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002620:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002624:	f402 7240 	and.w	r2, r2, #768	; 0x300
        switch(srcclk)
 8002628:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800262c:	d03f      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800262e:	d9ee      	bls.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002630:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002634:	d047      	beq.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002636:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800263a:	e6a0      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800263c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002640:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        switch(srcclk)
 8002644:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002648:	d024      	beq.n	8002694 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800264a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800264e:	d02e      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002650:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002654:	f47f aecf 	bne.w	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8002658:	6918      	ldr	r0, [r3, #16]
 800265a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800265e:	f43f aecb 	beq.w	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002662:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002664:	6918      	ldr	r0, [r3, #16]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8002666:	691b      	ldr	r3, [r3, #16]
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002668:	f3c2 1202 	ubfx	r2, r2, #4, #3
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800266c:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002670:	3201      	adds	r2, #1
 8002672:	fbb1 f1f2 	udiv	r1, r1, r2
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002676:	4348      	muls	r0, r1
 8002678:	f3c3 6141 	ubfx	r1, r3, #25, #2
 800267c:	e788      	b.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	0003d090 	.word	0x0003d090
 8002688:	08003170 	.word	0x08003170
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8002694:	6958      	ldr	r0, [r3, #20]
 8002696:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800269a:	f43f aead 	beq.w	80023f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800269e:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80026a0:	6958      	ldr	r0, [r3, #20]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	e7e0      	b.n	8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da81      	bge.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = HAL_RCC_GetSysClockFreq();
 80026ae:	f7fe bfd1 	b.w	8001654 <HAL_RCC_GetSysClockFreq>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80026b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026b6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
        switch(srcclk)
 80026ba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80026be:	d0f6      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80026c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        switch(srcclk)
 80026c4:	d1a3      	bne.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026c6:	681b      	ldr	r3, [r3, #0]
            frequency = HSI_VALUE;
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 80026ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80026ce:	e664      	b.n	800239a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80026d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026d4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
        switch(srcclk)
 80026d8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80026dc:	d0e7      	beq.n	80026ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80026de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80026e2:	e7ef      	b.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80026e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026e8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
        switch(srcclk)
 80026ec:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80026f0:	d006      	beq.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80026f2:	d98c      	bls.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80026f4:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80026f8:	d0e5      	beq.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80026fa:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80026fe:	e63e      	b.n	800237e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            frequency = LSI_VALUE;
 8002704:	f013 0f02 	tst.w	r3, #2
 8002708:	bf0c      	ite	eq
 800270a:	2000      	moveq	r0, #0
 800270c:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	00f42400 	.word	0x00f42400

08002718 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002718:	6802      	ldr	r2, [r0, #0]
{
 800271a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800271c:	68d3      	ldr	r3, [r2, #12]
 800271e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002722:	60d3      	str	r3, [r2, #12]
{
 8002724:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8002726:	f7fe fb63 	bl	8000df0 <HAL_GetTick>
 800272a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	069b      	lsls	r3, r3, #26
 8002732:	d501      	bpl.n	8002738 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002734:	2000      	movs	r0, #0
 8002736:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002738:	f7fe fb5a 	bl	8000df0 <HAL_GetTick>
 800273c:	1b40      	subs	r0, r0, r5
 800273e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002742:	d9f3      	bls.n	800272c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002744:	2003      	movs	r0, #3
}
 8002746:	bd38      	pop	{r3, r4, r5, pc}

08002748 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002748:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800274a:	6803      	ldr	r3, [r0, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	0652      	lsls	r2, r2, #25
{
 8002750:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002752:	d501      	bpl.n	8002758 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 8002754:	2000      	movs	r0, #0
 8002756:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800275e:	f7fe fb47 	bl	8000df0 <HAL_GetTick>
 8002762:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	065b      	lsls	r3, r3, #25
 800276a:	d4f3      	bmi.n	8002754 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800276c:	f7fe fb40 	bl	8000df0 <HAL_GetTick>
 8002770:	1b40      	subs	r0, r0, r5
 8002772:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002776:	d9f5      	bls.n	8002764 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
}
 800277a:	bd38      	pop	{r3, r4, r5, pc}

0800277c <HAL_RTC_Init>:
{
 800277c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 800277e:	4604      	mov	r4, r0
 8002780:	b1d8      	cbz	r0, 80027ba <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002782:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800278a:	b91b      	cbnz	r3, 8002794 <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 800278c:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8002790:	f7fe fa16 	bl	8000bc0 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002794:	2302      	movs	r3, #2
 8002796:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	22ca      	movs	r2, #202	; 0xca
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
 80027a0:	2253      	movs	r2, #83	; 0x53
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff ffcf 	bl	8002748 <RTC_EnterInitMode>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	4605      	mov	r5, r0
 80027ae:	b138      	cbz	r0, 80027c0 <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027b0:	22ff      	movs	r2, #255	; 0xff
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 80027b4:	2304      	movs	r3, #4
 80027b6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ba:	2501      	movs	r5, #1
}
 80027bc:	4628      	mov	r0, r5
 80027be:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80027c0:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027c2:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80027c4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80027c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027cc:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027ce:	6862      	ldr	r2, [r4, #4]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	4302      	orrs	r2, r0
 80027d4:	69a0      	ldr	r0, [r4, #24]
 80027d6:	4302      	orrs	r2, r0
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80027dc:	68e2      	ldr	r2, [r4, #12]
 80027de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68a1      	ldr	r1, [r4, #8]
 80027e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027e8:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f0:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	d405      	bmi.n	8002804 <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ff8d 	bl	8002718 <HAL_RTC_WaitForSynchro>
 80027fe:	b108      	cbz	r0, 8002804 <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	e7d5      	b.n	80027b0 <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002804:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002806:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800280a:	f022 0203 	bic.w	r2, r2, #3
 800280e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002810:	69e2      	ldr	r2, [r4, #28]
 8002812:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002814:	4302      	orrs	r2, r0
 8002816:	430a      	orrs	r2, r1
 8002818:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800281a:	22ff      	movs	r2, #255	; 0xff
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 800281e:	2301      	movs	r3, #1
 8002820:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 8002824:	e7ca      	b.n	80027bc <HAL_RTC_Init+0x40>

08002826 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002826:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while(temp >= 10U)
 8002828:	2809      	cmp	r0, #9
 800282a:	d803      	bhi.n	8002834 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | temp);
 800282c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002830:	b2c0      	uxtb	r0, r0
 8002832:	4770      	bx	lr
    temp -= 10U;
 8002834:	380a      	subs	r0, #10
    bcdhigh++;
 8002836:	3301      	adds	r3, #1
    temp -= 10U;
 8002838:	b2c0      	uxtb	r0, r0
 800283a:	e7f5      	b.n	8002828 <RTC_ByteToBcd2+0x2>

0800283c <HAL_RTC_SetDate>:
{
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800283e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002842:	2b01      	cmp	r3, #1
{
 8002844:	4605      	mov	r5, r0
 8002846:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 800284a:	d034      	beq.n	80028b6 <HAL_RTC_SetDate+0x7a>
 800284c:	2301      	movs	r3, #1
 800284e:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002852:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 8002856:	784b      	ldrb	r3, [r1, #1]
 8002858:	78c8      	ldrb	r0, [r1, #3]
 800285a:	788e      	ldrb	r6, [r1, #2]
 800285c:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800285e:	2a00      	cmp	r2, #0
 8002860:	d14e      	bne.n	8002900 <HAL_RTC_SetDate+0xc4>
 8002862:	06da      	lsls	r2, r3, #27
 8002864:	d503      	bpl.n	800286e <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	330a      	adds	r3, #10
 800286c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800286e:	f7ff ffda 	bl	8002826 <RTC_ByteToBcd2>
 8002872:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002874:	7848      	ldrb	r0, [r1, #1]
 8002876:	f7ff ffd6 	bl	8002826 <RTC_ByteToBcd2>
 800287a:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800287c:	4630      	mov	r0, r6
 800287e:	f7ff ffd2 	bl	8002826 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002882:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002886:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800288a:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	22ca      	movs	r2, #202	; 0xca
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
 8002894:	2253      	movs	r2, #83	; 0x53
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002898:	4628      	mov	r0, r5
 800289a:	f7ff ff55 	bl	8002748 <RTC_EnterInitMode>
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	4606      	mov	r6, r0
 80028a2:	b150      	cbz	r0, 80028ba <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028a4:	22ff      	movs	r2, #255	; 0xff
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028a8:	2304      	movs	r3, #4
 80028aa:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 80028b4:	2601      	movs	r6, #1
}
 80028b6:	4630      	mov	r0, r6
 80028b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80028ba:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80028be:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80028c2:	605c      	str	r4, [r3, #4]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ca:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	d40c      	bmi.n	80028ec <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028d2:	4628      	mov	r0, r5
 80028d4:	f7ff ff20 	bl	8002718 <HAL_RTC_WaitForSynchro>
 80028d8:	b140      	cbz	r0, 80028ec <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028e0:	2304      	movs	r3, #4
 80028e2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80028e6:	f885 6020 	strb.w	r6, [r5, #32]
 80028ea:	e7e3      	b.n	80028b4 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	22ff      	movs	r2, #255	; 0xff
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80028f8:	2300      	movs	r3, #0
 80028fa:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 80028fe:	e7da      	b.n	80028b6 <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002900:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002902:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002906:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002908:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800290c:	e7bf      	b.n	800288e <HAL_RTC_SetDate+0x52>

0800290e <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800290e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002912:	2b01      	cmp	r3, #1
{
 8002914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002918:	4605      	mov	r5, r0
 800291a:	460e      	mov	r6, r1
 800291c:	4690      	mov	r8, r2
 800291e:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 8002922:	d017      	beq.n	8002954 <HAL_RTC_SetTime+0x46>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002924:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002926:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800292a:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 800292c:	2401      	movs	r4, #1
 800292e:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
 8002934:	2253      	movs	r2, #83	; 0x53
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002938:	f7ff ff06 	bl	8002748 <RTC_EnterInitMode>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	4607      	mov	r7, r0
 8002940:	b158      	cbz	r0, 800295a <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002946:	2304      	movs	r3, #4
 8002948:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800294c:	2300      	movs	r3, #0
 800294e:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8002952:	2701      	movs	r7, #1
}
 8002954:	4638      	mov	r0, r7
 8002956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800295a:	7830      	ldrb	r0, [r6, #0]
 800295c:	7874      	ldrb	r4, [r6, #1]
 800295e:	78b1      	ldrb	r1, [r6, #2]
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002960:	689b      	ldr	r3, [r3, #8]
    if(Format == RTC_FORMAT_BIN)
 8002962:	f1b8 0f00 	cmp.w	r8, #0
 8002966:	d138      	bne.n	80029da <HAL_RTC_SetTime+0xcc>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002968:	065a      	lsls	r2, r3, #25
        sTime->TimeFormat = 0x00U;
 800296a:	bf58      	it	pl
 800296c:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800296e:	f7ff ff5a 	bl	8002826 <RTC_ByteToBcd2>
 8002972:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff ff56 	bl	8002826 <RTC_ByteToBcd2>
 800297a:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos ) | \
 800297c:	4608      	mov	r0, r1
 800297e:	f7ff ff52 	bl	8002826 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002982:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002984:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8002988:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800298c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8002996:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 800299a:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800299c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800299e:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80029a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029a4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029a6:	68f2      	ldr	r2, [r6, #12]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	4302      	orrs	r2, r0
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80029b8:	689c      	ldr	r4, [r3, #8]
 80029ba:	f014 0420 	ands.w	r4, r4, #32
 80029be:	d118      	bne.n	80029f2 <HAL_RTC_SetTime+0xe4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029c0:	4628      	mov	r0, r5
 80029c2:	f7ff fea9 	bl	8002718 <HAL_RTC_WaitForSynchro>
 80029c6:	b1a0      	cbz	r0, 80029f2 <HAL_RTC_SetTime+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029ce:	2304      	movs	r3, #4
 80029d0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80029d4:	f885 4020 	strb.w	r4, [r5, #32]
 80029d8:	e7bb      	b.n	8002952 <HAL_RTC_SetTime+0x44>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029da:	065b      	lsls	r3, r3, #25
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029dc:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 80029e0:	bf58      	it	pl
 80029e2:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029e4:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029e8:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029ea:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029ec:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80029f0:	e7ce      	b.n	8002990 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc);
 80029fe:	2300      	movs	r3, #0
 8002a00:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 8002a04:	e7a6      	b.n	8002954 <HAL_RTC_SetTime+0x46>
	...

08002a08 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002a0a:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002a12:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8002a16:	680b      	ldr	r3, [r1, #0]
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002a1c:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8002a1e:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8002a20:	b93a      	cbnz	r2, 8002a32 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002a22:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a2a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
      break;
 8002a30:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8002a32:	680b      	ldr	r3, [r1, #0]
 8002a34:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 8002a38:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8002a3c:	d1f0      	bne.n	8002a20 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	4618      	mov	r0, r3

  return status;
}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_SAI_Init>:
{
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	b910      	cbnz	r0, 8002a54 <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8002a4e:	2501      	movs	r5, #1
}
 8002a50:	4628      	mov	r0, r5
 8002a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8002a54:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002a58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a5c:	b91b      	cbnz	r3, 8002a66 <HAL_SAI_Init+0x1e>
    hsai->Lock = HAL_UNLOCKED;
 8002a5e:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8002a62:	f7fe f8f1 	bl	8000c48 <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 8002a66:	4620      	mov	r0, r4
 8002a68:	f7ff ffce 	bl	8002a08 <SAI_Disable>
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1ed      	bne.n	8002a4e <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002a72:	2302      	movs	r3, #2
 8002a74:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  switch (hsai->Init.SynchroExt)
 8002a78:	68e3      	ldr	r3, [r4, #12]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	f000 8094 	beq.w	8002ba8 <HAL_SAI_Init+0x160>
      tmpregisterGCR = 0;
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	bf0c      	ite	eq
 8002a84:	2320      	moveq	r3, #32
 8002a86:	2300      	movne	r3, #0
  switch (hsai->Init.Synchro)
 8002a88:	68a2      	ldr	r2, [r4, #8]
 8002a8a:	2a02      	cmp	r2, #2
 8002a8c:	f000 8090 	beq.w	8002bb0 <HAL_SAI_Init+0x168>
 8002a90:	2a03      	cmp	r2, #3
 8002a92:	f000 808b 	beq.w	8002bac <HAL_SAI_Init+0x164>
      syncen_bits = 0;
 8002a96:	2a01      	cmp	r2, #1
 8002a98:	bf0c      	ite	eq
 8002a9a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8002a9e:	2600      	movne	r6, #0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	494a      	ldr	r1, [pc, #296]	; (8002bcc <HAL_SAI_Init+0x184>)
 8002aa4:	428a      	cmp	r2, r1
 8002aa6:	d003      	beq.n	8002ab0 <HAL_SAI_Init+0x68>
 8002aa8:	4849      	ldr	r0, [pc, #292]	; (8002bd0 <HAL_SAI_Init+0x188>)
 8002aaa:	4282      	cmp	r2, r0
 8002aac:	f040 8083 	bne.w	8002bb6 <HAL_SAI_Init+0x16e>
    SAI1->GCR = tmpregisterGCR;
 8002ab0:	4848      	ldr	r0, [pc, #288]	; (8002bd4 <HAL_SAI_Init+0x18c>)
    SAI2->GCR = tmpregisterGCR;
 8002ab2:	6003      	str	r3, [r0, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002ab4:	69e3      	ldr	r3, [r4, #28]
 8002ab6:	b1b3      	cbz	r3, 8002ae6 <HAL_SAI_Init+0x9e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002ab8:	428a      	cmp	r2, r1
 8002aba:	d002      	beq.n	8002ac2 <HAL_SAI_Init+0x7a>
 8002abc:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_SAI_Init+0x188>)
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d17b      	bne.n	8002bba <HAL_SAI_Init+0x172>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8002ac2:	f44f 6000 	mov.w	r0, #2048	; 0x800
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002ac6:	f7ff fc49 	bl	800235c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8002aca:	69e3      	ldr	r3, [r4, #28]
 8002acc:	220a      	movs	r2, #10
 8002ace:	025b      	lsls	r3, r3, #9
 8002ad0:	4350      	muls	r0, r2
 8002ad2:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8002ad6:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10U) > 8U)
 8002ada:	fb02 0013 	mls	r0, r2, r3, r0
 8002ade:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8002ae0:	bf08      	it	eq
 8002ae2:	3301      	addeq	r3, #1
 8002ae4:	6223      	str	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002ae6:	6863      	ldr	r3, [r4, #4]
 8002ae8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002aea:	f033 0102 	bics.w	r1, r3, #2
 8002aee:	d167      	bne.n	8002bc0 <HAL_SAI_Init+0x178>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8002af0:	2a01      	cmp	r2, #1
 8002af2:	bf18      	it	ne
 8002af4:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002af8:	6822      	ldr	r2, [r4, #0]
 8002afa:	4837      	ldr	r0, [pc, #220]	; (8002bd8 <HAL_SAI_Init+0x190>)
 8002afc:	6817      	ldr	r7, [r2, #0]
 8002afe:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b00:	6b27      	ldr	r7, [r4, #48]	; 0x30
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002b02:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b04:	433b      	orrs	r3, r7
 8002b06:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002b08:	6810      	ldr	r0, [r2, #0]
 8002b0a:	433b      	orrs	r3, r7
 8002b0c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002b0e:	433b      	orrs	r3, r7
 8002b10:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8002b12:	433b      	orrs	r3, r7
 8002b14:	6927      	ldr	r7, [r4, #16]
 8002b16:	433b      	orrs	r3, r7
 8002b18:	6967      	ldr	r7, [r4, #20]
 8002b1a:	433b      	orrs	r3, r7
 8002b1c:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002b1e:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002b20:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8002b24:	4333      	orrs	r3, r6
 8002b26:	430b      	orrs	r3, r1
 8002b28:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002b2a:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002b2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b32:	f023 030f 	bic.w	r3, r3, #15
 8002b36:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002b38:	69a3      	ldr	r3, [r4, #24]
 8002b3a:	6851      	ldr	r1, [r2, #4]
 8002b3c:	4303      	orrs	r3, r0
 8002b3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b40:	4303      	orrs	r3, r0
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b46:	6891      	ldr	r1, [r2, #8]
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_SAI_Init+0x194>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002b4a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002b50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002b52:	6891      	ldr	r1, [r2, #8]
 8002b54:	4303      	orrs	r3, r0
 8002b56:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b58:	4303      	orrs	r3, r0
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002b5e:	3901      	subs	r1, #1
 8002b60:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8002b62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b64:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002b66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b6a:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8002b6c:	68d3      	ldr	r3, [r2, #12]
 8002b6e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002b72:	f023 030f 	bic.w	r3, r3, #15
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002b7c:	68d1      	ldr	r1, [r2, #12]
 8002b7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b82:	4303      	orrs	r3, r0
 8002b84:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8002b86:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8002b8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b8e:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002b90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b94:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002b96:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8002b98:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002b9a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8002b9e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8002ba2:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
 8002ba6:	e753      	b.n	8002a50 <HAL_SAI_Init+0x8>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8002ba8:	2310      	movs	r3, #16
 8002baa:	e76d      	b.n	8002a88 <HAL_SAI_Init+0x40>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002bac:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8002bb0:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8002bb4:	e774      	b.n	8002aa0 <HAL_SAI_Init+0x58>
    SAI2->GCR = tmpregisterGCR;
 8002bb6:	480a      	ldr	r0, [pc, #40]	; (8002be0 <HAL_SAI_Init+0x198>)
 8002bb8:	e77b      	b.n	8002ab2 <HAL_SAI_Init+0x6a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002bbe:	e782      	b.n	8002ac6 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8002bc0:	2a01      	cmp	r2, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2100      	movne	r1, #0
 8002bc6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002bca:	e795      	b.n	8002af8 <HAL_SAI_Init+0xb0>
 8002bcc:	40015404 	.word	0x40015404
 8002bd0:	40015424 	.word	0x40015424
 8002bd4:	40015400 	.word	0x40015400
 8002bd8:	ff05c010 	.word	0xff05c010
 8002bdc:	fff88000 	.word	0xfff88000
 8002be0:	40015800 	.word	0x40015800

08002be4 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002be4:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be6:	69c1      	ldr	r1, [r0, #28]
{
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bec:	6883      	ldr	r3, [r0, #8]
 8002bee:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf2:	4303      	orrs	r3, r0
 8002bf4:	6960      	ldr	r0, [r4, #20]
 8002bf6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf8:	48ba      	ldr	r0, [pc, #744]	; (8002ee4 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bfa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bfc:	4028      	ands	r0, r5
 8002bfe:	4303      	orrs	r3, r0
 8002c00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c02:	6853      	ldr	r3, [r2, #4]
 8002c04:	68e0      	ldr	r0, [r4, #12]
 8002c06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c0a:	4303      	orrs	r3, r0
 8002c0c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c0e:	4bb6      	ldr	r3, [pc, #728]	; (8002ee8 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c10:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c12:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c14:	bf1c      	itt	ne
 8002c16:	6a23      	ldrne	r3, [r4, #32]
 8002c18:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1a:	6893      	ldr	r3, [r2, #8]
 8002c1c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c20:	4303      	orrs	r3, r0
 8002c22:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c24:	4bb1      	ldr	r3, [pc, #708]	; (8002eec <UART_SetConfig+0x308>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d119      	bne.n	8002c5e <UART_SetConfig+0x7a>
 8002c2a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002c2e:	4ab0      	ldr	r2, [pc, #704]	; (8002ef0 <UART_SetConfig+0x30c>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	f040 8138 	bne.w	8002eb2 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	f200 808f 	bhi.w	8002d66 <UART_SetConfig+0x182>
 8002c48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c4c:	00ca011a 	.word	0x00ca011a
 8002c50:	008d00f9 	.word	0x008d00f9
 8002c54:	008d0114 	.word	0x008d0114
 8002c58:	008d008d 	.word	0x008d008d
 8002c5c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ef4 <UART_SetConfig+0x310>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <UART_SetConfig+0x90>
 8002c64:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002c68:	4aa3      	ldr	r2, [pc, #652]	; (8002ef8 <UART_SetConfig+0x314>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	e7e1      	b.n	8002c38 <UART_SetConfig+0x54>
 8002c74:	4ba1      	ldr	r3, [pc, #644]	; (8002efc <UART_SetConfig+0x318>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d123      	bne.n	8002cc2 <UART_SetConfig+0xde>
 8002c7a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	f000 80f1 	beq.w	8002e6e <UART_SetConfig+0x28a>
 8002c8c:	d80b      	bhi.n	8002ca6 <UART_SetConfig+0xc2>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80f3 	beq.w	8002e7a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c98:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002c9c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca0:	f000 80f8 	beq.w	8002e94 <UART_SetConfig+0x2b0>
 8002ca4:	e0a8      	b.n	8002df8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	f000 80c6 	beq.w	8002e38 <UART_SetConfig+0x254>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d1f1      	bne.n	8002c94 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002cb4:	f040 80b8 	bne.w	8002e28 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cb8:	6860      	ldr	r0, [r4, #4]
 8002cba:	0843      	lsrs	r3, r0, #1
 8002cbc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002cc0:	e0c3      	b.n	8002e4a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cc2:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <UART_SetConfig+0x31c>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d11e      	bne.n	8002d06 <UART_SetConfig+0x122>
 8002cc8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	f000 80bb 	beq.w	8002e50 <UART_SetConfig+0x26c>
 8002cda:	d80a      	bhi.n	8002cf2 <UART_SetConfig+0x10e>
 8002cdc:	b97b      	cbnz	r3, 8002cfe <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <UART_SetConfig+0x304>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 80ca 	bne.w	8002e7a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f7fe ffc1 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
        break;
 8002cea:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002cec:	bbb0      	cbnz	r0, 8002d5c <UART_SetConfig+0x178>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	e03a      	b.n	8002d68 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	f000 809d 	beq.w	8002e32 <UART_SetConfig+0x24e>
 8002cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8002cfa:	f000 80b0 	beq.w	8002e5e <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	; (8002ee8 <UART_SetConfig+0x304>)
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1c7      	bne.n	8002c94 <UART_SetConfig+0xb0>
 8002d04:	e02f      	b.n	8002d66 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <UART_SetConfig+0x320>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d111      	bne.n	8002d30 <UART_SetConfig+0x14c>
 8002d0c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	f000 8098 	beq.w	8002e50 <UART_SetConfig+0x26c>
 8002d20:	d9dc      	bls.n	8002cdc <UART_SetConfig+0xf8>
 8002d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d26:	f000 8084 	beq.w	8002e32 <UART_SetConfig+0x24e>
 8002d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2e:	e7e4      	b.n	8002cfa <UART_SetConfig+0x116>
 8002d30:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <UART_SetConfig+0x304>)
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d1ae      	bne.n	8002c94 <UART_SetConfig+0xb0>
 8002d36:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	f000 8083 	beq.w	8002e50 <UART_SetConfig+0x26c>
 8002d4a:	d9c7      	bls.n	8002cdc <UART_SetConfig+0xf8>
 8002d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d50:	d06f      	beq.n	8002e32 <UART_SetConfig+0x24e>
 8002d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d56:	e7d0      	b.n	8002cfa <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002d58:	486b      	ldr	r0, [pc, #428]	; (8002f08 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d5a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002d5c:	6862      	ldr	r2, [r4, #4]
 8002d5e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002d62:	4281      	cmp	r1, r0
 8002d64:	d905      	bls.n	8002d72 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002d66:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002d6c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002d6e:	4610      	mov	r0, r2
 8002d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002d72:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002d76:	d8f6      	bhi.n	8002d66 <UART_SetConfig+0x182>
        switch (clocksource)
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d82e      	bhi.n	8002dda <UART_SetConfig+0x1f6>
 8002d7c:	e8df f003 	tbb	[pc, r3]
 8002d80:	2d1c2d05 	.word	0x2d1c2d05
 8002d84:	2d2d2d24 	.word	0x2d2d2d24
 8002d88:	27          	.byte	0x27
 8002d89:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d8a:	f7fe ff6f 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d8e:	6862      	ldr	r2, [r4, #4]
 8002d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d94:	0856      	lsrs	r6, r2, #1
 8002d96:	2700      	movs	r7, #0
 8002d98:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4630      	mov	r0, r6
 8002da0:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002da2:	f7fd fa11 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8002da6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002da8:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <UART_SetConfig+0x328>)
 8002daa:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002dae:	4299      	cmp	r1, r3
 8002db0:	d8d9      	bhi.n	8002d66 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	60d8      	str	r0, [r3, #12]
 8002db6:	e7d7      	b.n	8002d68 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002db8:	4855      	ldr	r0, [pc, #340]	; (8002f10 <UART_SetConfig+0x32c>)
 8002dba:	0855      	lsrs	r5, r2, #1
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002dc2:	f141 0100 	adc.w	r1, r1, #0
 8002dc6:	e7ec      	b.n	8002da2 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dc8:	f7fe fc44 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8002dcc:	e7df      	b.n	8002d8e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002dce:	0850      	lsrs	r0, r2, #1
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002dd8:	e7f3      	b.n	8002dc2 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002dda:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e7e3      	b.n	8002da8 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002de0:	f7fe ff56 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8002de4:	e04e      	b.n	8002e84 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002de6:	f7fe ff41 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dea:	6862      	ldr	r2, [r4, #4]
 8002dec:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002df6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df8:	f1a3 0010 	sub.w	r0, r3, #16
 8002dfc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e00:	4288      	cmp	r0, r1
 8002e02:	d8b0      	bhi.n	8002d66 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002e04:	6821      	ldr	r1, [r4, #0]
 8002e06:	60cb      	str	r3, [r1, #12]
 8002e08:	e7ae      	b.n	8002d68 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e0a:	f7fe ff41 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8002e0e:	e7ec      	b.n	8002dea <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e10:	6860      	ldr	r0, [r4, #4]
 8002e12:	0843      	lsrs	r3, r0, #1
 8002e14:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e18:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e1c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e20:	e7e8      	b.n	8002df4 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e22:	f7fe fc17 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8002e26:	e7e0      	b.n	8002dea <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e28:	6860      	ldr	r0, [r4, #4]
 8002e2a:	0843      	lsrs	r3, r0, #1
 8002e2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e30:	e7f4      	b.n	8002e1c <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <UART_SetConfig+0x304>)
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d08f      	beq.n	8002d58 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e3c:	d1e8      	bne.n	8002e10 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e3e:	6860      	ldr	r0, [r4, #4]
 8002e40:	0843      	lsrs	r3, r0, #1
 8002e42:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002e46:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e4a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e4e:	e01f      	b.n	8002e90 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <UART_SetConfig+0x304>)
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d10b      	bne.n	8002e6e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002e56:	f7fe fbfd 	bl	8001654 <HAL_RCC_GetSysClockFreq>
        break;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e746      	b.n	8002cec <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <UART_SetConfig+0x304>)
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f47f af25 	bne.w	8002cb0 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002e66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	e776      	b.n	8002d5c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e72:	d1d6      	bne.n	8002e22 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e74:	f7fe fbee 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8002e78:	e004      	b.n	8002e84 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e7e:	d1b2      	bne.n	8002de6 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e80:	f7fe fef4 	bl	8001c6c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e84:	6861      	ldr	r1, [r4, #4]
 8002e86:	084a      	lsrs	r2, r1, #1
 8002e88:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002e8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e90:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e92:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e94:	f1a3 0010 	sub.w	r0, r3, #16
 8002e98:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e9c:	4288      	cmp	r0, r1
 8002e9e:	f63f af62 	bhi.w	8002d66 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002ea2:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002ea6:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ea8:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002eac:	430b      	orrs	r3, r1
 8002eae:	60c3      	str	r3, [r0, #12]
 8002eb0:	e75a      	b.n	8002d68 <UART_SetConfig+0x184>
    switch (clocksource)
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	f63f af57 	bhi.w	8002d66 <UART_SetConfig+0x182>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <UART_SetConfig+0x2dc>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002de7 	.word	0x08002de7
 8002ec4:	08002e0b 	.word	0x08002e0b
 8002ec8:	08002e11 	.word	0x08002e11
 8002ecc:	08002d67 	.word	0x08002d67
 8002ed0:	08002e23 	.word	0x08002e23
 8002ed4:	08002d67 	.word	0x08002d67
 8002ed8:	08002d67 	.word	0x08002d67
 8002edc:	08002d67 	.word	0x08002d67
 8002ee0:	08002e29 	.word	0x08002e29
 8002ee4:	efff69f3 	.word	0xefff69f3
 8002ee8:	40008000 	.word	0x40008000
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	080031a0 	.word	0x080031a0
 8002ef4:	40004400 	.word	0x40004400
 8002ef8:	080031a4 	.word	0x080031a4
 8002efc:	40004800 	.word	0x40004800
 8002f00:	40004c00 	.word	0x40004c00
 8002f04:	40005000 	.word	0x40005000
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	000ffcff 	.word	0x000ffcff
 8002f10:	f4240000 	.word	0xf4240000

08002f14 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f16:	07da      	lsls	r2, r3, #31
{
 8002f18:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f1a:	d506      	bpl.n	8002f2a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f1c:	6801      	ldr	r1, [r0, #0]
 8002f1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002f20:	684a      	ldr	r2, [r1, #4]
 8002f22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f26:	4322      	orrs	r2, r4
 8002f28:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f2a:	079c      	lsls	r4, r3, #30
 8002f2c:	d506      	bpl.n	8002f3c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2e:	6801      	ldr	r1, [r0, #0]
 8002f30:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002f32:	684a      	ldr	r2, [r1, #4]
 8002f34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f38:	4322      	orrs	r2, r4
 8002f3a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f3c:	0759      	lsls	r1, r3, #29
 8002f3e:	d506      	bpl.n	8002f4e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f40:	6801      	ldr	r1, [r0, #0]
 8002f42:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002f44:	684a      	ldr	r2, [r1, #4]
 8002f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f4a:	4322      	orrs	r2, r4
 8002f4c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f4e:	071a      	lsls	r2, r3, #28
 8002f50:	d506      	bpl.n	8002f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f52:	6801      	ldr	r1, [r0, #0]
 8002f54:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f56:	684a      	ldr	r2, [r1, #4]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5c:	4322      	orrs	r2, r4
 8002f5e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f60:	06dc      	lsls	r4, r3, #27
 8002f62:	d506      	bpl.n	8002f72 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f64:	6801      	ldr	r1, [r0, #0]
 8002f66:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f68:	688a      	ldr	r2, [r1, #8]
 8002f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f6e:	4322      	orrs	r2, r4
 8002f70:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f72:	0699      	lsls	r1, r3, #26
 8002f74:	d506      	bpl.n	8002f84 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f76:	6801      	ldr	r1, [r0, #0]
 8002f78:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002f7a:	688a      	ldr	r2, [r1, #8]
 8002f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f80:	4322      	orrs	r2, r4
 8002f82:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f84:	065a      	lsls	r2, r3, #25
 8002f86:	d50f      	bpl.n	8002fa8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f88:	6801      	ldr	r1, [r0, #0]
 8002f8a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f8c:	684a      	ldr	r2, [r1, #4]
 8002f8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002f92:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f98:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9a:	d105      	bne.n	8002fa8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f9c:	684a      	ldr	r2, [r1, #4]
 8002f9e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002fa0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002fa4:	4322      	orrs	r2, r4
 8002fa6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	d506      	bpl.n	8002fba <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fac:	6802      	ldr	r2, [r0, #0]
 8002fae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002fb0:	6853      	ldr	r3, [r2, #4]
 8002fb2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6053      	str	r3, [r2, #4]
 8002fba:	bd10      	pop	{r4, pc}

08002fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc0:	9d06      	ldr	r5, [sp, #24]
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	460f      	mov	r7, r1
 8002fc6:	4616      	mov	r6, r2
 8002fc8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fca:	6821      	ldr	r1, [r4, #0]
 8002fcc:	69ca      	ldr	r2, [r1, #28]
 8002fce:	ea37 0302 	bics.w	r3, r7, r2
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2201      	moveq	r2, #1
 8002fd6:	2200      	movne	r2, #0
 8002fd8:	42b2      	cmp	r2, r6
 8002fda:	d002      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	1c6b      	adds	r3, r5, #1
 8002fe4:	d0f2      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fe6:	b99d      	cbnz	r5, 8003010 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ff0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003000:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003004:	2300      	movs	r3, #0
 8003006:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800300a:	2003      	movs	r0, #3
 800300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003010:	f7fd feee 	bl	8000df0 <HAL_GetTick>
 8003014:	eba0 0008 	sub.w	r0, r0, r8
 8003018:	4285      	cmp	r5, r0
 800301a:	d2d6      	bcs.n	8002fca <UART_WaitOnFlagUntilTimeout+0xe>
 800301c:	e7e4      	b.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800301e <UART_CheckIdleState>:
{
 800301e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003020:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	2600      	movs	r6, #0
 8003024:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003026:	f7fd fee3 	bl	8000df0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003030:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003032:	d417      	bmi.n	8003064 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	075b      	lsls	r3, r3, #29
 800303a:	d50a      	bpl.n	8003052 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	462b      	mov	r3, r5
 8003046:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff ffb6 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8003050:	b9a0      	cbnz	r0, 800307c <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003052:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003054:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003056:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800305a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800305e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003062:	e00c      	b.n	800307e <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4632      	mov	r2, r6
 800306c:	4603      	mov	r3, r0
 800306e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff ffa2 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8003078:	2800      	cmp	r0, #0
 800307a:	d0db      	beq.n	8003034 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800307c:	2003      	movs	r0, #3
}
 800307e:	b002      	add	sp, #8
 8003080:	bd70      	pop	{r4, r5, r6, pc}

08003082 <HAL_UART_Init>:
{
 8003082:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003084:	4604      	mov	r4, r0
 8003086:	b360      	cbz	r0, 80030e2 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003088:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800308c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003090:	b91b      	cbnz	r3, 800309a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003092:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003096:	f7fd fda3 	bl	8000be0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800309a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	2324      	movs	r3, #36	; 0x24
 800309e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80030a2:	6813      	ldr	r3, [r2, #0]
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff fd9a 	bl	8002be4 <UART_SetConfig>
 80030b0:	2801      	cmp	r0, #1
 80030b2:	d016      	beq.n	80030e2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030b6:	b113      	cbz	r3, 80030be <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff ff2b 	bl	8002f14 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80030d6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80030d8:	601a      	str	r2, [r3, #0]
}
 80030da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80030de:	f7ff bf9e 	b.w	800301e <UART_CheckIdleState>
}
 80030e2:	2001      	movs	r0, #1
 80030e4:	bd10      	pop	{r4, pc}
	...

080030e8 <__libc_init_array>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4e0d      	ldr	r6, [pc, #52]	; (8003120 <__libc_init_array+0x38>)
 80030ec:	4c0d      	ldr	r4, [pc, #52]	; (8003124 <__libc_init_array+0x3c>)
 80030ee:	1ba4      	subs	r4, r4, r6
 80030f0:	10a4      	asrs	r4, r4, #2
 80030f2:	2500      	movs	r5, #0
 80030f4:	42a5      	cmp	r5, r4
 80030f6:	d109      	bne.n	800310c <__libc_init_array+0x24>
 80030f8:	4e0b      	ldr	r6, [pc, #44]	; (8003128 <__libc_init_array+0x40>)
 80030fa:	4c0c      	ldr	r4, [pc, #48]	; (800312c <__libc_init_array+0x44>)
 80030fc:	f000 f820 	bl	8003140 <_init>
 8003100:	1ba4      	subs	r4, r4, r6
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	2500      	movs	r5, #0
 8003106:	42a5      	cmp	r5, r4
 8003108:	d105      	bne.n	8003116 <__libc_init_array+0x2e>
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003110:	4798      	blx	r3
 8003112:	3501      	adds	r5, #1
 8003114:	e7ee      	b.n	80030f4 <__libc_init_array+0xc>
 8003116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800311a:	4798      	blx	r3
 800311c:	3501      	adds	r5, #1
 800311e:	e7f2      	b.n	8003106 <__libc_init_array+0x1e>
 8003120:	080031bc 	.word	0x080031bc
 8003124:	080031bc 	.word	0x080031bc
 8003128:	080031bc 	.word	0x080031bc
 800312c:	080031c0 	.word	0x080031c0

08003130 <memset>:
 8003130:	4402      	add	r2, r0
 8003132:	4603      	mov	r3, r0
 8003134:	4293      	cmp	r3, r2
 8003136:	d100      	bne.n	800313a <memset+0xa>
 8003138:	4770      	bx	lr
 800313a:	f803 1b01 	strb.w	r1, [r3], #1
 800313e:	e7f9      	b.n	8003134 <memset+0x4>

08003140 <_init>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr

0800314c <_fini>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr
