
MonHa_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08004088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  20000068  080040f0  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002d0  080040f0  000202d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006fa4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00011d9f  00000000  00000000  0002703c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002988  00000000  00000000  00038ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c48  00000000  00000000  0003b768  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f18  00000000  00000000  0003c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008b44  00000000  00000000  0003d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005012  00000000  00000000  00045e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004ae1e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002608  00000000  00000000  0004ae9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f7c 	.word	0x08003f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003f7c 	.word	0x08003f7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
	ldr	r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800059e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <LoopForever+0x16>)
	cmp	r2, r3
 80005a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005aa:	f000 feb9 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f003 f893 	bl	80036d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f000 fbd7 	bl	8000d64 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005bc:	08004088 	.word	0x08004088
	ldr	r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005c4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80005c8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80005cc:	200002d0 	.word	0x200002d0

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005d4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <_sbrk+0x2c>)
 80005d8:	6819      	ldr	r1, [r3, #0]
{
 80005da:	4602      	mov	r2, r0
	if (heap_end == 0)
 80005dc:	b909      	cbnz	r1, 80005e2 <_sbrk+0xe>
		heap_end = &end;
 80005de:	4909      	ldr	r1, [pc, #36]	; (8000604 <_sbrk+0x30>)
 80005e0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80005e2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80005e4:	4669      	mov	r1, sp
 80005e6:	4402      	add	r2, r0
 80005e8:	428a      	cmp	r2, r1
 80005ea:	d906      	bls.n	80005fa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80005ec:	f003 f86e 	bl	80036cc <__errno>
 80005f0:	230c      	movs	r3, #12
 80005f2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80005fa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80005fc:	bd08      	pop	{r3, pc}
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084
 8000604:	200002d0 	.word	0x200002d0

08000608 <WriteChar.isra.3>:
static void Convert(uint8_t* Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
  uint16_t ch = 0 ;
  uint8_t loop = 0, index = 0;

  switch (*Char)
 8000608:	282f      	cmp	r0, #47	; 0x2f
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t* ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
 800060a:	b570      	push	{r4, r5, r6, lr}
  switch (*Char)
 800060c:	d06d      	beq.n	80006ea <WriteChar.isra.3+0xe2>
 800060e:	d821      	bhi.n	8000654 <WriteChar.isra.3+0x4c>
 8000610:	2829      	cmp	r0, #41	; 0x29
 8000612:	d05c      	beq.n	80006ce <WriteChar.isra.3+0xc6>
 8000614:	d807      	bhi.n	8000626 <WriteChar.isra.3+0x1e>
 8000616:	2825      	cmp	r0, #37	; 0x25
 8000618:	d06c      	beq.n	80006f4 <WriteChar.isra.3+0xec>
 800061a:	2828      	cmp	r0, #40	; 0x28
 800061c:	d055      	beq.n	80006ca <WriteChar.isra.3+0xc2>
 800061e:	2820      	cmp	r0, #32
 8000620:	d106      	bne.n	8000630 <WriteChar.isra.3+0x28>
      ch = 0x00;
 8000622:	2400      	movs	r4, #0
 8000624:	e031      	b.n	800068a <WriteChar.isra.3+0x82>
  switch (*Char)
 8000626:	282b      	cmp	r0, #43	; 0x2b
 8000628:	d05c      	beq.n	80006e4 <WriteChar.isra.3+0xdc>
 800062a:	d32c      	bcc.n	8000686 <WriteChar.isra.3+0x7e>
 800062c:	282d      	cmp	r0, #45	; 0x2d
 800062e:	d056      	beq.n	80006de <WriteChar.isra.3+0xd6>
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL) )
 8000630:	f1a0 0441 	sub.w	r4, r0, #65	; 0x41
 8000634:	b2e5      	uxtb	r5, r4
 8000636:	2d19      	cmp	r5, #25
        ch = CapLetterMap[*Char - 'A'];
 8000638:	bf98      	it	ls
 800063a:	4da7      	ldrls	r5, [pc, #668]	; (80008d8 <WriteChar.isra.3+0x2d0>)
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 800063c:	f1a0 0061 	sub.w	r0, r0, #97	; 0x61
        ch = CapLetterMap[*Char - 'A'];
 8000640:	bf98      	it	ls
 8000642:	f835 4014 	ldrhls.w	r4, [r5, r4, lsl #1]
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 8000646:	b2c5      	uxtb	r5, r0
  uint16_t ch = 0 ;
 8000648:	bf88      	it	hi
 800064a:	2400      	movhi	r4, #0
      if ( (*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && ( *Char > ASCII_CHAR_APOSTROPHE) )
 800064c:	2d19      	cmp	r5, #25
 800064e:	d81c      	bhi.n	800068a <WriteChar.isra.3+0x82>
        ch = CapLetterMap[*Char - 'a'];
 8000650:	4ca1      	ldr	r4, [pc, #644]	; (80008d8 <WriteChar.isra.3+0x2d0>)
 8000652:	e054      	b.n	80006fe <WriteChar.isra.3+0xf6>
  switch (*Char)
 8000654:	286d      	cmp	r0, #109	; 0x6d
 8000656:	d03c      	beq.n	80006d2 <WriteChar.isra.3+0xca>
 8000658:	d806      	bhi.n	8000668 <WriteChar.isra.3+0x60>
 800065a:	2839      	cmp	r0, #57	; 0x39
 800065c:	d94d      	bls.n	80006fa <WriteChar.isra.3+0xf2>
 800065e:	2864      	cmp	r0, #100	; 0x64
 8000660:	d1e6      	bne.n	8000630 <WriteChar.isra.3+0x28>
      ch = C_DMAP;
 8000662:	f44f 4473 	mov.w	r4, #62208	; 0xf300
 8000666:	e010      	b.n	800068a <WriteChar.isra.3+0x82>
  switch (*Char)
 8000668:	28b0      	cmp	r0, #176	; 0xb0
 800066a:	d040      	beq.n	80006ee <WriteChar.isra.3+0xe6>
 800066c:	d804      	bhi.n	8000678 <WriteChar.isra.3+0x70>
 800066e:	286e      	cmp	r0, #110	; 0x6e
 8000670:	d1de      	bne.n	8000630 <WriteChar.isra.3+0x28>
      ch = C_NMAP;
 8000672:	f242 2410 	movw	r4, #8720	; 0x2210
 8000676:	e008      	b.n	800068a <WriteChar.isra.3+0x82>
  switch (*Char)
 8000678:	28b5      	cmp	r0, #181	; 0xb5
 800067a:	d02d      	beq.n	80006d8 <WriteChar.isra.3+0xd0>
 800067c:	28ff      	cmp	r0, #255	; 0xff
 800067e:	d1d7      	bne.n	8000630 <WriteChar.isra.3+0x28>
      ch = C_FULL;
 8000680:	f64f 74dd 	movw	r4, #65501	; 0xffdd
 8000684:	e001      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_STAR;
 8000686:	f24a 04dd 	movw	r4, #41181	; 0xa0dd
  if (Point == POINT_ON)
 800068a:	2901      	cmp	r1, #1
    ch |= 0x0002;
 800068c:	bf08      	it	eq
 800068e:	f044 0402 	orreq.w	r4, r4, #2
  if (Colon == DOUBLEPOINT_ON)
 8000692:	2a01      	cmp	r2, #1
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8000694:	4991      	ldr	r1, [pc, #580]	; (80008dc <WriteChar.isra.3+0x2d4>)
    ch |= 0x0020;
 8000696:	bf08      	it	eq
 8000698:	f044 0420 	orreq.w	r4, r4, #32
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 800069c:	f3c4 2003 	ubfx	r0, r4, #8, #4
 80006a0:	1322      	asrs	r2, r4, #12
 80006a2:	6048      	str	r0, [r1, #4]
 80006a4:	f3c4 1003 	ubfx	r0, r4, #4, #4
 80006a8:	f004 040f 	and.w	r4, r4, #15
 80006ac:	60cc      	str	r4, [r1, #12]
 80006ae:	600a      	str	r2, [r1, #0]
 80006b0:	6088      	str	r0, [r1, #8]
 80006b2:	460c      	mov	r4, r1
{
  uint32_t data =0x00;
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);

  switch (Position)
 80006b4:	2b05      	cmp	r3, #5
 80006b6:	f200 823a 	bhi.w	8000b2e <WriteChar.isra.3+0x526>
 80006ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80006be:	0023      	.short	0x0023
 80006c0:	00c00070 	.word	0x00c00070
 80006c4:	017c011b 	.word	0x017c011b
 80006c8:	01e8      	.short	0x01e8
      ch = C_OPENPARMAP;
 80006ca:	4604      	mov	r4, r0
 80006cc:	e7dd      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_CLOSEPARMAP;
 80006ce:	2411      	movs	r4, #17
 80006d0:	e7db      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_MMAP;
 80006d2:	f24b 2410 	movw	r4, #45584	; 0xb210
 80006d6:	e7d8      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_UMAP;
 80006d8:	f246 0484 	movw	r4, #24708	; 0x6084
 80006dc:	e7d5      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_MINUS;
 80006de:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 80006e2:	e7d2      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_PLUS;
 80006e4:	f24a 0414 	movw	r4, #40980	; 0xa014
 80006e8:	e7cf      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_SLATCH;
 80006ea:	24c0      	movs	r4, #192	; 0xc0
 80006ec:	e7cd      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_PERCENT_1;
 80006ee:	f44f 446c 	mov.w	r4, #60416	; 0xec00
 80006f2:	e7ca      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = C_PERCENT_2;
 80006f4:	f44f 4433 	mov.w	r4, #45824	; 0xb300
 80006f8:	e7c7      	b.n	800068a <WriteChar.isra.3+0x82>
      ch = NumberMap[*Char - ASCII_CHAR_0];
 80006fa:	4c79      	ldr	r4, [pc, #484]	; (80008e0 <WriteChar.isra.3+0x2d8>)
 80006fc:	3830      	subs	r0, #48	; 0x30
        ch = CapLetterMap[*Char - 'a'];
 80006fe:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
 8000702:	e7c2      	b.n	800068a <WriteChar.isra.3+0x82>
  {
    /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000704:	0111      	lsls	r1, r2, #4
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000706:	f002 0308 	and.w	r3, r2, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800070a:	f001 0110 	and.w	r1, r1, #16
 800070e:	4319      	orrs	r1, r3
 8000710:	0593      	lsls	r3, r2, #22
 8000712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000716:	4319      	orrs	r1, r3
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000718:	0513      	lsls	r3, r2, #20
 800071a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 800071e:	430b      	orrs	r3, r1
 8000720:	4a70      	ldr	r2, [pc, #448]	; (80008e4 <WriteChar.isra.3+0x2dc>)
 8000722:	4871      	ldr	r0, [pc, #452]	; (80008e8 <WriteChar.isra.3+0x2e0>)
 8000724:	2100      	movs	r1, #0
 8000726:	f001 f85e 	bl	80017e6 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800072a:	6862      	ldr	r2, [r4, #4]
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800072c:	486e      	ldr	r0, [pc, #440]	; (80008e8 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800072e:	0113      	lsls	r3, r2, #4
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000730:	f002 0108 	and.w	r1, r2, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	430b      	orrs	r3, r1
 800073a:	0591      	lsls	r1, r2, #22
 800073c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000740:	0512      	lsls	r2, r2, #20
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000742:	430b      	orrs	r3, r1
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000744:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000748:	4313      	orrs	r3, r2
 800074a:	2102      	movs	r1, #2
 800074c:	4a65      	ldr	r2, [pc, #404]	; (80008e4 <WriteChar.isra.3+0x2dc>)
 800074e:	f001 f84a 	bl	80017e6 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000752:	68a2      	ldr	r2, [r4, #8]
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000754:	4864      	ldr	r0, [pc, #400]	; (80008e8 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000756:	0113      	lsls	r3, r2, #4
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000758:	f002 0108 	and.w	r1, r2, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	430b      	orrs	r3, r1
 8000762:	0591      	lsls	r1, r2, #22
 8000764:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8000768:	0512      	lsls	r2, r2, #20
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800076a:	430b      	orrs	r3, r1
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800076c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000770:	4313      	orrs	r3, r2
 8000772:	2104      	movs	r1, #4
 8000774:	4a5b      	ldr	r2, [pc, #364]	; (80008e4 <WriteChar.isra.3+0x2dc>)
 8000776:	f001 f836 	bl	80017e6 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 800077a:	68e2      	ldr	r2, [r4, #12]
 800077c:	0113      	lsls	r3, r2, #4
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800077e:	f002 0108 	and.w	r1, r2, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	430b      	orrs	r3, r1
 8000788:	0591      	lsls	r1, r2, #22
 800078a:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 800078e:	0512      	lsls	r2, r2, #20
 8000790:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8000794:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000796:	4313      	orrs	r3, r2
 8000798:	4a52      	ldr	r2, [pc, #328]	; (80008e4 <WriteChar.isra.3+0x2dc>)
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800079a:	2106      	movs	r1, #6
 800079c:	e106      	b.n	80009ac <WriteChar.isra.3+0x3a4>
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800079e:	0311      	lsls	r1, r2, #12
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007a0:	0293      	lsls	r3, r2, #10
 80007a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007a6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007aa:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007ac:	0193      	lsls	r3, r2, #6
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007b2:	4319      	orrs	r1, r3
 80007b4:	0093      	lsls	r3, r2, #2
 80007b6:	f003 0320 	and.w	r3, r3, #32
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80007ba:	430b      	orrs	r3, r1
 80007bc:	4a4b      	ldr	r2, [pc, #300]	; (80008ec <WriteChar.isra.3+0x2e4>)
 80007be:	484a      	ldr	r0, [pc, #296]	; (80008e8 <WriteChar.isra.3+0x2e0>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	f001 f810 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007c6:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80007c8:	4847      	ldr	r0, [pc, #284]	; (80008e8 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007ca:	0313      	lsls	r3, r2, #12
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007cc:	0291      	lsls	r1, r2, #10
 80007ce:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007d6:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007d8:	0191      	lsls	r1, r2, #6
 80007da:	f001 0140 	and.w	r1, r1, #64	; 0x40
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007de:	0092      	lsls	r2, r2, #2
 80007e0:	430b      	orrs	r3, r1
 80007e2:	f002 0220 	and.w	r2, r2, #32
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80007e6:	4313      	orrs	r3, r2
 80007e8:	2102      	movs	r1, #2
 80007ea:	4a40      	ldr	r2, [pc, #256]	; (80008ec <WriteChar.isra.3+0x2e4>)
 80007ec:	f000 fffb 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007f0:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80007f2:	483d      	ldr	r0, [pc, #244]	; (80008e8 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007f4:	0313      	lsls	r3, r2, #12
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 80007f6:	0291      	lsls	r1, r2, #10
 80007f8:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 80007fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000800:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000802:	0191      	lsls	r1, r2, #6
 8000804:	f001 0140 	and.w	r1, r1, #64	; 0x40
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	430b      	orrs	r3, r1
 800080c:	f002 0220 	and.w	r2, r2, #32
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000810:	4313      	orrs	r3, r2
 8000812:	2104      	movs	r1, #4
 8000814:	4a35      	ldr	r2, [pc, #212]	; (80008ec <WriteChar.isra.3+0x2e4>)
 8000816:	f000 ffe6 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800081a:	68e2      	ldr	r2, [r4, #12]
 800081c:	0313      	lsls	r3, r2, #12
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 800081e:	0291      	lsls	r1, r2, #10
 8000820:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8000824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000828:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 800082a:	0191      	lsls	r1, r2, #6
 800082c:	f001 0140 	and.w	r1, r1, #64	; 0x40
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	f002 0220 	and.w	r2, r2, #32
 8000836:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000838:	4313      	orrs	r3, r2
 800083a:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <WriteChar.isra.3+0x2e4>)
 800083c:	e7ad      	b.n	800079a <WriteChar.isra.3+0x192>
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800083e:	0711      	lsls	r1, r2, #28
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000840:	0693      	lsls	r3, r2, #26
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000846:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800084a:	4319      	orrs	r1, r3
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800084c:	03d3      	lsls	r3, r2, #15
 800084e:	b29b      	uxth	r3, r3
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000850:	4319      	orrs	r1, r3
 8000852:	02d3      	lsls	r3, r2, #11
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000858:	430b      	orrs	r3, r1
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <WriteChar.isra.3+0x2e8>)
 800085c:	4822      	ldr	r0, [pc, #136]	; (80008e8 <WriteChar.isra.3+0x2e0>)
 800085e:	2100      	movs	r1, #0
 8000860:	f000 ffc1 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000864:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000866:	4820      	ldr	r0, [pc, #128]	; (80008e8 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000868:	0713      	lsls	r3, r2, #28
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800086a:	0691      	lsls	r1, r2, #26
 800086c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000874:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000876:	03d1      	lsls	r1, r2, #15
 8000878:	b289      	uxth	r1, r1
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800087a:	02d2      	lsls	r2, r2, #11
 800087c:	430b      	orrs	r3, r1
 800087e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000882:	4313      	orrs	r3, r2
 8000884:	2102      	movs	r1, #2
 8000886:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <WriteChar.isra.3+0x2e8>)
 8000888:	f000 ffad 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800088c:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800088e:	4816      	ldr	r0, [pc, #88]	; (80008e8 <WriteChar.isra.3+0x2e0>)
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000890:	0713      	lsls	r3, r2, #28
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8000892:	0691      	lsls	r1, r2, #26
 8000894:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8000898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 800089c:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 800089e:	03d1      	lsls	r1, r2, #15
 80008a0:	b289      	uxth	r1, r1
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80008a2:	02d2      	lsls	r2, r2, #11
 80008a4:	430b      	orrs	r3, r1
 80008a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2104      	movs	r1, #4
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <WriteChar.isra.3+0x2e8>)
 80008b0:	f000 ff99 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80008b4:	68e2      	ldr	r2, [r4, #12]
 80008b6:	0713      	lsls	r3, r2, #28
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80008b8:	0691      	lsls	r1, r2, #26
 80008ba:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80008be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80008c2:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 80008c4:	03d1      	lsls	r1, r2, #15
 80008c6:	b289      	uxth	r1, r1
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 80008c8:	02d2      	lsls	r2, r2, #11
 80008ca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008ce:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80008d0:	4313      	orrs	r3, r2
 80008d2:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <WriteChar.isra.3+0x2e8>)
 80008d4:	e761      	b.n	800079a <WriteChar.isra.3+0x192>
 80008d6:	bf00      	nop
 80008d8:	08003f94 	.word	0x08003f94
 80008dc:	20000094 	.word	0x20000094
 80008e0:	08003fc8 	.word	0x08003fc8
 80008e4:	ff3fffe7 	.word	0xff3fffe7
 80008e8:	20000128 	.word	0x20000128
 80008ec:	ffffcf9f 	.word	0xffffcf9f
 80008f0:	cfff3fff 	.word	0xcfff3fff
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 80008f4:	06d3      	lsls	r3, r2, #27
 80008f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80008fa:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80008fe:	2100      	movs	r1, #0
 8000900:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000904:	488a      	ldr	r0, [pc, #552]	; (8000b30 <WriteChar.isra.3+0x528>)
 8000906:	f000 ff6e 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800090a:	6822      	ldr	r2, [r4, #0]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 800090c:	4888      	ldr	r0, [pc, #544]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800090e:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000912:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000916:	4313      	orrs	r3, r2
 8000918:	2101      	movs	r1, #1
 800091a:	f06f 0203 	mvn.w	r2, #3
 800091e:	f000 ff62 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000922:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000924:	4882      	ldr	r0, [pc, #520]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000926:	06d3      	lsls	r3, r2, #27
 8000928:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800092c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8000930:	2102      	movs	r1, #2
 8000932:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000936:	f000 ff56 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800093a:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800093c:	487c      	ldr	r0, [pc, #496]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800093e:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000942:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000946:	4313      	orrs	r3, r2
 8000948:	2103      	movs	r1, #3
 800094a:	f06f 0203 	mvn.w	r2, #3
 800094e:	f000 ff4a 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000952:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000954:	4876      	ldr	r0, [pc, #472]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000956:	06d3      	lsls	r3, r2, #27
 8000958:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800095c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8000960:	2104      	movs	r1, #4
 8000962:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000966:	f000 ff3e 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800096a:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800096c:	4870      	ldr	r0, [pc, #448]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800096e:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000972:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000976:	4313      	orrs	r3, r2
 8000978:	2105      	movs	r1, #5
 800097a:	f06f 0203 	mvn.w	r2, #3
 800097e:	f000 ff32 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000982:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000984:	486a      	ldr	r0, [pc, #424]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8000986:	06d3      	lsls	r3, r2, #27
 8000988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800098c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8000990:	2106      	movs	r1, #6
 8000992:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000996:	f000 ff26 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800099a:	68e2      	ldr	r2, [r4, #12]
 800099c:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80009a0:	f002 0202 	and.w	r2, r2, #2
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80009a4:	4313      	orrs	r3, r2
 80009a6:	f06f 0203 	mvn.w	r2, #3
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80009aa:	2107      	movs	r1, #7
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80009ac:	4860      	ldr	r0, [pc, #384]	; (8000b30 <WriteChar.isra.3+0x528>)
      break;

     default:
      break;
  }
}
 80009ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80009b2:	f000 bf18 	b.w	80017e6 <HAL_LCD_Write>
       data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80009b6:	0613      	lsls	r3, r2, #24
 80009b8:	0592      	lsls	r2, r2, #22
 80009ba:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80009be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80009c2:	4313      	orrs	r3, r2
 80009c4:	2100      	movs	r1, #0
 80009c6:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80009ca:	4859      	ldr	r0, [pc, #356]	; (8000b30 <WriteChar.isra.3+0x528>)
 80009cc:	f000 ff0b 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80009d0:	6822      	ldr	r2, [r4, #0]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 80009d2:	4857      	ldr	r0, [pc, #348]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80009d4:	0853      	lsrs	r3, r2, #1
 80009d6:	00d2      	lsls	r2, r2, #3
 80009d8:	f002 0208 	and.w	r2, r2, #8
 80009dc:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 80009e0:	4313      	orrs	r3, r2
 80009e2:	2101      	movs	r1, #1
 80009e4:	f06f 020c 	mvn.w	r2, #12
 80009e8:	f000 fefd 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80009ec:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80009ee:	4850      	ldr	r0, [pc, #320]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80009f0:	0613      	lsls	r3, r2, #24
 80009f2:	0592      	lsls	r2, r2, #22
 80009f4:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80009f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2102      	movs	r1, #2
 8000a00:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8000a04:	f000 feef 	bl	80017e6 <HAL_LCD_Write>
       data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8000a08:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000a0a:	4849      	ldr	r0, [pc, #292]	; (8000b30 <WriteChar.isra.3+0x528>)
       data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8000a0c:	0853      	lsrs	r3, r2, #1
 8000a0e:	00d2      	lsls	r2, r2, #3
 8000a10:	f002 0208 	and.w	r2, r2, #8
 8000a14:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	f06f 020c 	mvn.w	r2, #12
 8000a20:	f000 fee1 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8000a24:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a26:	4842      	ldr	r0, [pc, #264]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8000a28:	0613      	lsls	r3, r2, #24
 8000a2a:	0592      	lsls	r2, r2, #22
 8000a2c:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8000a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a34:	4313      	orrs	r3, r2
 8000a36:	2104      	movs	r1, #4
 8000a38:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8000a3c:	f000 fed3 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8000a40:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a42:	483b      	ldr	r0, [pc, #236]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8000a44:	0853      	lsrs	r3, r2, #1
 8000a46:	00d2      	lsls	r2, r2, #3
 8000a48:	f002 0208 	and.w	r2, r2, #8
 8000a4c:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000a50:	4313      	orrs	r3, r2
 8000a52:	2105      	movs	r1, #5
 8000a54:	f06f 020c 	mvn.w	r2, #12
 8000a58:	f000 fec5 	bl	80017e6 <HAL_LCD_Write>
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8000a5c:	68e2      	ldr	r2, [r4, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a5e:	4834      	ldr	r0, [pc, #208]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8000a60:	0613      	lsls	r3, r2, #24
 8000a62:	0592      	lsls	r2, r2, #22
 8000a64:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8000a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	2106      	movs	r1, #6
 8000a70:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8000a74:	f000 feb7 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8000a78:	68e2      	ldr	r2, [r4, #12]
 8000a7a:	0853      	lsrs	r3, r2, #1
 8000a7c:	00d2      	lsls	r2, r2, #3
 8000a7e:	f002 0208 	and.w	r2, r2, #8
 8000a82:	f003 0304 	and.w	r3, r3, #4
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000a86:	4313      	orrs	r3, r2
 8000a88:	f06f 020c 	mvn.w	r2, #12
 8000a8c:	e78d      	b.n	80009aa <WriteChar.isra.3+0x3a2>
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000a8e:	01d3      	lsls	r3, r2, #7
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000a90:	01d1      	lsls	r1, r2, #7
 8000a92:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000a9a:	430b      	orrs	r3, r1
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000a9c:	0451      	lsls	r1, r2, #17
 8000a9e:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
          | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000aa2:	05d2      	lsls	r2, r2, #23
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	2100      	movs	r1, #0
 8000aae:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <WriteChar.isra.3+0x52c>)
 8000ab0:	481f      	ldr	r0, [pc, #124]	; (8000b30 <WriteChar.isra.3+0x528>)
 8000ab2:	f000 fe98 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000ab6:	6862      	ldr	r2, [r4, #4]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000ab8:	481d      	ldr	r0, [pc, #116]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000aba:	01d3      	lsls	r3, r2, #7
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000abc:	01d1      	lsls	r1, r2, #7
 8000abe:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000ac6:	430b      	orrs	r3, r1
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000ac8:	0451      	lsls	r1, r2, #17
 8000aca:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
          | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000ace:	05d2      	lsls	r2, r2, #23
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <WriteChar.isra.3+0x52c>)
 8000adc:	f000 fe83 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000ae0:	68a2      	ldr	r2, [r4, #8]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <WriteChar.isra.3+0x528>)
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000ae4:	01d3      	lsls	r3, r2, #7
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000ae6:	01d1      	lsls	r1, r2, #7
 8000ae8:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000af0:	430b      	orrs	r3, r1
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000af2:	0451      	lsls	r1, r2, #17
 8000af4:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
          | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000af8:	05d2      	lsls	r2, r2, #23
 8000afa:	430b      	orrs	r3, r1
 8000afc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8000b00:	4313      	orrs	r3, r2
 8000b02:	2104      	movs	r1, #4
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <WriteChar.isra.3+0x52c>)
 8000b06:	f000 fe6e 	bl	80017e6 <HAL_LCD_Write>
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000b0a:	68e2      	ldr	r2, [r4, #12]
 8000b0c:	01d3      	lsls	r3, r2, #7
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000b0e:	01d1      	lsls	r1, r2, #7
 8000b10:	f401 7100 	and.w	r1, r1, #512	; 0x200
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000b18:	430b      	orrs	r3, r1
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8000b1a:	0451      	lsls	r1, r2, #17
 8000b1c:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
          | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8000b20:	05d2      	lsls	r2, r2, #23
 8000b22:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000b26:	430b      	orrs	r3, r1
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	4a02      	ldr	r2, [pc, #8]	; (8000b34 <WriteChar.isra.3+0x52c>)
 8000b2c:	e635      	b.n	800079a <WriteChar.isra.3+0x192>
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	20000128 	.word	0x20000128
 8000b34:	fbfdfcff 	.word	0xfbfdfcff

08000b38 <BSP_LCD_GLASS_DisplayString>:
{
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	4605      	mov	r5, r0
  while ((*ptr != 0) & (position <= LCD_DIGIT_POSITION_6))
 8000b3c:	2400      	movs	r4, #0
 8000b3e:	5d28      	ldrb	r0, [r5, r4]
 8000b40:	b2e3      	uxtb	r3, r4
 8000b42:	3401      	adds	r4, #1
 8000b44:	b108      	cbz	r0, 8000b4a <BSP_LCD_GLASS_DisplayString+0x12>
 8000b46:	2b05      	cmp	r3, #5
 8000b48:	d904      	bls.n	8000b54 <BSP_LCD_GLASS_DisplayString+0x1c>
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <BSP_LCD_GLASS_DisplayString+0x28>)
}
 8000b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8000b50:	f000 be89 	b.w	8001866 <HAL_LCD_UpdateDisplayRequest>
    WriteChar(ptr, POINT_OFF, DOUBLEPOINT_OFF, position);
 8000b54:	2200      	movs	r2, #0
 8000b56:	4611      	mov	r1, r2
 8000b58:	f7ff fd56 	bl	8000608 <WriteChar.isra.3>
 8000b5c:	e7ef      	b.n	8000b3e <BSP_LCD_GLASS_DisplayString+0x6>
 8000b5e:	bf00      	nop
 8000b60:	20000128 	.word	0x20000128

08000b64 <BSP_LCD_GLASS_Clear>:
  HAL_LCD_Clear(&LCDHandle);
 8000b64:	4801      	ldr	r0, [pc, #4]	; (8000b6c <BSP_LCD_GLASS_Clear+0x8>)
 8000b66:	f000 bea2 	b.w	80018ae <HAL_LCD_Clear>
 8000b6a:	bf00      	nop
 8000b6c:	20000128 	.word	0x20000128

08000b70 <BSP_LCD_GLASS_Init>:
{
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8000b72:	4b51      	ldr	r3, [pc, #324]	; (8000cb8 <BSP_LCD_GLASS_Init+0x148>)
  LCDHandle.Instance              = LCD;
 8000b74:	4d51      	ldr	r5, [pc, #324]	; (8000cbc <BSP_LCD_GLASS_Init+0x14c>)
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8000b76:	2400      	movs	r4, #0
 8000b78:	e885 0018 	stmia.w	r5, {r3, r4}
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8000b7c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000b80:	60ab      	str	r3, [r5, #8]
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8000b82:	230c      	movs	r3, #12
{
 8000b84:	b0bf      	sub	sp, #252	; 0xfc
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8000b86:	60eb      	str	r3, [r5, #12]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8000b88:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8000b8c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000b8e:	4621      	mov	r1, r4
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8000b90:	612b      	str	r3, [r5, #16]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8000b92:	61aa      	str	r2, [r5, #24]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8000b94:	622b      	str	r3, [r5, #32]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000b96:	2214      	movs	r2, #20
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8000b98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000b9c:	a806      	add	r0, sp, #24
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8000b9e:	62eb      	str	r3, [r5, #44]	; 0x2c
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8000ba0:	616c      	str	r4, [r5, #20]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8000ba2:	61ec      	str	r4, [r5, #28]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8000ba4:	626c      	str	r4, [r5, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8000ba6:	62ac      	str	r4, [r5, #40]	; 0x28
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8000ba8:	632c      	str	r4, [r5, #48]	; 0x30
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000baa:	f002 fdb9 	bl	8003720 <memset>
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000bae:	4621      	mov	r1, r4
 8000bb0:	2244      	movs	r2, #68	; 0x44
 8000bb2:	a80b      	add	r0, sp, #44	; 0x2c
 8000bb4:	f002 fdb4 	bl	8003720 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8000bb8:	4621      	mov	r1, r4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000bbe:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8000bc2:	2288      	movs	r2, #136	; 0x88
 8000bc4:	a81c      	add	r0, sp, #112	; 0x70
 8000bc6:	f002 fdab 	bl	8003720 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8000bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	9b00      	ldr	r3, [sp, #0]
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	930b      	str	r3, [sp, #44]	; 0x2c
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8000be0:	a80b      	add	r0, sp, #44	; 0x2c
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	930d      	str	r3, [sp, #52]	; 0x34
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8000be6:	f001 f87b 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000bea:	4606      	mov	r6, r0
 8000bec:	b100      	cbz	r0, 8000bf0 <BSP_LCD_GLASS_Init+0x80>
 8000bee:	e7fe      	b.n	8000bee <BSP_LCD_GLASS_Init+0x7e>
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf4:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8000bf6:	a81c      	add	r0, sp, #112	; 0x70
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfc:	933d      	str	r3, [sp, #244]	; 0xf4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8000bfe:	f001 fcb7 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	9303      	str	r3, [sp, #12]
 8000c36:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8000c42:	9608      	str	r6, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8000c4c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000c50:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8000c52:	2303      	movs	r3, #3
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8000c54:	2702      	movs	r7, #2
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8000c56:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000c58:	a906      	add	r1, sp, #24
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8000c5a:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8000c60:	930a      	str	r3, [sp, #40]	; 0x28
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8000c62:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8000c64:	f000 fcde 	bl	8001624 <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8000c68:	f24f 2333 	movw	r3, #62003	; 0xf233
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8000c6c:	a906      	add	r1, sp, #24
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <BSP_LCD_GLASS_Init+0x150>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8000c70:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8000c72:	f000 fcd7 	bl	8001624 <HAL_GPIO_Init>
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8000c76:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000c7a:	a906      	add	r1, sp, #24
 8000c7c:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <BSP_LCD_GLASS_Init+0x154>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8000c7e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000c80:	f000 fcd0 	bl	8001624 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8000c84:	a906      	add	r1, sp, #24
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8000c86:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <BSP_LCD_GLASS_Init+0x158>)
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8000c8c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8000c8e:	f000 fcc9 	bl	8001624 <HAL_GPIO_Init>
  HAL_Delay(2);
 8000c92:	4638      	mov	r0, r7
 8000c94:	f000 fba4 	bl	80013e0 <HAL_Delay>
  __HAL_RCC_LCD_CLK_ENABLE();
 8000c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca6:	9305      	str	r3, [sp, #20]
  HAL_LCD_Init(&LCDHandle);
 8000ca8:	4628      	mov	r0, r5
  __HAL_RCC_LCD_CLK_ENABLE();
 8000caa:	9b05      	ldr	r3, [sp, #20]
  HAL_LCD_Init(&LCDHandle);
 8000cac:	f000 fe4d 	bl	800194a <HAL_LCD_Init>
  BSP_LCD_GLASS_Clear();
 8000cb0:	f7ff ff58 	bl	8000b64 <BSP_LCD_GLASS_Clear>
}
 8000cb4:	b03f      	add	sp, #252	; 0xfc
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb8:	40002400 	.word	0x40002400
 8000cbc:	20000128 	.word	0x20000128
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	48000800 	.word	0x48000800
 8000cc8:	48000c00 	.word	0x48000c00

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	2614      	movs	r6, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	2244      	movs	r2, #68	; 0x44
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	a805      	add	r0, sp, #20
 8000cd8:	f002 fd22 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	4632      	mov	r2, r6
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4668      	mov	r0, sp
 8000ce2:	f002 fd1d 	bl	8003720 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce6:	2288      	movs	r2, #136	; 0x88
 8000ce8:	2100      	movs	r1, #0
 8000cea:	a816      	add	r0, sp, #88	; 0x58
 8000cec:	f002 fd18 	bl	8003720 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000cf0:	2318      	movs	r3, #24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cf2:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000cf6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cf8:	2707      	movs	r7, #7
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cfa:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	eb0d 0006 	add.w	r0, sp, r6
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d00:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000d02:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d04:	940a      	str	r4, [sp, #40]	; 0x28
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2600      	movs	r6, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d08:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d0c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d10:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d12:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d14:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f000 ffe3 	bl	8001ce0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	210f      	movs	r1, #15
 8000d20:	e88d 004e 	stmia.w	sp, {r1, r2, r3, r6}
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d24:	4668      	mov	r0, sp
 8000d26:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	9604      	str	r6, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d2a:	f001 f9ff 	bl	800212c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SystemClock_Config+0x94>)
 8000d30:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 72;
 8000d32:	2348      	movs	r3, #72	; 0x48
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d34:	9625      	str	r6, [sp, #148]	; 0x94
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d36:	962f      	str	r6, [sp, #188]	; 0xbc
  PeriphClkInit.PLLSAI1.PLLSAI1N = 72;
 8000d38:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d3a:	f44f 7600 	mov.w	r6, #512	; 0x200
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d44:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d46:	9637      	str	r6, [sp, #220]	; 0xdc
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d48:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d4a:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d4c:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d4e:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d50:	951c      	str	r5, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d52:	f001 fc0d 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d56:	4630      	mov	r0, r6
 8000d58:	f000 fe78 	bl	8001a4c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8000d5c:	b039      	add	sp, #228	; 0xe4
 8000d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d60:	00020802 	.word	0x00020802

08000d64 <main>:
 {
 8000d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d68:	4d9c      	ldr	r5, [pc, #624]	; (8000fdc <main+0x278>)
 {
 8000d6a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000d6c:	f000 fb14 	bl	8001398 <HAL_Init>
  SystemClock_Config();
 8000d70:	f7ff ffac 	bl	8000ccc <SystemClock_Config>
BSP_LCD_GLASS_Init();
 8000d74:	f7ff fefc 	bl	8000b70 <BSP_LCD_GLASS_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2214      	movs	r2, #20
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	a807      	add	r0, sp, #28
 8000d7e:	f002 fccf 	bl	8003720 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000d84:	4896      	ldr	r0, [pc, #600]	; (8000fe0 <main+0x27c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d8c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	9302      	str	r3, [sp, #8]
 8000d94:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000db0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	9304      	str	r3, [sp, #16]
 8000db8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000dc2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	9305      	str	r3, [sp, #20]
 8000dca:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000dd4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7184 	mov.w	r1, #264	; 0x108
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin, GPIO_PIN_RESET);
 8000de4:	f000 fcfa 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	487d      	ldr	r0, [pc, #500]	; (8000fe4 <main+0x280>)

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8000df0:	f000 fcf4 	bl	80017dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000df8:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2602      	movs	r6, #2
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	a907      	add	r1, sp, #28
 8000dfe:	4878      	ldr	r0, [pc, #480]	; (8000fe0 <main+0x27c>)
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000e00:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f000 fc0b 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	a907      	add	r1, sp, #28
 8000e10:	4875      	ldr	r0, [pc, #468]	; (8000fe8 <main+0x284>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e12:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f000 fc03 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000e1e:	232f      	movs	r3, #47	; 0x2f
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	a907      	add	r1, sp, #28
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000e26:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e2a:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000e2e:	2604      	movs	r6, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f000 fbf8 	bl	8001624 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000e34:	a907      	add	r1, sp, #28
 8000e36:	486b      	ldr	r0, [pc, #428]	; (8000fe4 <main+0x280>)
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000e38:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f000 fbee 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000e48:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	a907      	add	r1, sp, #28
 8000e4e:	4864      	ldr	r0, [pc, #400]	; (8000fe0 <main+0x27c>)
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000e50:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f000 fbe2 	bl	8001624 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e60:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	64ab      	str	r3, [r5, #72]	; 0x48
 8000e68:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e6a:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000e6e:	4621      	mov	r1, r4
 8000e70:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e72:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000e74:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e76:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000e78:	f000 fad2 	bl	8001420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000e7c:	2039      	movs	r0, #57	; 0x39
 8000e7e:	f000 fb03 	bl	8001488 <HAL_NVIC_EnableIRQ>
  hlcd.Instance = LCD;
 8000e82:	485a      	ldr	r0, [pc, #360]	; (8000fec <main+0x288>)
 8000e84:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <main+0x28c>)
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000e86:	6084      	str	r4, [r0, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000e88:	250c      	movs	r5, #12
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000e8a:	e880 0018 	stmia.w	r0, {r3, r4}
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000e8e:	60c5      	str	r5, [r0, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000e90:	6104      	str	r4, [r0, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000e92:	6144      	str	r4, [r0, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000e94:	6184      	str	r4, [r0, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000e96:	61c4      	str	r4, [r0, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000e98:	6204      	str	r4, [r0, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000e9a:	6304      	str	r4, [r0, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000e9c:	6284      	str	r4, [r0, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000e9e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000ea0:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000ea2:	f000 fd52 	bl	800194a <HAL_LCD_Init>
  hqspi.Instance = QUADSPI;
 8000ea6:	4853      	ldr	r0, [pc, #332]	; (8000ff4 <main+0x290>)
  hqspi.Init.ClockPrescaler = 255;
 8000ea8:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <main+0x294>)
  hqspi.Init.FifoThreshold = 1;
 8000eaa:	f8c0 8008 	str.w	r8, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 8000eae:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8000eb2:	e880 0208 	stmia.w	r0, {r3, r9}
  hqspi.Init.FlashSize = 1;
 8000eb6:	f8c0 8010 	str.w	r8, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000eba:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ebc:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ebe:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ec0:	f000 fe20 	bl	8001b04 <HAL_QSPI_Init>
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ec4:	484d      	ldr	r0, [pc, #308]	; (8000ffc <main+0x298>)
 8000ec6:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <main+0x29c>)
 8000ec8:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000ece:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000ed2:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.FrameInit.FrameLength = 64;
 8000ed4:	2340      	movs	r3, #64	; 0x40
 8000ed6:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 32;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee0:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  hsai_BlockB1.SlotInit.SlotNumber = 4;
 8000ee6:	65c6      	str	r6, [r0, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8000ee8:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000eea:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000eec:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000eee:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ef0:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ef2:	6084      	str	r4, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ef4:	6104      	str	r4, [r0, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ef6:	6144      	str	r4, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ef8:	6184      	str	r4, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000efa:	60c4      	str	r4, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000efc:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000efe:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f00:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f02:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f04:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000f06:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f08:	6584      	str	r4, [r0, #88]	; 0x58
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000f0a:	f002 f88f 	bl	800302c <HAL_SAI_Init>
  huart2.Instance = USART2;
 8000f0e:	483d      	ldr	r0, [pc, #244]	; (8001004 <main+0x2a0>)
  huart2.Init.BaudRate = 115200;
 8000f10:	4a3d      	ldr	r2, [pc, #244]	; (8001008 <main+0x2a4>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f12:	6145      	str	r5, [r0, #20]
  huart2.Init.BaudRate = 115200;
 8000f14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f18:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1c:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f1e:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f20:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f28:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	f002 fb9c 	bl	8003666 <HAL_UART_Init>
  RTC_TimeTypeDef sTime = {0};
 8000f2e:	2214      	movs	r2, #20
 8000f30:	4621      	mov	r1, r4
 8000f32:	a807      	add	r0, sp, #28
 8000f34:	f002 fbf4 	bl	8003720 <memset>
  hrtc.Instance = RTC;
 8000f38:	4d34      	ldr	r5, [pc, #208]	; (800100c <main+0x2a8>)
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <main+0x2ac>)
  hrtc.Init.SynchPrediv = 255;
 8000f3c:	f8c5 900c 	str.w	r9, [r5, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f40:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f44:	4628      	mov	r0, r5
  hrtc.Init.AsynchPrediv = 127;
 8000f46:	237f      	movs	r3, #127	; 0x7f
 8000f48:	60ab      	str	r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f4a:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f4c:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f4e:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f50:	61ec      	str	r4, [r5, #28]
  RTC_DateTypeDef sDate = {0};
 8000f52:	9400      	str	r4, [sp, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f54:	f001 ff04 	bl	8002d60 <HAL_RTC_Init>
  sTime.Minutes = 59;
 8000f58:	233b      	movs	r3, #59	; 0x3b
  sTime.Hours = 23;
 8000f5a:	f04f 0817 	mov.w	r8, #23
  sTime.Minutes = 59;
 8000f5e:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f62:	4622      	mov	r2, r4
  sTime.Seconds = 50;
 8000f64:	2332      	movs	r3, #50	; 0x32
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f66:	a907      	add	r1, sp, #28
 8000f68:	4628      	mov	r0, r5
  sTime.Seconds = 50;
 8000f6a:	f88d 301e 	strb.w	r3, [sp, #30]
  sTime.Hours = 23;
 8000f6e:	f88d 801c 	strb.w	r8, [sp, #28]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f72:	940a      	str	r4, [sp, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f74:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f76:	f001 ffbc 	bl	8002ef2 <HAL_RTC_SetTime>
  sDate.Year = 19;
 8000f7a:	2313      	movs	r3, #19
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	4622      	mov	r2, r4
 8000f80:	4669      	mov	r1, sp
  sDate.Month = RTC_MONTH_APRIL;
 8000f82:	f88d 6001 	strb.w	r6, [sp, #1]
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000f86:	f88d 7000 	strb.w	r7, [sp]
  sDate.Date = 23;
 8000f8a:	f88d 8002 	strb.w	r8, [sp, #2]
  sDate.Year = 19;
 8000f8e:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f92:	f001 ff45 	bl	8002e20 <HAL_RTC_SetDate>
	  sprintf(data,"%d:%d",temporar1,temporar1+3);
 8000f96:	4e1f      	ldr	r6, [pc, #124]	; (8001014 <main+0x2b0>)
	  sprintf(data,"TEKST1");
 8000f98:	4d1f      	ldr	r5, [pc, #124]	; (8001018 <main+0x2b4>)
	  temporar1=(temporar1+1)%4;
 8000f9a:	3401      	adds	r4, #1
	  BSP_LCD_GLASS_Clear();
 8000f9c:	f7ff fde2 	bl	8000b64 <BSP_LCD_GLASS_Clear>
	  temporar1=(temporar1+1)%4;
 8000fa0:	f004 0403 	and.w	r4, r4, #3
	  HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fa1b 	bl	80013e0 <HAL_Delay>
	  sprintf(data,"%d:%d",temporar1,temporar1+3);
 8000faa:	1ce3      	adds	r3, r4, #3
 8000fac:	4622      	mov	r2, r4
 8000fae:	4631      	mov	r1, r6
 8000fb0:	a807      	add	r0, sp, #28
 8000fb2:	f002 fbbd 	bl	8003730 <siprintf>
	  BSP_LCD_GLASS_DisplayString(data);
 8000fb6:	a807      	add	r0, sp, #28
 8000fb8:	f7ff fdbe 	bl	8000b38 <BSP_LCD_GLASS_DisplayString>
	  HAL_Delay(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc0:	f000 fa0e 	bl	80013e0 <HAL_Delay>
	  sprintf(data,"TEKST1");
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	a807      	add	r0, sp, #28
 8000fc8:	f002 fbd6 	bl	8003778 <strcpy>
	  BSP_LCD_GLASS_DisplayString(data);
 8000fcc:	a807      	add	r0, sp, #28
 8000fce:	f7ff fdb3 	bl	8000b38 <BSP_LCD_GLASS_DisplayString>
	  HAL_Delay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f000 fa03 	bl	80013e0 <HAL_Delay>
 8000fda:	e7de      	b.n	8000f9a <main+0x236>
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48001000 	.word	0x48001000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	200001d0 	.word	0x200001d0
 8000ff0:	40002400 	.word	0x40002400
 8000ff4:	20000284 	.word	0x20000284
 8000ff8:	a0001000 	.word	0xa0001000
 8000ffc:	200000a4 	.word	0x200000a4
 8001000:	40015424 	.word	0x40015424
 8001004:	2000020c 	.word	0x2000020c
 8001008:	40004400 	.word	0x40004400
 800100c:	20000164 	.word	0x20000164
 8001010:	40002800 	.word	0x40002800
 8001014:	08003fdc 	.word	0x08003fdc
 8001018:	08003fe2 	.word	0x08003fe2

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	4770      	bx	lr
	...

08001020 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_MspInit+0x2c>)
 8001022:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	661a      	str	r2, [r3, #96]	; 0x60
 800102a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800102c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	f002 0201 	and.w	r2, r2, #1
 8001032:	9200      	str	r2, [sp, #0]
 8001034:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103c:	659a      	str	r2, [r3, #88]	; 0x58
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001048:	b002      	add	sp, #8
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8001050:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	2214      	movs	r2, #20
{
 8001054:	b08a      	sub	sp, #40	; 0x28
 8001056:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	2100      	movs	r1, #0
 800105a:	eb0d 0002 	add.w	r0, sp, r2
 800105e:	f002 fb5f 	bl	8003720 <memset>
  if(hlcd->Instance==LCD)
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <HAL_LCD_MspInit+0xd8>)
 8001066:	429a      	cmp	r2, r3
 8001068:	d15c      	bne.n	8001124 <HAL_LCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800106a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3 
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2602      	movs	r6, #2
    __HAL_RCC_LCD_CLK_ENABLE();
 8001070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	482e      	ldr	r0, [pc, #184]	; (800112c <HAL_LCD_MspInit+0xdc>)
    __HAL_RCC_LCD_CLK_ENABLE();
 8001074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001078:	659a      	str	r2, [r3, #88]	; 0x58
 800107a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001080:	9200      	str	r2, [sp, #0]
 8001082:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001086:	f042 0204 	orr.w	r2, r2, #4
 800108a:	64da      	str	r2, [r3, #76]	; 0x4c
 800108c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800108e:	f002 0204 	and.w	r2, r2, #4
 8001092:	9201      	str	r2, [sp, #4]
 8001094:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	64da      	str	r2, [r3, #76]	; 0x4c
 800109e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010a0:	f002 0201 	and.w	r2, r2, #1
 80010a4:	9202      	str	r2, [sp, #8]
 80010a6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010aa:	f042 0202 	orr.w	r2, r2, #2
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80010b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b2:	f002 0202 	and.w	r2, r2, #2
 80010b6:	9203      	str	r2, [sp, #12]
 80010b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010bc:	f042 0208 	orr.w	r2, r2, #8
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010cc:	250b      	movs	r5, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010d0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 80010d2:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	a905      	add	r1, sp, #20

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 80010da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f000 faa2 	bl	8001624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 80010e0:	f248 73c0 	movw	r3, #34752	; 0x87c0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	a905      	add	r1, sp, #20
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 80010ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010f2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f000 fa96 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 80010f8:	f24f 2333 	movw	r3, #62003	; 0xf233
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	a905      	add	r1, sp, #20
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <HAL_LCD_MspInit+0xe0>)
    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8001100:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001108:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f000 fa8b 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 800110e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	a905      	add	r1, sp, #20
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <HAL_LCD_MspInit+0xe4>)
    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8001116:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800111e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001120:	f000 fa80 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001124:	b00a      	add	sp, #40	; 0x28
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	40002400 	.word	0x40002400
 800112c:	48000800 	.word	0x48000800
 8001130:	48000400 	.word	0x48000400
 8001134:	48000c00 	.word	0x48000c00

08001138 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001138:	b510      	push	{r4, lr}
 800113a:	4604      	mov	r4, r0
 800113c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	2214      	movs	r2, #20
 8001140:	2100      	movs	r1, #0
 8001142:	a803      	add	r0, sp, #12
 8001144:	f002 faec 	bl	8003720 <memset>
  if(hqspi->Instance==QUADSPI)
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_QSPI_MspInit+0x64>)
 800114c:	429a      	cmp	r2, r3
 800114e:	d122      	bne.n	8001196 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001150:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001154:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001158:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 800115a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800115e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001162:	651a      	str	r2, [r3, #80]	; 0x50
 8001164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001166:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001170:	f042 0210 	orr.w	r2, r2, #16
 8001174:	64da      	str	r2, [r3, #76]	; 0x4c
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8001180:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001184:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800118e:	230a      	movs	r3, #10
 8001190:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001192:	f000 fa47 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001196:	b008      	add	sp, #32
 8001198:	bd10      	pop	{r4, pc}
 800119a:	bf00      	nop
 800119c:	a0001000 	.word	0xa0001000
 80011a0:	48001000 	.word	0x48001000

080011a4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80011a4:	6802      	ldr	r2, [r0, #0]
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_RTC_MspInit+0x18>)
 80011a8:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011aa:	bf01      	itttt	eq
 80011ac:	4a04      	ldreq	r2, [pc, #16]	; (80011c0 <HAL_RTC_MspInit+0x1c>)
 80011ae:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 80011b2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80011b6:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 80011ba:	4770      	bx	lr
 80011bc:	40002800 	.word	0x40002800
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b510      	push	{r4, lr}
 80011c6:	4604      	mov	r4, r0
 80011c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	2214      	movs	r2, #20
 80011cc:	2100      	movs	r1, #0
 80011ce:	a803      	add	r0, sp, #12
 80011d0:	f002 faa6 	bl	8003720 <memset>
  if(huart->Instance==USART2)
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_UART_MspInit+0x60>)
 80011d8:	429a      	cmp	r2, r3
 80011da:	d121      	bne.n	8001220 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011dc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011ea:	659a      	str	r2, [r3, #88]	; 0x58
 80011ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80011f2:	9201      	str	r2, [sp, #4]
 80011f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f8:	f042 0208 	orr.w	r2, r2, #8
 80011fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001208:	2360      	movs	r3, #96	; 0x60
 800120a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001210:	2301      	movs	r3, #1
 8001212:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001218:	2307      	movs	r3, #7
 800121a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	f000 fa02 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001220:	b008      	add	sp, #32
 8001222:	bd10      	pop	{r4, pc}
 8001224:	40004400 	.word	0x40004400
 8001228:	48000c00 	.word	0x48000c00

0800122c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8001230:	6802      	ldr	r2, [r0, #0]
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_SAI_MspInit+0xb8>)
 8001234:	429a      	cmp	r2, r3
{
 8001236:	b086      	sub	sp, #24
 8001238:	4606      	mov	r6, r0
    if(hsai->Instance==SAI1_Block_B)
 800123a:	d150      	bne.n	80012de <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <HAL_SAI_MspInit+0xbc>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	b94a      	cbnz	r2, 8001256 <HAL_SAI_MspInit+0x2a>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001242:	492a      	ldr	r1, [pc, #168]	; (80012ec <HAL_SAI_MspInit+0xc0>)
 8001244:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8001246:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 800124a:	6608      	str	r0, [r1, #96]	; 0x60
 800124c:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800124e:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 8001252:	9100      	str	r1, [sp, #0]
 8001254:	9900      	ldr	r1, [sp, #0]
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001256:	4826      	ldr	r0, [pc, #152]	; (80012f0 <HAL_SAI_MspInit+0xc4>)
    SAI1_client ++;
 8001258:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2500      	movs	r5, #0
    SAI1_client ++;
 800125c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800125e:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001264:	f04f 0880 	mov.w	r8, #128	; 0x80
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001268:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800126c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800126e:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001276:	f000 f9d5 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800127a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800127e:	a901      	add	r1, sp, #4
 8001280:	481b      	ldr	r0, [pc, #108]	; (80012f0 <HAL_SAI_MspInit+0xc4>)
    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001282:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001284:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800128c:	f000 f9ca 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001290:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	a901      	add	r1, sp, #4
 8001294:	4817      	ldr	r0, [pc, #92]	; (80012f4 <HAL_SAI_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001296:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001298:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	9702      	str	r7, [sp, #8]

    /* Peripheral DMA init*/
    
    hdma_sai1_b.Instance = DMA2_Channel2;
 800129c:	4c16      	ldr	r4, [pc, #88]	; (80012f8 <HAL_SAI_MspInit+0xcc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f000 f9bf 	bl	8001624 <HAL_GPIO_Init>
    hdma_sai1_b.Init.Request = DMA_REQUEST_1;
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a6:	4915      	ldr	r1, [pc, #84]	; (80012fc <HAL_SAI_MspInit+0xd0>)
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	60e5      	str	r5, [r4, #12]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012aa:	2310      	movs	r3, #16
 80012ac:	2201      	movs	r2, #1
 80012ae:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b6:	6163      	str	r3, [r4, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012bc:	61a3      	str	r3, [r4, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80012be:	2320      	movs	r3, #32
 80012c0:	61e3      	str	r3, [r4, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80012c2:	4620      	mov	r0, r4
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	f8c4 8010 	str.w	r8, [r4, #16]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80012cc:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80012ce:	f000 f8fd 	bl	80014cc <HAL_DMA_Init>
 80012d2:	b108      	cbz	r0, 80012d8 <HAL_SAI_MspInit+0xac>
    {
      Error_Handler();
 80012d4:	f7ff fea2 	bl	800101c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80012d8:	6734      	str	r4, [r6, #112]	; 0x70
 80012da:	62a6      	str	r6, [r4, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80012dc:	66f4      	str	r4, [r6, #108]	; 0x6c
    }
}
 80012de:	b006      	add	sp, #24
 80012e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e4:	40015424 	.word	0x40015424
 80012e8:	20000088 	.word	0x20000088
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48001000 	.word	0x48001000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	20000188 	.word	0x20000188
 80012fc:	4002041c 	.word	0x4002041c

08001300 <NMI_Handler>:
 8001300:	4770      	bx	lr

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler>

0800130a <SVC_Handler>:
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 b858 	b.w	80013c4 <HAL_IncTick>

08001314 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001314:	4801      	ldr	r0, [pc, #4]	; (800131c <DMA2_Channel2_IRQHandler+0x8>)
 8001316:	f000 b93b 	b.w	8001590 <HAL_DMA_IRQHandler>
 800131a:	bf00      	nop
 800131c:	20000188 	.word	0x20000188

08001320 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	490f      	ldr	r1, [pc, #60]	; (8001360 <SystemInit+0x40>)
 8001322:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <SystemInit+0x44>)
 8001330:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001332:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800133a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001342:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001346:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001354:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001356:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800135c:	608b      	str	r3, [r1, #8]
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	40021000 	.word	0x40021000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_InitTick+0x2c>)
{
 800136c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	fbb0 f0f3 	udiv	r0, r0, r3
 8001378:	f000 f892 	bl	80014a0 <HAL_SYSTICK_Config>
 800137c:	4604      	mov	r4, r0
 800137e:	b938      	cbnz	r0, 8001390 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001380:	4602      	mov	r2, r0
 8001382:	4629      	mov	r1, r5
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f84a 	bl	8001420 <HAL_NVIC_SetPriority>
 800138c:	4620      	mov	r0, r4
 800138e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001390:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	20000000 	.word	0x20000000

08001398 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_Init+0x28>)
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80013a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	f000 f829 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff ffdc 	bl	8001368 <HAL_InitTick>
 80013b0:	4604      	mov	r4, r0
 80013b2:	b918      	cbnz	r0, 80013bc <HAL_Init+0x24>
    HAL_MspInit();
 80013b4:	f7ff fe34 	bl	8001020 <HAL_MspInit>
}
 80013b8:	4620      	mov	r0, r4
 80013ba:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80013bc:	2401      	movs	r4, #1
 80013be:	e7fb      	b.n	80013b8 <HAL_Init+0x20>
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80013c4:	4a02      	ldr	r2, [pc, #8]	; (80013d0 <HAL_IncTick+0xc>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200002c8 	.word	0x200002c8

080013d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013d4:	4b01      	ldr	r3, [pc, #4]	; (80013dc <HAL_GetTick+0x8>)
 80013d6:	6818      	ldr	r0, [r3, #0]
}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200002c8 	.word	0x200002c8

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff fff6 	bl	80013d4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80013ea:	4605      	mov	r5, r0
  {
    wait++;
 80013ec:	bf18      	it	ne
 80013ee:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_GetTick>
 80013f4:	1b40      	subs	r0, r0, r5
 80013f6:	4284      	cmp	r4, r0
 80013f8:	d8fa      	bhi.n	80013f0 <HAL_Delay+0x10>
  {
  }
}
 80013fa:	bd38      	pop	{r3, r4, r5, pc}

080013fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001400:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001404:	041b      	lsls	r3, r3, #16
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800140c:	0200      	lsls	r0, r0, #8
 800140e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001412:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001416:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001418:	60d3      	str	r3, [r2, #12]
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001422:	b530      	push	{r4, r5, lr}
 8001424:	68dc      	ldr	r4, [r3, #12]
 8001426:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	2b04      	cmp	r3, #4
 8001432:	bf28      	it	cs
 8001434:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 0501 	mov.w	r5, #1
 800143c:	fa05 f303 	lsl.w	r3, r5, r3
 8001440:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001444:	bf8c      	ite	hi
 8001446:	3c03      	subhi	r4, #3
 8001448:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144a:	4019      	ands	r1, r3
 800144c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144e:	fa05 f404 	lsl.w	r4, r5, r4
 8001452:	3c01      	subs	r4, #1
 8001454:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001456:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	ea42 0201 	orr.w	r2, r2, r1
 800145c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	bfaf      	iteee	ge
 8001462:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	f000 000f 	andlt.w	r0, r0, #15
 800146a:	4b06      	ldrlt	r3, [pc, #24]	; (8001484 <HAL_NVIC_SetPriority+0x64>)
 800146c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	bfa5      	ittet	ge
 8001470:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001474:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800147c:	bd30      	pop	{r4, r5, pc}
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	e000ed14 	.word	0xe000ed14

08001488 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001488:	0942      	lsrs	r2, r0, #5
 800148a:	2301      	movs	r3, #1
 800148c:	f000 001f 	and.w	r0, r0, #31
 8001490:	fa03 f000 	lsl.w	r0, r3, r0
 8001494:	4b01      	ldr	r3, [pc, #4]	; (800149c <HAL_NVIC_EnableIRQ+0x14>)
 8001496:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100

080014a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	3801      	subs	r0, #1
 80014a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014a6:	d20a      	bcs.n	80014be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	21f0      	movs	r1, #240	; 0xf0
 80014b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014cc:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d04e      	beq.n	8001570 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014d2:	6801      	ldr	r1, [r0, #0]
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_DMA_Init+0xa8>)
 80014d6:	4299      	cmp	r1, r3
 80014d8:	f04f 0414 	mov.w	r4, #20
 80014dc:	d840      	bhi.n	8001560 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_DMA_Init+0xac>)
 80014e0:	440a      	add	r2, r1
 80014e2:	fbb2 f2f4 	udiv	r2, r2, r4
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ea:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80014ee:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014f6:	6884      	ldr	r4, [r0, #8]
 80014f8:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80014fc:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80014fe:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	432b      	orrs	r3, r5
 8001502:	6945      	ldr	r5, [r0, #20]
 8001504:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	6985      	ldr	r5, [r0, #24]
 8001508:	432b      	orrs	r3, r5
 800150a:	69c5      	ldr	r5, [r0, #28]
 800150c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800150e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001510:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001518:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800151a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800151c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001520:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001522:	d014      	beq.n	800154e <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001524:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_DMA_Init+0xb0>)
 8001528:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800152a:	bf0c      	ite	eq
 800152c:	4914      	ldreq	r1, [pc, #80]	; (8001580 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800152e:	4915      	ldrne	r1, [pc, #84]	; (8001584 <HAL_DMA_Init+0xb8>)
 8001530:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001532:	680a      	ldr	r2, [r1, #0]
 8001534:	f003 031c 	and.w	r3, r3, #28
 8001538:	240f      	movs	r4, #15
 800153a:	409c      	lsls	r4, r3
 800153c:	ea22 0204 	bic.w	r2, r2, r4
 8001540:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001542:	6842      	ldr	r2, [r0, #4]
 8001544:	680c      	ldr	r4, [r1, #0]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	4323      	orrs	r3, r4
 800154c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001550:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001554:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001558:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 800155c:	4618      	mov	r0, r3
 800155e:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_DMA_Init+0xbc>)
 8001562:	440b      	add	r3, r1
 8001564:	fbb3 f3f4 	udiv	r3, r3, r4
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_DMA_Init+0xc0>)
 800156e:	e7be      	b.n	80014ee <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	bd30      	pop	{r4, r5, pc}
 8001574:	40020407 	.word	0x40020407
 8001578:	bffdfff8 	.word	0xbffdfff8
 800157c:	40020000 	.word	0x40020000
 8001580:	400200a8 	.word	0x400200a8
 8001584:	400204a8 	.word	0x400204a8
 8001588:	bffdfbf8 	.word	0xbffdfbf8
 800158c:	40020400 	.word	0x40020400

08001590 <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001590:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001592:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001594:	6803      	ldr	r3, [r0, #0]
{
 8001596:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001598:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800159c:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800159e:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80015a0:	2404      	movs	r4, #4
 80015a2:	4094      	lsls	r4, r2
 80015a4:	4226      	tst	r6, r4
 80015a6:	d00e      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x36>
 80015a8:	f015 0f04 	tst.w	r5, #4
 80015ac:	d00b      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b2:	bf5e      	ittt	pl
 80015b4:	681a      	ldrpl	r2, [r3, #0]
 80015b6:	f022 0204 	bicpl.w	r2, r2, #4
 80015ba:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80015be:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80015c0:	b373      	cbz	r3, 8001620 <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 80015c2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80015c4:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80015c6:	2402      	movs	r4, #2
 80015c8:	4094      	lsls	r4, r2
 80015ca:	4226      	tst	r6, r4
 80015cc:	d012      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x64>
 80015ce:	f015 0f02 	tst.w	r5, #2
 80015d2:	d00f      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	0695      	lsls	r5, r2, #26
 80015d8:	d406      	bmi.n	80015e8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f022 020a 	bic.w	r2, r2, #10
 80015e0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80015e8:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80015ea:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80015ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80015f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015f2:	e7e5      	b.n	80015c0 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80015f4:	2408      	movs	r4, #8
 80015f6:	4094      	lsls	r4, r2
 80015f8:	4234      	tst	r4, r6
 80015fa:	d011      	beq.n	8001620 <HAL_DMA_IRQHandler+0x90>
 80015fc:	072c      	lsls	r4, r5, #28
 80015fe:	d50f      	bpl.n	8001620 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001600:	681c      	ldr	r4, [r3, #0]
 8001602:	f024 040e 	bic.w	r4, r4, #14
 8001606:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001608:	2301      	movs	r3, #1
 800160a:	fa03 f202 	lsl.w	r2, r3, r2
 800160e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001610:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001612:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001616:	2300      	movs	r3, #0
 8001618:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800161c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800161e:	e7cf      	b.n	80015c0 <HAL_DMA_IRQHandler+0x30>
}
 8001620:	bc70      	pop	{r4, r5, r6}
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001628:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80017d8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001630:	4c67      	ldr	r4, [pc, #412]	; (80017d0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001634:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	9a01      	ldr	r2, [sp, #4]
 8001638:	40da      	lsrs	r2, r3
 800163a:	d102      	bne.n	8001642 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800163c:	b005      	add	sp, #20
 800163e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001642:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001644:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001646:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001648:	ea12 0e06 	ands.w	lr, r2, r6
 800164c:	f000 80b1 	beq.w	80017b2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001650:	684a      	ldr	r2, [r1, #4]
 8001652:	f022 0710 	bic.w	r7, r2, #16
 8001656:	2f02      	cmp	r7, #2
 8001658:	d116      	bne.n	8001688 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800165a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800165e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001662:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001666:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800166a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800166e:	f04f 0c0f 	mov.w	ip, #15
 8001672:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001676:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800167a:	690d      	ldr	r5, [r1, #16]
 800167c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001680:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001684:	f8c9 5020 	str.w	r5, [r9, #32]
 8001688:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800168c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800168e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001692:	fa05 f50c 	lsl.w	r5, r5, ip
 8001696:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001698:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800169c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016a0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016a6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016aa:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80016ac:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b0:	d811      	bhi.n	80016d6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80016b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016b4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	68cf      	ldr	r7, [r1, #12]
 80016ba:	fa07 f70c 	lsl.w	r7, r7, ip
 80016be:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80016c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016ca:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80016ce:	409f      	lsls	r7, r3
 80016d0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80016d4:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016d6:	f1ba 0f03 	cmp.w	sl, #3
 80016da:	d107      	bne.n	80016ec <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80016dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016de:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016e2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80016e6:	409f      	lsls	r7, r3
 80016e8:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80016ea:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80016ec:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016ee:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016f0:	688e      	ldr	r6, [r1, #8]
 80016f2:	fa06 f60c 	lsl.w	r6, r6, ip
 80016f6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80016f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fa:	00d5      	lsls	r5, r2, #3
 80016fc:	d559      	bpl.n	80017b2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001702:	f045 0501 	orr.w	r5, r5, #1
 8001706:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800170a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800170e:	f023 0603 	bic.w	r6, r3, #3
 8001712:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001716:	f005 0501 	and.w	r5, r5, #1
 800171a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800171e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001720:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001724:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001726:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001728:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800172c:	270f      	movs	r7, #15
 800172e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001732:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001736:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800173a:	d03c      	beq.n	80017b6 <HAL_GPIO_Init+0x192>
 800173c:	4d25      	ldr	r5, [pc, #148]	; (80017d4 <HAL_GPIO_Init+0x1b0>)
 800173e:	42a8      	cmp	r0, r5
 8001740:	d03b      	beq.n	80017ba <HAL_GPIO_Init+0x196>
 8001742:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001746:	42a8      	cmp	r0, r5
 8001748:	d039      	beq.n	80017be <HAL_GPIO_Init+0x19a>
 800174a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800174e:	42a8      	cmp	r0, r5
 8001750:	d037      	beq.n	80017c2 <HAL_GPIO_Init+0x19e>
 8001752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001756:	42a8      	cmp	r0, r5
 8001758:	d035      	beq.n	80017c6 <HAL_GPIO_Init+0x1a2>
 800175a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800175e:	42a8      	cmp	r0, r5
 8001760:	d033      	beq.n	80017ca <HAL_GPIO_Init+0x1a6>
 8001762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001766:	42a8      	cmp	r0, r5
 8001768:	bf14      	ite	ne
 800176a:	2507      	movne	r5, #7
 800176c:	2506      	moveq	r5, #6
 800176e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001772:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001774:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001776:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001778:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800177e:	bf54      	ite	pl
 8001780:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001782:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001786:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001788:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800178a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 800178c:	bf54      	ite	pl
 800178e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001790:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001794:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001796:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001798:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800179a:	bf54      	ite	pl
 800179c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800179e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80017a2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80017a4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80017a8:	bf54      	ite	pl
 80017aa:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80017ac:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80017b0:	60e5      	str	r5, [r4, #12]
    position++;
 80017b2:	3301      	adds	r3, #1
 80017b4:	e73f      	b.n	8001636 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b6:	2500      	movs	r5, #0
 80017b8:	e7d9      	b.n	800176e <HAL_GPIO_Init+0x14a>
 80017ba:	2501      	movs	r5, #1
 80017bc:	e7d7      	b.n	800176e <HAL_GPIO_Init+0x14a>
 80017be:	2502      	movs	r5, #2
 80017c0:	e7d5      	b.n	800176e <HAL_GPIO_Init+0x14a>
 80017c2:	2503      	movs	r5, #3
 80017c4:	e7d3      	b.n	800176e <HAL_GPIO_Init+0x14a>
 80017c6:	2504      	movs	r5, #4
 80017c8:	e7d1      	b.n	800176e <HAL_GPIO_Init+0x14a>
 80017ca:	2505      	movs	r5, #5
 80017cc:	e7cf      	b.n	800176e <HAL_GPIO_Init+0x14a>
 80017ce:	bf00      	nop
 80017d0:	40010400 	.word	0x40010400
 80017d4:	48000400 	.word	0x48000400
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017dc:	b10a      	cbz	r2, 80017e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017de:	6181      	str	r1, [r0, #24]
 80017e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e2:	6281      	str	r1, [r0, #40]	; 0x28
 80017e4:	4770      	bx	lr

080017e6 <HAL_LCD_Write>:
  * @param  RAMRegisterMask: specifies the LCD RAM Register Data Mask.
  * @param  Data: specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 80017e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ea:	461d      	mov	r5, r3
  uint32_t tickstart = 0x00;

  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80017ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80017f0:	2b01      	cmp	r3, #1
{
 80017f2:	4604      	mov	r4, r0
 80017f4:	460f      	mov	r7, r1
 80017f6:	4616      	mov	r6, r2
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80017f8:	d003      	beq.n	8001802 <HAL_LCD_Write+0x1c>
 80017fa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d12e      	bne.n	8001860 <HAL_LCD_Write+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if(hlcd->State == HAL_LCD_STATE_READY)
 8001802:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d009      	beq.n	8001820 <HAL_LCD_Write+0x3a>
 800180c:	6821      	ldr	r1, [r4, #0]
 800180e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);

    return HAL_OK;
 8001812:	2000      	movs	r0, #0
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8001814:	694b      	ldr	r3, [r1, #20]
 8001816:	4033      	ands	r3, r6
 8001818:	432b      	orrs	r3, r5
 800181a:	614b      	str	r3, [r1, #20]
    return HAL_OK;
 800181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_LOCK(hlcd);
 8001820:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001824:	2a01      	cmp	r2, #1
 8001826:	f04f 0002 	mov.w	r0, #2
 800182a:	d01a      	beq.n	8001862 <HAL_LCD_Write+0x7c>
 800182c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8001830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      tickstart = HAL_GetTick();
 8001834:	f7ff fdce 	bl	80013d4 <HAL_GetTick>
 8001838:	4680      	mov	r8, r0
      while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	075b      	lsls	r3, r3, #29
 8001840:	d5e4      	bpl.n	800180c <HAL_LCD_Write+0x26>
        if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001842:	f7ff fdc7 	bl	80013d4 <HAL_GetTick>
 8001846:	eba0 0008 	sub.w	r0, r0, r8
 800184a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800184e:	d9f4      	bls.n	800183a <HAL_LCD_Write+0x54>
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001850:	2302      	movs	r3, #2
 8001852:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hlcd);
 8001854:	2300      	movs	r3, #0
 8001856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else
  {
    return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
  }
}
 8001862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001866 <HAL_LCD_UpdateDisplayRequest>:
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
  uint32_t tickstart = 0x00;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001866:	6803      	ldr	r3, [r0, #0]
 8001868:	2208      	movs	r2, #8
{
 800186a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800186c:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	f042 0204 	orr.w	r2, r2, #4
 8001874:	609a      	str	r2, [r3, #8]
{
 8001876:	4604      	mov	r4, r0

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001878:	f7ff fdac 	bl	80013d4 <HAL_GetTick>
 800187c:	4606      	mov	r6, r0

  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	689d      	ldr	r5, [r3, #8]
 8001882:	f015 0508 	ands.w	r5, r5, #8
 8001886:	d006      	beq.n	8001896 <HAL_LCD_UpdateDisplayRequest+0x30>

      return HAL_TIMEOUT;
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8001888:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 800188a:	2000      	movs	r0, #0
  hlcd->State = HAL_LCD_STATE_READY;
 800188c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hlcd);
 8001890:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

  return HAL_OK;
}
 8001894:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001896:	f7ff fd9d 	bl	80013d4 <HAL_GetTick>
 800189a:	1b80      	subs	r0, r0, r6
 800189c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018a0:	d9ed      	bls.n	800187e <HAL_LCD_UpdateDisplayRequest+0x18>
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80018a2:	2304      	movs	r3, #4
 80018a4:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hlcd);
 80018a6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80018aa:	2003      	movs	r0, #3
 80018ac:	bd70      	pop	{r4, r5, r6, pc}

080018ae <HAL_LCD_Clear>:
{
 80018ae:	b538      	push	{r3, r4, r5, lr}
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80018b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018b4:	2b01      	cmp	r3, #1
{
 80018b6:	4604      	mov	r4, r0
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 80018b8:	d003      	beq.n	80018c2 <HAL_LCD_Clear+0x14>
 80018ba:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d12c      	bne.n	800191c <HAL_LCD_Clear+0x6e>
    __HAL_LOCK(hlcd);
 80018c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f04f 0002 	mov.w	r0, #2
 80018cc:	d027      	beq.n	800191e <HAL_LCD_Clear+0x70>
 80018ce:	2301      	movs	r3, #1
 80018d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hlcd->State = HAL_LCD_STATE_BUSY;
 80018d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    tickstart = HAL_GetTick();
 80018d8:	f7ff fd7c 	bl	80013d4 <HAL_GetTick>
 80018dc:	4605      	mov	r5, r0
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	688b      	ldr	r3, [r1, #8]
 80018e2:	f013 0304 	ands.w	r3, r3, #4
 80018e6:	d10c      	bne.n	8001902 <HAL_LCD_Clear+0x54>
      hlcd->Instance->RAM[counter] = 0;
 80018e8:	4618      	mov	r0, r3
 80018ea:	1d1a      	adds	r2, r3, #4
 80018ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80018f0:	3301      	adds	r3, #1
 80018f2:	2b10      	cmp	r3, #16
      hlcd->Instance->RAM[counter] = 0;
 80018f4:	6050      	str	r0, [r2, #4]
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80018f6:	d1f8      	bne.n	80018ea <HAL_LCD_Clear+0x3c>
    HAL_LCD_UpdateDisplayRequest(hlcd);
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff ffb4 	bl	8001866 <HAL_LCD_UpdateDisplayRequest>
    return HAL_OK;
 80018fe:	2000      	movs	r0, #0
 8001900:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001902:	f7ff fd67 	bl	80013d4 <HAL_GetTick>
 8001906:	1b40      	subs	r0, r0, r5
 8001908:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800190c:	d9e7      	bls.n	80018de <HAL_LCD_Clear+0x30>
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800190e:	2302      	movs	r3, #2
 8001910:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hlcd);
 8001912:	2300      	movs	r3, #0
 8001914:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
}
 800191e:	bd38      	pop	{r3, r4, r5, pc}

08001920 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4604      	mov	r4, r0
  uint32_t tickstart = 0x00;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001924:	f7ff fd56 	bl	80013d4 <HAL_GetTick>
 8001928:	4605      	mov	r5, r0

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	069b      	lsls	r3, r3, #26
 8001930:	d501      	bpl.n	8001936 <LCD_WaitForSynchro+0x16>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001932:	2000      	movs	r0, #0
}
 8001934:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001936:	f7ff fd4d 	bl	80013d4 <HAL_GetTick>
 800193a:	1b40      	subs	r0, r0, r5
 800193c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001940:	d9f3      	bls.n	800192a <LCD_WaitForSynchro+0xa>
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001942:	2301      	movs	r3, #1
 8001944:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8001946:	2003      	movs	r0, #3
 8001948:	bd38      	pop	{r3, r4, r5, pc}

0800194a <HAL_LCD_Init>:
{
 800194a:	b538      	push	{r3, r4, r5, lr}
  if(hlcd == NULL)
 800194c:	4604      	mov	r4, r0
 800194e:	2800      	cmp	r0, #0
 8001950:	d071      	beq.n	8001a36 <HAL_LCD_Init+0xec>
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8001952:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800195a:	b91b      	cbnz	r3, 8001964 <HAL_LCD_Init+0x1a>
    hlcd->Lock = HAL_UNLOCKED;
 800195c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_LCD_MspInit(hlcd);
 8001960:	f7ff fb76 	bl	8001050 <HAL_LCD_MspInit>
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001964:	2302      	movs	r3, #2
  __HAL_LCD_DISABLE(hlcd);
 8001966:	6822      	ldr	r2, [r4, #0]
  hlcd->State = HAL_LCD_STATE_BUSY;
 8001968:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_LCD_DISABLE(hlcd);
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001974:	2300      	movs	r3, #0
    hlcd->Instance->RAM[counter] = 0;
 8001976:	4618      	mov	r0, r3
 8001978:	1d19      	adds	r1, r3, #4
 800197a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800197e:	3301      	adds	r3, #1
 8001980:	2b10      	cmp	r3, #16
    hlcd->Instance->RAM[counter] = 0;
 8001982:	6048      	str	r0, [r1, #4]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001984:	d1f8      	bne.n	8001978 <HAL_LCD_Init+0x2e>
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001986:	6893      	ldr	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 8001988:	68a0      	ldr	r0, [r4, #8]
  hlcd->Instance->SR |= LCD_SR_UDR;
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6093      	str	r3, [r2, #8]
   MODIFY_REG(hlcd->Instance->FCR, \
 8001990:	6863      	ldr	r3, [r4, #4]
 8001992:	6851      	ldr	r1, [r2, #4]
 8001994:	4303      	orrs	r3, r0
 8001996:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001998:	4303      	orrs	r3, r0
 800199a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800199c:	4303      	orrs	r3, r0
 800199e:	69e0      	ldr	r0, [r4, #28]
 80019a0:	4303      	orrs	r3, r0
 80019a2:	6a20      	ldr	r0, [r4, #32]
 80019a4:	4303      	orrs	r3, r0
 80019a6:	69a0      	ldr	r0, [r4, #24]
 80019a8:	f021 717f 	bic.w	r1, r1, #66846720	; 0x3fc0000
 80019ac:	4303      	orrs	r3, r0
 80019ae:	f421 317f 	bic.w	r1, r1, #261120	; 0x3fc00
 80019b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80019b4:	f421 717c 	bic.w	r1, r1, #1008	; 0x3f0
 80019b8:	f021 0101 	bic.w	r1, r1, #1
 80019bc:	4303      	orrs	r3, r0
 80019be:	430b      	orrs	r3, r1
 80019c0:	6053      	str	r3, [r2, #4]
  LCD_WaitForSynchro(hlcd);
 80019c2:	4620      	mov	r0, r4
 80019c4:	f7ff ffac 	bl	8001920 <LCD_WaitForSynchro>
  MODIFY_REG(hlcd->Instance->CR, \
 80019c8:	6920      	ldr	r0, [r4, #16]
 80019ca:	68e3      	ldr	r3, [r4, #12]
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	4303      	orrs	r3, r0
 80019d0:	6960      	ldr	r0, [r4, #20]
 80019d2:	6811      	ldr	r1, [r2, #0]
 80019d4:	4303      	orrs	r3, r0
 80019d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019d8:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
 80019dc:	4303      	orrs	r3, r0
 80019de:	430b      	orrs	r3, r1
 80019e0:	6013      	str	r3, [r2, #0]
  __HAL_LCD_ENABLE(hlcd);
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80019ea:	f7ff fcf3 	bl	80013d4 <HAL_GetTick>
 80019ee:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	07da      	lsls	r2, r3, #31
 80019f6:	d50c      	bpl.n	8001a12 <HAL_LCD_Init+0xc8>
  tickstart = HAL_GetTick();
 80019f8:	f7ff fcec 	bl	80013d4 <HAL_GetTick>
 80019fc:	4605      	mov	r5, r0
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	06db      	lsls	r3, r3, #27
 8001a04:	d50f      	bpl.n	8001a26 <HAL_LCD_Init+0xdc>
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001a06:	2000      	movs	r0, #0
  hlcd->State= HAL_LCD_STATE_READY;
 8001a08:	2301      	movs	r3, #1
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001a0a:	63a0      	str	r0, [r4, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8001a0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001a10:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001a12:	f7ff fcdf 	bl	80013d4 <HAL_GetTick>
 8001a16:	1b40      	subs	r0, r0, r5
 8001a18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a1c:	d9e8      	bls.n	80019f0 <HAL_LCD_Init+0xa6>
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8001a1e:	2308      	movs	r3, #8
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001a20:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
 8001a24:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8001a26:	f7ff fcd5 	bl	80013d4 <HAL_GetTick>
 8001a2a:	1b40      	subs	r0, r0, r5
 8001a2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a30:	d9e5      	bls.n	80019fe <HAL_LCD_Init+0xb4>
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001a32:	2310      	movs	r3, #16
 8001a34:	e7f4      	b.n	8001a20 <HAL_LCD_Init+0xd6>
    return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
}
 8001a38:	bd38      	pop	{r3, r4, r5, pc}
	...

08001a3c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <HAL_PWREx_GetVoltageRange+0xc>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001a40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40007000 	.word	0x40007000

08001a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a4e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a54:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	d11c      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001a5e:	d015      	beq.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001a6e:	6811      	ldr	r1, [r2, #0]
 8001a70:	2232      	movs	r2, #50	; 0x32
 8001a72:	434a      	muls	r2, r1
 8001a74:	490f      	ldr	r1, [pc, #60]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001a76:	fbb2 f2f1 	udiv	r2, r2, r1
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7e:	6958      	ldr	r0, [r3, #20]
 8001a80:	0540      	lsls	r0, r0, #21
 8001a82:	d500      	bpl.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001a84:	b922      	cbnz	r2, 8001a90 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a86:	694b      	ldr	r3, [r1, #20]
 8001a88:	055b      	lsls	r3, r3, #21
 8001a8a:	d40d      	bmi.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	4770      	bx	lr
        wait_loop_index--;
 8001a90:	3a01      	subs	r2, #1
 8001a92:	e7f4      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a98:	bf1f      	itttt	ne
 8001a9a:	681a      	ldrne	r2, [r3, #0]
 8001a9c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001aa0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001aa4:	601a      	strne	r2, [r3, #0]
 8001aa6:	e7f1      	b.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001aa8:	2003      	movs	r0, #3
}
 8001aaa:	4770      	bx	lr
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	000f4240 	.word	0x000f4240

08001ab8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001abc:	9d06      	ldr	r5, [sp, #24]
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460f      	mov	r7, r1
 8001ac2:	4616      	mov	r6, r2
 8001ac4:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ac6:	6821      	ldr	r1, [r4, #0]
 8001ac8:	688a      	ldr	r2, [r1, #8]
 8001aca:	423a      	tst	r2, r7
 8001acc:	bf14      	ite	ne
 8001ace:	2201      	movne	r2, #1
 8001ad0:	2200      	moveq	r2, #0
 8001ad2:	42b2      	cmp	r2, r6
 8001ad4:	d102      	bne.n	8001adc <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001ad6:	2000      	movs	r0, #0
}
 8001ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001adc:	1c6b      	adds	r3, r5, #1
 8001ade:	d0f3      	beq.n	8001ac8 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7ff fc78 	bl	80013d4 <HAL_GetTick>
 8001ae4:	eba0 0008 	sub.w	r0, r0, r8
 8001ae8:	4285      	cmp	r5, r0
 8001aea:	d301      	bcc.n	8001af0 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	d1ea      	bne.n	8001ac6 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001af0:	2304      	movs	r3, #4
 8001af2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001af6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001afe:	2001      	movs	r0, #1
 8001b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b04 <HAL_QSPI_Init>:
{
 8001b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fc64 	bl	80013d4 <HAL_GetTick>
 8001b0c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001b0e:	2c00      	cmp	r4, #0
 8001b10:	d049      	beq.n	8001ba6 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8001b12:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d047      	beq.n	8001baa <HAL_QSPI_Init+0xa6>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001b20:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001b24:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001b28:	b93a      	cbnz	r2, 8001b3a <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001b2a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fb02 	bl	8001138 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b38:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	68a1      	ldr	r1, [r4, #8]
 8001b3e:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b42:	3901      	subs	r1, #1
 8001b44:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001b48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b4c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b4e:	2120      	movs	r1, #32
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	462b      	mov	r3, r5
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff ffae 	bl	8001ab8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001b5c:	b9f0      	cbnz	r0, 8001b9c <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001b5e:	6822      	ldr	r2, [r4, #0]
 8001b60:	6865      	ldr	r5, [r4, #4]
 8001b62:	6811      	ldr	r1, [r2, #0]
 8001b64:	68e3      	ldr	r3, [r4, #12]
 8001b66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001b6a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001b6e:	f021 0110 	bic.w	r1, r1, #16
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b76:	69a1      	ldr	r1, [r4, #24]
 8001b78:	6963      	ldr	r3, [r4, #20]
 8001b7a:	6855      	ldr	r5, [r2, #4]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6921      	ldr	r1, [r4, #16]
 8001b80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001b84:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <HAL_QSPI_Init+0xac>)
 8001b86:	4029      	ands	r1, r5
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b94:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b96:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001ba2:	b003      	add	sp, #12
 8001ba4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	e7fb      	b.n	8001ba2 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001baa:	2002      	movs	r0, #2
 8001bac:	e7f9      	b.n	8001ba2 <HAL_QSPI_Init+0x9e>
 8001bae:	bf00      	nop
 8001bb0:	ffe0f8fe 	.word	0xffe0f8fe

08001bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bb6:	4d1e      	ldr	r5, [pc, #120]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001bb8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bba:	00da      	lsls	r2, r3, #3
{
 8001bbc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bbe:	d518      	bpl.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc0:	f7ff ff3c 	bl	8001a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001bc8:	d123      	bne.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bca:	2c80      	cmp	r4, #128	; 0x80
 8001bcc:	d929      	bls.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bce:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd0:	bf8c      	ite	hi
 8001bd2:	2002      	movhi	r0, #2
 8001bd4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001bd8:	6813      	ldr	r3, [r2, #0]
 8001bda:	f023 0307 	bic.w	r3, r3, #7
 8001bde:	4303      	orrs	r3, r0
 8001be0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001be8:	1a18      	subs	r0, r3, r0
 8001bea:	bf18      	it	ne
 8001bec:	2001      	movne	r0, #1
 8001bee:	b003      	add	sp, #12
 8001bf0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bfa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001c04:	f7ff ff1a 	bl	8001a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c10:	e7d8      	b.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	2c80      	cmp	r4, #128	; 0x80
 8001c14:	d807      	bhi.n	8001c26 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001c16:	d008      	beq.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001c18:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001c1c:	4258      	negs	r0, r3
 8001c1e:	4158      	adcs	r0, r3
 8001c20:	e7d9      	b.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c22:	2000      	movs	r0, #0
 8001c24:	e7d7      	b.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c26:	2003      	movs	r0, #3
 8001c28:	e7d5      	b.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	e7d3      	b.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3e:	f012 020c 	ands.w	r2, r2, #12
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x18>
 8001c44:	2a0c      	cmp	r2, #12
 8001c46:	d115      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c48:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4c:	2901      	cmp	r1, #1
 8001c4e:	d118      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c50:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c54:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c56:	bf55      	itete	pl
 8001c58:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c5c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c5e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c62:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c66:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6a:	b382      	cbz	r2, 8001cce <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c6c:	2a0c      	cmp	r2, #12
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x4c>
 8001c70:	2000      	movs	r0, #0
  return sysclockfreq;
 8001c72:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c74:	2a04      	cmp	r2, #4
 8001c76:	d029      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x94>
 8001c78:	2a08      	cmp	r2, #8
 8001c7a:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c7c:	bf18      	it	ne
 8001c7e:	2000      	movne	r0, #0
 8001c80:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c82:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c84:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c86:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c88:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c8c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001c90:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c92:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x6c>
 8001c98:	2903      	cmp	r1, #3
 8001c9a:	d012      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001ca2:	e003      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cac:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cae:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001cb6:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cb8:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cba:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001cbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc0:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cc6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001cca:	e7ef      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08004004 	.word	0x08004004
 8001cd8:	007a1200 	.word	0x007a1200
 8001cdc:	00f42400 	.word	0x00f42400

08001ce0 <HAL_RCC_OscConfig>:
{
 8001ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	b918      	cbnz	r0, 8001cf0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
}
 8001cea:	b003      	add	sp, #12
 8001cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf0:	4ca5      	ldr	r4, [pc, #660]	; (8001f88 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf4:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d02:	d53c      	bpl.n	8001d7e <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d04:	b11e      	cbz	r6, 8001d0e <HAL_RCC_OscConfig+0x2e>
 8001d06:	2e0c      	cmp	r6, #12
 8001d08:	d163      	bne.n	8001dd2 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d0a:	2f01      	cmp	r7, #1
 8001d0c:	d161      	bne.n	8001dd2 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	0798      	lsls	r0, r3, #30
 8001d12:	d502      	bpl.n	8001d1a <HAL_RCC_OscConfig+0x3a>
 8001d14:	69ab      	ldr	r3, [r5, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0e6      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	6a28      	ldr	r0, [r5, #32]
 8001d1e:	0719      	lsls	r1, r3, #28
 8001d20:	bf56      	itet	pl
 8001d22:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d26:	6823      	ldrmi	r3, [r4, #0]
 8001d28:	091b      	lsrpl	r3, r3, #4
 8001d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2e:	4283      	cmp	r3, r0
 8001d30:	d23a      	bcs.n	8001da8 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d32:	f7ff ff3f 	bl	8001bb4 <RCC_SetFlashLatencyFromMSIRange>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d1d6      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6023      	str	r3, [r4, #0]
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	6a2a      	ldr	r2, [r5, #32]
 8001d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4e:	6863      	ldr	r3, [r4, #4]
 8001d50:	69ea      	ldr	r2, [r5, #28]
 8001d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d5a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5c:	f7ff ff6c 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001d60:	68a3      	ldr	r3, [r4, #8]
 8001d62:	4a8a      	ldr	r2, [pc, #552]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	40d8      	lsrs	r0, r3
 8001d70:	4b87      	ldr	r3, [pc, #540]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001d72:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff faf7 	bl	8001368 <HAL_InitTick>
        if(status != HAL_OK)
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d1b5      	bne.n	8001cea <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	07d8      	lsls	r0, r3, #31
 8001d82:	d45d      	bmi.n	8001e40 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	0799      	lsls	r1, r3, #30
 8001d88:	f100 809c 	bmi.w	8001ec4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8c:	682b      	ldr	r3, [r5, #0]
 8001d8e:	0718      	lsls	r0, r3, #28
 8001d90:	f100 80d0 	bmi.w	8001f34 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	0759      	lsls	r1, r3, #29
 8001d98:	f100 80fc 	bmi.w	8001f94 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8165 	bne.w	800206e <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001da4:	2000      	movs	r0, #0
 8001da6:	e7a0      	b.n	8001cea <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db6:	4303      	orrs	r3, r0
 8001db8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dba:	6863      	ldr	r3, [r4, #4]
 8001dbc:	69ea      	ldr	r2, [r5, #28]
 8001dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001dc6:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc8:	f7ff fef4 	bl	8001bb4 <RCC_SetFlashLatencyFromMSIRange>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d0c5      	beq.n	8001d5c <HAL_RCC_OscConfig+0x7c>
 8001dd0:	e78a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dd2:	69ab      	ldr	r3, [r5, #24]
 8001dd4:	b31b      	cbz	r3, 8001e1e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dde:	f7ff faf9 	bl	80013d4 <HAL_GetTick>
 8001de2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	079a      	lsls	r2, r3, #30
 8001de8:	d511      	bpl.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	6a2a      	ldr	r2, [r5, #32]
 8001df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfe:	6863      	ldr	r3, [r4, #4]
 8001e00:	69ea      	ldr	r2, [r5, #28]
 8001e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e0a:	6063      	str	r3, [r4, #4]
 8001e0c:	e7b7      	b.n	8001d7e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fae1 	bl	80013d4 <HAL_GetTick>
 8001e12:	eba0 0008 	sub.w	r0, r0, r8
 8001e16:	2802      	cmp	r0, #2
 8001e18:	d9e4      	bls.n	8001de4 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	e765      	b.n	8001cea <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e26:	f7ff fad5 	bl	80013d4 <HAL_GetTick>
 8001e2a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	079b      	lsls	r3, r3, #30
 8001e30:	d5a5      	bpl.n	8001d7e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e32:	f7ff facf 	bl	80013d4 <HAL_GetTick>
 8001e36:	eba0 0008 	sub.w	r0, r0, r8
 8001e3a:	2802      	cmp	r0, #2
 8001e3c:	d9f6      	bls.n	8001e2c <HAL_RCC_OscConfig+0x14c>
 8001e3e:	e7ec      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e40:	2e08      	cmp	r6, #8
 8001e42:	d003      	beq.n	8001e4c <HAL_RCC_OscConfig+0x16c>
 8001e44:	2e0c      	cmp	r6, #12
 8001e46:	d108      	bne.n	8001e5a <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001e48:	2f03      	cmp	r7, #3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	039a      	lsls	r2, r3, #14
 8001e50:	d598      	bpl.n	8001d84 <HAL_RCC_OscConfig+0xa4>
 8001e52:	686b      	ldr	r3, [r5, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d195      	bne.n	8001d84 <HAL_RCC_OscConfig+0xa4>
 8001e58:	e746      	b.n	8001ce8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	686b      	ldr	r3, [r5, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d110      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1a4>
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fab3 	bl	80013d4 <HAL_GetTick>
 8001e6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	039b      	lsls	r3, r3, #14
 8001e74:	d486      	bmi.n	8001d84 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e76:	f7ff faad 	bl	80013d4 <HAL_GetTick>
 8001e7a:	eba0 0008 	sub.w	r0, r0, r8
 8001e7e:	2864      	cmp	r0, #100	; 0x64
 8001e80:	d9f6      	bls.n	8001e70 <HAL_RCC_OscConfig+0x190>
 8001e82:	e7ca      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d104      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	e7e6      	b.n	8001e62 <HAL_RCC_OscConfig+0x182>
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e9a:	6022      	str	r2, [r4, #0]
 8001e9c:	6822      	ldr	r2, [r4, #0]
 8001e9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea2:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa94 	bl	80013d4 <HAL_GetTick>
 8001eac:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	0398      	lsls	r0, r3, #14
 8001eb2:	f57f af67 	bpl.w	8001d84 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fa8d 	bl	80013d4 <HAL_GetTick>
 8001eba:	eba0 0008 	sub.w	r0, r0, r8
 8001ebe:	2864      	cmp	r0, #100	; 0x64
 8001ec0:	d9f5      	bls.n	8001eae <HAL_RCC_OscConfig+0x1ce>
 8001ec2:	e7aa      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ec4:	2e04      	cmp	r6, #4
 8001ec6:	d003      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1f0>
 8001ec8:	2e0c      	cmp	r6, #12
 8001eca:	d110      	bne.n	8001eee <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001ecc:	2f02      	cmp	r7, #2
 8001ece:	d10e      	bne.n	8001eee <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	0559      	lsls	r1, r3, #21
 8001ed4:	d503      	bpl.n	8001ede <HAL_RCC_OscConfig+0x1fe>
 8001ed6:	68eb      	ldr	r3, [r5, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f43f af05 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	692a      	ldr	r2, [r5, #16]
 8001ee2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001ee6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001eea:	6063      	str	r3, [r4, #4]
 8001eec:	e74e      	b.n	8001d8c <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	68eb      	ldr	r3, [r5, #12]
 8001ef0:	b17b      	cbz	r3, 8001f12 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001efa:	f7ff fa6b 	bl	80013d4 <HAL_GetTick>
 8001efe:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	055a      	lsls	r2, r3, #21
 8001f04:	d4eb      	bmi.n	8001ede <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fa65 	bl	80013d4 <HAL_GetTick>
 8001f0a:	1bc0      	subs	r0, r0, r7
 8001f0c:	2802      	cmp	r0, #2
 8001f0e:	d9f7      	bls.n	8001f00 <HAL_RCC_OscConfig+0x220>
 8001f10:	e783      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fa5b 	bl	80013d4 <HAL_GetTick>
 8001f1e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	055b      	lsls	r3, r3, #21
 8001f24:	f57f af32 	bpl.w	8001d8c <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff fa54 	bl	80013d4 <HAL_GetTick>
 8001f2c:	1bc0      	subs	r0, r0, r7
 8001f2e:	2802      	cmp	r0, #2
 8001f30:	d9f6      	bls.n	8001f20 <HAL_RCC_OscConfig+0x240>
 8001f32:	e772      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f34:	696b      	ldr	r3, [r5, #20]
 8001f36:	b19b      	cbz	r3, 8001f60 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001f38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f44:	f7ff fa46 	bl	80013d4 <HAL_GetTick>
 8001f48:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f4e:	079a      	lsls	r2, r3, #30
 8001f50:	f53f af20 	bmi.w	8001d94 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff fa3e 	bl	80013d4 <HAL_GetTick>
 8001f58:	1bc0      	subs	r0, r0, r7
 8001f5a:	2802      	cmp	r0, #2
 8001f5c:	d9f5      	bls.n	8001f4a <HAL_RCC_OscConfig+0x26a>
 8001f5e:	e75c      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001f60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fa32 	bl	80013d4 <HAL_GetTick>
 8001f70:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f76:	079b      	lsls	r3, r3, #30
 8001f78:	f57f af0c 	bpl.w	8001d94 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fa2a 	bl	80013d4 <HAL_GetTick>
 8001f80:	1bc0      	subs	r0, r0, r7
 8001f82:	2802      	cmp	r0, #2
 8001f84:	d9f5      	bls.n	8001f72 <HAL_RCC_OscConfig+0x292>
 8001f86:	e748      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08003fe9 	.word	0x08003fe9
 8001f90:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f96:	00d8      	lsls	r0, r3, #3
 8001f98:	d429      	bmi.n	8001fee <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fac:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb0:	4f5d      	ldr	r7, [pc, #372]	; (8002128 <HAL_RCC_OscConfig+0x448>)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	05d9      	lsls	r1, r3, #23
 8001fb6:	d51d      	bpl.n	8001ff4 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	68ab      	ldr	r3, [r5, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d12b      	bne.n	8002016 <HAL_RCC_OscConfig+0x336>
 8001fbe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa03 	bl	80013d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fd2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fd8:	079b      	lsls	r3, r3, #30
 8001fda:	d542      	bpl.n	8002062 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001fdc:	f1b8 0f00 	cmp.w	r8, #0
 8001fe0:	f43f aedc 	beq.w	8001d9c <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fea:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fec:	e6d6      	b.n	8001d9c <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	f04f 0800 	mov.w	r8, #0
 8001ff2:	e7dd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f9ea 	bl	80013d4 <HAL_GetTick>
 8002000:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	05da      	lsls	r2, r3, #23
 8002006:	d4d7      	bmi.n	8001fb8 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7ff f9e4 	bl	80013d4 <HAL_GetTick>
 800200c:	eba0 0009 	sub.w	r0, r0, r9
 8002010:	2802      	cmp	r0, #2
 8002012:	d9f6      	bls.n	8002002 <HAL_RCC_OscConfig+0x322>
 8002014:	e701      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002016:	2b05      	cmp	r3, #5
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x348>
 800201a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002026:	e7ca      	b.n	8001fbe <HAL_RCC_OscConfig+0x2de>
 8002028:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002034:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002038:	f022 0204 	bic.w	r2, r2, #4
 800203c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1c2      	bne.n	8001fca <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002044:	f7ff f9c6 	bl	80013d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800204c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002052:	0798      	lsls	r0, r3, #30
 8002054:	d5c2      	bpl.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7ff f9bd 	bl	80013d4 <HAL_GetTick>
 800205a:	1bc0      	subs	r0, r0, r7
 800205c:	4548      	cmp	r0, r9
 800205e:	d9f6      	bls.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002060:	e6db      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff f9b7 	bl	80013d4 <HAL_GetTick>
 8002066:	1bc0      	subs	r0, r0, r7
 8002068:	4548      	cmp	r0, r9
 800206a:	d9b3      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f4>
 800206c:	e6d5      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206e:	2e0c      	cmp	r6, #12
 8002070:	f43f ae3a 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002074:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800207c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800207e:	d137      	bne.n	80020f0 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002080:	f7ff f9a8 	bl	80013d4 <HAL_GetTick>
 8002084:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	0199      	lsls	r1, r3, #6
 800208a:	d42b      	bmi.n	80020e4 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800208e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002094:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002096:	3a01      	subs	r2, #1
 8002098:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800209c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800209e:	0912      	lsrs	r2, r2, #4
 80020a0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80020a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80020a6:	0852      	lsrs	r2, r2, #1
 80020a8:	3a01      	subs	r2, #1
 80020aa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80020ae:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80020b0:	0852      	lsrs	r2, r2, #1
 80020b2:	3a01      	subs	r2, #1
 80020b4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80020b8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c0:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c2:	68e3      	ldr	r3, [r4, #12]
 80020c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80020ca:	f7ff f983 	bl	80013d4 <HAL_GetTick>
 80020ce:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	019a      	lsls	r2, r3, #6
 80020d4:	f53f ae66 	bmi.w	8001da4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f97c 	bl	80013d4 <HAL_GetTick>
 80020dc:	1b40      	subs	r0, r0, r5
 80020de:	2802      	cmp	r0, #2
 80020e0:	d9f6      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3f0>
 80020e2:	e69a      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff f976 	bl	80013d4 <HAL_GetTick>
 80020e8:	1b80      	subs	r0, r0, r6
 80020ea:	2802      	cmp	r0, #2
 80020ec:	d9cb      	bls.n	8002086 <HAL_RCC_OscConfig+0x3a6>
 80020ee:	e694      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020f6:	bf02      	ittt	eq
 80020f8:	68e3      	ldreq	r3, [r4, #12]
 80020fa:	f023 0303 	biceq.w	r3, r3, #3
 80020fe:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002100:	68e3      	ldr	r3, [r4, #12]
 8002102:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800210c:	f7ff f962 	bl	80013d4 <HAL_GetTick>
 8002110:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	f57f ae45 	bpl.w	8001da4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff f95b 	bl	80013d4 <HAL_GetTick>
 800211e:	1b40      	subs	r0, r0, r5
 8002120:	2802      	cmp	r0, #2
 8002122:	d9f6      	bls.n	8002112 <HAL_RCC_OscConfig+0x432>
 8002124:	e679      	b.n	8001e1a <HAL_RCC_OscConfig+0x13a>
 8002126:	bf00      	nop
 8002128:	40007000 	.word	0x40007000

0800212c <HAL_RCC_ClockConfig>:
{
 800212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002130:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002132:	4604      	mov	r4, r0
 8002134:	b910      	cbnz	r0, 800213c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002136:	2001      	movs	r0, #1
 8002138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <HAL_RCC_ClockConfig+0x114>)
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	428b      	cmp	r3, r1
 8002146:	d329      	bcc.n	800219c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	07d9      	lsls	r1, r3, #31
 800214c:	d431      	bmi.n	80021b2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214e:	6821      	ldr	r1, [r4, #0]
 8002150:	078a      	lsls	r2, r1, #30
 8002152:	d45b      	bmi.n	800220c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <HAL_RCC_ClockConfig+0x114>)
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	429e      	cmp	r6, r3
 800215e:	d35d      	bcc.n	800221c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	f011 0f04 	tst.w	r1, #4
 8002164:	4d37      	ldr	r5, [pc, #220]	; (8002244 <HAL_RCC_ClockConfig+0x118>)
 8002166:	d164      	bne.n	8002232 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	070b      	lsls	r3, r1, #28
 800216a:	d506      	bpl.n	800217a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216c:	68ab      	ldr	r3, [r5, #8]
 800216e:	6922      	ldr	r2, [r4, #16]
 8002170:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002174:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002178:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217a:	f7ff fd5d 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 800217e:	68ab      	ldr	r3, [r5, #8]
 8002180:	4a31      	ldr	r2, [pc, #196]	; (8002248 <HAL_RCC_ClockConfig+0x11c>)
 8002182:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	40d8      	lsrs	r0, r3
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_RCC_ClockConfig+0x120>)
 8002194:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f7ff b8e6 	b.w	8001368 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f023 0307 	bic.w	r3, r3, #7
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	6813      	ldr	r3, [r2, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4299      	cmp	r1, r3
 80021ae:	d1c2      	bne.n	8002136 <HAL_RCC_ClockConfig+0xa>
 80021b0:	e7ca      	b.n	8002148 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	6862      	ldr	r2, [r4, #4]
 80021b4:	4d23      	ldr	r5, [pc, #140]	; (8002244 <HAL_RCC_ClockConfig+0x118>)
 80021b6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	d11b      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	d0b9      	beq.n	8002136 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	68ab      	ldr	r3, [r5, #8]
 80021c4:	f023 0303 	bic.w	r3, r3, #3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80021cc:	f7ff f902 	bl	80013d4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021d4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	68ab      	ldr	r3, [r5, #8]
 80021d8:	6862      	ldr	r2, [r4, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021e2:	d0b4      	beq.n	800214e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f8f6 	bl	80013d4 <HAL_GetTick>
 80021e8:	1bc0      	subs	r0, r0, r7
 80021ea:	4540      	cmp	r0, r8
 80021ec:	d9f3      	bls.n	80021d6 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
}
 80021f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f4:	2a02      	cmp	r2, #2
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021fc:	e7e0      	b.n	80021c0 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021fe:	b912      	cbnz	r2, 8002206 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002200:	f013 0f02 	tst.w	r3, #2
 8002204:	e7dc      	b.n	80021c0 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002206:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800220a:	e7d9      	b.n	80021c0 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_RCC_ClockConfig+0x118>)
 800220e:	68a0      	ldr	r0, [r4, #8]
 8002210:	6893      	ldr	r3, [r2, #8]
 8002212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002216:	4303      	orrs	r3, r0
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	e79b      	b.n	8002154 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f023 0307 	bic.w	r3, r3, #7
 8002222:	4333      	orrs	r3, r6
 8002224:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	429e      	cmp	r6, r3
 800222e:	d182      	bne.n	8002136 <HAL_RCC_ClockConfig+0xa>
 8002230:	e796      	b.n	8002160 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002232:	68ab      	ldr	r3, [r5, #8]
 8002234:	68e2      	ldr	r2, [r4, #12]
 8002236:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800223a:	4313      	orrs	r3, r2
 800223c:	60ab      	str	r3, [r5, #8]
 800223e:	e793      	b.n	8002168 <HAL_RCC_ClockConfig+0x3c>
 8002240:	40022000 	.word	0x40022000
 8002244:	40021000 	.word	0x40021000
 8002248:	08003fe9 	.word	0x08003fe9
 800224c:	20000000 	.word	0x20000000

08002250 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002252:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800225e:	6810      	ldr	r0, [r2, #0]
 8002260:	f003 031f 	and.w	r3, r3, #31
}
 8002264:	40d8      	lsrs	r0, r3
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000
 800226c:	08003ff9 	.word	0x08003ff9
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002276:	4a06      	ldr	r2, [pc, #24]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	f003 031f 	and.w	r3, r3, #31
}
 8002288:	40d8      	lsrs	r0, r3
 800228a:	4770      	bx	lr
 800228c:	40021000 	.word	0x40021000
 8002290:	08003ff9 	.word	0x08003ff9
 8002294:	20000000 	.word	0x20000000

08002298 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8002298:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <RCCEx_GetSAIxPeriphCLKFreq+0xb8>)
 800229e:	d108      	bne.n	80022b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80022a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022a4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80022a8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80022ac:	d14c      	bne.n	8002348 <RCCEx_GetSAIxPeriphCLKFreq+0xb0>
 80022ae:	4829      	ldr	r0, [pc, #164]	; (8002354 <RCCEx_GetSAIxPeriphCLKFreq+0xbc>)
 80022b0:	4770      	bx	lr
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80022b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80022b6:	d121      	bne.n	80022fc <RCCEx_GetSAIxPeriphCLKFreq+0x64>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80022b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022bc:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80022c0:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80022c4:	d0f3      	beq.n	80022ae <RCCEx_GetSAIxPeriphCLKFreq+0x16>
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80022c6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80022ca:	d116      	bne.n	80022fa <RCCEx_GetSAIxPeriphCLKFreq+0x62>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80022cc:	68d8      	ldr	r0, [r3, #12]
 80022ce:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 80022d2:	d03c      	beq.n	800234e <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80022d4:	68d8      	ldr	r0, [r3, #12]
 80022d6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80022da:	3001      	adds	r0, #1
 80022dc:	fbb1 f1f0 	udiv	r1, r1, r0
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80022e0:	68d8      	ldr	r0, [r3, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80022e2:	68db      	ldr	r3, [r3, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80022e4:	f3c0 2006 	ubfx	r0, r0, #8, #7
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 80022e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022ec:	bf14      	ite	ne
 80022ee:	2311      	movne	r3, #17
 80022f0:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 80022f2:	4348      	muls	r0, r1
 80022f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80022f8:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80022fa:	b972      	cbnz	r2, 800231a <RCCEx_GetSAIxPeriphCLKFreq+0x82>
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80022fc:	6918      	ldr	r0, [r3, #16]
 80022fe:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8002302:	d024      	beq.n	800234e <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002304:	68d8      	ldr	r0, [r3, #12]
 8002306:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800230a:	3001      	adds	r0, #1
 800230c:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002310:	6918      	ldr	r0, [r3, #16]
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8002312:	691b      	ldr	r3, [r3, #16]
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002314:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002318:	e7e6      	b.n	80022e8 <RCCEx_GetSAIxPeriphCLKFreq+0x50>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800231a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800231e:	d002      	beq.n	8002326 <RCCEx_GetSAIxPeriphCLKFreq+0x8e>
 8002320:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8002324:	d10e      	bne.n	8002344 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8002326:	6958      	ldr	r0, [r3, #20]
 8002328:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800232c:	d00f      	beq.n	800234e <RCCEx_GetSAIxPeriphCLKFreq+0xb6>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800232e:	68d8      	ldr	r0, [r3, #12]
 8002330:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002334:	3001      	adds	r0, #1
 8002336:	fbb1 f1f0 	udiv	r1, r1, r0
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800233a:	6958      	ldr	r0, [r3, #20]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800233c:	695b      	ldr	r3, [r3, #20]
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800233e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002342:	e7d1      	b.n	80022e8 <RCCEx_GetSAIxPeriphCLKFreq+0x50>
 8002344:	2000      	movs	r0, #0
 8002346:	4770      	bx	lr
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8002348:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800234c:	e7bd      	b.n	80022ca <RCCEx_GetSAIxPeriphCLKFreq+0x32>
    }
  }


  return frequency;
}
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	001fff68 	.word	0x001fff68

08002358 <RCCEx_PLLSAI1_Config>:
{
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <RCCEx_PLLSAI1_Config+0x118>)
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	f012 0f03 	tst.w	r2, #3
{
 8002362:	4605      	mov	r5, r0
 8002364:	460e      	mov	r6, r1
 8002366:	461c      	mov	r4, r3
 8002368:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800236a:	d02a      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x6a>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	4282      	cmp	r2, r0
 8002374:	d13c      	bne.n	80023f0 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002376:	2a00      	cmp	r2, #0
 8002378:	d03a      	beq.n	80023f0 <RCCEx_PLLSAI1_Config+0x98>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800237a:	68db      	ldr	r3, [r3, #12]
       ||
 800237c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800237e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002382:	3301      	adds	r3, #1
       ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d133      	bne.n	80023f0 <RCCEx_PLLSAI1_Config+0x98>
    __HAL_RCC_PLLSAI1_DISABLE();
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800238e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002390:	f7ff f820 	bl	80013d4 <HAL_GetTick>
 8002394:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	011a      	lsls	r2, r3, #4
 800239a:	d432      	bmi.n	8002402 <RCCEx_PLLSAI1_Config+0xaa>
 800239c:	68af      	ldr	r7, [r5, #8]
      if(Divider == DIVIDER_P_UPDATE)
 800239e:	2e00      	cmp	r6, #0
 80023a0:	d036      	beq.n	8002410 <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 80023a2:	2e01      	cmp	r6, #1
 80023a4:	d150      	bne.n	8002448 <RCCEx_PLLSAI1_Config+0xf0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a6:	6922      	ldr	r2, [r4, #16]
 80023a8:	6928      	ldr	r0, [r5, #16]
 80023aa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80023ae:	0840      	lsrs	r0, r0, #1
 80023b0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80023b4:	3801      	subs	r0, #1
 80023b6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80023ba:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80023be:	6122      	str	r2, [r4, #16]
 80023c0:	e032      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80023c2:	2802      	cmp	r0, #2
 80023c4:	d010      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x90>
 80023c6:	2803      	cmp	r0, #3
 80023c8:	d014      	beq.n	80023f4 <RCCEx_PLLSAI1_Config+0x9c>
 80023ca:	2801      	cmp	r0, #1
 80023cc:	d110      	bne.n	80023f0 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	079f      	lsls	r7, r3, #30
 80023d2:	d538      	bpl.n	8002446 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023d4:	68e3      	ldr	r3, [r4, #12]
 80023d6:	686a      	ldr	r2, [r5, #4]
 80023d8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80023dc:	3a01      	subs	r2, #1
 80023de:	4318      	orrs	r0, r3
 80023e0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80023e4:	60e0      	str	r0, [r4, #12]
 80023e6:	e7cf      	b.n	8002388 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ee:	d1f1      	bne.n	80023d4 <RCCEx_PLLSAI1_Config+0x7c>
 80023f0:	2001      	movs	r0, #1
 80023f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	0391      	lsls	r1, r2, #14
 80023f8:	d4ec      	bmi.n	80023d4 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002400:	e7f5      	b.n	80023ee <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002402:	f7fe ffe7 	bl	80013d4 <HAL_GetTick>
 8002406:	1bc0      	subs	r0, r0, r7
 8002408:	2802      	cmp	r0, #2
 800240a:	d9c4      	bls.n	8002396 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800240c:	2003      	movs	r0, #3
 800240e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002410:	6921      	ldr	r1, [r4, #16]
 8002412:	68eb      	ldr	r3, [r5, #12]
 8002414:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002418:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800241c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002426:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800242e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002430:	f7fe ffd0 	bl	80013d4 <HAL_GetTick>
 8002434:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	d513      	bpl.n	8002464 <RCCEx_PLLSAI1_Config+0x10c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800243c:	6923      	ldr	r3, [r4, #16]
 800243e:	69aa      	ldr	r2, [r5, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	6123      	str	r3, [r4, #16]
 8002444:	2000      	movs	r0, #0
}
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	6968      	ldr	r0, [r5, #20]
 800244c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002450:	0840      	lsrs	r0, r0, #1
 8002452:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002456:	3801      	subs	r0, #1
 8002458:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800245c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002460:	6123      	str	r3, [r4, #16]
 8002462:	e7e1      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002464:	f7fe ffb6 	bl	80013d4 <HAL_GetTick>
 8002468:	1b80      	subs	r0, r0, r6
 800246a:	2802      	cmp	r0, #2
 800246c:	d9e3      	bls.n	8002436 <RCCEx_PLLSAI1_Config+0xde>
 800246e:	e7cd      	b.n	800240c <RCCEx_PLLSAI1_Config+0xb4>
 8002470:	40021000 	.word	0x40021000

08002474 <RCCEx_PLLSAI2_Config>:
{
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <RCCEx_PLLSAI2_Config+0xf8>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	f012 0f03 	tst.w	r2, #3
{
 800247e:	4605      	mov	r5, r0
 8002480:	460e      	mov	r6, r1
 8002482:	461c      	mov	r4, r3
 8002484:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002486:	d028      	beq.n	80024da <RCCEx_PLLSAI2_Config+0x66>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	f002 0203 	and.w	r2, r2, #3
 800248e:	4282      	cmp	r2, r0
 8002490:	d13a      	bne.n	8002508 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002492:	2a00      	cmp	r2, #0
 8002494:	d038      	beq.n	8002508 <RCCEx_PLLSAI2_Config+0x94>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002496:	68db      	ldr	r3, [r3, #12]
       ||
 8002498:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800249a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800249e:	3301      	adds	r3, #1
       ||
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d131      	bne.n	8002508 <RCCEx_PLLSAI2_Config+0x94>
    __HAL_RCC_PLLSAI2_DISABLE();
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80024ac:	f7fe ff92 	bl	80013d4 <HAL_GetTick>
 80024b0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	d430      	bmi.n	800251a <RCCEx_PLLSAI2_Config+0xa6>
 80024b8:	68a8      	ldr	r0, [r5, #8]
      if(Divider == DIVIDER_P_UPDATE)
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d034      	beq.n	8002528 <RCCEx_PLLSAI2_Config+0xb4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024be:	6963      	ldr	r3, [r4, #20]
 80024c0:	6929      	ldr	r1, [r5, #16]
 80024c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024c6:	0849      	lsrs	r1, r1, #1
 80024c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024cc:	3901      	subs	r1, #1
 80024ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024d2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80024d6:	6163      	str	r3, [r4, #20]
 80024d8:	e032      	b.n	8002540 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80024da:	2802      	cmp	r0, #2
 80024dc:	d010      	beq.n	8002500 <RCCEx_PLLSAI2_Config+0x8c>
 80024de:	2803      	cmp	r0, #3
 80024e0:	d014      	beq.n	800250c <RCCEx_PLLSAI2_Config+0x98>
 80024e2:	2801      	cmp	r0, #1
 80024e4:	d110      	bne.n	8002508 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	079f      	lsls	r7, r3, #30
 80024ea:	d538      	bpl.n	800255e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ec:	68e3      	ldr	r3, [r4, #12]
 80024ee:	686a      	ldr	r2, [r5, #4]
 80024f0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80024f4:	3a01      	subs	r2, #1
 80024f6:	4318      	orrs	r0, r3
 80024f8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80024fc:	60e0      	str	r0, [r4, #12]
 80024fe:	e7d1      	b.n	80024a4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002506:	d1f1      	bne.n	80024ec <RCCEx_PLLSAI2_Config+0x78>
 8002508:	2001      	movs	r0, #1
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	0391      	lsls	r1, r2, #14
 8002510:	d4ec      	bmi.n	80024ec <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002518:	e7f5      	b.n	8002506 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800251a:	f7fe ff5b 	bl	80013d4 <HAL_GetTick>
 800251e:	1bc0      	subs	r0, r0, r7
 8002520:	2802      	cmp	r0, #2
 8002522:	d9c6      	bls.n	80024b2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002528:	6962      	ldr	r2, [r4, #20]
 800252a:	68eb      	ldr	r3, [r5, #12]
 800252c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002530:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002534:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800253e:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002548:	f7fe ff44 	bl	80013d4 <HAL_GetTick>
 800254c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	d505      	bpl.n	8002560 <RCCEx_PLLSAI2_Config+0xec>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002554:	6963      	ldr	r3, [r4, #20]
 8002556:	696a      	ldr	r2, [r5, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	6163      	str	r3, [r4, #20]
 800255c:	2000      	movs	r0, #0
}
 800255e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002560:	f7fe ff38 	bl	80013d4 <HAL_GetTick>
 8002564:	1b80      	subs	r0, r0, r6
 8002566:	2802      	cmp	r0, #2
 8002568:	d9f1      	bls.n	800254e <RCCEx_PLLSAI2_Config+0xda>
 800256a:	e7db      	b.n	8002524 <RCCEx_PLLSAI2_Config+0xb0>
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002570:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002574:	6806      	ldr	r6, [r0, #0]
 8002576:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800257a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800257c:	d024      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800257e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002580:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002584:	d02c      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002586:	d802      	bhi.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002588:	b1c1      	cbz	r1, 80025bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800258a:	2601      	movs	r6, #1
 800258c:	e01c      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800258e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002592:	d00d      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002594:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002598:	d1f7      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800259a:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800259e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025a6:	430b      	orrs	r3, r1
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025ac:	2600      	movs	r6, #0
 80025ae:	e00b      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b0:	4a47      	ldr	r2, [pc, #284]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	68d3      	ldr	r3, [r2, #12]
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	60d3      	str	r3, [r2, #12]
      break;
 80025ba:	e7ee      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025bc:	3004      	adds	r0, #4
 80025be:	f7ff fecb 	bl	8002358 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d0e8      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	04d8      	lsls	r0, r3, #19
 80025cc:	d506      	bpl.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80025ce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80025d0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80025d4:	d074      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80025d6:	d808      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025d8:	b1a9      	cbz	r1, 8002606 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80025da:	2601      	movs	r6, #1
 80025dc:	4635      	mov	r5, r6
 80025de:	e021      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e0:	2100      	movs	r1, #0
 80025e2:	3020      	adds	r0, #32
 80025e4:	f7ff ff46 	bl	8002474 <RCCEx_PLLSAI2_Config>
 80025e8:	e7eb      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80025ea:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80025ee:	d004      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80025f0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80025f4:	d1f1      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80025f6:	4635      	mov	r5, r6
 80025f8:	e009      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025fa:	4a35      	ldr	r2, [pc, #212]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fc:	68d3      	ldr	r3, [r2, #12]
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	e7f7      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002606:	1d20      	adds	r0, r4, #4
 8002608:	f7ff fea6 	bl	8002358 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800260c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800260e:	2d00      	cmp	r5, #0
 8002610:	d15c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002612:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002616:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800261a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800261e:	430b      	orrs	r3, r1
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	0399      	lsls	r1, r3, #14
 8002628:	f140 814f 	bpl.w	80028ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800262c:	4f28      	ldr	r7, [pc, #160]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002630:	00da      	lsls	r2, r3, #3
 8002632:	f140 8176 	bpl.w	8002922 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002636:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80026d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800263e:	f8d9 3000 	ldr.w	r3, [r9]
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800264a:	f7fe fec3 	bl	80013d4 <HAL_GetTick>
 800264e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002650:	f8d9 3000 	ldr.w	r3, [r9]
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	d53f      	bpl.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002658:	2d00      	cmp	r5, #0
 800265a:	d144      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002660:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002664:	d015      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002666:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800266a:	4293      	cmp	r3, r2
 800266c:	d011      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800266e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002672:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002676:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800267a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800267e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002686:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800268a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800268e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002692:	07d8      	lsls	r0, r3, #31
 8002694:	d509      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002696:	f7fe fe9d 	bl	80013d4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800269e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026a4:	0799      	lsls	r1, r3, #30
 80026a6:	f140 8109 	bpl.w	80028bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ae:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80026b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026bc:	4635      	mov	r5, r6
 80026be:	e012      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c0:	2100      	movs	r1, #0
 80026c2:	f104 0020 	add.w	r0, r4, #32
 80026c6:	f7ff fed5 	bl	8002474 <RCCEx_PLLSAI2_Config>
 80026ca:	e79f      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80026cc:	462e      	mov	r6, r5
 80026ce:	e7a9      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe fe7c 	bl	80013d4 <HAL_GetTick>
 80026dc:	eba0 000a 	sub.w	r0, r0, sl
 80026e0:	2802      	cmp	r0, #2
 80026e2:	d9b5      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80026e4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80026e6:	f1b8 0f00 	cmp.w	r8, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f2:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	07da      	lsls	r2, r3, #31
 80026f8:	d508      	bpl.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026fa:	4990      	ldr	r1, [pc, #576]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002702:	f022 0203 	bic.w	r2, r2, #3
 8002706:	4302      	orrs	r2, r0
 8002708:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270c:	079f      	lsls	r7, r3, #30
 800270e:	d508      	bpl.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002710:	498a      	ldr	r1, [pc, #552]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002712:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002714:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002718:	f022 020c 	bic.w	r2, r2, #12
 800271c:	4302      	orrs	r2, r0
 800271e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002722:	075e      	lsls	r6, r3, #29
 8002724:	d508      	bpl.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002726:	4985      	ldr	r1, [pc, #532]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002728:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800272a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800272e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002732:	4302      	orrs	r2, r0
 8002734:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002738:	0718      	lsls	r0, r3, #28
 800273a:	d508      	bpl.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800273c:	497f      	ldr	r1, [pc, #508]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800273e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002740:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002744:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002748:	4302      	orrs	r2, r0
 800274a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274e:	06d9      	lsls	r1, r3, #27
 8002750:	d508      	bpl.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002752:	497a      	ldr	r1, [pc, #488]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002754:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002756:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800275a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800275e:	4302      	orrs	r2, r0
 8002760:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002764:	069a      	lsls	r2, r3, #26
 8002766:	d508      	bpl.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002768:	4974      	ldr	r1, [pc, #464]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800276a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800276c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002770:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002774:	4302      	orrs	r2, r0
 8002776:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800277a:	059f      	lsls	r7, r3, #22
 800277c:	d508      	bpl.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800277e:	496f      	ldr	r1, [pc, #444]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002780:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002782:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002786:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800278a:	4302      	orrs	r2, r0
 800278c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002790:	055e      	lsls	r6, r3, #21
 8002792:	d508      	bpl.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002794:	4969      	ldr	r1, [pc, #420]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002796:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002798:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800279c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80027a0:	4302      	orrs	r2, r0
 80027a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a6:	0658      	lsls	r0, r3, #25
 80027a8:	d508      	bpl.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027aa:	4964      	ldr	r1, [pc, #400]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80027ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027b6:	4302      	orrs	r2, r0
 80027b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027bc:	0619      	lsls	r1, r3, #24
 80027be:	d508      	bpl.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c0:	495e      	ldr	r1, [pc, #376]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80027cc:	4302      	orrs	r2, r0
 80027ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027d2:	05da      	lsls	r2, r3, #23
 80027d4:	d508      	bpl.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d6:	4959      	ldr	r1, [pc, #356]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027de:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027e2:	4302      	orrs	r2, r0
 80027e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027e8:	049b      	lsls	r3, r3, #18
 80027ea:	d50f      	bpl.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ec:	4a53      	ldr	r2, [pc, #332]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80027ee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80027f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027f4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027f8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027fa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002802:	d164      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002804:	68d3      	ldr	r3, [r2, #12]
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	031f      	lsls	r7, r3, #12
 8002810:	d50f      	bpl.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002814:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002816:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800281a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800281e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002820:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002828:	d15c      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282a:	68d3      	ldr	r3, [r2, #12]
 800282c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002830:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	035e      	lsls	r6, r3, #13
 8002836:	d50f      	bpl.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002838:	4a40      	ldr	r2, [pc, #256]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800283a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800283c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002840:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002844:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002846:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800284a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800284e:	d154      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002850:	68d3      	ldr	r3, [r2, #12]
 8002852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002856:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	0458      	lsls	r0, r3, #17
 800285c:	d512      	bpl.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800285e:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002860:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002862:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002866:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800286a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800286c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002874:	d14c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002876:	2102      	movs	r1, #2
 8002878:	1d20      	adds	r0, r4, #4
 800287a:	f7ff fd6d 	bl	8002358 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800287e:	2800      	cmp	r0, #0
 8002880:	bf18      	it	ne
 8002882:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	0411      	lsls	r1, r2, #16
 8002888:	d508      	bpl.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800288a:	492c      	ldr	r1, [pc, #176]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800288c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800288e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002892:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002896:	4303      	orrs	r3, r0
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800289c:	03d3      	lsls	r3, r2, #15
 800289e:	d509      	bpl.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80028a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ae:	430b      	orrs	r3, r1
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80028b4:	4628      	mov	r0, r5
 80028b6:	b002      	add	sp, #8
 80028b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fd8a 	bl	80013d4 <HAL_GetTick>
 80028c0:	1b40      	subs	r0, r0, r5
 80028c2:	4548      	cmp	r0, r9
 80028c4:	f67f aeec 	bls.w	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80028c8:	e70c      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80028ca:	4635      	mov	r5, r6
 80028cc:	e712      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028ce:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028d2:	d19b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d4:	2101      	movs	r1, #1
 80028d6:	1d20      	adds	r0, r4, #4
 80028d8:	f7ff fd3e 	bl	8002358 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80028dc:	2800      	cmp	r0, #0
 80028de:	bf18      	it	ne
 80028e0:	4605      	movne	r5, r0
 80028e2:	e793      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028e4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028e8:	d1a3      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ea:	2101      	movs	r1, #1
 80028ec:	1d20      	adds	r0, r4, #4
 80028ee:	f7ff fd33 	bl	8002358 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80028f2:	2800      	cmp	r0, #0
 80028f4:	bf18      	it	ne
 80028f6:	4605      	movne	r5, r0
 80028f8:	e79b      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028fa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028fe:	d1ab      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002900:	2101      	movs	r1, #1
 8002902:	1d20      	adds	r0, r4, #4
 8002904:	f7ff fd28 	bl	8002358 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002908:	2800      	cmp	r0, #0
 800290a:	bf18      	it	ne
 800290c:	4605      	movne	r5, r0
 800290e:	e7a3      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002910:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002914:	d1b6      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002916:	2102      	movs	r1, #2
 8002918:	f104 0020 	add.w	r0, r4, #32
 800291c:	f7ff fdaa 	bl	8002474 <RCCEx_PLLSAI2_Config>
 8002920:	e7ad      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	65bb      	str	r3, [r7, #88]	; 0x58
 800292a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002934:	f04f 0801 	mov.w	r8, #1
 8002938:	e67f      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002940:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8002944:	4bc7      	ldr	r3, [pc, #796]	; (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 8002946:	d11d      	bne.n	8002984 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002948:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800294c:	f402 7240 	and.w	r2, r2, #768	; 0x300
    switch(srcclk)
 8002950:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002954:	f000 81c6 	beq.w	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8002958:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800295c:	d00b      	beq.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800295e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        switch(srcclk)
 8002962:	d13a      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 8002968:	f013 0f02 	tst.w	r3, #2
 800296c:	bf0c      	ite	eq
 800296e:	2000      	moveq	r0, #0
 8002970:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002974:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002976:	681b      	ldr	r3, [r3, #0]
        frequency = HSE_VALUE / 32U;
 8002978:	48bb      	ldr	r0, [pc, #748]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800297a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
            frequency = HSI_VALUE;
 800297e:	bf08      	it	eq
 8002980:	2000      	moveq	r0, #0
 8002982:	4770      	bx	lr
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	f002 0203 	and.w	r2, r2, #3
    switch(pll_oscsource)
 800298a:	2a02      	cmp	r2, #2
 800298c:	d027      	beq.n	80029de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800298e:	2a03      	cmp	r2, #3
 8002990:	d02c      	beq.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8002992:	2a01      	cmp	r2, #1
 8002994:	d12f      	bne.n	80029f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	f011 0102 	ands.w	r1, r1, #2
 800299c:	d00d      	beq.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	0711      	lsls	r1, r2, #28
 80029a2:	bf4c      	ite	mi
 80029a4:	681a      	ldrmi	r2, [r3, #0]
 80029a6:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
 80029aa:	49b0      	ldr	r1, [pc, #704]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80029ac:	bf4c      	ite	mi
 80029ae:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
 80029b2:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
 80029b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    switch(PeriphClk)
 80029ba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80029be:	f000 8183 	beq.w	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80029c2:	d855      	bhi.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80029c4:	2810      	cmp	r0, #16
 80029c6:	f000 811d 	beq.w	8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80029ca:	d829      	bhi.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029cc:	2802      	cmp	r0, #2
 80029ce:	f000 80e4 	beq.w	8002b9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80029d2:	d812      	bhi.n	80029fa <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80029d4:	2801      	cmp	r0, #1
 80029d6:	f000 80d2 	beq.w	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
  uint32_t frequency = 0U;
 80029da:	2000      	movs	r0, #0
}
 80029dc:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029de:	681a      	ldr	r2, [r3, #0]
        pllvco = HSI_VALUE;
 80029e0:	49a3      	ldr	r1, [pc, #652]	; (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80029e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
        pllvco = HSE_VALUE;
 80029e6:	bf08      	it	eq
 80029e8:	2100      	moveq	r1, #0
 80029ea:	e7e6      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80029ec:	681a      	ldr	r2, [r3, #0]
        pllvco = HSE_VALUE;
 80029ee:	49a1      	ldr	r1, [pc, #644]	; (8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80029f0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80029f4:	e7f7      	b.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      pllvco = 0U;
 80029f6:	2100      	movs	r1, #0
 80029f8:	e7df      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch(PeriphClk)
 80029fa:	2804      	cmp	r0, #4
 80029fc:	f000 80f2 	beq.w	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8002a00:	2808      	cmp	r0, #8
 8002a02:	d1ea      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002a04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a08:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
        switch(srcclk)
 8002a0c:	2a40      	cmp	r2, #64	; 0x40
 8002a0e:	f000 8140 	beq.w	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002a12:	f240 80ee 	bls.w	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002a16:	2a80      	cmp	r2, #128	; 0x80
 8002a18:	f000 8147 	beq.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002a1c:	2ac0      	cmp	r2, #192	; 0xc0
 8002a1e:	e7a0      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 8002a20:	2840      	cmp	r0, #64	; 0x40
 8002a22:	f000 8138 	beq.w	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8002a26:	d812      	bhi.n	8002a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8002a28:	2820      	cmp	r0, #32
 8002a2a:	d1d6      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002a2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a30:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
        switch(srcclk)
 8002a34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002a38:	f000 812b 	beq.w	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002a3c:	f240 80d9 	bls.w	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002a40:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002a44:	f000 8131 	beq.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002a48:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002a4c:	e789      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 8002a4e:	2880      	cmp	r0, #128	; 0x80
 8002a50:	f000 8130 	beq.w	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8002a54:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002a58:	d1bf      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a5e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
        switch(srcclk)
 8002a62:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002a66:	f000 8114 	beq.w	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002a6a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002a6e:	e11b      	b.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
    switch(PeriphClk)
 8002a70:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002a74:	f000 80d4 	beq.w	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8002a78:	d837      	bhi.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8002a7a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002a7e:	d04c      	beq.n	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8002a80:	d813      	bhi.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002a82:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002a86:	d1a8      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002a88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a8c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        switch(srcclk)
 8002a90:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002a94:	f000 8126 	beq.w	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8002a98:	f240 80ab 	bls.w	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002a9c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002aa0:	f000 8103 	beq.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002aa4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002aa8:	e75b      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    switch(PeriphClk)
 8002aaa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002aae:	d034      	beq.n	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8002ab0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002ab4:	d191      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002ab6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002aba:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
        switch(srcclk)
 8002abe:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002ac2:	d040      	beq.n	8002b46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8002ac4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8002ac8:	d029      	beq.n	8002b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8002aca:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8002ace:	d184      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002ad6:	d081      	beq.n	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002ad8:	6918      	ldr	r0, [r3, #16]
 8002ada:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8002ade:	f43f af7d 	beq.w	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002ae2:	68da      	ldr	r2, [r3, #12]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002ae4:	6918      	ldr	r0, [r3, #16]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	e03a      	b.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
    switch(PeriphClk)
 8002aea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002aee:	f000 80cc 	beq.w	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8002af2:	d80c      	bhi.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8002af4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002af8:	f47f af6f 	bne.w	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        switch(srcclk)
 8002b00:	f012 4280 	ands.w	r2, r2, #1073741824	; 0x40000000
 8002b04:	d078      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	f040 80cf 	bne.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002b0c:	e765      	b.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    switch(PeriphClk)
 8002b0e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002b12:	d0d0      	beq.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8002b14:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002b18:	e7cc      	b.n	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002b1a:	f7ff bbbd 	b.w	8002298 <RCCEx_GetSAIxPeriphCLKFreq>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	f010 0002 	ands.w	r0, r0, #2
 8002b24:	f43f af5a 	beq.w	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	0712      	lsls	r2, r2, #28
 8002b2c:	bf4c      	ite	mi
 8002b2e:	681b      	ldrmi	r3, [r3, #0]
 8002b30:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8002b34:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8002b36:	bf4c      	ite	mi
 8002b38:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8002b3c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8002b40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b44:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002b4c:	f43f af46 	beq.w	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002b50:	68d8      	ldr	r0, [r3, #12]
 8002b52:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8002b56:	f43f af41 	beq.w	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b5a:	68da      	ldr	r2, [r3, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002b5c:	68d8      	ldr	r0, [r3, #12]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8002b5e:	68db      	ldr	r3, [r3, #12]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b60:	f3c2 1202 	ubfx	r2, r2, #4, #3
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002b64:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b68:	3201      	adds	r2, #1
 8002b6a:	fbb1 f1f2 	udiv	r1, r1, r2
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8002b6e:	4348      	muls	r0, r1
 8002b70:	f3c3 5141 	ubfx	r1, r3, #21, #2
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002b74:	3101      	adds	r1, #1
 8002b76:	0049      	lsls	r1, r1, #1
 8002b78:	fbb0 f0f1 	udiv	r0, r0, r1
 8002b7c:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b82:	f002 0203 	and.w	r2, r2, #3
        switch(srcclk)
 8002b86:	2a02      	cmp	r2, #2
 8002b88:	f000 808f 	beq.w	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002b8c:	2a03      	cmp	r2, #3
 8002b8e:	f43f aee9 	beq.w	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	d07d      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002b96:	f7ff bb6d 	b.w	8002274 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b9e:	f002 020c 	and.w	r2, r2, #12
        switch(srcclk)
 8002ba2:	2a0c      	cmp	r2, #12
 8002ba4:	f63f af19 	bhi.w	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8002ba8:	a101      	add	r1, pc, #4	; (adr r1, 8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002baa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bf9 	.word	0x08002bf9
 8002bb4:	080029db 	.word	0x080029db
 8002bb8:	080029db 	.word	0x080029db
 8002bbc:	080029db 	.word	0x080029db
 8002bc0:	08002c93 	.word	0x08002c93
 8002bc4:	080029db 	.word	0x080029db
 8002bc8:	080029db 	.word	0x080029db
 8002bcc:	080029db 	.word	0x080029db
 8002bd0:	08002cab 	.word	0x08002cab
 8002bd4:	080029db 	.word	0x080029db
 8002bd8:	080029db 	.word	0x080029db
 8002bdc:	080029db 	.word	0x080029db
 8002be0:	08002965 	.word	0x08002965
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002be4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002be8:	f002 0230 	and.w	r2, r2, #48	; 0x30
        switch(srcclk)
 8002bec:	2a10      	cmp	r2, #16
 8002bee:	d050      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002bf0:	d804      	bhi.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        switch(srcclk)
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	f47f aef1 	bne.w	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff bb2a 	b.w	8002250 <HAL_RCC_GetPCLK1Freq>
        switch(srcclk)
 8002bfc:	2a20      	cmp	r2, #32
 8002bfe:	d054      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002c00:	2a30      	cmp	r2, #48	; 0x30
 8002c02:	e6ae      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002c04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c08:	f402 7240 	and.w	r2, r2, #768	; 0x300
        switch(srcclk)
 8002c0c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002c10:	d03f      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002c12:	d9ee      	bls.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002c14:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002c18:	d047      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002c1a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002c1e:	e6a0      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002c20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c24:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        switch(srcclk)
 8002c28:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002c2c:	d024      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8002c2e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8002c32:	d02e      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002c34:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002c38:	f47f aecf 	bne.w	80029da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8002c3c:	6918      	ldr	r0, [r3, #16]
 8002c3e:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002c42:	f43f aecb 	beq.w	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c46:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002c48:	6918      	ldr	r0, [r3, #16]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8002c4a:	691b      	ldr	r3, [r3, #16]
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c4c:	f3c2 1202 	ubfx	r2, r2, #4, #3
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002c50:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c54:	3201      	adds	r2, #1
 8002c56:	fbb1 f1f2 	udiv	r1, r1, r2
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002c5a:	4348      	muls	r0, r1
 8002c5c:	f3c3 6141 	ubfx	r1, r3, #25, #2
 8002c60:	e788      	b.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	0003d090 	.word	0x0003d090
 8002c6c:	08004004 	.word	0x08004004
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8002c78:	6958      	ldr	r0, [r3, #20]
 8002c7a:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002c7e:	f43f aead 	beq.w	80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c82:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002c84:	6958      	ldr	r0, [r3, #20]
            frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	e7e0      	b.n	8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da81      	bge.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c92:	f7fe bfd1 	b.w	8001c38 <HAL_RCC_GetSysClockFreq>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002c96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c9a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
        switch(srcclk)
 8002c9e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ca2:	d0f6      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002ca4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        switch(srcclk)
 8002ca8:	d1a3      	bne.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002caa:	681b      	ldr	r3, [r3, #0]
            frequency = HSI_VALUE;
 8002cac:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8002cae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002cb2:	e664      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002cb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cb8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
        switch(srcclk)
 8002cbc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002cc0:	d0e7      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002cc2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002cc6:	e7ef      	b.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002cc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ccc:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
        switch(srcclk)
 8002cd0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002cd4:	d006      	beq.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8002cd6:	d98c      	bls.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8002cd8:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002cdc:	d0e5      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8002cde:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002ce2:	e63e      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            frequency = LSI_VALUE;
 8002ce8:	f013 0f02 	tst.w	r3, #2
 8002cec:	bf0c      	ite	eq
 8002cee:	2000      	moveq	r0, #0
 8002cf0:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	00f42400 	.word	0x00f42400

08002cfc <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002cfc:	6802      	ldr	r2, [r0, #0]
{
 8002cfe:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d00:	68d3      	ldr	r3, [r2, #12]
 8002d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d06:	60d3      	str	r3, [r2, #12]
{
 8002d08:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8002d0a:	f7fe fb63 	bl	80013d4 <HAL_GetTick>
 8002d0e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	069b      	lsls	r3, r3, #26
 8002d16:	d501      	bpl.n	8002d1c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d1c:	f7fe fb5a 	bl	80013d4 <HAL_GetTick>
 8002d20:	1b40      	subs	r0, r0, r5
 8002d22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d26:	d9f3      	bls.n	8002d10 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002d28:	2003      	movs	r0, #3
}
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}

08002d2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	0652      	lsls	r2, r2, #25
{
 8002d34:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d36:	d501      	bpl.n	8002d3c <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 8002d38:	2000      	movs	r0, #0
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002d42:	f7fe fb47 	bl	80013d4 <HAL_GetTick>
 8002d46:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	065b      	lsls	r3, r3, #25
 8002d4e:	d4f3      	bmi.n	8002d38 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d50:	f7fe fb40 	bl	80013d4 <HAL_GetTick>
 8002d54:	1b40      	subs	r0, r0, r5
 8002d56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d5a:	d9f5      	bls.n	8002d48 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002d5c:	2003      	movs	r0, #3
}
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}

08002d60 <HAL_RTC_Init>:
{
 8002d60:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8002d62:	4604      	mov	r4, r0
 8002d64:	b1d8      	cbz	r0, 8002d9e <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d66:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002d6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d6e:	b91b      	cbnz	r3, 8002d78 <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 8002d70:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8002d74:	f7fe fa16 	bl	80011a4 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	22ca      	movs	r2, #202	; 0xca
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
 8002d84:	2253      	movs	r2, #83	; 0x53
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7ff ffcf 	bl	8002d2c <RTC_EnterInitMode>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	4605      	mov	r5, r0
 8002d92:	b138      	cbz	r0, 8002da4 <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d94:	22ff      	movs	r2, #255	; 0xff
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002d98:	2304      	movs	r3, #4
 8002d9a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d9e:	2501      	movs	r5, #1
}
 8002da0:	4628      	mov	r0, r5
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002da4:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002da6:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002da8:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db0:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002db2:	6862      	ldr	r2, [r4, #4]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	4302      	orrs	r2, r0
 8002db8:	69a0      	ldr	r0, [r4, #24]
 8002dba:	4302      	orrs	r2, r0
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002dc0:	68e2      	ldr	r2, [r4, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68a1      	ldr	r1, [r4, #8]
 8002dc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dcc:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd4:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	069b      	lsls	r3, r3, #26
 8002dda:	d405      	bmi.n	8002de8 <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7ff ff8d 	bl	8002cfc <HAL_RTC_WaitForSynchro>
 8002de2:	b108      	cbz	r0, 8002de8 <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	e7d5      	b.n	8002d94 <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002de8:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dea:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dee:	f022 0203 	bic.w	r2, r2, #3
 8002df2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002df4:	69e2      	ldr	r2, [r4, #28]
 8002df6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002df8:	4302      	orrs	r2, r0
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 8002e08:	e7ca      	b.n	8002da0 <HAL_RTC_Init+0x40>

08002e0a <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002e0a:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while(temp >= 10U)
 8002e0c:	2809      	cmp	r0, #9
 8002e0e:	d803      	bhi.n	8002e18 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | temp);
 8002e10:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002e14:	b2c0      	uxtb	r0, r0
 8002e16:	4770      	bx	lr
    temp -= 10U;
 8002e18:	380a      	subs	r0, #10
    bcdhigh++;
 8002e1a:	3301      	adds	r3, #1
    temp -= 10U;
 8002e1c:	b2c0      	uxtb	r0, r0
 8002e1e:	e7f5      	b.n	8002e0c <RTC_ByteToBcd2+0x2>

08002e20 <HAL_RTC_SetDate>:
{
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002e22:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002e26:	2b01      	cmp	r3, #1
{
 8002e28:	4605      	mov	r5, r0
 8002e2a:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8002e2e:	d034      	beq.n	8002e9a <HAL_RTC_SetDate+0x7a>
 8002e30:	2301      	movs	r3, #1
 8002e32:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e36:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 8002e3a:	784b      	ldrb	r3, [r1, #1]
 8002e3c:	78c8      	ldrb	r0, [r1, #3]
 8002e3e:	788e      	ldrb	r6, [r1, #2]
 8002e40:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d14e      	bne.n	8002ee4 <HAL_RTC_SetDate+0xc4>
 8002e46:	06da      	lsls	r2, r3, #27
 8002e48:	d503      	bpl.n	8002e52 <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e4a:	f023 0310 	bic.w	r3, r3, #16
 8002e4e:	330a      	adds	r3, #10
 8002e50:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e52:	f7ff ffda 	bl	8002e0a <RTC_ByteToBcd2>
 8002e56:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e58:	7848      	ldrb	r0, [r1, #1]
 8002e5a:	f7ff ffd6 	bl	8002e0a <RTC_ByteToBcd2>
 8002e5e:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e60:	4630      	mov	r0, r6
 8002e62:	f7ff ffd2 	bl	8002e0a <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e66:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002e6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002e6e:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	22ca      	movs	r2, #202	; 0xca
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
 8002e78:	2253      	movs	r2, #83	; 0x53
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f7ff ff55 	bl	8002d2c <RTC_EnterInitMode>
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	4606      	mov	r6, r0
 8002e86:	b150      	cbz	r0, 8002e9e <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e88:	22ff      	movs	r2, #255	; 0xff
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002e92:	2300      	movs	r3, #0
 8002e94:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8002e98:	2601      	movs	r6, #1
}
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e9e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002ea2:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002ea6:	605c      	str	r4, [r3, #4]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eae:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	d40c      	bmi.n	8002ed0 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f7ff ff20 	bl	8002cfc <HAL_RTC_WaitForSynchro>
 8002ebc:	b140      	cbz	r0, 8002ed0 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ebe:	682b      	ldr	r3, [r5, #0]
 8002ec0:	22ff      	movs	r2, #255	; 0xff
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002eca:	f885 6020 	strb.w	r6, [r5, #32]
 8002ece:	e7e3      	b.n	8002e98 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002edc:	2300      	movs	r3, #0
 8002ede:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 8002ee2:	e7da      	b.n	8002e9a <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ee4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002eea:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002eec:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002ef0:	e7bf      	b.n	8002e72 <HAL_RTC_SetDate+0x52>

08002ef2 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8002ef2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002ef6:	2b01      	cmp	r3, #1
{
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efc:	4605      	mov	r5, r0
 8002efe:	460e      	mov	r6, r1
 8002f00:	4690      	mov	r8, r2
 8002f02:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 8002f06:	d017      	beq.n	8002f38 <HAL_RTC_SetTime+0x46>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f08:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f0a:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f0e:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8002f10:	2401      	movs	r4, #1
 8002f12:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
 8002f18:	2253      	movs	r2, #83	; 0x53
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f1c:	f7ff ff06 	bl	8002d2c <RTC_EnterInitMode>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	4607      	mov	r7, r0
 8002f24:	b158      	cbz	r0, 8002f3e <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f26:	22ff      	movs	r2, #255	; 0xff
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002f30:	2300      	movs	r3, #0
 8002f32:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8002f36:	2701      	movs	r7, #1
}
 8002f38:	4638      	mov	r0, r7
 8002f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f3e:	7830      	ldrb	r0, [r6, #0]
 8002f40:	7874      	ldrb	r4, [r6, #1]
 8002f42:	78b1      	ldrb	r1, [r6, #2]
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f44:	689b      	ldr	r3, [r3, #8]
    if(Format == RTC_FORMAT_BIN)
 8002f46:	f1b8 0f00 	cmp.w	r8, #0
 8002f4a:	d138      	bne.n	8002fbe <HAL_RTC_SetTime+0xcc>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f4c:	065a      	lsls	r2, r3, #25
        sTime->TimeFormat = 0x00U;
 8002f4e:	bf58      	it	pl
 8002f50:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f52:	f7ff ff5a 	bl	8002e0a <RTC_ByteToBcd2>
 8002f56:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff56 	bl	8002e0a <RTC_ByteToBcd2>
 8002f5e:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos ) | \
 8002f60:	4608      	mov	r0, r1
 8002f62:	f7ff ff52 	bl	8002e0a <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f66:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f68:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8002f6c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002f70:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8002f7a:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8002f7e:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002f80:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f82:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f88:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f8a:	68f2      	ldr	r2, [r6, #12]
 8002f8c:	6899      	ldr	r1, [r3, #8]
 8002f8e:	4302      	orrs	r2, r0
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002f9c:	689c      	ldr	r4, [r3, #8]
 8002f9e:	f014 0420 	ands.w	r4, r4, #32
 8002fa2:	d118      	bne.n	8002fd6 <HAL_RTC_SetTime+0xe4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f7ff fea9 	bl	8002cfc <HAL_RTC_WaitForSynchro>
 8002faa:	b1a0      	cbz	r0, 8002fd6 <HAL_RTC_SetTime+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002fb8:	f885 4020 	strb.w	r4, [r5, #32]
 8002fbc:	e7bb      	b.n	8002f36 <HAL_RTC_SetTime+0x44>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fbe:	065b      	lsls	r3, r3, #25
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fc0:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8002fc4:	bf58      	it	pl
 8002fc6:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc8:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fcc:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fce:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fd0:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002fd4:	e7ce      	b.n	8002f74 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	22ff      	movs	r2, #255	; 0xff
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 8002fe8:	e7a6      	b.n	8002f38 <HAL_RTC_SetTime+0x46>
	...

08002fec <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002fee:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002ff6:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8002ffa:	680b      	ldr	r3, [r1, #0]
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003000:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8003002:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8003004:	b93a      	cbnz	r2, 8003016 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003006:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800300a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800300e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
      break;
 8003014:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003016:	680b      	ldr	r3, [r1, #0]
 8003018:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 800301c:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8003020:	d1f0      	bne.n	8003004 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	4618      	mov	r0, r3

  return status;
}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000000 	.word	0x20000000

0800302c <HAL_SAI_Init>:
{
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 800302e:	4604      	mov	r4, r0
 8003030:	b910      	cbnz	r0, 8003038 <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8003032:	2501      	movs	r5, #1
}
 8003034:	4628      	mov	r0, r5
 8003036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8003038:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800303c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003040:	b91b      	cbnz	r3, 800304a <HAL_SAI_Init+0x1e>
    hsai->Lock = HAL_UNLOCKED;
 8003042:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8003046:	f7fe f8f1 	bl	800122c <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff ffce 	bl	8002fec <SAI_Disable>
 8003050:	4605      	mov	r5, r0
 8003052:	2800      	cmp	r0, #0
 8003054:	d1ed      	bne.n	8003032 <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  switch (hsai->Init.SynchroExt)
 800305c:	68e3      	ldr	r3, [r4, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	f000 8094 	beq.w	800318c <HAL_SAI_Init+0x160>
      tmpregisterGCR = 0;
 8003064:	2b02      	cmp	r3, #2
 8003066:	bf0c      	ite	eq
 8003068:	2320      	moveq	r3, #32
 800306a:	2300      	movne	r3, #0
  switch (hsai->Init.Synchro)
 800306c:	68a2      	ldr	r2, [r4, #8]
 800306e:	2a02      	cmp	r2, #2
 8003070:	f000 8090 	beq.w	8003194 <HAL_SAI_Init+0x168>
 8003074:	2a03      	cmp	r2, #3
 8003076:	f000 808b 	beq.w	8003190 <HAL_SAI_Init+0x164>
      syncen_bits = 0;
 800307a:	2a01      	cmp	r2, #1
 800307c:	bf0c      	ite	eq
 800307e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8003082:	2600      	movne	r6, #0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	494a      	ldr	r1, [pc, #296]	; (80031b0 <HAL_SAI_Init+0x184>)
 8003088:	428a      	cmp	r2, r1
 800308a:	d003      	beq.n	8003094 <HAL_SAI_Init+0x68>
 800308c:	4849      	ldr	r0, [pc, #292]	; (80031b4 <HAL_SAI_Init+0x188>)
 800308e:	4282      	cmp	r2, r0
 8003090:	f040 8083 	bne.w	800319a <HAL_SAI_Init+0x16e>
    SAI1->GCR = tmpregisterGCR;
 8003094:	4848      	ldr	r0, [pc, #288]	; (80031b8 <HAL_SAI_Init+0x18c>)
    SAI2->GCR = tmpregisterGCR;
 8003096:	6003      	str	r3, [r0, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003098:	69e3      	ldr	r3, [r4, #28]
 800309a:	b1b3      	cbz	r3, 80030ca <HAL_SAI_Init+0x9e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800309c:	428a      	cmp	r2, r1
 800309e:	d002      	beq.n	80030a6 <HAL_SAI_Init+0x7a>
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <HAL_SAI_Init+0x188>)
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d17b      	bne.n	800319e <HAL_SAI_Init+0x172>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80030a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80030aa:	f7ff fc49 	bl	8002940 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80030ae:	69e3      	ldr	r3, [r4, #28]
 80030b0:	220a      	movs	r2, #10
 80030b2:	025b      	lsls	r3, r3, #9
 80030b4:	4350      	muls	r0, r2
 80030b6:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 80030ba:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10U) > 8U)
 80030be:	fb02 0013 	mls	r0, r2, r3, r0
 80030c2:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 80030c4:	bf08      	it	eq
 80030c6:	3301      	addeq	r3, #1
 80030c8:	6223      	str	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80030ca:	6863      	ldr	r3, [r4, #4]
 80030cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030ce:	f033 0102 	bics.w	r1, r3, #2
 80030d2:	d167      	bne.n	80031a4 <HAL_SAI_Init+0x178>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80030d4:	2a01      	cmp	r2, #1
 80030d6:	bf18      	it	ne
 80030d8:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80030dc:	6822      	ldr	r2, [r4, #0]
 80030de:	4837      	ldr	r0, [pc, #220]	; (80031bc <HAL_SAI_Init+0x190>)
 80030e0:	6817      	ldr	r7, [r2, #0]
 80030e2:	4038      	ands	r0, r7
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80030e4:	6b27      	ldr	r7, [r4, #48]	; 0x30
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80030e6:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80030e8:	433b      	orrs	r3, r7
 80030ea:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80030ec:	6810      	ldr	r0, [r2, #0]
 80030ee:	433b      	orrs	r3, r7
 80030f0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80030f2:	433b      	orrs	r3, r7
 80030f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80030f6:	433b      	orrs	r3, r7
 80030f8:	6927      	ldr	r7, [r4, #16]
 80030fa:	433b      	orrs	r3, r7
 80030fc:	6967      	ldr	r7, [r4, #20]
 80030fe:	433b      	orrs	r3, r7
 8003100:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003102:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003104:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8003108:	4333      	orrs	r3, r6
 800310a:	430b      	orrs	r3, r1
 800310c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800310e:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003112:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003116:	f023 030f 	bic.w	r3, r3, #15
 800311a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800311c:	69a3      	ldr	r3, [r4, #24]
 800311e:	6851      	ldr	r1, [r2, #4]
 8003120:	4303      	orrs	r3, r0
 8003122:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003124:	4303      	orrs	r3, r0
 8003126:	430b      	orrs	r3, r1
 8003128:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800312a:	6891      	ldr	r1, [r2, #8]
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_SAI_Init+0x194>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800312e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003130:	400b      	ands	r3, r1
 8003132:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003134:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003136:	6891      	ldr	r1, [r2, #8]
 8003138:	4303      	orrs	r3, r0
 800313a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800313c:	4303      	orrs	r3, r0
 800313e:	430b      	orrs	r3, r1
 8003140:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003142:	3901      	subs	r1, #1
 8003144:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003146:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003148:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800314a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800314e:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003150:	68d3      	ldr	r3, [r2, #12]
 8003152:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8003156:	f023 030f 	bic.w	r3, r3, #15
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003160:	68d1      	ldr	r1, [r2, #12]
 8003162:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003166:	4303      	orrs	r3, r0
 8003168:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800316a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800316c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003170:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003172:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003174:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003178:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800317a:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800317c:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800317e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8003182:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8003186:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
 800318a:	e753      	b.n	8003034 <HAL_SAI_Init+0x8>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800318c:	2310      	movs	r3, #16
 800318e:	e76d      	b.n	800306c <HAL_SAI_Init+0x40>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003190:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003194:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003198:	e774      	b.n	8003084 <HAL_SAI_Init+0x58>
    SAI2->GCR = tmpregisterGCR;
 800319a:	480a      	ldr	r0, [pc, #40]	; (80031c4 <HAL_SAI_Init+0x198>)
 800319c:	e77b      	b.n	8003096 <HAL_SAI_Init+0x6a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800319e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031a2:	e782      	b.n	80030aa <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80031a4:	2a01      	cmp	r2, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2100      	movne	r1, #0
 80031aa:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80031ae:	e795      	b.n	80030dc <HAL_SAI_Init+0xb0>
 80031b0:	40015404 	.word	0x40015404
 80031b4:	40015424 	.word	0x40015424
 80031b8:	40015400 	.word	0x40015400
 80031bc:	ff05c010 	.word	0xff05c010
 80031c0:	fff88000 	.word	0xfff88000
 80031c4:	40015800 	.word	0x40015800

080031c8 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80031c8:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ca:	69c1      	ldr	r1, [r0, #28]
{
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d0:	6883      	ldr	r3, [r0, #8]
 80031d2:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d6:	4303      	orrs	r3, r0
 80031d8:	6960      	ldr	r0, [r4, #20]
 80031da:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031dc:	48ba      	ldr	r0, [pc, #744]	; (80034c8 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031de:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	4028      	ands	r0, r5
 80031e2:	4303      	orrs	r3, r0
 80031e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e6:	6853      	ldr	r3, [r2, #4]
 80031e8:	68e0      	ldr	r0, [r4, #12]
 80031ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ee:	4303      	orrs	r3, r0
 80031f0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f2:	4bb6      	ldr	r3, [pc, #728]	; (80034cc <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031f4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031f8:	bf1c      	itt	ne
 80031fa:	6a23      	ldrne	r3, [r4, #32]
 80031fc:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fe:	6893      	ldr	r3, [r2, #8]
 8003200:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003204:	4303      	orrs	r3, r0
 8003206:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003208:	4bb1      	ldr	r3, [pc, #708]	; (80034d0 <UART_SetConfig+0x308>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d119      	bne.n	8003242 <UART_SetConfig+0x7a>
 800320e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003212:	4ab0      	ldr	r2, [pc, #704]	; (80034d4 <UART_SetConfig+0x30c>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	f040 8138 	bne.w	8003496 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8003226:	2b08      	cmp	r3, #8
 8003228:	f200 808f 	bhi.w	800334a <UART_SetConfig+0x182>
 800322c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003230:	00ca011a 	.word	0x00ca011a
 8003234:	008d00f9 	.word	0x008d00f9
 8003238:	008d0114 	.word	0x008d0114
 800323c:	008d008d 	.word	0x008d008d
 8003240:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003242:	4ba5      	ldr	r3, [pc, #660]	; (80034d8 <UART_SetConfig+0x310>)
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <UART_SetConfig+0x90>
 8003248:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800324c:	4aa3      	ldr	r2, [pc, #652]	; (80034dc <UART_SetConfig+0x314>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	e7e1      	b.n	800321c <UART_SetConfig+0x54>
 8003258:	4ba1      	ldr	r3, [pc, #644]	; (80034e0 <UART_SetConfig+0x318>)
 800325a:	429a      	cmp	r2, r3
 800325c:	d123      	bne.n	80032a6 <UART_SetConfig+0xde>
 800325e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800326a:	2b10      	cmp	r3, #16
 800326c:	f000 80f1 	beq.w	8003452 <UART_SetConfig+0x28a>
 8003270:	d80b      	bhi.n	800328a <UART_SetConfig+0xc2>
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80f3 	beq.w	800345e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003278:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800327c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003280:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003284:	f000 80f8 	beq.w	8003478 <UART_SetConfig+0x2b0>
 8003288:	e0a8      	b.n	80033dc <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328a:	2b20      	cmp	r3, #32
 800328c:	f000 80c6 	beq.w	800341c <UART_SetConfig+0x254>
 8003290:	2b30      	cmp	r3, #48	; 0x30
 8003292:	d1f1      	bne.n	8003278 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003294:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003298:	f040 80b8 	bne.w	800340c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800329c:	6860      	ldr	r0, [r4, #4]
 800329e:	0843      	lsrs	r3, r0, #1
 80032a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80032a4:	e0c3      	b.n	800342e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a6:	4b8f      	ldr	r3, [pc, #572]	; (80034e4 <UART_SetConfig+0x31c>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d11e      	bne.n	80032ea <UART_SetConfig+0x122>
 80032ac:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	f000 80bb 	beq.w	8003434 <UART_SetConfig+0x26c>
 80032be:	d80a      	bhi.n	80032d6 <UART_SetConfig+0x10e>
 80032c0:	b97b      	cbnz	r3, 80032e2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032c2:	4b82      	ldr	r3, [pc, #520]	; (80034cc <UART_SetConfig+0x304>)
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f040 80ca 	bne.w	800345e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7fe ffc1 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
        break;
 80032ce:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80032d0:	bbb0      	cbnz	r0, 8003340 <UART_SetConfig+0x178>
 80032d2:	4602      	mov	r2, r0
 80032d4:	e03a      	b.n	800334c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	f000 809d 	beq.w	8003416 <UART_SetConfig+0x24e>
 80032dc:	2bc0      	cmp	r3, #192	; 0xc0
 80032de:	f000 80b0 	beq.w	8003442 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032e2:	4b7a      	ldr	r3, [pc, #488]	; (80034cc <UART_SetConfig+0x304>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1c7      	bne.n	8003278 <UART_SetConfig+0xb0>
 80032e8:	e02f      	b.n	800334a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ea:	4b7f      	ldr	r3, [pc, #508]	; (80034e8 <UART_SetConfig+0x320>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d111      	bne.n	8003314 <UART_SetConfig+0x14c>
 80032f0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	f000 8098 	beq.w	8003434 <UART_SetConfig+0x26c>
 8003304:	d9dc      	bls.n	80032c0 <UART_SetConfig+0xf8>
 8003306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330a:	f000 8084 	beq.w	8003416 <UART_SetConfig+0x24e>
 800330e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003312:	e7e4      	b.n	80032de <UART_SetConfig+0x116>
 8003314:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <UART_SetConfig+0x304>)
 8003316:	429a      	cmp	r2, r3
 8003318:	d1ae      	bne.n	8003278 <UART_SetConfig+0xb0>
 800331a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	f000 8083 	beq.w	8003434 <UART_SetConfig+0x26c>
 800332e:	d9c7      	bls.n	80032c0 <UART_SetConfig+0xf8>
 8003330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003334:	d06f      	beq.n	8003416 <UART_SetConfig+0x24e>
 8003336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333a:	e7d0      	b.n	80032de <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800333c:	486b      	ldr	r0, [pc, #428]	; (80034ec <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800333e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003340:	6862      	ldr	r2, [r4, #4]
 8003342:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003346:	4281      	cmp	r1, r0
 8003348:	d905      	bls.n	8003356 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800334a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003350:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003352:	4610      	mov	r0, r2
 8003354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003356:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800335a:	d8f6      	bhi.n	800334a <UART_SetConfig+0x182>
        switch (clocksource)
 800335c:	2b08      	cmp	r3, #8
 800335e:	d82e      	bhi.n	80033be <UART_SetConfig+0x1f6>
 8003360:	e8df f003 	tbb	[pc, r3]
 8003364:	2d1c2d05 	.word	0x2d1c2d05
 8003368:	2d2d2d24 	.word	0x2d2d2d24
 800336c:	27          	.byte	0x27
 800336d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800336e:	f7fe ff6f 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003378:	0856      	lsrs	r6, r2, #1
 800337a:	2700      	movs	r7, #0
 800337c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003380:	2300      	movs	r3, #0
 8003382:	4630      	mov	r0, r6
 8003384:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003386:	f7fc ff73 	bl	8000270 <__aeabi_uldivmod>
            break;
 800338a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800338c:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <UART_SetConfig+0x328>)
 800338e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003392:	4299      	cmp	r1, r3
 8003394:	d8d9      	bhi.n	800334a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	60d8      	str	r0, [r3, #12]
 800339a:	e7d7      	b.n	800334c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800339c:	4855      	ldr	r0, [pc, #340]	; (80034f4 <UART_SetConfig+0x32c>)
 800339e:	0855      	lsrs	r5, r2, #1
 80033a0:	2300      	movs	r3, #0
 80033a2:	2100      	movs	r1, #0
 80033a4:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033a6:	f141 0100 	adc.w	r1, r1, #0
 80033aa:	e7ec      	b.n	8003386 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033ac:	f7fe fc44 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 80033b0:	e7df      	b.n	8003372 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033b2:	0850      	lsrs	r0, r2, #1
 80033b4:	2100      	movs	r1, #0
 80033b6:	2300      	movs	r3, #0
 80033b8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80033bc:	e7f3      	b.n	80033a6 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 80033be:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80033c0:	2000      	movs	r0, #0
 80033c2:	e7e3      	b.n	800338c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033c4:	f7fe ff56 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 80033c8:	e04e      	b.n	8003468 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033ca:	f7fe ff41 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033ce:	6862      	ldr	r2, [r4, #4]
 80033d0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80033d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80033da:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033dc:	f1a3 0010 	sub.w	r0, r3, #16
 80033e0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80033e4:	4288      	cmp	r0, r1
 80033e6:	d8b0      	bhi.n	800334a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80033e8:	6821      	ldr	r1, [r4, #0]
 80033ea:	60cb      	str	r3, [r1, #12]
 80033ec:	e7ae      	b.n	800334c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033ee:	f7fe ff41 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 80033f2:	e7ec      	b.n	80033ce <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033f4:	6860      	ldr	r0, [r4, #4]
 80033f6:	0843      	lsrs	r3, r0, #1
 80033f8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80033fc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003400:	fbb3 f3f0 	udiv	r3, r3, r0
 8003404:	e7e8      	b.n	80033d8 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003406:	f7fe fc17 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 800340a:	e7e0      	b.n	80033ce <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800340c:	6860      	ldr	r0, [r4, #4]
 800340e:	0843      	lsrs	r3, r0, #1
 8003410:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003414:	e7f4      	b.n	8003400 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003416:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <UART_SetConfig+0x304>)
 8003418:	429a      	cmp	r2, r3
 800341a:	d08f      	beq.n	800333c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003420:	d1e8      	bne.n	80033f4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003422:	6860      	ldr	r0, [r4, #4]
 8003424:	0843      	lsrs	r3, r0, #1
 8003426:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800342a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800342e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003432:	e01f      	b.n	8003474 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <UART_SetConfig+0x304>)
 8003436:	429a      	cmp	r2, r3
 8003438:	d10b      	bne.n	8003452 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800343a:	f7fe fbfd 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
        break;
 800343e:	2304      	movs	r3, #4
 8003440:	e746      	b.n	80032d0 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <UART_SetConfig+0x304>)
 8003444:	429a      	cmp	r2, r3
 8003446:	f47f af25 	bne.w	8003294 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800344a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800344e:	2308      	movs	r3, #8
 8003450:	e776      	b.n	8003340 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003456:	d1d6      	bne.n	8003406 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003458:	f7fe fbee 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 800345c:	e004      	b.n	8003468 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800345e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003462:	d1b2      	bne.n	80033ca <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003464:	f7fe fef4 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003468:	6861      	ldr	r1, [r4, #4]
 800346a:	084a      	lsrs	r2, r1, #1
 800346c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003470:	fbb3 f3f1 	udiv	r3, r3, r1
 8003474:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003476:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003478:	f1a3 0010 	sub.w	r0, r3, #16
 800347c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003480:	4288      	cmp	r0, r1
 8003482:	f63f af62 	bhi.w	800334a <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8003486:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800348a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800348c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003490:	430b      	orrs	r3, r1
 8003492:	60c3      	str	r3, [r0, #12]
 8003494:	e75a      	b.n	800334c <UART_SetConfig+0x184>
    switch (clocksource)
 8003496:	2b08      	cmp	r3, #8
 8003498:	f63f af57 	bhi.w	800334a <UART_SetConfig+0x182>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x2dc>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080033cb 	.word	0x080033cb
 80034a8:	080033ef 	.word	0x080033ef
 80034ac:	080033f5 	.word	0x080033f5
 80034b0:	0800334b 	.word	0x0800334b
 80034b4:	08003407 	.word	0x08003407
 80034b8:	0800334b 	.word	0x0800334b
 80034bc:	0800334b 	.word	0x0800334b
 80034c0:	0800334b 	.word	0x0800334b
 80034c4:	0800340d 	.word	0x0800340d
 80034c8:	efff69f3 	.word	0xefff69f3
 80034cc:	40008000 	.word	0x40008000
 80034d0:	40013800 	.word	0x40013800
 80034d4:	08004034 	.word	0x08004034
 80034d8:	40004400 	.word	0x40004400
 80034dc:	08004038 	.word	0x08004038
 80034e0:	40004800 	.word	0x40004800
 80034e4:	40004c00 	.word	0x40004c00
 80034e8:	40005000 	.word	0x40005000
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	000ffcff 	.word	0x000ffcff
 80034f4:	f4240000 	.word	0xf4240000

080034f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034fa:	07da      	lsls	r2, r3, #31
{
 80034fc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034fe:	d506      	bpl.n	800350e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003500:	6801      	ldr	r1, [r0, #0]
 8003502:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003504:	684a      	ldr	r2, [r1, #4]
 8003506:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800350a:	4322      	orrs	r2, r4
 800350c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350e:	079c      	lsls	r4, r3, #30
 8003510:	d506      	bpl.n	8003520 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003512:	6801      	ldr	r1, [r0, #0]
 8003514:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003516:	684a      	ldr	r2, [r1, #4]
 8003518:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800351c:	4322      	orrs	r2, r4
 800351e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003520:	0759      	lsls	r1, r3, #29
 8003522:	d506      	bpl.n	8003532 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003524:	6801      	ldr	r1, [r0, #0]
 8003526:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003528:	684a      	ldr	r2, [r1, #4]
 800352a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800352e:	4322      	orrs	r2, r4
 8003530:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003532:	071a      	lsls	r2, r3, #28
 8003534:	d506      	bpl.n	8003544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003536:	6801      	ldr	r1, [r0, #0]
 8003538:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800353a:	684a      	ldr	r2, [r1, #4]
 800353c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003540:	4322      	orrs	r2, r4
 8003542:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003544:	06dc      	lsls	r4, r3, #27
 8003546:	d506      	bpl.n	8003556 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003548:	6801      	ldr	r1, [r0, #0]
 800354a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800354c:	688a      	ldr	r2, [r1, #8]
 800354e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003552:	4322      	orrs	r2, r4
 8003554:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003556:	0699      	lsls	r1, r3, #26
 8003558:	d506      	bpl.n	8003568 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800355a:	6801      	ldr	r1, [r0, #0]
 800355c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800355e:	688a      	ldr	r2, [r1, #8]
 8003560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003564:	4322      	orrs	r2, r4
 8003566:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003568:	065a      	lsls	r2, r3, #25
 800356a:	d50f      	bpl.n	800358c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800356c:	6801      	ldr	r1, [r0, #0]
 800356e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003570:	684a      	ldr	r2, [r1, #4]
 8003572:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003576:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003578:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800357c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800357e:	d105      	bne.n	800358c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003580:	684a      	ldr	r2, [r1, #4]
 8003582:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003584:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003588:	4322      	orrs	r2, r4
 800358a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	d506      	bpl.n	800359e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003590:	6802      	ldr	r2, [r0, #0]
 8003592:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003594:	6853      	ldr	r3, [r2, #4]
 8003596:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800359a:	430b      	orrs	r3, r1
 800359c:	6053      	str	r3, [r2, #4]
 800359e:	bd10      	pop	{r4, pc}

080035a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a4:	9d06      	ldr	r5, [sp, #24]
 80035a6:	4604      	mov	r4, r0
 80035a8:	460f      	mov	r7, r1
 80035aa:	4616      	mov	r6, r2
 80035ac:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	69ca      	ldr	r2, [r1, #28]
 80035b2:	ea37 0302 	bics.w	r3, r7, r2
 80035b6:	bf0c      	ite	eq
 80035b8:	2201      	moveq	r2, #1
 80035ba:	2200      	movne	r2, #0
 80035bc:	42b2      	cmp	r2, r6
 80035be:	d002      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80035c0:	2000      	movs	r0, #0
}
 80035c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	1c6b      	adds	r3, r5, #1
 80035c8:	d0f2      	beq.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035ca:	b99d      	cbnz	r5, 80035f4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80035de:	2320      	movs	r3, #32
 80035e0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80035e4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80035e8:	2300      	movs	r3, #0
 80035ea:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80035ee:	2003      	movs	r0, #3
 80035f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035f4:	f7fd feee 	bl	80013d4 <HAL_GetTick>
 80035f8:	eba0 0008 	sub.w	r0, r0, r8
 80035fc:	4285      	cmp	r5, r0
 80035fe:	d2d6      	bcs.n	80035ae <UART_WaitOnFlagUntilTimeout+0xe>
 8003600:	e7e4      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0x2c>

08003602 <UART_CheckIdleState>:
{
 8003602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003604:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	2600      	movs	r6, #0
 8003608:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800360a:	f7fd fee3 	bl	80013d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003614:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003616:	d417      	bmi.n	8003648 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	075b      	lsls	r3, r3, #29
 800361e:	d50a      	bpl.n	8003636 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2200      	movs	r2, #0
 8003628:	462b      	mov	r3, r5
 800362a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800362e:	4620      	mov	r0, r4
 8003630:	f7ff ffb6 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8003634:	b9a0      	cbnz	r0, 8003660 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003636:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003638:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800363a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800363e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003642:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003646:	e00c      	b.n	8003662 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4632      	mov	r2, r6
 8003650:	4603      	mov	r3, r0
 8003652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff ffa2 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 800365c:	2800      	cmp	r0, #0
 800365e:	d0db      	beq.n	8003618 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003660:	2003      	movs	r0, #3
}
 8003662:	b002      	add	sp, #8
 8003664:	bd70      	pop	{r4, r5, r6, pc}

08003666 <HAL_UART_Init>:
{
 8003666:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003668:	4604      	mov	r4, r0
 800366a:	b360      	cbz	r0, 80036c6 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800366c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003670:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003674:	b91b      	cbnz	r3, 800367e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003676:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800367a:	f7fd fda3 	bl	80011c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800367e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	2324      	movs	r3, #36	; 0x24
 8003682:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800368e:	4620      	mov	r0, r4
 8003690:	f7ff fd9a 	bl	80031c8 <UART_SetConfig>
 8003694:	2801      	cmp	r0, #1
 8003696:	d016      	beq.n	80036c6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800369a:	b113      	cbz	r3, 80036a2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800369c:	4620      	mov	r0, r4
 800369e:	f7ff ff2b 	bl	80034f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80036ba:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80036c2:	f7ff bf9e 	b.w	8003602 <UART_CheckIdleState>
}
 80036c6:	2001      	movs	r0, #1
 80036c8:	bd10      	pop	{r4, pc}
	...

080036cc <__errno>:
 80036cc:	4b01      	ldr	r3, [pc, #4]	; (80036d4 <__errno+0x8>)
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000004 	.word	0x20000004

080036d8 <__libc_init_array>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4e0d      	ldr	r6, [pc, #52]	; (8003710 <__libc_init_array+0x38>)
 80036dc:	4c0d      	ldr	r4, [pc, #52]	; (8003714 <__libc_init_array+0x3c>)
 80036de:	1ba4      	subs	r4, r4, r6
 80036e0:	10a4      	asrs	r4, r4, #2
 80036e2:	2500      	movs	r5, #0
 80036e4:	42a5      	cmp	r5, r4
 80036e6:	d109      	bne.n	80036fc <__libc_init_array+0x24>
 80036e8:	4e0b      	ldr	r6, [pc, #44]	; (8003718 <__libc_init_array+0x40>)
 80036ea:	4c0c      	ldr	r4, [pc, #48]	; (800371c <__libc_init_array+0x44>)
 80036ec:	f000 fc46 	bl	8003f7c <_init>
 80036f0:	1ba4      	subs	r4, r4, r6
 80036f2:	10a4      	asrs	r4, r4, #2
 80036f4:	2500      	movs	r5, #0
 80036f6:	42a5      	cmp	r5, r4
 80036f8:	d105      	bne.n	8003706 <__libc_init_array+0x2e>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003700:	4798      	blx	r3
 8003702:	3501      	adds	r5, #1
 8003704:	e7ee      	b.n	80036e4 <__libc_init_array+0xc>
 8003706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800370a:	4798      	blx	r3
 800370c:	3501      	adds	r5, #1
 800370e:	e7f2      	b.n	80036f6 <__libc_init_array+0x1e>
 8003710:	08004080 	.word	0x08004080
 8003714:	08004080 	.word	0x08004080
 8003718:	08004080 	.word	0x08004080
 800371c:	08004084 	.word	0x08004084

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <siprintf>:
 8003730:	b40e      	push	{r1, r2, r3}
 8003732:	b500      	push	{lr}
 8003734:	b09c      	sub	sp, #112	; 0x70
 8003736:	f44f 7102 	mov.w	r1, #520	; 0x208
 800373a:	ab1d      	add	r3, sp, #116	; 0x74
 800373c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003740:	9002      	str	r0, [sp, #8]
 8003742:	9006      	str	r0, [sp, #24]
 8003744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003748:	480a      	ldr	r0, [pc, #40]	; (8003774 <siprintf+0x44>)
 800374a:	9104      	str	r1, [sp, #16]
 800374c:	9107      	str	r1, [sp, #28]
 800374e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003752:	f853 2b04 	ldr.w	r2, [r3], #4
 8003756:	f8ad 1016 	strh.w	r1, [sp, #22]
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	a902      	add	r1, sp, #8
 8003760:	f000 f86e 	bl	8003840 <_svfiprintf_r>
 8003764:	9b02      	ldr	r3, [sp, #8]
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	b01c      	add	sp, #112	; 0x70
 800376c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003770:	b003      	add	sp, #12
 8003772:	4770      	bx	lr
 8003774:	20000004 	.word	0x20000004

08003778 <strcpy>:
 8003778:	4603      	mov	r3, r0
 800377a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800377e:	f803 2b01 	strb.w	r2, [r3], #1
 8003782:	2a00      	cmp	r2, #0
 8003784:	d1f9      	bne.n	800377a <strcpy+0x2>
 8003786:	4770      	bx	lr

08003788 <__ssputs_r>:
 8003788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800378c:	688e      	ldr	r6, [r1, #8]
 800378e:	429e      	cmp	r6, r3
 8003790:	4682      	mov	sl, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4691      	mov	r9, r2
 8003796:	4698      	mov	r8, r3
 8003798:	d835      	bhi.n	8003806 <__ssputs_r+0x7e>
 800379a:	898a      	ldrh	r2, [r1, #12]
 800379c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037a0:	d031      	beq.n	8003806 <__ssputs_r+0x7e>
 80037a2:	6825      	ldr	r5, [r4, #0]
 80037a4:	6909      	ldr	r1, [r1, #16]
 80037a6:	1a6f      	subs	r7, r5, r1
 80037a8:	6965      	ldr	r5, [r4, #20]
 80037aa:	2302      	movs	r3, #2
 80037ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80037b4:	f108 0301 	add.w	r3, r8, #1
 80037b8:	443b      	add	r3, r7
 80037ba:	429d      	cmp	r5, r3
 80037bc:	bf38      	it	cc
 80037be:	461d      	movcc	r5, r3
 80037c0:	0553      	lsls	r3, r2, #21
 80037c2:	d531      	bpl.n	8003828 <__ssputs_r+0xa0>
 80037c4:	4629      	mov	r1, r5
 80037c6:	f000 fb39 	bl	8003e3c <_malloc_r>
 80037ca:	4606      	mov	r6, r0
 80037cc:	b950      	cbnz	r0, 80037e4 <__ssputs_r+0x5c>
 80037ce:	230c      	movs	r3, #12
 80037d0:	f8ca 3000 	str.w	r3, [sl]
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037da:	81a3      	strh	r3, [r4, #12]
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e4:	463a      	mov	r2, r7
 80037e6:	6921      	ldr	r1, [r4, #16]
 80037e8:	f000 fab4 	bl	8003d54 <memcpy>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	6126      	str	r6, [r4, #16]
 80037fa:	6165      	str	r5, [r4, #20]
 80037fc:	443e      	add	r6, r7
 80037fe:	1bed      	subs	r5, r5, r7
 8003800:	6026      	str	r6, [r4, #0]
 8003802:	60a5      	str	r5, [r4, #8]
 8003804:	4646      	mov	r6, r8
 8003806:	4546      	cmp	r6, r8
 8003808:	bf28      	it	cs
 800380a:	4646      	movcs	r6, r8
 800380c:	4632      	mov	r2, r6
 800380e:	4649      	mov	r1, r9
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	f000 faaa 	bl	8003d6a <memmove>
 8003816:	68a3      	ldr	r3, [r4, #8]
 8003818:	1b9b      	subs	r3, r3, r6
 800381a:	60a3      	str	r3, [r4, #8]
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	441e      	add	r6, r3
 8003820:	6026      	str	r6, [r4, #0]
 8003822:	2000      	movs	r0, #0
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	462a      	mov	r2, r5
 800382a:	f000 fb65 	bl	8003ef8 <_realloc_r>
 800382e:	4606      	mov	r6, r0
 8003830:	2800      	cmp	r0, #0
 8003832:	d1e1      	bne.n	80037f8 <__ssputs_r+0x70>
 8003834:	6921      	ldr	r1, [r4, #16]
 8003836:	4650      	mov	r0, sl
 8003838:	f000 fab2 	bl	8003da0 <_free_r>
 800383c:	e7c7      	b.n	80037ce <__ssputs_r+0x46>
	...

08003840 <_svfiprintf_r>:
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	b09d      	sub	sp, #116	; 0x74
 8003846:	4680      	mov	r8, r0
 8003848:	9303      	str	r3, [sp, #12]
 800384a:	898b      	ldrh	r3, [r1, #12]
 800384c:	061c      	lsls	r4, r3, #24
 800384e:	460d      	mov	r5, r1
 8003850:	4616      	mov	r6, r2
 8003852:	d50f      	bpl.n	8003874 <_svfiprintf_r+0x34>
 8003854:	690b      	ldr	r3, [r1, #16]
 8003856:	b96b      	cbnz	r3, 8003874 <_svfiprintf_r+0x34>
 8003858:	2140      	movs	r1, #64	; 0x40
 800385a:	f000 faef 	bl	8003e3c <_malloc_r>
 800385e:	6028      	str	r0, [r5, #0]
 8003860:	6128      	str	r0, [r5, #16]
 8003862:	b928      	cbnz	r0, 8003870 <_svfiprintf_r+0x30>
 8003864:	230c      	movs	r3, #12
 8003866:	f8c8 3000 	str.w	r3, [r8]
 800386a:	f04f 30ff 	mov.w	r0, #4294967295
 800386e:	e0c5      	b.n	80039fc <_svfiprintf_r+0x1bc>
 8003870:	2340      	movs	r3, #64	; 0x40
 8003872:	616b      	str	r3, [r5, #20]
 8003874:	2300      	movs	r3, #0
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	2320      	movs	r3, #32
 800387a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800387e:	2330      	movs	r3, #48	; 0x30
 8003880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003884:	f04f 0b01 	mov.w	fp, #1
 8003888:	4637      	mov	r7, r6
 800388a:	463c      	mov	r4, r7
 800388c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d13c      	bne.n	800390e <_svfiprintf_r+0xce>
 8003894:	ebb7 0a06 	subs.w	sl, r7, r6
 8003898:	d00b      	beq.n	80038b2 <_svfiprintf_r+0x72>
 800389a:	4653      	mov	r3, sl
 800389c:	4632      	mov	r2, r6
 800389e:	4629      	mov	r1, r5
 80038a0:	4640      	mov	r0, r8
 80038a2:	f7ff ff71 	bl	8003788 <__ssputs_r>
 80038a6:	3001      	adds	r0, #1
 80038a8:	f000 80a3 	beq.w	80039f2 <_svfiprintf_r+0x1b2>
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	4453      	add	r3, sl
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	783b      	ldrb	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 809c 	beq.w	80039f2 <_svfiprintf_r+0x1b2>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	9304      	str	r3, [sp, #16]
 80038c2:	9307      	str	r3, [sp, #28]
 80038c4:	9205      	str	r2, [sp, #20]
 80038c6:	9306      	str	r3, [sp, #24]
 80038c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038cc:	931a      	str	r3, [sp, #104]	; 0x68
 80038ce:	2205      	movs	r2, #5
 80038d0:	7821      	ldrb	r1, [r4, #0]
 80038d2:	4850      	ldr	r0, [pc, #320]	; (8003a14 <_svfiprintf_r+0x1d4>)
 80038d4:	f7fc fc7c 	bl	80001d0 <memchr>
 80038d8:	1c67      	adds	r7, r4, #1
 80038da:	9b04      	ldr	r3, [sp, #16]
 80038dc:	b9d8      	cbnz	r0, 8003916 <_svfiprintf_r+0xd6>
 80038de:	06d9      	lsls	r1, r3, #27
 80038e0:	bf44      	itt	mi
 80038e2:	2220      	movmi	r2, #32
 80038e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038e8:	071a      	lsls	r2, r3, #28
 80038ea:	bf44      	itt	mi
 80038ec:	222b      	movmi	r2, #43	; 0x2b
 80038ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038f2:	7822      	ldrb	r2, [r4, #0]
 80038f4:	2a2a      	cmp	r2, #42	; 0x2a
 80038f6:	d016      	beq.n	8003926 <_svfiprintf_r+0xe6>
 80038f8:	9a07      	ldr	r2, [sp, #28]
 80038fa:	2100      	movs	r1, #0
 80038fc:	200a      	movs	r0, #10
 80038fe:	4627      	mov	r7, r4
 8003900:	3401      	adds	r4, #1
 8003902:	783b      	ldrb	r3, [r7, #0]
 8003904:	3b30      	subs	r3, #48	; 0x30
 8003906:	2b09      	cmp	r3, #9
 8003908:	d951      	bls.n	80039ae <_svfiprintf_r+0x16e>
 800390a:	b1c9      	cbz	r1, 8003940 <_svfiprintf_r+0x100>
 800390c:	e011      	b.n	8003932 <_svfiprintf_r+0xf2>
 800390e:	2b25      	cmp	r3, #37	; 0x25
 8003910:	d0c0      	beq.n	8003894 <_svfiprintf_r+0x54>
 8003912:	4627      	mov	r7, r4
 8003914:	e7b9      	b.n	800388a <_svfiprintf_r+0x4a>
 8003916:	4a3f      	ldr	r2, [pc, #252]	; (8003a14 <_svfiprintf_r+0x1d4>)
 8003918:	1a80      	subs	r0, r0, r2
 800391a:	fa0b f000 	lsl.w	r0, fp, r0
 800391e:	4318      	orrs	r0, r3
 8003920:	9004      	str	r0, [sp, #16]
 8003922:	463c      	mov	r4, r7
 8003924:	e7d3      	b.n	80038ce <_svfiprintf_r+0x8e>
 8003926:	9a03      	ldr	r2, [sp, #12]
 8003928:	1d11      	adds	r1, r2, #4
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	9103      	str	r1, [sp, #12]
 800392e:	2a00      	cmp	r2, #0
 8003930:	db01      	blt.n	8003936 <_svfiprintf_r+0xf6>
 8003932:	9207      	str	r2, [sp, #28]
 8003934:	e004      	b.n	8003940 <_svfiprintf_r+0x100>
 8003936:	4252      	negs	r2, r2
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	9207      	str	r2, [sp, #28]
 800393e:	9304      	str	r3, [sp, #16]
 8003940:	783b      	ldrb	r3, [r7, #0]
 8003942:	2b2e      	cmp	r3, #46	; 0x2e
 8003944:	d10e      	bne.n	8003964 <_svfiprintf_r+0x124>
 8003946:	787b      	ldrb	r3, [r7, #1]
 8003948:	2b2a      	cmp	r3, #42	; 0x2a
 800394a:	f107 0101 	add.w	r1, r7, #1
 800394e:	d132      	bne.n	80039b6 <_svfiprintf_r+0x176>
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	9203      	str	r2, [sp, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfb8      	it	lt
 800395c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003960:	3702      	adds	r7, #2
 8003962:	9305      	str	r3, [sp, #20]
 8003964:	4c2c      	ldr	r4, [pc, #176]	; (8003a18 <_svfiprintf_r+0x1d8>)
 8003966:	7839      	ldrb	r1, [r7, #0]
 8003968:	2203      	movs	r2, #3
 800396a:	4620      	mov	r0, r4
 800396c:	f7fc fc30 	bl	80001d0 <memchr>
 8003970:	b138      	cbz	r0, 8003982 <_svfiprintf_r+0x142>
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	1b00      	subs	r0, r0, r4
 8003976:	fa03 f000 	lsl.w	r0, r3, r0
 800397a:	9b04      	ldr	r3, [sp, #16]
 800397c:	4303      	orrs	r3, r0
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	3701      	adds	r7, #1
 8003982:	7839      	ldrb	r1, [r7, #0]
 8003984:	4825      	ldr	r0, [pc, #148]	; (8003a1c <_svfiprintf_r+0x1dc>)
 8003986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800398a:	2206      	movs	r2, #6
 800398c:	1c7e      	adds	r6, r7, #1
 800398e:	f7fc fc1f 	bl	80001d0 <memchr>
 8003992:	2800      	cmp	r0, #0
 8003994:	d035      	beq.n	8003a02 <_svfiprintf_r+0x1c2>
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <_svfiprintf_r+0x1e0>)
 8003998:	b9fb      	cbnz	r3, 80039da <_svfiprintf_r+0x19a>
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	3307      	adds	r3, #7
 800399e:	f023 0307 	bic.w	r3, r3, #7
 80039a2:	3308      	adds	r3, #8
 80039a4:	9303      	str	r3, [sp, #12]
 80039a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a8:	444b      	add	r3, r9
 80039aa:	9309      	str	r3, [sp, #36]	; 0x24
 80039ac:	e76c      	b.n	8003888 <_svfiprintf_r+0x48>
 80039ae:	fb00 3202 	mla	r2, r0, r2, r3
 80039b2:	2101      	movs	r1, #1
 80039b4:	e7a3      	b.n	80038fe <_svfiprintf_r+0xbe>
 80039b6:	2300      	movs	r3, #0
 80039b8:	9305      	str	r3, [sp, #20]
 80039ba:	4618      	mov	r0, r3
 80039bc:	240a      	movs	r4, #10
 80039be:	460f      	mov	r7, r1
 80039c0:	3101      	adds	r1, #1
 80039c2:	783a      	ldrb	r2, [r7, #0]
 80039c4:	3a30      	subs	r2, #48	; 0x30
 80039c6:	2a09      	cmp	r2, #9
 80039c8:	d903      	bls.n	80039d2 <_svfiprintf_r+0x192>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ca      	beq.n	8003964 <_svfiprintf_r+0x124>
 80039ce:	9005      	str	r0, [sp, #20]
 80039d0:	e7c8      	b.n	8003964 <_svfiprintf_r+0x124>
 80039d2:	fb04 2000 	mla	r0, r4, r0, r2
 80039d6:	2301      	movs	r3, #1
 80039d8:	e7f1      	b.n	80039be <_svfiprintf_r+0x17e>
 80039da:	ab03      	add	r3, sp, #12
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	462a      	mov	r2, r5
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <_svfiprintf_r+0x1e4>)
 80039e2:	a904      	add	r1, sp, #16
 80039e4:	4640      	mov	r0, r8
 80039e6:	f3af 8000 	nop.w
 80039ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039ee:	4681      	mov	r9, r0
 80039f0:	d1d9      	bne.n	80039a6 <_svfiprintf_r+0x166>
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	065b      	lsls	r3, r3, #25
 80039f6:	f53f af38 	bmi.w	800386a <_svfiprintf_r+0x2a>
 80039fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039fc:	b01d      	add	sp, #116	; 0x74
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	ab03      	add	r3, sp, #12
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	462a      	mov	r2, r5
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <_svfiprintf_r+0x1e4>)
 8003a0a:	a904      	add	r1, sp, #16
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	f000 f881 	bl	8003b14 <_printf_i>
 8003a12:	e7ea      	b.n	80039ea <_svfiprintf_r+0x1aa>
 8003a14:	08004045 	.word	0x08004045
 8003a18:	0800404b 	.word	0x0800404b
 8003a1c:	0800404f 	.word	0x0800404f
 8003a20:	00000000 	.word	0x00000000
 8003a24:	08003789 	.word	0x08003789

08003a28 <_printf_common>:
 8003a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a2c:	4691      	mov	r9, r2
 8003a2e:	461f      	mov	r7, r3
 8003a30:	688a      	ldr	r2, [r1, #8]
 8003a32:	690b      	ldr	r3, [r1, #16]
 8003a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	bfb8      	it	lt
 8003a3c:	4613      	movlt	r3, r2
 8003a3e:	f8c9 3000 	str.w	r3, [r9]
 8003a42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a46:	4606      	mov	r6, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	b112      	cbz	r2, 8003a52 <_printf_common+0x2a>
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f8c9 3000 	str.w	r3, [r9]
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	0699      	lsls	r1, r3, #26
 8003a56:	bf42      	ittt	mi
 8003a58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a5c:	3302      	addmi	r3, #2
 8003a5e:	f8c9 3000 	strmi.w	r3, [r9]
 8003a62:	6825      	ldr	r5, [r4, #0]
 8003a64:	f015 0506 	ands.w	r5, r5, #6
 8003a68:	d107      	bne.n	8003a7a <_printf_common+0x52>
 8003a6a:	f104 0a19 	add.w	sl, r4, #25
 8003a6e:	68e3      	ldr	r3, [r4, #12]
 8003a70:	f8d9 2000 	ldr.w	r2, [r9]
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	429d      	cmp	r5, r3
 8003a78:	db29      	blt.n	8003ace <_printf_common+0xa6>
 8003a7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	3300      	adds	r3, #0
 8003a82:	bf18      	it	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	0692      	lsls	r2, r2, #26
 8003a88:	d42e      	bmi.n	8003ae8 <_printf_common+0xc0>
 8003a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a8e:	4639      	mov	r1, r7
 8003a90:	4630      	mov	r0, r6
 8003a92:	47c0      	blx	r8
 8003a94:	3001      	adds	r0, #1
 8003a96:	d021      	beq.n	8003adc <_printf_common+0xb4>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	68e5      	ldr	r5, [r4, #12]
 8003a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8003aa0:	f003 0306 	and.w	r3, r3, #6
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	bf08      	it	eq
 8003aa8:	1aad      	subeq	r5, r5, r2
 8003aaa:	68a3      	ldr	r3, [r4, #8]
 8003aac:	6922      	ldr	r2, [r4, #16]
 8003aae:	bf0c      	ite	eq
 8003ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab4:	2500      	movne	r5, #0
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	bfc4      	itt	gt
 8003aba:	1a9b      	subgt	r3, r3, r2
 8003abc:	18ed      	addgt	r5, r5, r3
 8003abe:	f04f 0900 	mov.w	r9, #0
 8003ac2:	341a      	adds	r4, #26
 8003ac4:	454d      	cmp	r5, r9
 8003ac6:	d11b      	bne.n	8003b00 <_printf_common+0xd8>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4652      	mov	r2, sl
 8003ad2:	4639      	mov	r1, r7
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	47c0      	blx	r8
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d103      	bne.n	8003ae4 <_printf_common+0xbc>
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae4:	3501      	adds	r5, #1
 8003ae6:	e7c2      	b.n	8003a6e <_printf_common+0x46>
 8003ae8:	18e1      	adds	r1, r4, r3
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	2030      	movs	r0, #48	; 0x30
 8003aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003af2:	4422      	add	r2, r4
 8003af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003afc:	3302      	adds	r3, #2
 8003afe:	e7c4      	b.n	8003a8a <_printf_common+0x62>
 8003b00:	2301      	movs	r3, #1
 8003b02:	4622      	mov	r2, r4
 8003b04:	4639      	mov	r1, r7
 8003b06:	4630      	mov	r0, r6
 8003b08:	47c0      	blx	r8
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0e6      	beq.n	8003adc <_printf_common+0xb4>
 8003b0e:	f109 0901 	add.w	r9, r9, #1
 8003b12:	e7d7      	b.n	8003ac4 <_printf_common+0x9c>

08003b14 <_printf_i>:
 8003b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b18:	4617      	mov	r7, r2
 8003b1a:	7e0a      	ldrb	r2, [r1, #24]
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	2a6e      	cmp	r2, #110	; 0x6e
 8003b20:	4698      	mov	r8, r3
 8003b22:	4606      	mov	r6, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b28:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003b2c:	f000 80bc 	beq.w	8003ca8 <_printf_i+0x194>
 8003b30:	d81a      	bhi.n	8003b68 <_printf_i+0x54>
 8003b32:	2a63      	cmp	r2, #99	; 0x63
 8003b34:	d02e      	beq.n	8003b94 <_printf_i+0x80>
 8003b36:	d80a      	bhi.n	8003b4e <_printf_i+0x3a>
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	f000 80c8 	beq.w	8003cce <_printf_i+0x1ba>
 8003b3e:	2a58      	cmp	r2, #88	; 0x58
 8003b40:	f000 808a 	beq.w	8003c58 <_printf_i+0x144>
 8003b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b48:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003b4c:	e02a      	b.n	8003ba4 <_printf_i+0x90>
 8003b4e:	2a64      	cmp	r2, #100	; 0x64
 8003b50:	d001      	beq.n	8003b56 <_printf_i+0x42>
 8003b52:	2a69      	cmp	r2, #105	; 0x69
 8003b54:	d1f6      	bne.n	8003b44 <_printf_i+0x30>
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b5e:	d023      	beq.n	8003ba8 <_printf_i+0x94>
 8003b60:	1d11      	adds	r1, r2, #4
 8003b62:	6019      	str	r1, [r3, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	e027      	b.n	8003bb8 <_printf_i+0xa4>
 8003b68:	2a73      	cmp	r2, #115	; 0x73
 8003b6a:	f000 80b4 	beq.w	8003cd6 <_printf_i+0x1c2>
 8003b6e:	d808      	bhi.n	8003b82 <_printf_i+0x6e>
 8003b70:	2a6f      	cmp	r2, #111	; 0x6f
 8003b72:	d02a      	beq.n	8003bca <_printf_i+0xb6>
 8003b74:	2a70      	cmp	r2, #112	; 0x70
 8003b76:	d1e5      	bne.n	8003b44 <_printf_i+0x30>
 8003b78:	680a      	ldr	r2, [r1, #0]
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	600a      	str	r2, [r1, #0]
 8003b80:	e003      	b.n	8003b8a <_printf_i+0x76>
 8003b82:	2a75      	cmp	r2, #117	; 0x75
 8003b84:	d021      	beq.n	8003bca <_printf_i+0xb6>
 8003b86:	2a78      	cmp	r2, #120	; 0x78
 8003b88:	d1dc      	bne.n	8003b44 <_printf_i+0x30>
 8003b8a:	2278      	movs	r2, #120	; 0x78
 8003b8c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003b90:	496e      	ldr	r1, [pc, #440]	; (8003d4c <_printf_i+0x238>)
 8003b92:	e064      	b.n	8003c5e <_printf_i+0x14a>
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003b9a:	1d11      	adds	r1, r2, #4
 8003b9c:	6019      	str	r1, [r3, #0]
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0a3      	b.n	8003cf0 <_printf_i+0x1dc>
 8003ba8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003bac:	f102 0104 	add.w	r1, r2, #4
 8003bb0:	6019      	str	r1, [r3, #0]
 8003bb2:	d0d7      	beq.n	8003b64 <_printf_i+0x50>
 8003bb4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da03      	bge.n	8003bc4 <_printf_i+0xb0>
 8003bbc:	222d      	movs	r2, #45	; 0x2d
 8003bbe:	425b      	negs	r3, r3
 8003bc0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bc4:	4962      	ldr	r1, [pc, #392]	; (8003d50 <_printf_i+0x23c>)
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	e017      	b.n	8003bfa <_printf_i+0xe6>
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bd2:	d003      	beq.n	8003bdc <_printf_i+0xc8>
 8003bd4:	1d08      	adds	r0, r1, #4
 8003bd6:	6018      	str	r0, [r3, #0]
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	e006      	b.n	8003bea <_printf_i+0xd6>
 8003bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003be0:	f101 0004 	add.w	r0, r1, #4
 8003be4:	6018      	str	r0, [r3, #0]
 8003be6:	d0f7      	beq.n	8003bd8 <_printf_i+0xc4>
 8003be8:	880b      	ldrh	r3, [r1, #0]
 8003bea:	4959      	ldr	r1, [pc, #356]	; (8003d50 <_printf_i+0x23c>)
 8003bec:	2a6f      	cmp	r2, #111	; 0x6f
 8003bee:	bf14      	ite	ne
 8003bf0:	220a      	movne	r2, #10
 8003bf2:	2208      	moveq	r2, #8
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003bfa:	6865      	ldr	r5, [r4, #4]
 8003bfc:	60a5      	str	r5, [r4, #8]
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	f2c0 809c 	blt.w	8003d3c <_printf_i+0x228>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	f020 0004 	bic.w	r0, r0, #4
 8003c0a:	6020      	str	r0, [r4, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d13f      	bne.n	8003c90 <_printf_i+0x17c>
 8003c10:	2d00      	cmp	r5, #0
 8003c12:	f040 8095 	bne.w	8003d40 <_printf_i+0x22c>
 8003c16:	4675      	mov	r5, lr
 8003c18:	2a08      	cmp	r2, #8
 8003c1a:	d10b      	bne.n	8003c34 <_printf_i+0x120>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	07da      	lsls	r2, r3, #31
 8003c20:	d508      	bpl.n	8003c34 <_printf_i+0x120>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	6862      	ldr	r2, [r4, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bfde      	ittt	le
 8003c2a:	2330      	movle	r3, #48	; 0x30
 8003c2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c34:	ebae 0305 	sub.w	r3, lr, r5
 8003c38:	6123      	str	r3, [r4, #16]
 8003c3a:	f8cd 8000 	str.w	r8, [sp]
 8003c3e:	463b      	mov	r3, r7
 8003c40:	aa03      	add	r2, sp, #12
 8003c42:	4621      	mov	r1, r4
 8003c44:	4630      	mov	r0, r6
 8003c46:	f7ff feef 	bl	8003a28 <_printf_common>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d155      	bne.n	8003cfa <_printf_i+0x1e6>
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	b005      	add	sp, #20
 8003c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c58:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003c5c:	493c      	ldr	r1, [pc, #240]	; (8003d50 <_printf_i+0x23c>)
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c66:	f100 0504 	add.w	r5, r0, #4
 8003c6a:	601d      	str	r5, [r3, #0]
 8003c6c:	d001      	beq.n	8003c72 <_printf_i+0x15e>
 8003c6e:	6803      	ldr	r3, [r0, #0]
 8003c70:	e002      	b.n	8003c78 <_printf_i+0x164>
 8003c72:	0655      	lsls	r5, r2, #25
 8003c74:	d5fb      	bpl.n	8003c6e <_printf_i+0x15a>
 8003c76:	8803      	ldrh	r3, [r0, #0]
 8003c78:	07d0      	lsls	r0, r2, #31
 8003c7a:	bf44      	itt	mi
 8003c7c:	f042 0220 	orrmi.w	r2, r2, #32
 8003c80:	6022      	strmi	r2, [r4, #0]
 8003c82:	b91b      	cbnz	r3, 8003c8c <_printf_i+0x178>
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	f022 0220 	bic.w	r2, r2, #32
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	e7b1      	b.n	8003bf4 <_printf_i+0xe0>
 8003c90:	4675      	mov	r5, lr
 8003c92:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c96:	fb02 3310 	mls	r3, r2, r0, r3
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d1f5      	bne.n	8003c92 <_printf_i+0x17e>
 8003ca6:	e7b7      	b.n	8003c18 <_printf_i+0x104>
 8003ca8:	6808      	ldr	r0, [r1, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	6949      	ldr	r1, [r1, #20]
 8003cae:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cb2:	d004      	beq.n	8003cbe <_printf_i+0x1aa>
 8003cb4:	1d10      	adds	r0, r2, #4
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	6019      	str	r1, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <_printf_i+0x1ba>
 8003cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cc2:	f102 0004 	add.w	r0, r2, #4
 8003cc6:	6018      	str	r0, [r3, #0]
 8003cc8:	6813      	ldr	r3, [r2, #0]
 8003cca:	d0f6      	beq.n	8003cba <_printf_i+0x1a6>
 8003ccc:	8019      	strh	r1, [r3, #0]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6123      	str	r3, [r4, #16]
 8003cd2:	4675      	mov	r5, lr
 8003cd4:	e7b1      	b.n	8003c3a <_printf_i+0x126>
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	1d11      	adds	r1, r2, #4
 8003cda:	6019      	str	r1, [r3, #0]
 8003cdc:	6815      	ldr	r5, [r2, #0]
 8003cde:	6862      	ldr	r2, [r4, #4]
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f7fc fa74 	bl	80001d0 <memchr>
 8003ce8:	b108      	cbz	r0, 8003cee <_printf_i+0x1da>
 8003cea:	1b40      	subs	r0, r0, r5
 8003cec:	6060      	str	r0, [r4, #4]
 8003cee:	6863      	ldr	r3, [r4, #4]
 8003cf0:	6123      	str	r3, [r4, #16]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf8:	e79f      	b.n	8003c3a <_printf_i+0x126>
 8003cfa:	6923      	ldr	r3, [r4, #16]
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	4639      	mov	r1, r7
 8003d00:	4630      	mov	r0, r6
 8003d02:	47c0      	blx	r8
 8003d04:	3001      	adds	r0, #1
 8003d06:	d0a2      	beq.n	8003c4e <_printf_i+0x13a>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	079b      	lsls	r3, r3, #30
 8003d0c:	d507      	bpl.n	8003d1e <_printf_i+0x20a>
 8003d0e:	2500      	movs	r5, #0
 8003d10:	f104 0919 	add.w	r9, r4, #25
 8003d14:	68e3      	ldr	r3, [r4, #12]
 8003d16:	9a03      	ldr	r2, [sp, #12]
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	429d      	cmp	r5, r3
 8003d1c:	db05      	blt.n	8003d2a <_printf_i+0x216>
 8003d1e:	68e0      	ldr	r0, [r4, #12]
 8003d20:	9b03      	ldr	r3, [sp, #12]
 8003d22:	4298      	cmp	r0, r3
 8003d24:	bfb8      	it	lt
 8003d26:	4618      	movlt	r0, r3
 8003d28:	e793      	b.n	8003c52 <_printf_i+0x13e>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	464a      	mov	r2, r9
 8003d2e:	4639      	mov	r1, r7
 8003d30:	4630      	mov	r0, r6
 8003d32:	47c0      	blx	r8
 8003d34:	3001      	adds	r0, #1
 8003d36:	d08a      	beq.n	8003c4e <_printf_i+0x13a>
 8003d38:	3501      	adds	r5, #1
 8003d3a:	e7eb      	b.n	8003d14 <_printf_i+0x200>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1a7      	bne.n	8003c90 <_printf_i+0x17c>
 8003d40:	780b      	ldrb	r3, [r1, #0]
 8003d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d4a:	e765      	b.n	8003c18 <_printf_i+0x104>
 8003d4c:	08004067 	.word	0x08004067
 8003d50:	08004056 	.word	0x08004056

08003d54 <memcpy>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	1e43      	subs	r3, r0, #1
 8003d58:	440a      	add	r2, r1
 8003d5a:	4291      	cmp	r1, r2
 8003d5c:	d100      	bne.n	8003d60 <memcpy+0xc>
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d68:	e7f7      	b.n	8003d5a <memcpy+0x6>

08003d6a <memmove>:
 8003d6a:	4288      	cmp	r0, r1
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	eb01 0302 	add.w	r3, r1, r2
 8003d72:	d803      	bhi.n	8003d7c <memmove+0x12>
 8003d74:	1e42      	subs	r2, r0, #1
 8003d76:	4299      	cmp	r1, r3
 8003d78:	d10c      	bne.n	8003d94 <memmove+0x2a>
 8003d7a:	bd10      	pop	{r4, pc}
 8003d7c:	4298      	cmp	r0, r3
 8003d7e:	d2f9      	bcs.n	8003d74 <memmove+0xa>
 8003d80:	1881      	adds	r1, r0, r2
 8003d82:	1ad2      	subs	r2, r2, r3
 8003d84:	42d3      	cmn	r3, r2
 8003d86:	d100      	bne.n	8003d8a <memmove+0x20>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d92:	e7f7      	b.n	8003d84 <memmove+0x1a>
 8003d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003d9c:	e7eb      	b.n	8003d76 <memmove+0xc>
	...

08003da0 <_free_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4605      	mov	r5, r0
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d045      	beq.n	8003e34 <_free_r+0x94>
 8003da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dac:	1f0c      	subs	r4, r1, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bfb8      	it	lt
 8003db2:	18e4      	addlt	r4, r4, r3
 8003db4:	f000 f8d6 	bl	8003f64 <__malloc_lock>
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <_free_r+0x98>)
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	b933      	cbnz	r3, 8003dce <_free_r+0x2e>
 8003dc0:	6063      	str	r3, [r4, #4]
 8003dc2:	6014      	str	r4, [r2, #0]
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dca:	f000 b8cc 	b.w	8003f66 <__malloc_unlock>
 8003dce:	42a3      	cmp	r3, r4
 8003dd0:	d90c      	bls.n	8003dec <_free_r+0x4c>
 8003dd2:	6821      	ldr	r1, [r4, #0]
 8003dd4:	1862      	adds	r2, r4, r1
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	bf04      	itt	eq
 8003dda:	681a      	ldreq	r2, [r3, #0]
 8003ddc:	685b      	ldreq	r3, [r3, #4]
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	bf04      	itt	eq
 8003de2:	1852      	addeq	r2, r2, r1
 8003de4:	6022      	streq	r2, [r4, #0]
 8003de6:	6004      	str	r4, [r0, #0]
 8003de8:	e7ec      	b.n	8003dc4 <_free_r+0x24>
 8003dea:	4613      	mov	r3, r2
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	b10a      	cbz	r2, 8003df4 <_free_r+0x54>
 8003df0:	42a2      	cmp	r2, r4
 8003df2:	d9fa      	bls.n	8003dea <_free_r+0x4a>
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	1858      	adds	r0, r3, r1
 8003df8:	42a0      	cmp	r0, r4
 8003dfa:	d10b      	bne.n	8003e14 <_free_r+0x74>
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	4401      	add	r1, r0
 8003e00:	1858      	adds	r0, r3, r1
 8003e02:	4282      	cmp	r2, r0
 8003e04:	6019      	str	r1, [r3, #0]
 8003e06:	d1dd      	bne.n	8003dc4 <_free_r+0x24>
 8003e08:	6810      	ldr	r0, [r2, #0]
 8003e0a:	6852      	ldr	r2, [r2, #4]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	4401      	add	r1, r0
 8003e10:	6019      	str	r1, [r3, #0]
 8003e12:	e7d7      	b.n	8003dc4 <_free_r+0x24>
 8003e14:	d902      	bls.n	8003e1c <_free_r+0x7c>
 8003e16:	230c      	movs	r3, #12
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	e7d3      	b.n	8003dc4 <_free_r+0x24>
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	1821      	adds	r1, r4, r0
 8003e20:	428a      	cmp	r2, r1
 8003e22:	bf04      	itt	eq
 8003e24:	6811      	ldreq	r1, [r2, #0]
 8003e26:	6852      	ldreq	r2, [r2, #4]
 8003e28:	6062      	str	r2, [r4, #4]
 8003e2a:	bf04      	itt	eq
 8003e2c:	1809      	addeq	r1, r1, r0
 8003e2e:	6021      	streq	r1, [r4, #0]
 8003e30:	605c      	str	r4, [r3, #4]
 8003e32:	e7c7      	b.n	8003dc4 <_free_r+0x24>
 8003e34:	bd38      	pop	{r3, r4, r5, pc}
 8003e36:	bf00      	nop
 8003e38:	2000008c 	.word	0x2000008c

08003e3c <_malloc_r>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	1ccd      	adds	r5, r1, #3
 8003e40:	f025 0503 	bic.w	r5, r5, #3
 8003e44:	3508      	adds	r5, #8
 8003e46:	2d0c      	cmp	r5, #12
 8003e48:	bf38      	it	cc
 8003e4a:	250c      	movcc	r5, #12
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	4606      	mov	r6, r0
 8003e50:	db01      	blt.n	8003e56 <_malloc_r+0x1a>
 8003e52:	42a9      	cmp	r1, r5
 8003e54:	d903      	bls.n	8003e5e <_malloc_r+0x22>
 8003e56:	230c      	movs	r3, #12
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}
 8003e5e:	f000 f881 	bl	8003f64 <__malloc_lock>
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <_malloc_r+0xb4>)
 8003e64:	6814      	ldr	r4, [r2, #0]
 8003e66:	4621      	mov	r1, r4
 8003e68:	b991      	cbnz	r1, 8003e90 <_malloc_r+0x54>
 8003e6a:	4c22      	ldr	r4, [pc, #136]	; (8003ef4 <_malloc_r+0xb8>)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	b91b      	cbnz	r3, 8003e78 <_malloc_r+0x3c>
 8003e70:	4630      	mov	r0, r6
 8003e72:	f000 f867 	bl	8003f44 <_sbrk_r>
 8003e76:	6020      	str	r0, [r4, #0]
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f000 f862 	bl	8003f44 <_sbrk_r>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d126      	bne.n	8003ed2 <_malloc_r+0x96>
 8003e84:	230c      	movs	r3, #12
 8003e86:	6033      	str	r3, [r6, #0]
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f000 f86c 	bl	8003f66 <__malloc_unlock>
 8003e8e:	e7e4      	b.n	8003e5a <_malloc_r+0x1e>
 8003e90:	680b      	ldr	r3, [r1, #0]
 8003e92:	1b5b      	subs	r3, r3, r5
 8003e94:	d41a      	bmi.n	8003ecc <_malloc_r+0x90>
 8003e96:	2b0b      	cmp	r3, #11
 8003e98:	d90f      	bls.n	8003eba <_malloc_r+0x7e>
 8003e9a:	600b      	str	r3, [r1, #0]
 8003e9c:	50cd      	str	r5, [r1, r3]
 8003e9e:	18cc      	adds	r4, r1, r3
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f860 	bl	8003f66 <__malloc_unlock>
 8003ea6:	f104 000b 	add.w	r0, r4, #11
 8003eaa:	1d23      	adds	r3, r4, #4
 8003eac:	f020 0007 	bic.w	r0, r0, #7
 8003eb0:	1ac3      	subs	r3, r0, r3
 8003eb2:	d01b      	beq.n	8003eec <_malloc_r+0xb0>
 8003eb4:	425a      	negs	r2, r3
 8003eb6:	50e2      	str	r2, [r4, r3]
 8003eb8:	bd70      	pop	{r4, r5, r6, pc}
 8003eba:	428c      	cmp	r4, r1
 8003ebc:	bf0d      	iteet	eq
 8003ebe:	6863      	ldreq	r3, [r4, #4]
 8003ec0:	684b      	ldrne	r3, [r1, #4]
 8003ec2:	6063      	strne	r3, [r4, #4]
 8003ec4:	6013      	streq	r3, [r2, #0]
 8003ec6:	bf18      	it	ne
 8003ec8:	460c      	movne	r4, r1
 8003eca:	e7e9      	b.n	8003ea0 <_malloc_r+0x64>
 8003ecc:	460c      	mov	r4, r1
 8003ece:	6849      	ldr	r1, [r1, #4]
 8003ed0:	e7ca      	b.n	8003e68 <_malloc_r+0x2c>
 8003ed2:	1cc4      	adds	r4, r0, #3
 8003ed4:	f024 0403 	bic.w	r4, r4, #3
 8003ed8:	42a0      	cmp	r0, r4
 8003eda:	d005      	beq.n	8003ee8 <_malloc_r+0xac>
 8003edc:	1a21      	subs	r1, r4, r0
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 f830 	bl	8003f44 <_sbrk_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d0cd      	beq.n	8003e84 <_malloc_r+0x48>
 8003ee8:	6025      	str	r5, [r4, #0]
 8003eea:	e7d9      	b.n	8003ea0 <_malloc_r+0x64>
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000008c 	.word	0x2000008c
 8003ef4:	20000090 	.word	0x20000090

08003ef8 <_realloc_r>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	4607      	mov	r7, r0
 8003efc:	4614      	mov	r4, r2
 8003efe:	460e      	mov	r6, r1
 8003f00:	b921      	cbnz	r1, 8003f0c <_realloc_r+0x14>
 8003f02:	4611      	mov	r1, r2
 8003f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f08:	f7ff bf98 	b.w	8003e3c <_malloc_r>
 8003f0c:	b922      	cbnz	r2, 8003f18 <_realloc_r+0x20>
 8003f0e:	f7ff ff47 	bl	8003da0 <_free_r>
 8003f12:	4625      	mov	r5, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f18:	f000 f826 	bl	8003f68 <_malloc_usable_size_r>
 8003f1c:	4284      	cmp	r4, r0
 8003f1e:	d90f      	bls.n	8003f40 <_realloc_r+0x48>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4638      	mov	r0, r7
 8003f24:	f7ff ff8a 	bl	8003e3c <_malloc_r>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d0f2      	beq.n	8003f14 <_realloc_r+0x1c>
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4622      	mov	r2, r4
 8003f32:	f7ff ff0f 	bl	8003d54 <memcpy>
 8003f36:	4631      	mov	r1, r6
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f7ff ff31 	bl	8003da0 <_free_r>
 8003f3e:	e7e9      	b.n	8003f14 <_realloc_r+0x1c>
 8003f40:	4635      	mov	r5, r6
 8003f42:	e7e7      	b.n	8003f14 <_realloc_r+0x1c>

08003f44 <_sbrk_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4c06      	ldr	r4, [pc, #24]	; (8003f60 <_sbrk_r+0x1c>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	f7fc fb40 	bl	80005d4 <_sbrk>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_sbrk_r+0x1a>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_sbrk_r+0x1a>
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200002cc 	.word	0x200002cc

08003f64 <__malloc_lock>:
 8003f64:	4770      	bx	lr

08003f66 <__malloc_unlock>:
 8003f66:	4770      	bx	lr

08003f68 <_malloc_usable_size_r>:
 8003f68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	f1a0 0004 	sub.w	r0, r0, #4
 8003f72:	bfbc      	itt	lt
 8003f74:	580b      	ldrlt	r3, [r1, r0]
 8003f76:	18c0      	addlt	r0, r0, r3
 8003f78:	4770      	bx	lr
	...

08003f7c <_init>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr

08003f88 <_fini>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr
